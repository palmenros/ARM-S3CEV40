   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"timer.c"
  21              	.Ltext0:
  22              		.file 1 "../timer.c"
 1698              		.align	2
 1699              		.global	tmr_set_prescaler
 1701              	tmr_set_prescaler:
 1702              	.LFB0:
   1:../timer.c    **** /*********************************************************************************************
   2:../timer.c    **** * Fichero:		timer.c
   3:../timer.c    **** * Descrip:		funciones de control del timer0 del s3c44b0x
   4:../timer.c    **** *********************************************************************************************/
   5:../timer.c    **** 
   6:../timer.c    **** /*--- ficheros de cabecera ---*/
   7:../timer.c    **** #include "44b.h"
   8:../timer.c    **** #include "timer.h"
   9:../timer.c    **** 
  10:../timer.c    **** int tmr_set_prescaler(int p, int  value)
  11:../timer.c    **** {
 1703              		.loc 1 11 0
 1704              		.cfi_startproc
 1705              		@ Function supports interworking.
 1706              		@ args = 0, pretend = 0, frame = 24
 1707              		@ frame_needed = 1, uses_anonymous_args = 0
 1708 0000 0DC0A0E1 		mov	ip, sp
 1709              	.LCFI0:
 1710              		.cfi_def_cfa_register 12
 1711 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1712 0008 04B04CE2 		sub	fp, ip, #4
 1713              		.cfi_offset 14, -8
 1714              		.cfi_offset 13, -12
 1715              		.cfi_offset 11, -16
 1716              	.LCFI1:
 1717              		.cfi_def_cfa 11, 4
 1718 000c 18D04DE2 		sub	sp, sp, #24
 1719 0010 20000BE5 		str	r0, [fp, #-32]
 1720 0014 24100BE5 		str	r1, [fp, #-36]
  12:../timer.c    **** 	int offset = p*8;
 1721              		.loc 1 12 0
 1722 0018 20301BE5 		ldr	r3, [fp, #-32]
 1723 001c 8331A0E1 		mov	r3, r3, asl #3
 1724 0020 10300BE5 		str	r3, [fp, #-16]
  13:../timer.c    **** 	value &= 0xFF;
 1725              		.loc 1 13 0
 1726 0024 24301BE5 		ldr	r3, [fp, #-36]
 1727 0028 FF3003E2 		and	r3, r3, #255
 1728 002c 24300BE5 		str	r3, [fp, #-36]
  14:../timer.c    **** 
  15:../timer.c    **** 	if (p < 0 || p > 3)
 1729              		.loc 1 15 0
 1730 0030 20301BE5 		ldr	r3, [fp, #-32]
 1731 0034 000053E3 		cmp	r3, #0
 1732 0038 020000BA 		blt	.L2
 1733              		.loc 1 15 0 is_stmt 0 discriminator 1
 1734 003c 20301BE5 		ldr	r3, [fp, #-32]
 1735 0040 030053E3 		cmp	r3, #3
 1736 0044 010000DA 		ble	.L3
 1737              	.L2:
  16:../timer.c    **** 		return -1;
 1738              		.loc 1 16 0 is_stmt 1
 1739 0048 0030E0E3 		mvn	r3, #0
 1740 004c 1D0000EA 		b	.L4
 1741              	.L3:
  17:../timer.c    **** 
  18:../timer.c    **** 	//COMPLETAR: escribir el valor value a partir de la posición offset en el
  19:../timer.c    **** 	//registro rTCFG0, para establecer el valor de pre-escalado del módulo p
  20:../timer.c    **** 
  21:../timer.c    **** 	int bitfield = value, mask = 0xff, reg = rTCFG0;
 1742              		.loc 1 21 0
 1743 0050 24301BE5 		ldr	r3, [fp, #-36]
 1744 0054 14300BE5 		str	r3, [fp, #-20]
 1745 0058 FF30A0E3 		mov	r3, #255
 1746 005c 18300BE5 		str	r3, [fp, #-24]
 1747 0060 70309FE5 		ldr	r3, .L5
 1748 0064 003093E5 		ldr	r3, [r3, #0]
 1749 0068 1C300BE5 		str	r3, [fp, #-28]
  22:../timer.c    **** 	bitfield <<= offset;
 1750              		.loc 1 22 0
 1751 006c 14201BE5 		ldr	r2, [fp, #-20]
 1752 0070 10301BE5 		ldr	r3, [fp, #-16]
 1753 0074 1233A0E1 		mov	r3, r2, asl r3
 1754 0078 14300BE5 		str	r3, [fp, #-20]
  23:../timer.c    **** 
  24:../timer.c    **** 	mask <<= offset;
 1755              		.loc 1 24 0
 1756 007c 18201BE5 		ldr	r2, [fp, #-24]
 1757 0080 10301BE5 		ldr	r3, [fp, #-16]
 1758 0084 1233A0E1 		mov	r3, r2, asl r3
 1759 0088 18300BE5 		str	r3, [fp, #-24]
  25:../timer.c    **** 	mask ^= ~0;
 1760              		.loc 1 25 0
 1761 008c 18301BE5 		ldr	r3, [fp, #-24]
 1762 0090 0330E0E1 		mvn	r3, r3
 1763 0094 18300BE5 		str	r3, [fp, #-24]
  26:../timer.c    **** 
  27:../timer.c    **** 	reg &= mask; // Ponemos a 0 todos los valores en la zona que va a ir el nuevo byte
 1764              		.loc 1 27 0
 1765 0098 1C201BE5 		ldr	r2, [fp, #-28]
 1766 009c 18301BE5 		ldr	r3, [fp, #-24]
 1767 00a0 033002E0 		and	r3, r2, r3
 1768 00a4 1C300BE5 		str	r3, [fp, #-28]
  28:../timer.c    **** 	reg |= bitfield; // Ponemos a 1 los bits que esten a 1 del nuevo byte
 1769              		.loc 1 28 0
 1770 00a8 1C201BE5 		ldr	r2, [fp, #-28]
 1771 00ac 14301BE5 		ldr	r3, [fp, #-20]
 1772 00b0 033082E1 		orr	r3, r2, r3
 1773 00b4 1C300BE5 		str	r3, [fp, #-28]
  29:../timer.c    **** 
  30:../timer.c    **** 	rTCFG0 = reg;
 1774              		.loc 1 30 0
 1775 00b8 18309FE5 		ldr	r3, .L5
 1776 00bc 1C201BE5 		ldr	r2, [fp, #-28]
 1777 00c0 002083E5 		str	r2, [r3, #0]
  31:../timer.c    **** 
  32:../timer.c    **** 	return 0;
 1778              		.loc 1 32 0
 1779 00c4 0030A0E3 		mov	r3, #0
 1780              	.L4:
  33:../timer.c    **** }
 1781              		.loc 1 33 0
 1782 00c8 0300A0E1 		mov	r0, r3
 1783 00cc 0CD04BE2 		sub	sp, fp, #12
 1784 00d0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1785 00d4 1EFF2FE1 		bx	lr
 1786              	.L6:
 1787              		.align	2
 1788              	.L5:
 1789 00d8 0000D501 		.word	30736384
 1790              		.cfi_endproc
 1791              	.LFE0:
 1793              		.align	2
 1794              		.global	tmr_set_divider
 1796              	tmr_set_divider:
 1797              	.LFB1:
  34:../timer.c    **** 
  35:../timer.c    **** int tmr_set_divider(int d, enum tmr_div div)
  36:../timer.c    **** {
 1798              		.loc 1 36 0
 1799              		.cfi_startproc
 1800              		@ Function supports interworking.
 1801              		@ args = 0, pretend = 0, frame = 24
 1802              		@ frame_needed = 1, uses_anonymous_args = 0
 1803 00dc 0DC0A0E1 		mov	ip, sp
 1804              	.LCFI2:
 1805              		.cfi_def_cfa_register 12
 1806 00e0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1807 00e4 04B04CE2 		sub	fp, ip, #4
 1808              		.cfi_offset 14, -8
 1809              		.cfi_offset 13, -12
 1810              		.cfi_offset 11, -16
 1811              	.LCFI3:
 1812              		.cfi_def_cfa 11, 4
 1813 00e8 18D04DE2 		sub	sp, sp, #24
 1814 00ec 20000BE5 		str	r0, [fp, #-32]
 1815 00f0 0130A0E1 		mov	r3, r1
 1816 00f4 21304BE5 		strb	r3, [fp, #-33]
  37:../timer.c    **** 	int pos = d*4;
 1817              		.loc 1 37 0
 1818 00f8 20301BE5 		ldr	r3, [fp, #-32]
 1819 00fc 0331A0E1 		mov	r3, r3, asl #2
 1820 0100 10300BE5 		str	r3, [fp, #-16]
  38:../timer.c    **** 
  39:../timer.c    **** 	if ((d < 0 || d > 5) ||
 1821              		.loc 1 39 0
 1822 0104 20301BE5 		ldr	r3, [fp, #-32]
 1823 0108 000053E3 		cmp	r3, #0
 1824 010c 140000BA 		blt	.L8
 1825              		.loc 1 39 0 is_stmt 0 discriminator 1
 1826 0110 20301BE5 		ldr	r3, [fp, #-32]
 1827 0114 050053E3 		cmp	r3, #5
 1828 0118 110000CA 		bgt	.L8
 1829 011c 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 1830 0120 040053E3 		cmp	r3, #4
 1831 0124 0200001A 		bne	.L9
  40:../timer.c    **** 			(div == D1_32 && d > 3) ||
 1832              		.loc 1 40 0 is_stmt 1
 1833 0128 20301BE5 		ldr	r3, [fp, #-32]
 1834 012c 030053E3 		cmp	r3, #3
 1835 0130 0B0000CA 		bgt	.L8
 1836              	.L9:
 1837              		.loc 1 40 0 is_stmt 0 discriminator 1
 1838 0134 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 1839 0138 050053E3 		cmp	r3, #5
 1840 013c 0200001A 		bne	.L10
  41:../timer.c    **** 			(div == EXTCLK && d != 5) ||
 1841              		.loc 1 41 0 is_stmt 1
 1842 0140 20301BE5 		ldr	r3, [fp, #-32]
 1843 0144 050053E3 		cmp	r3, #5
 1844 0148 0500001A 		bne	.L8
 1845              	.L10:
 1846              		.loc 1 41 0 is_stmt 0 discriminator 1
 1847 014c 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 1848 0150 060053E3 		cmp	r3, #6
 1849 0154 0400001A 		bne	.L11
  42:../timer.c    **** 			(div == TCLK && d != 4))
 1850              		.loc 1 42 0 is_stmt 1
 1851 0158 20301BE5 		ldr	r3, [fp, #-32]
 1852 015c 040053E3 		cmp	r3, #4
 1853 0160 0100000A 		beq	.L11
 1854              	.L8:
  43:../timer.c    **** 		return -1;
 1855              		.loc 1 43 0
 1856 0164 0030E0E3 		mvn	r3, #0
 1857 0168 250000EA 		b	.L12
 1858              	.L11:
  44:../timer.c    **** 
  45:../timer.c    **** 	if (div == EXTCLK || div == TCLK)
 1859              		.loc 1 45 0
 1860 016c 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 1861 0170 050053E3 		cmp	r3, #5
 1862 0174 0200000A 		beq	.L13
 1863              		.loc 1 45 0 is_stmt 0 discriminator 1
 1864 0178 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 1865 017c 060053E3 		cmp	r3, #6
 1866 0180 0100001A 		bne	.L14
 1867              	.L13:
  46:../timer.c    **** 		div = 4;
 1868              		.loc 1 46 0 is_stmt 1
 1869 0184 0430A0E3 		mov	r3, #4
 1870 0188 21304BE5 		strb	r3, [fp, #-33]
 1871              	.L14:
  47:../timer.c    **** 
  48:../timer.c    **** 	//COMPLETAR: escribir el valor div a partir de la posición pos en el
  49:../timer.c    **** 	//registro rTCFG1 para establecer el valor para el divisor d
  50:../timer.c    **** 
  51:../timer.c    **** 	int bitfield = div, mask = 0xf, reg = rTCFG1;
 1872              		.loc 1 51 0
 1873 018c 21305BE5 		ldrb	r3, [fp, #-33]	@ zero_extendqisi2
 1874 0190 14300BE5 		str	r3, [fp, #-20]
 1875 0194 0F30A0E3 		mov	r3, #15
 1876 0198 18300BE5 		str	r3, [fp, #-24]
 1877 019c 70309FE5 		ldr	r3, .L15
 1878 01a0 003093E5 		ldr	r3, [r3, #0]
 1879 01a4 1C300BE5 		str	r3, [fp, #-28]
  52:../timer.c    **** 	bitfield <<= pos;
 1880              		.loc 1 52 0
 1881 01a8 14201BE5 		ldr	r2, [fp, #-20]
 1882 01ac 10301BE5 		ldr	r3, [fp, #-16]
 1883 01b0 1233A0E1 		mov	r3, r2, asl r3
 1884 01b4 14300BE5 		str	r3, [fp, #-20]
  53:../timer.c    **** 
  54:../timer.c    **** 	mask <<= pos;
 1885              		.loc 1 54 0
 1886 01b8 18201BE5 		ldr	r2, [fp, #-24]
 1887 01bc 10301BE5 		ldr	r3, [fp, #-16]
 1888 01c0 1233A0E1 		mov	r3, r2, asl r3
 1889 01c4 18300BE5 		str	r3, [fp, #-24]
  55:../timer.c    **** 	mask ^= ~0;
 1890              		.loc 1 55 0
 1891 01c8 18301BE5 		ldr	r3, [fp, #-24]
 1892 01cc 0330E0E1 		mvn	r3, r3
 1893 01d0 18300BE5 		str	r3, [fp, #-24]
  56:../timer.c    **** 
  57:../timer.c    **** 	reg &= mask; // Ponemos a 0 todos los valores en la zona que va a ir el nuevo nibble
 1894              		.loc 1 57 0
 1895 01d4 1C201BE5 		ldr	r2, [fp, #-28]
 1896 01d8 18301BE5 		ldr	r3, [fp, #-24]
 1897 01dc 033002E0 		and	r3, r2, r3
 1898 01e0 1C300BE5 		str	r3, [fp, #-28]
  58:../timer.c    **** 	reg |= bitfield; // Ponemos a 1 los bits que esten a 1 del nuevo nibble
 1899              		.loc 1 58 0
 1900 01e4 1C201BE5 		ldr	r2, [fp, #-28]
 1901 01e8 14301BE5 		ldr	r3, [fp, #-20]
 1902 01ec 033082E1 		orr	r3, r2, r3
 1903 01f0 1C300BE5 		str	r3, [fp, #-28]
  59:../timer.c    **** 
  60:../timer.c    **** 	rTCFG1 = reg;
 1904              		.loc 1 60 0
 1905 01f4 18309FE5 		ldr	r3, .L15
 1906 01f8 1C201BE5 		ldr	r2, [fp, #-28]
 1907 01fc 002083E5 		str	r2, [r3, #0]
  61:../timer.c    **** 
  62:../timer.c    **** 	return 0;
 1908              		.loc 1 62 0
 1909 0200 0030A0E3 		mov	r3, #0
 1910              	.L12:
  63:../timer.c    **** }
 1911              		.loc 1 63 0
 1912 0204 0300A0E1 		mov	r0, r3
 1913 0208 0CD04BE2 		sub	sp, fp, #12
 1914 020c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1915 0210 1EFF2FE1 		bx	lr
 1916              	.L16:
 1917              		.align	2
 1918              	.L15:
 1919 0214 0400D501 		.word	30736388
 1920              		.cfi_endproc
 1921              	.LFE1:
 1923              		.align	2
 1924              		.global	tmr_set_count
 1926              	tmr_set_count:
 1927              	.LFB2:
  64:../timer.c    **** 
  65:../timer.c    **** int tmr_set_count(enum tmr_timer t, int count, int cmp)
  66:../timer.c    **** {
 1928              		.loc 1 66 0
 1929              		.cfi_startproc
 1930              		@ Function supports interworking.
 1931              		@ args = 0, pretend = 0, frame = 24
 1932              		@ frame_needed = 1, uses_anonymous_args = 0
 1933 0218 0DC0A0E1 		mov	ip, sp
 1934              	.LCFI4:
 1935              		.cfi_def_cfa_register 12
 1936 021c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1937 0220 04B04CE2 		sub	fp, ip, #4
 1938              		.cfi_offset 14, -8
 1939              		.cfi_offset 13, -12
 1940              		.cfi_offset 11, -16
 1941              	.LCFI5:
 1942              		.cfi_def_cfa 11, 4
 1943 0224 18D04DE2 		sub	sp, sp, #24
 1944 0228 0030A0E1 		mov	r3, r0
 1945 022c 1C100BE5 		str	r1, [fp, #-28]
 1946 0230 20200BE5 		str	r2, [fp, #-32]
 1947 0234 15304BE5 		strb	r3, [fp, #-21]
  67:../timer.c    **** 	int err = 0;
 1948              		.loc 1 67 0
 1949 0238 0030A0E3 		mov	r3, #0
 1950 023c 10300BE5 		str	r3, [fp, #-16]
  68:../timer.c    **** 	switch (t) {
 1951              		.loc 1 68 0
 1952 0240 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 1953 0244 050053E3 		cmp	r3, #5
 1954 0248 03F19F97 		ldrls	pc, [pc, r3, asl #2]
 1955 024c 2C0000EA 		b	.L18
 1956              	.L25:
 1957 0250 68020000 		.word	.L19
 1958 0254 84020000 		.word	.L20
 1959 0258 A0020000 		.word	.L21
 1960 025c BC020000 		.word	.L22
 1961 0260 D8020000 		.word	.L23
 1962 0264 F4020000 		.word	.L24
 1963              	.L19:
  69:../timer.c    **** 		case TIMER0:
  70:../timer.c    **** 			//COMPLETAR: establecer el valor de cuenta count y el valor de
  71:../timer.c    **** 			//comparación cmp en los registros de buffer del timer0 (rTCNTB0 y
  72:../timer.c    **** 			//rTCMPB0)
  73:../timer.c    **** 			rTCNTB0 = count;
 1964              		.loc 1 73 0
 1965 0268 B0309FE5 		ldr	r3, .L27
 1966 026c 1C201BE5 		ldr	r2, [fp, #-28]
 1967 0270 002083E5 		str	r2, [r3, #0]
  74:../timer.c    **** 			rTCMPB0 = cmp;
 1968              		.loc 1 74 0
 1969 0274 A8309FE5 		ldr	r3, .L27+4
 1970 0278 20201BE5 		ldr	r2, [fp, #-32]
 1971 027c 002083E5 		str	r2, [r3, #0]
  75:../timer.c    **** 			break;
 1972              		.loc 1 75 0
 1973 0280 210000EA 		b	.L26
 1974              	.L20:
  76:../timer.c    **** 		case TIMER1:
  77:../timer.c    **** 			//COMPLETAR: establecer el valor de cuenta count y el valor de
  78:../timer.c    **** 			//comparación cmp en los registros de buffer del timer1 (rTCNTB1 y
  79:../timer.c    **** 			//rTCMPB1)
  80:../timer.c    **** 			rTCNTB1 = count;
 1975              		.loc 1 80 0
 1976 0284 9C309FE5 		ldr	r3, .L27+8
 1977 0288 1C201BE5 		ldr	r2, [fp, #-28]
 1978 028c 002083E5 		str	r2, [r3, #0]
  81:../timer.c    **** 			rTCMPB1 = cmp;
 1979              		.loc 1 81 0
 1980 0290 94309FE5 		ldr	r3, .L27+12
 1981 0294 20201BE5 		ldr	r2, [fp, #-32]
 1982 0298 002083E5 		str	r2, [r3, #0]
  82:../timer.c    **** 			 break;
 1983              		.loc 1 82 0
 1984 029c 1A0000EA 		b	.L26
 1985              	.L21:
  83:../timer.c    **** 		case TIMER2:
  84:../timer.c    **** 			//COMPLETAR: establecer el valor de cuenta count y el valor de
  85:../timer.c    **** 			//comparación cmp en los registros de buffer del timer2 (rTCNTB2 y
  86:../timer.c    **** 			//rTCMPB2)
  87:../timer.c    **** 			rTCNTB2 = count;
 1986              		.loc 1 87 0
 1987 02a0 88309FE5 		ldr	r3, .L27+16
 1988 02a4 1C201BE5 		ldr	r2, [fp, #-28]
 1989 02a8 002083E5 		str	r2, [r3, #0]
  88:../timer.c    **** 			rTCMPB2 = cmp;
 1990              		.loc 1 88 0
 1991 02ac 80309FE5 		ldr	r3, .L27+20
 1992 02b0 20201BE5 		ldr	r2, [fp, #-32]
 1993 02b4 002083E5 		str	r2, [r3, #0]
  89:../timer.c    **** 			 break;
 1994              		.loc 1 89 0
 1995 02b8 130000EA 		b	.L26
 1996              	.L22:
  90:../timer.c    **** 		case TIMER3:
  91:../timer.c    **** 			//COMPLETAR: establecer el valor de cuenta count y el valor de
  92:../timer.c    **** 			//comparación cmp en los registros de buffer del timer3 (rTCNTB3 y
  93:../timer.c    **** 			//rTCMPB3)
  94:../timer.c    **** 			rTCNTB3 = count;
 1997              		.loc 1 94 0
 1998 02bc 74309FE5 		ldr	r3, .L27+24
 1999 02c0 1C201BE5 		ldr	r2, [fp, #-28]
 2000 02c4 002083E5 		str	r2, [r3, #0]
  95:../timer.c    **** 			rTCMPB3 = cmp;
 2001              		.loc 1 95 0
 2002 02c8 6C309FE5 		ldr	r3, .L27+28
 2003 02cc 20201BE5 		ldr	r2, [fp, #-32]
 2004 02d0 002083E5 		str	r2, [r3, #0]
  96:../timer.c    **** 			 break;
 2005              		.loc 1 96 0
 2006 02d4 0C0000EA 		b	.L26
 2007              	.L23:
  97:../timer.c    **** 		case TIMER4:
  98:../timer.c    **** 			//COMPLETAR: establecer el valor de cuenta count y el valor de
  99:../timer.c    **** 			//comparación cmp en los registros de buffer del timer4 (rTCNTB4 y
 100:../timer.c    **** 			//rTCMPB4)
 101:../timer.c    **** 			rTCNTB4 = count;
 2008              		.loc 1 101 0
 2009 02d8 60309FE5 		ldr	r3, .L27+32
 2010 02dc 1C201BE5 		ldr	r2, [fp, #-28]
 2011 02e0 002083E5 		str	r2, [r3, #0]
 102:../timer.c    **** 			rTCMPB4 = cmp;
 2012              		.loc 1 102 0
 2013 02e4 58309FE5 		ldr	r3, .L27+36
 2014 02e8 20201BE5 		ldr	r2, [fp, #-32]
 2015 02ec 002083E5 		str	r2, [r3, #0]
 103:../timer.c    **** 			 break;
 2016              		.loc 1 103 0
 2017 02f0 050000EA 		b	.L26
 2018              	.L24:
 104:../timer.c    **** 		case TIMER5:
 105:../timer.c    **** 			//COMPLETAR: establecer el valor de cuenta count en el registro de 
 106:../timer.c    **** 			//buffer del timer5 (rTCNTB5)
 107:../timer.c    **** 			rTCNTB5 = count;
 2019              		.loc 1 107 0
 2020 02f4 4C309FE5 		ldr	r3, .L27+40
 2021 02f8 1C201BE5 		ldr	r2, [fp, #-28]
 2022 02fc 002083E5 		str	r2, [r3, #0]
 108:../timer.c    **** 			 break;
 2023              		.loc 1 108 0
 2024 0300 010000EA 		b	.L26
 2025              	.L18:
 109:../timer.c    **** 		default:
 110:../timer.c    **** 			err = -1;
 2026              		.loc 1 110 0
 2027 0304 0030E0E3 		mvn	r3, #0
 2028 0308 10300BE5 		str	r3, [fp, #-16]
 2029              	.L26:
 111:../timer.c    **** 	}
 112:../timer.c    **** 
 113:../timer.c    **** 	return err;
 2030              		.loc 1 113 0
 2031 030c 10301BE5 		ldr	r3, [fp, #-16]
 114:../timer.c    **** }
 2032              		.loc 1 114 0
 2033 0310 0300A0E1 		mov	r0, r3
 2034 0314 0CD04BE2 		sub	sp, fp, #12
 2035 0318 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2036 031c 1EFF2FE1 		bx	lr
 2037              	.L28:
 2038              		.align	2
 2039              	.L27:
 2040 0320 0C00D501 		.word	30736396
 2041 0324 1000D501 		.word	30736400
 2042 0328 1800D501 		.word	30736408
 2043 032c 1C00D501 		.word	30736412
 2044 0330 2400D501 		.word	30736420
 2045 0334 2800D501 		.word	30736424
 2046 0338 3000D501 		.word	30736432
 2047 033c 3400D501 		.word	30736436
 2048 0340 3C00D501 		.word	30736444
 2049 0344 4000D501 		.word	30736448
 2050 0348 4800D501 		.word	30736456
 2051              		.cfi_endproc
 2052              	.LFE2:
 2054              		.align	2
 2055              		.global	tmr_update
 2057              	tmr_update:
 2058              	.LFB3:
 115:../timer.c    **** 
 116:../timer.c    **** int tmr_update(enum tmr_timer t)
 117:../timer.c    **** {
 2059              		.loc 1 117 0
 2060              		.cfi_startproc
 2061              		@ Function supports interworking.
 2062              		@ args = 0, pretend = 0, frame = 16
 2063              		@ frame_needed = 1, uses_anonymous_args = 0
 2064 034c 0DC0A0E1 		mov	ip, sp
 2065              	.LCFI6:
 2066              		.cfi_def_cfa_register 12
 2067 0350 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2068 0354 04B04CE2 		sub	fp, ip, #4
 2069              		.cfi_offset 14, -8
 2070              		.cfi_offset 13, -12
 2071              		.cfi_offset 11, -16
 2072              	.LCFI7:
 2073              		.cfi_def_cfa 11, 4
 2074 0358 10D04DE2 		sub	sp, sp, #16
 2075 035c 0030A0E1 		mov	r3, r0
 2076 0360 15304BE5 		strb	r3, [fp, #-21]
 118:../timer.c    **** 	int pos = t*4;
 2077              		.loc 1 118 0
 2078 0364 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2079 0368 0331A0E1 		mov	r3, r3, asl #2
 2080 036c 10300BE5 		str	r3, [fp, #-16]
 119:../timer.c    **** 	if (t > 0)
 2081              		.loc 1 119 0
 2082 0370 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2083 0374 000053E3 		cmp	r3, #0
 2084 0378 0200000A 		beq	.L30
 120:../timer.c    **** 		pos += 4;
 2085              		.loc 1 120 0
 2086 037c 10301BE5 		ldr	r3, [fp, #-16]
 2087 0380 043083E2 		add	r3, r3, #4
 2088 0384 10300BE5 		str	r3, [fp, #-16]
 2089              	.L30:
 121:../timer.c    **** 
 122:../timer.c    **** 	if (t < 0 || t > 5)
 2090              		.loc 1 122 0
 2091 0388 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2092 038c 050053E3 		cmp	r3, #5
 2093 0390 0100009A 		bls	.L31
 123:../timer.c    **** 		return -1;
 2094              		.loc 1 123 0
 2095 0394 0030E0E3 		mvn	r3, #0
 2096 0398 140000EA 		b	.L32
 2097              	.L31:
 124:../timer.c    **** 
 125:../timer.c    **** 	pos++;
 2098              		.loc 1 125 0
 2099 039c 10301BE5 		ldr	r3, [fp, #-16]
 2100 03a0 013083E2 		add	r3, r3, #1
 2101 03a4 10300BE5 		str	r3, [fp, #-16]
 126:../timer.c    **** 
 127:../timer.c    **** 	//COMPLETAR: poner a 1 en el registro rTCON el bit indicado por pos 
 128:../timer.c    **** 	// y justo después ponerlo a 0 (deben ser stores distintos, lo hacemos con
 129:../timer.c    **** 	// sentencias C distintas)
 130:../timer.c    **** 	rTCON |= 1 << pos;
 2102              		.loc 1 130 0
 2103 03a8 50309FE5 		ldr	r3, .L33
 2104 03ac 4C209FE5 		ldr	r2, .L33
 2105 03b0 001092E5 		ldr	r1, [r2, #0]
 2106 03b4 0100A0E3 		mov	r0, #1
 2107 03b8 10201BE5 		ldr	r2, [fp, #-16]
 2108 03bc 1022A0E1 		mov	r2, r0, asl r2
 2109 03c0 022081E1 		orr	r2, r1, r2
 2110 03c4 002083E5 		str	r2, [r3, #0]
 131:../timer.c    **** 	rTCON &= ~(1 << pos);
 2111              		.loc 1 131 0
 2112 03c8 30309FE5 		ldr	r3, .L33
 2113 03cc 2C209FE5 		ldr	r2, .L33
 2114 03d0 001092E5 		ldr	r1, [r2, #0]
 2115 03d4 0100A0E3 		mov	r0, #1
 2116 03d8 10201BE5 		ldr	r2, [fp, #-16]
 2117 03dc 1022A0E1 		mov	r2, r0, asl r2
 2118 03e0 0220E0E1 		mvn	r2, r2
 2119 03e4 022001E0 		and	r2, r1, r2
 2120 03e8 002083E5 		str	r2, [r3, #0]
 132:../timer.c    **** 
 133:../timer.c    **** 	return 0;
 2121              		.loc 1 133 0
 2122 03ec 0030A0E3 		mov	r3, #0
 2123              	.L32:
 134:../timer.c    **** }
 2124              		.loc 1 134 0
 2125 03f0 0300A0E1 		mov	r0, r3
 2126 03f4 0CD04BE2 		sub	sp, fp, #12
 2127 03f8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2128 03fc 1EFF2FE1 		bx	lr
 2129              	.L34:
 2130              		.align	2
 2131              	.L33:
 2132 0400 0800D501 		.word	30736392
 2133              		.cfi_endproc
 2134              	.LFE3:
 2136              		.align	2
 2137              		.global	tmr_set_mode
 2139              	tmr_set_mode:
 2140              	.LFB4:
 135:../timer.c    **** 
 136:../timer.c    **** int tmr_set_mode(enum tmr_timer t, enum tmr_mode mode)
 137:../timer.c    **** {
 2141              		.loc 1 137 0
 2142              		.cfi_startproc
 2143              		@ Function supports interworking.
 2144              		@ args = 0, pretend = 0, frame = 16
 2145              		@ frame_needed = 1, uses_anonymous_args = 0
 2146 0404 0DC0A0E1 		mov	ip, sp
 2147              	.LCFI8:
 2148              		.cfi_def_cfa_register 12
 2149 0408 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2150 040c 04B04CE2 		sub	fp, ip, #4
 2151              		.cfi_offset 14, -8
 2152              		.cfi_offset 13, -12
 2153              		.cfi_offset 11, -16
 2154              	.LCFI9:
 2155              		.cfi_def_cfa 11, 4
 2156 0410 10D04DE2 		sub	sp, sp, #16
 2157 0414 0020A0E1 		mov	r2, r0
 2158 0418 0130A0E1 		mov	r3, r1
 2159 041c 15204BE5 		strb	r2, [fp, #-21]
 2160 0420 16304BE5 		strb	r3, [fp, #-22]
 138:../timer.c    **** 	int err = 0;
 2161              		.loc 1 138 0
 2162 0424 0030A0E3 		mov	r3, #0
 2163 0428 10300BE5 		str	r3, [fp, #-16]
 139:../timer.c    **** 	int pos = t*4;
 2164              		.loc 1 139 0
 2165 042c 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2166 0430 0331A0E1 		mov	r3, r3, asl #2
 2167 0434 14300BE5 		str	r3, [fp, #-20]
 140:../timer.c    **** 	if (t > 0)
 2168              		.loc 1 140 0
 2169 0438 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2170 043c 000053E3 		cmp	r3, #0
 2171 0440 0200000A 		beq	.L36
 141:../timer.c    **** 		pos += 4;
 2172              		.loc 1 141 0
 2173 0444 14301BE5 		ldr	r3, [fp, #-20]
 2174 0448 043083E2 		add	r3, r3, #4
 2175 044c 14300BE5 		str	r3, [fp, #-20]
 2176              	.L36:
 142:../timer.c    **** 
 143:../timer.c    **** 	if (t < 0 || t > 5)
 2177              		.loc 1 143 0
 2178 0450 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2179 0454 050053E3 		cmp	r3, #5
 2180 0458 0100009A 		bls	.L37
 144:../timer.c    **** 		return -1;
 2181              		.loc 1 144 0
 2182 045c 0030E0E3 		mvn	r3, #0
 2183 0460 250000EA 		b	.L38
 2184              	.L37:
 145:../timer.c    **** 
 146:../timer.c    **** 	if(t == 5)
 2185              		.loc 1 146 0
 2186 0464 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2187 0468 050053E3 		cmp	r3, #5
 2188 046c 0300001A 		bne	.L39
 147:../timer.c    **** 		pos += 2;
 2189              		.loc 1 147 0
 2190 0470 14301BE5 		ldr	r3, [fp, #-20]
 2191 0474 023083E2 		add	r3, r3, #2
 2192 0478 14300BE5 		str	r3, [fp, #-20]
 2193 047c 020000EA 		b	.L40
 2194              	.L39:
 148:../timer.c    **** 	else
 149:../timer.c    **** 		pos += 3;
 2195              		.loc 1 149 0
 2196 0480 14301BE5 		ldr	r3, [fp, #-20]
 2197 0484 033083E2 		add	r3, r3, #3
 2198 0488 14300BE5 		str	r3, [fp, #-20]
 2199              	.L40:
 150:../timer.c    **** 
 151:../timer.c    **** 	if (mode == ONE_SHOT)
 2200              		.loc 1 151 0
 2201 048c 16305BE5 		ldrb	r3, [fp, #-22]	@ zero_extendqisi2
 2202 0490 000053E3 		cmp	r3, #0
 2203 0494 0900001A 		bne	.L41
 152:../timer.c    **** 		//COMPLETAR: poner a 0 el bit autoreload a partir de la posición pos (es
 153:../timer.c    **** 		//el cuarto bit a partir de esa posición)
 154:../timer.c    **** 		rTCON &= ~(1 << pos);
 2204              		.loc 1 154 0
 2205 0498 6C309FE5 		ldr	r3, .L44
 2206 049c 68209FE5 		ldr	r2, .L44
 2207 04a0 001092E5 		ldr	r1, [r2, #0]
 2208 04a4 0100A0E3 		mov	r0, #1
 2209 04a8 14201BE5 		ldr	r2, [fp, #-20]
 2210 04ac 1022A0E1 		mov	r2, r0, asl r2
 2211 04b0 0220E0E1 		mvn	r2, r2
 2212 04b4 022001E0 		and	r2, r1, r2
 2213 04b8 002083E5 		str	r2, [r3, #0]
 2214 04bc 0D0000EA 		b	.L42
 2215              	.L41:
 155:../timer.c    **** 	else if (mode == RELOAD)
 2216              		.loc 1 155 0
 2217 04c0 16305BE5 		ldrb	r3, [fp, #-22]	@ zero_extendqisi2
 2218 04c4 010053E3 		cmp	r3, #1
 2219 04c8 0800001A 		bne	.L43
 156:../timer.c    **** 		//COMPLETAR: poner a 1 el bit autoreload a partir de la posición pos (es
 157:../timer.c    **** 		//el cuarto bit a partir de esa posición)
 158:../timer.c    **** 		rTCON |= 1 << pos;
 2220              		.loc 1 158 0
 2221 04cc 38309FE5 		ldr	r3, .L44
 2222 04d0 34209FE5 		ldr	r2, .L44
 2223 04d4 001092E5 		ldr	r1, [r2, #0]
 2224 04d8 0100A0E3 		mov	r0, #1
 2225 04dc 14201BE5 		ldr	r2, [fp, #-20]
 2226 04e0 1022A0E1 		mov	r2, r0, asl r2
 2227 04e4 022081E1 		orr	r2, r1, r2
 2228 04e8 002083E5 		str	r2, [r3, #0]
 2229 04ec 010000EA 		b	.L42
 2230              	.L43:
 159:../timer.c    **** 	else
 160:../timer.c    **** 		err = -1;
 2231              		.loc 1 160 0
 2232 04f0 0030E0E3 		mvn	r3, #0
 2233 04f4 10300BE5 		str	r3, [fp, #-16]
 2234              	.L42:
 161:../timer.c    **** 
 162:../timer.c    **** 	return err;
 2235              		.loc 1 162 0
 2236 04f8 10301BE5 		ldr	r3, [fp, #-16]
 2237              	.L38:
 163:../timer.c    **** }
 2238              		.loc 1 163 0
 2239 04fc 0300A0E1 		mov	r0, r3
 2240 0500 0CD04BE2 		sub	sp, fp, #12
 2241 0504 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2242 0508 1EFF2FE1 		bx	lr
 2243              	.L45:
 2244              		.align	2
 2245              	.L44:
 2246 050c 0800D501 		.word	30736392
 2247              		.cfi_endproc
 2248              	.LFE4:
 2250              		.align	2
 2251              		.global	tmr_start
 2253              	tmr_start:
 2254              	.LFB5:
 164:../timer.c    **** 
 165:../timer.c    **** int tmr_start(enum tmr_timer t)
 166:../timer.c    **** {
 2255              		.loc 1 166 0
 2256              		.cfi_startproc
 2257              		@ Function supports interworking.
 2258              		@ args = 0, pretend = 0, frame = 16
 2259              		@ frame_needed = 1, uses_anonymous_args = 0
 2260 0510 0DC0A0E1 		mov	ip, sp
 2261              	.LCFI10:
 2262              		.cfi_def_cfa_register 12
 2263 0514 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2264 0518 04B04CE2 		sub	fp, ip, #4
 2265              		.cfi_offset 14, -8
 2266              		.cfi_offset 13, -12
 2267              		.cfi_offset 11, -16
 2268              	.LCFI11:
 2269              		.cfi_def_cfa 11, 4
 2270 051c 10D04DE2 		sub	sp, sp, #16
 2271 0520 0030A0E1 		mov	r3, r0
 2272 0524 15304BE5 		strb	r3, [fp, #-21]
 167:../timer.c    **** 	int pos = t*4;
 2273              		.loc 1 167 0
 2274 0528 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2275 052c 0331A0E1 		mov	r3, r3, asl #2
 2276 0530 10300BE5 		str	r3, [fp, #-16]
 168:../timer.c    **** 	if (t > 0)
 2277              		.loc 1 168 0
 2278 0534 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2279 0538 000053E3 		cmp	r3, #0
 2280 053c 0200000A 		beq	.L47
 169:../timer.c    **** 		pos += 4;
 2281              		.loc 1 169 0
 2282 0540 10301BE5 		ldr	r3, [fp, #-16]
 2283 0544 043083E2 		add	r3, r3, #4
 2284 0548 10300BE5 		str	r3, [fp, #-16]
 2285              	.L47:
 170:../timer.c    **** 
 171:../timer.c    **** 	if (t < 0 || t > 5)
 2286              		.loc 1 171 0
 2287 054c 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2288 0550 050053E3 		cmp	r3, #5
 2289 0554 0100009A 		bls	.L48
 172:../timer.c    **** 		return -1;
 2290              		.loc 1 172 0
 2291 0558 0030E0E3 		mvn	r3, #0
 2292 055c 080000EA 		b	.L49
 2293              	.L48:
 173:../timer.c    **** 
 174:../timer.c    **** 	//COMPLETAR: poner a 1 el bit de start a partir de la posición pos en el
 175:../timer.c    **** 	//registro rTCON (es el primer bit del grupo)
 176:../timer.c    **** 	rTCON |= 1 << pos;
 2294              		.loc 1 176 0
 2295 0560 2C309FE5 		ldr	r3, .L50
 2296 0564 28209FE5 		ldr	r2, .L50
 2297 0568 001092E5 		ldr	r1, [r2, #0]
 2298 056c 0100A0E3 		mov	r0, #1
 2299 0570 10201BE5 		ldr	r2, [fp, #-16]
 2300 0574 1022A0E1 		mov	r2, r0, asl r2
 2301 0578 022081E1 		orr	r2, r1, r2
 2302 057c 002083E5 		str	r2, [r3, #0]
 177:../timer.c    **** 	return 0;
 2303              		.loc 1 177 0
 2304 0580 0030A0E3 		mov	r3, #0
 2305              	.L49:
 178:../timer.c    **** }
 2306              		.loc 1 178 0
 2307 0584 0300A0E1 		mov	r0, r3
 2308 0588 0CD04BE2 		sub	sp, fp, #12
 2309 058c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2310 0590 1EFF2FE1 		bx	lr
 2311              	.L51:
 2312              		.align	2
 2313              	.L50:
 2314 0594 0800D501 		.word	30736392
 2315              		.cfi_endproc
 2316              	.LFE5:
 2318              		.align	2
 2319              		.global	tmr_stop
 2321              	tmr_stop:
 2322              	.LFB6:
 179:../timer.c    **** 
 180:../timer.c    **** int tmr_stop(enum tmr_timer t)
 181:../timer.c    **** {
 2323              		.loc 1 181 0
 2324              		.cfi_startproc
 2325              		@ Function supports interworking.
 2326              		@ args = 0, pretend = 0, frame = 16
 2327              		@ frame_needed = 1, uses_anonymous_args = 0
 2328 0598 0DC0A0E1 		mov	ip, sp
 2329              	.LCFI12:
 2330              		.cfi_def_cfa_register 12
 2331 059c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2332 05a0 04B04CE2 		sub	fp, ip, #4
 2333              		.cfi_offset 14, -8
 2334              		.cfi_offset 13, -12
 2335              		.cfi_offset 11, -16
 2336              	.LCFI13:
 2337              		.cfi_def_cfa 11, 4
 2338 05a4 10D04DE2 		sub	sp, sp, #16
 2339 05a8 0030A0E1 		mov	r3, r0
 2340 05ac 15304BE5 		strb	r3, [fp, #-21]
 182:../timer.c    **** 	int pos = t*4;
 2341              		.loc 1 182 0
 2342 05b0 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2343 05b4 0331A0E1 		mov	r3, r3, asl #2
 2344 05b8 10300BE5 		str	r3, [fp, #-16]
 183:../timer.c    **** 	if (t > 0)
 2345              		.loc 1 183 0
 2346 05bc 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2347 05c0 000053E3 		cmp	r3, #0
 2348 05c4 0200000A 		beq	.L53
 184:../timer.c    **** 		pos += 4;
 2349              		.loc 1 184 0
 2350 05c8 10301BE5 		ldr	r3, [fp, #-16]
 2351 05cc 043083E2 		add	r3, r3, #4
 2352 05d0 10300BE5 		str	r3, [fp, #-16]
 2353              	.L53:
 185:../timer.c    **** 
 186:../timer.c    **** 	if (t < 0 || t > 5)
 2354              		.loc 1 186 0
 2355 05d4 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2356 05d8 050053E3 		cmp	r3, #5
 2357 05dc 0100009A 		bls	.L54
 187:../timer.c    **** 		return -1;
 2358              		.loc 1 187 0
 2359 05e0 0030E0E3 		mvn	r3, #0
 2360 05e4 090000EA 		b	.L55
 2361              	.L54:
 188:../timer.c    **** 
 189:../timer.c    **** 	//COMPLETAR: poner a 0 el bit de start a partir de la posición pos en el
 190:../timer.c    **** 	//registro rTCON (es el primer bit del grupo)
 191:../timer.c    **** 	rTCON &= ~(1 << pos);
 2362              		.loc 1 191 0
 2363 05e8 30309FE5 		ldr	r3, .L56
 2364 05ec 2C209FE5 		ldr	r2, .L56
 2365 05f0 001092E5 		ldr	r1, [r2, #0]
 2366 05f4 0100A0E3 		mov	r0, #1
 2367 05f8 10201BE5 		ldr	r2, [fp, #-16]
 2368 05fc 1022A0E1 		mov	r2, r0, asl r2
 2369 0600 0220E0E1 		mvn	r2, r2
 2370 0604 022001E0 		and	r2, r1, r2
 2371 0608 002083E5 		str	r2, [r3, #0]
 192:../timer.c    **** 
 193:../timer.c    **** 	return 0;
 2372              		.loc 1 193 0
 2373 060c 0030A0E3 		mov	r3, #0
 2374              	.L55:
 194:../timer.c    **** }
 2375              		.loc 1 194 0
 2376 0610 0300A0E1 		mov	r0, r3
 2377 0614 0CD04BE2 		sub	sp, fp, #12
 2378 0618 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2379 061c 1EFF2FE1 		bx	lr
 2380              	.L57:
 2381              		.align	2
 2382              	.L56:
 2383 0620 0800D501 		.word	30736392
 2384              		.cfi_endproc
 2385              	.LFE6:
 2387              		.align	2
 2388              		.global	tmr_isrunning
 2390              	tmr_isrunning:
 2391              	.LFB7:
 195:../timer.c    **** 
 196:../timer.c    **** int tmr_isrunning(enum tmr_timer t)
 197:../timer.c    **** {
 2392              		.loc 1 197 0
 2393              		.cfi_startproc
 2394              		@ Function supports interworking.
 2395              		@ args = 0, pretend = 0, frame = 16
 2396              		@ frame_needed = 1, uses_anonymous_args = 0
 2397 0624 0DC0A0E1 		mov	ip, sp
 2398              	.LCFI14:
 2399              		.cfi_def_cfa_register 12
 2400 0628 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2401 062c 04B04CE2 		sub	fp, ip, #4
 2402              		.cfi_offset 14, -8
 2403              		.cfi_offset 13, -12
 2404              		.cfi_offset 11, -16
 2405              	.LCFI15:
 2406              		.cfi_def_cfa 11, 4
 2407 0630 10D04DE2 		sub	sp, sp, #16
 2408 0634 0030A0E1 		mov	r3, r0
 2409 0638 15304BE5 		strb	r3, [fp, #-21]
 198:../timer.c    **** 	int ret = 0;
 2410              		.loc 1 198 0
 2411 063c 0030A0E3 		mov	r3, #0
 2412 0640 10300BE5 		str	r3, [fp, #-16]
 199:../timer.c    **** 	int pos = t*4;
 2413              		.loc 1 199 0
 2414 0644 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2415 0648 0331A0E1 		mov	r3, r3, asl #2
 2416 064c 14300BE5 		str	r3, [fp, #-20]
 200:../timer.c    **** 	if (t > 0)
 2417              		.loc 1 200 0
 2418 0650 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2419 0654 000053E3 		cmp	r3, #0
 2420 0658 0200000A 		beq	.L59
 201:../timer.c    **** 		pos += 4;
 2421              		.loc 1 201 0
 2422 065c 14301BE5 		ldr	r3, [fp, #-20]
 2423 0660 043083E2 		add	r3, r3, #4
 2424 0664 14300BE5 		str	r3, [fp, #-20]
 2425              	.L59:
 202:../timer.c    **** 
 203:../timer.c    **** 	if ((t >= 0) && (t <= 5) 
 2426              		.loc 1 203 0
 2427 0668 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2428 066c 050053E3 		cmp	r3, #5
 2429 0670 0900008A 		bhi	.L60
 204:../timer.c    **** 			&& (rTCON & (0x1 << pos)))
 2430              		.loc 1 204 0
 2431 0674 34309FE5 		ldr	r3, .L61
 2432 0678 002093E5 		ldr	r2, [r3, #0]
 2433 067c 0110A0E3 		mov	r1, #1
 2434 0680 14301BE5 		ldr	r3, [fp, #-20]
 2435 0684 1133A0E1 		mov	r3, r1, asl r3
 2436 0688 033002E0 		and	r3, r2, r3
 2437 068c 000053E3 		cmp	r3, #0
 2438 0690 0100000A 		beq	.L60
 205:../timer.c    **** 		ret = 1;
 2439              		.loc 1 205 0
 2440 0694 0130A0E3 		mov	r3, #1
 2441 0698 10300BE5 		str	r3, [fp, #-16]
 2442              	.L60:
 206:../timer.c    **** 
 207:../timer.c    **** 	return ret;
 2443              		.loc 1 207 0
 2444 069c 10301BE5 		ldr	r3, [fp, #-16]
 208:../timer.c    **** }
 2445              		.loc 1 208 0
 2446 06a0 0300A0E1 		mov	r0, r3
 2447 06a4 0CD04BE2 		sub	sp, fp, #12
 2448 06a8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2449 06ac 1EFF2FE1 		bx	lr
 2450              	.L62:
 2451              		.align	2
 2452              	.L61:
 2453 06b0 0800D501 		.word	30736392
 2454              		.cfi_endproc
 2455              	.LFE7:
 2457              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 timer.c
C:\Users\Pedro\AppData\Local\Temp\ccvvy2lE.s:1698   .text:00000000 $a
C:\Users\Pedro\AppData\Local\Temp\ccvvy2lE.s:1701   .text:00000000 tmr_set_prescaler
C:\Users\Pedro\AppData\Local\Temp\ccvvy2lE.s:1789   .text:000000d8 $d
C:\Users\Pedro\AppData\Local\Temp\ccvvy2lE.s:1793   .text:000000dc $a
C:\Users\Pedro\AppData\Local\Temp\ccvvy2lE.s:1796   .text:000000dc tmr_set_divider
C:\Users\Pedro\AppData\Local\Temp\ccvvy2lE.s:1919   .text:00000214 $d
C:\Users\Pedro\AppData\Local\Temp\ccvvy2lE.s:1923   .text:00000218 $a
C:\Users\Pedro\AppData\Local\Temp\ccvvy2lE.s:1926   .text:00000218 tmr_set_count
C:\Users\Pedro\AppData\Local\Temp\ccvvy2lE.s:1957   .text:00000250 $d
C:\Users\Pedro\AppData\Local\Temp\ccvvy2lE.s:1965   .text:00000268 $a
C:\Users\Pedro\AppData\Local\Temp\ccvvy2lE.s:2040   .text:00000320 $d
C:\Users\Pedro\AppData\Local\Temp\ccvvy2lE.s:2054   .text:0000034c $a
C:\Users\Pedro\AppData\Local\Temp\ccvvy2lE.s:2057   .text:0000034c tmr_update
C:\Users\Pedro\AppData\Local\Temp\ccvvy2lE.s:2132   .text:00000400 $d
C:\Users\Pedro\AppData\Local\Temp\ccvvy2lE.s:2136   .text:00000404 $a
C:\Users\Pedro\AppData\Local\Temp\ccvvy2lE.s:2139   .text:00000404 tmr_set_mode
C:\Users\Pedro\AppData\Local\Temp\ccvvy2lE.s:2246   .text:0000050c $d
C:\Users\Pedro\AppData\Local\Temp\ccvvy2lE.s:2250   .text:00000510 $a
C:\Users\Pedro\AppData\Local\Temp\ccvvy2lE.s:2253   .text:00000510 tmr_start
C:\Users\Pedro\AppData\Local\Temp\ccvvy2lE.s:2314   .text:00000594 $d
C:\Users\Pedro\AppData\Local\Temp\ccvvy2lE.s:2318   .text:00000598 $a
C:\Users\Pedro\AppData\Local\Temp\ccvvy2lE.s:2321   .text:00000598 tmr_stop
C:\Users\Pedro\AppData\Local\Temp\ccvvy2lE.s:2383   .text:00000620 $d
C:\Users\Pedro\AppData\Local\Temp\ccvvy2lE.s:2387   .text:00000624 $a
C:\Users\Pedro\AppData\Local\Temp\ccvvy2lE.s:2390   .text:00000624 tmr_isrunning
C:\Users\Pedro\AppData\Local\Temp\ccvvy2lE.s:2453   .text:000006b0 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS

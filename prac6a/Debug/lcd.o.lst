   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"lcd.c"
  21              	.Ltext0:
  22              		.file 1 "../lcd.c"
 1787              		.align	2
 1788              	lcd_buffer:
 1789 0000 00000000 		.space	38400
 1789      00000000 
 1789      00000000 
 1789      00000000 
 1789      00000000 
 1790              	state:
 1791 9600 00       		.space	1
 1792 9601 000000   		.text
 1793              		.align	2
 1794              		.global	lcd_init
 1796              	lcd_init:
 1797              	.LFB0:
   1:../lcd.c      **** #include "44b.h"
   2:../lcd.c      **** #include "lcd.h"
   3:../lcd.c      **** 
   4:../lcd.c      **** extern uint8 font[];
   5:../lcd.c      **** static uint8 lcd_buffer[LCD_BUFFER_SIZE];
   6:../lcd.c      **** 
   7:../lcd.c      **** static uint8 state;
   8:../lcd.c      **** 
   9:../lcd.c      **** void lcd_init( void )
  10:../lcd.c      **** {
 1798              		.loc 1 10 0
 1799              		.cfi_startproc
 1800              		@ Function supports interworking.
 1801              		@ args = 0, pretend = 0, frame = 0
 1802              		@ frame_needed = 1, uses_anonymous_args = 0
 1803 0000 0DC0A0E1 		mov	ip, sp
 1804              	.LCFI0:
 1805              		.cfi_def_cfa_register 12
 1806 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1807 0008 04B04CE2 		sub	fp, ip, #4
 1808              		.cfi_offset 14, -8
 1809              		.cfi_offset 13, -12
 1810              		.cfi_offset 11, -16
 1811              	.LCFI1:
 1812              		.cfi_def_cfa 11, 4
  11:../lcd.c      **** 	//Initialize dithering patterns to recommended patterns
  12:../lcd.c      **** 	rDITHMODE = 0x12210;
 1813              		.loc 1 12 0
 1814 000c FC309FE5 		ldr	r3, .L2
 1815 0010 FC209FE5 		ldr	r2, .L2+4
 1816 0014 002083E5 		str	r2, [r3, #0]
  13:../lcd.c      **** 	rDP1_2 = 0xA5A5;
 1817              		.loc 1 13 0
 1818 0018 F8309FE5 		ldr	r3, .L2+8
 1819 001c F8209FE5 		ldr	r2, .L2+12
 1820 0020 002083E5 		str	r2, [r3, #0]
  14:../lcd.c      **** 	rDP4_7 = 0xBA5DA65;
 1821              		.loc 1 14 0
 1822 0024 F4309FE5 		ldr	r3, .L2+16
 1823 0028 F4209FE5 		ldr	r2, .L2+20
 1824 002c 002083E5 		str	r2, [r3, #0]
  15:../lcd.c      **** 	rDP3_5 = 0xA5A5F;
 1825              		.loc 1 15 0
 1826 0030 F0309FE5 		ldr	r3, .L2+24
 1827 0034 F0209FE5 		ldr	r2, .L2+28
 1828 0038 002083E5 		str	r2, [r3, #0]
  16:../lcd.c      **** 	rDP2_3 = 0xD6B;
 1829              		.loc 1 16 0
 1830 003c EC309FE5 		ldr	r3, .L2+32
 1831 0040 EC209FE5 		ldr	r2, .L2+36
 1832 0044 002083E5 		str	r2, [r3, #0]
  17:../lcd.c      **** 	rDP5_7 = 0xEB7B5ED;
 1833              		.loc 1 17 0
 1834 0048 E8309FE5 		ldr	r3, .L2+40
 1835 004c E8209FE5 		ldr	r2, .L2+44
 1836 0050 002083E5 		str	r2, [r3, #0]
  18:../lcd.c      **** 	rDP3_4 = 0x7DBE;
 1837              		.loc 1 18 0
 1838 0054 E4309FE5 		ldr	r3, .L2+48
 1839 0058 E4209FE5 		ldr	r2, .L2+52
 1840 005c 002083E5 		str	r2, [r3, #0]
  19:../lcd.c      **** 	rDP4_5 = 0x7EBDF;
 1841              		.loc 1 19 0
 1842 0060 E0309FE5 		ldr	r3, .L2+56
 1843 0064 E0209FE5 		ldr	r2, .L2+60
 1844 0068 002083E5 		str	r2, [r3, #0]
  20:../lcd.c      **** 	rDP6_7 = 0x7FDFBFE;
 1845              		.loc 1 20 0
 1846 006c DC309FE5 		ldr	r3, .L2+64
 1847 0070 DC209FE5 		ldr	r2, .L2+68
 1848 0074 002083E5 		str	r2, [r3, #0]
  21:../lcd.c      **** 
  22:../lcd.c      **** 	//Zero, black and white LCD
  23:../lcd.c      ****     rREDLUT   = 0;
 1849              		.loc 1 23 0
 1850 0078 D8309FE5 		ldr	r3, .L2+72
 1851 007c 0020A0E3 		mov	r2, #0
 1852 0080 002083E5 		str	r2, [r3, #0]
  24:../lcd.c      ****     rGREENLUT = 0;
 1853              		.loc 1 24 0
 1854 0084 D0309FE5 		ldr	r3, .L2+76
 1855 0088 0020A0E3 		mov	r2, #0
 1856 008c 002083E5 		str	r2, [r3, #0]
  25:../lcd.c      ****     rBLUELUT  = 0;
 1857              		.loc 1 25 0
 1858 0090 C8309FE5 		ldr	r3, .L2+80
 1859 0094 0020A0E3 		mov	r2, #0
 1860 0098 002083E5 		str	r2, [r3, #0]
  26:../lcd.c      **** 
  27:../lcd.c      ****     //LCDCON1[0]     = 0   Video Output Initially Off
  28:../lcd.c      ****     //LCDCON1[1]     = 0   no invierte señales de vídeo
  29:../lcd.c      ****     //LCDCON1[2]     = 0   no invierte la señal VFRAME
  30:../lcd.c      ****     //LCDCON1[3]     = 0   no invierte la señal VLINE
  31:../lcd.c      ****     //LCDCON1[4]     = 0   las señales de vídeo se muestrean a flanco de bajada
  32:../lcd.c      ****     //LCDCON1[9:8]   = 0   WDLY = 4 ciclos (minimum blanking)
  33:../lcd.c      ****     //LCDCON1[11:10] = 0   WLH = 4 ciclos  (minimum blanking)
  34:../lcd.c      ****     //LCDCON1[21:12] = 28  CLKVAL = 28 => tFRAME = 59,4 Hz
  35:../lcd.c      ****     rLCDCON1  = 0x1C020;
 1861              		.loc 1 35 0
 1862 009c 1F36A0E3 		mov	r3, #32505856
 1863 00a0 BC209FE5 		ldr	r2, .L2+84
 1864 00a4 002083E5 		str	r2, [r3, #0]
  36:../lcd.c      **** 
  37:../lcd.c      ****     //LCDCON2[31:21] =  0 LINEBLANK = 0 ciclos (minimum horizontal blanking
  38:../lcd.c      ****     //LCDCON2[20:10] = 79   HOZVAL = (320 / 4) – 1 (Horizontal resolution)
  39:../lcd.c      ****     //LCDCON2[9:0]   = 239  LINEVAL = 240 – 1 (Vertical resolution)
  40:../lcd.c      ****     rLCDCON2  = 0x13CEF;
 1865              		.loc 1 40 0
 1866 00a8 B8309FE5 		ldr	r3, .L2+88
 1867 00ac B8209FE5 		ldr	r2, .L2+92
 1868 00b0 002083E5 		str	r2, [r3, #0]
  41:../lcd.c      **** 
  42:../lcd.c      ****     //LCDCON3[0] = 0  Disable self refresh
  43:../lcd.c      ****     rLCDCON3  = 0;
 1869              		.loc 1 43 0
 1870 00b4 B4309FE5 		ldr	r3, .L2+96
 1871 00b8 0020A0E3 		mov	r2, #0
 1872 00bc 002083E5 		str	r2, [r3, #0]
  44:../lcd.c      **** 
  45:../lcd.c      ****     //Start of lcd_buffer
  46:../lcd.c      ****     rLCDSADDR1 = (2 << 27) | ((uint32)lcd_buffer >> 1);
 1873              		.loc 1 46 0
 1874 00c0 AC309FE5 		ldr	r3, .L2+100
 1875 00c4 AC209FE5 		ldr	r2, .L2+104
 1876 00c8 A220A0E1 		mov	r2, r2, lsr #1
 1877 00cc 012282E3 		orr	r2, r2, #268435456
 1878 00d0 002083E5 		str	r2, [r3, #0]
  47:../lcd.c      **** 
  48:../lcd.c      ****     //End of lcd_buffer
  49:../lcd.c      ****     rLCDSADDR2 = (1 << 29) | (((uint32)lcd_buffer + LCD_BUFFER_SIZE) & 0x3FFFFF) >> 1;
 1879              		.loc 1 49 0
 1880 00d4 A0209FE5 		ldr	r2, .L2+108
 1881 00d8 98309FE5 		ldr	r3, .L2+104
 1882 00dc 963C83E2 		add	r3, r3, #38400
 1883 00e0 FF34C3E3 		bic	r3, r3, #-16777216
 1884 00e4 0335C3E3 		bic	r3, r3, #12582912
 1885 00e8 A330A0E1 		mov	r3, r3, lsr #1
 1886 00ec 023283E3 		orr	r3, r3, #536870912
 1887 00f0 003082E5 		str	r3, [r2, #0]
  50:../lcd.c      **** 
  51:../lcd.c      ****     //No virtual screen
  52:../lcd.c      ****     //LCDSADDR3[19:9] = 0 OFFSIZE = 0
  53:../lcd.c      ****     //LCDSADDR3[8:0] = 80 PAGEWIDTH = HOZVAL + 1 = 320 / 4
  54:../lcd.c      ****     rLCDSADDR3 = 0x50;
 1888              		.loc 1 54 0
 1889 00f4 84309FE5 		ldr	r3, .L2+112
 1890 00f8 5020A0E3 		mov	r2, #80
 1891 00fc 002083E5 		str	r2, [r3, #0]
  55:../lcd.c      **** 
  56:../lcd.c      ****     lcd_off();
 1892              		.loc 1 56 0
 1893 0100 FEFFFFEB 		bl	lcd_off
  57:../lcd.c      **** }
 1894              		.loc 1 57 0
 1895 0104 0CD04BE2 		sub	sp, fp, #12
 1896 0108 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1897 010c 1EFF2FE1 		bx	lr
 1898              	.L3:
 1899              		.align	2
 1900              	.L2:
 1901 0110 4400F001 		.word	32505924
 1902 0114 10220100 		.word	74256
 1903 0118 2000F001 		.word	32505888
 1904 011c A5A50000 		.word	42405
 1905 0120 2400F001 		.word	32505892
 1906 0124 65DAA50B 		.word	195418725
 1907 0128 2800F001 		.word	32505896
 1908 012c 5F5A0A00 		.word	678495
 1909 0130 2C00F001 		.word	32505900
 1910 0134 6B0D0000 		.word	3435
 1911 0138 3000F001 		.word	32505904
 1912 013c EDB5B70E 		.word	246920685
 1913 0140 3400F001 		.word	32505908
 1914 0144 BE7D0000 		.word	32190
 1915 0148 3800F001 		.word	32505912
 1916 014c DFEB0700 		.word	519135
 1917 0150 3C00F001 		.word	32505916
 1918 0154 FEFBFD07 		.word	134085630
 1919 0158 1400F001 		.word	32505876
 1920 015c 1800F001 		.word	32505880
 1921 0160 1C00F001 		.word	32505884
 1922 0164 20C00100 		.word	114720
 1923 0168 0400F001 		.word	32505860
 1924 016c EF3C0100 		.word	81135
 1925 0170 4000F001 		.word	32505920
 1926 0174 0800F001 		.word	32505864
 1927 0178 00000000 		.word	lcd_buffer
 1928 017c 0C00F001 		.word	32505868
 1929 0180 1000F001 		.word	32505872
 1930              		.cfi_endproc
 1931              	.LFE0:
 1933              		.align	2
 1934              		.global	lcd_on
 1936              	lcd_on:
 1937              	.LFB1:
  58:../lcd.c      **** 
  59:../lcd.c      **** void lcd_on( void )
  60:../lcd.c      **** {
 1938              		.loc 1 60 0
 1939              		.cfi_startproc
 1940              		@ Function supports interworking.
 1941              		@ args = 0, pretend = 0, frame = 0
 1942              		@ frame_needed = 1, uses_anonymous_args = 0
 1943 0184 0DC0A0E1 		mov	ip, sp
 1944              	.LCFI2:
 1945              		.cfi_def_cfa_register 12
 1946 0188 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1947 018c 04B04CE2 		sub	fp, ip, #4
 1948              		.cfi_offset 14, -8
 1949              		.cfi_offset 13, -12
 1950              		.cfi_offset 11, -16
 1951              	.LCFI3:
 1952              		.cfi_def_cfa 11, 4
  61:../lcd.c      ****     rLCDCON1 |= 1;
 1953              		.loc 1 61 0
 1954 0190 1F36A0E3 		mov	r3, #32505856
 1955 0194 1F26A0E3 		mov	r2, #32505856
 1956 0198 002092E5 		ldr	r2, [r2, #0]
 1957 019c 012082E3 		orr	r2, r2, #1
 1958 01a0 002083E5 		str	r2, [r3, #0]
  62:../lcd.c      **** 	state = 1;
 1959              		.loc 1 62 0
 1960 01a4 10309FE5 		ldr	r3, .L5
 1961 01a8 0120A0E3 		mov	r2, #1
 1962 01ac 0020C3E5 		strb	r2, [r3, #0]
  63:../lcd.c      **** }
 1963              		.loc 1 63 0
 1964 01b0 0CD04BE2 		sub	sp, fp, #12
 1965 01b4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1966 01b8 1EFF2FE1 		bx	lr
 1967              	.L6:
 1968              		.align	2
 1969              	.L5:
 1970 01bc 00960000 		.word	state
 1971              		.cfi_endproc
 1972              	.LFE1:
 1974              		.align	2
 1975              		.global	lcd_off
 1977              	lcd_off:
 1978              	.LFB2:
  64:../lcd.c      **** 
  65:../lcd.c      **** void lcd_off( void )
  66:../lcd.c      **** {
 1979              		.loc 1 66 0
 1980              		.cfi_startproc
 1981              		@ Function supports interworking.
 1982              		@ args = 0, pretend = 0, frame = 0
 1983              		@ frame_needed = 1, uses_anonymous_args = 0
 1984 01c0 0DC0A0E1 		mov	ip, sp
 1985              	.LCFI4:
 1986              		.cfi_def_cfa_register 12
 1987 01c4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1988 01c8 04B04CE2 		sub	fp, ip, #4
 1989              		.cfi_offset 14, -8
 1990              		.cfi_offset 13, -12
 1991              		.cfi_offset 11, -16
 1992              	.LCFI5:
 1993              		.cfi_def_cfa 11, 4
  67:../lcd.c      ****     rLCDCON1 &= ~1;
 1994              		.loc 1 67 0
 1995 01cc 1F36A0E3 		mov	r3, #32505856
 1996 01d0 1F26A0E3 		mov	r2, #32505856
 1997 01d4 002092E5 		ldr	r2, [r2, #0]
 1998 01d8 0120C2E3 		bic	r2, r2, #1
 1999 01dc 002083E5 		str	r2, [r3, #0]
  68:../lcd.c      **** 	state = 0;
 2000              		.loc 1 68 0
 2001 01e0 10309FE5 		ldr	r3, .L8
 2002 01e4 0020A0E3 		mov	r2, #0
 2003 01e8 0020C3E5 		strb	r2, [r3, #0]
  69:../lcd.c      **** }
 2004              		.loc 1 69 0
 2005 01ec 0CD04BE2 		sub	sp, fp, #12
 2006 01f0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2007 01f4 1EFF2FE1 		bx	lr
 2008              	.L9:
 2009              		.align	2
 2010              	.L8:
 2011 01f8 00960000 		.word	state
 2012              		.cfi_endproc
 2013              	.LFE2:
 2015              		.align	2
 2016              		.global	lcd_status
 2018              	lcd_status:
 2019              	.LFB3:
  70:../lcd.c      **** 
  71:../lcd.c      **** uint8 lcd_status( void )
  72:../lcd.c      **** {
 2020              		.loc 1 72 0
 2021              		.cfi_startproc
 2022              		@ Function supports interworking.
 2023              		@ args = 0, pretend = 0, frame = 0
 2024              		@ frame_needed = 1, uses_anonymous_args = 0
 2025 01fc 0DC0A0E1 		mov	ip, sp
 2026              	.LCFI6:
 2027              		.cfi_def_cfa_register 12
 2028 0200 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2029 0204 04B04CE2 		sub	fp, ip, #4
 2030              		.cfi_offset 14, -8
 2031              		.cfi_offset 13, -12
 2032              		.cfi_offset 11, -16
 2033              	.LCFI7:
 2034              		.cfi_def_cfa 11, 4
  73:../lcd.c      **** 	return state;
 2035              		.loc 1 73 0
 2036 0208 10309FE5 		ldr	r3, .L11
 2037 020c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  74:../lcd.c      **** }
 2038              		.loc 1 74 0
 2039 0210 0300A0E1 		mov	r0, r3
 2040 0214 0CD04BE2 		sub	sp, fp, #12
 2041 0218 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2042 021c 1EFF2FE1 		bx	lr
 2043              	.L12:
 2044              		.align	2
 2045              	.L11:
 2046 0220 00960000 		.word	state
 2047              		.cfi_endproc
 2048              	.LFE3:
 2050              		.align	2
 2051              		.global	lcd_clear
 2053              	lcd_clear:
 2054              	.LFB4:
  75:../lcd.c      **** 
  76:../lcd.c      **** void lcd_clear( void )
  77:../lcd.c      **** {
 2055              		.loc 1 77 0
 2056              		.cfi_startproc
 2057              		@ Function supports interworking.
 2058              		@ args = 0, pretend = 0, frame = 8
 2059              		@ frame_needed = 1, uses_anonymous_args = 0
 2060 0224 0DC0A0E1 		mov	ip, sp
 2061              	.LCFI8:
 2062              		.cfi_def_cfa_register 12
 2063 0228 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2064 022c 04B04CE2 		sub	fp, ip, #4
 2065              		.cfi_offset 14, -8
 2066              		.cfi_offset 13, -12
 2067              		.cfi_offset 11, -16
 2068              	.LCFI9:
 2069              		.cfi_def_cfa 11, 4
 2070 0230 08D04DE2 		sub	sp, sp, #8
  78:../lcd.c      **** 	uint16 i = 0;
 2071              		.loc 1 78 0
 2072 0234 0030A0E3 		mov	r3, #0
 2073 0238 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
  79:../lcd.c      ****     while(i < LCD_BUFFER_SIZE) {
 2074              		.loc 1 79 0
 2075 023c 060000EA 		b	.L14
 2076              	.L15:
  80:../lcd.c      ****     	lcd_buffer[i] = 0x0;
 2077              		.loc 1 80 0
 2078 0240 BE305BE1 		ldrh	r3, [fp, #-14]
 2079 0244 2C209FE5 		ldr	r2, .L16
 2080 0248 0010A0E3 		mov	r1, #0
 2081 024c 0310C2E7 		strb	r1, [r2, r3]
  81:../lcd.c      ****     	i++;
 2082              		.loc 1 81 0
 2083 0250 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2084 0254 013083E2 		add	r3, r3, #1
 2085 0258 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 2086              	.L14:
  79:../lcd.c      ****     while(i < LCD_BUFFER_SIZE) {
 2087              		.loc 1 79 0 discriminator 1
 2088 025c BE205BE1 		ldrh	r2, [fp, #-14]
 2089 0260 14309FE5 		ldr	r3, .L16+4
 2090 0264 030052E1 		cmp	r2, r3
 2091 0268 F4FFFF9A 		bls	.L15
  82:../lcd.c      ****     }
  83:../lcd.c      **** }
 2092              		.loc 1 83 0
 2093 026c 0CD04BE2 		sub	sp, fp, #12
 2094 0270 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2095 0274 1EFF2FE1 		bx	lr
 2096              	.L17:
 2097              		.align	2
 2098              	.L16:
 2099 0278 00000000 		.word	lcd_buffer
 2100 027c FF950000 		.word	38399
 2101              		.cfi_endproc
 2102              	.LFE4:
 2104              		.align	2
 2105              		.global	lcd_clear_color
 2107              	lcd_clear_color:
 2108              	.LFB5:
  84:../lcd.c      **** 
  85:../lcd.c      **** void lcd_clear_color( uint8 color )
  86:../lcd.c      **** {
 2109              		.loc 1 86 0
 2110              		.cfi_startproc
 2111              		@ Function supports interworking.
 2112              		@ args = 0, pretend = 0, frame = 16
 2113              		@ frame_needed = 1, uses_anonymous_args = 0
 2114 0280 0DC0A0E1 		mov	ip, sp
 2115              	.LCFI10:
 2116              		.cfi_def_cfa_register 12
 2117 0284 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2118 0288 04B04CE2 		sub	fp, ip, #4
 2119              		.cfi_offset 14, -8
 2120              		.cfi_offset 13, -12
 2121              		.cfi_offset 11, -16
 2122              	.LCFI11:
 2123              		.cfi_def_cfa 11, 4
 2124 028c 10D04DE2 		sub	sp, sp, #16
 2125 0290 0030A0E1 		mov	r3, r0
 2126 0294 15304BE5 		strb	r3, [fp, #-21]
  87:../lcd.c      **** 	uint16 i = 0;
 2127              		.loc 1 87 0
 2128 0298 0030A0E3 		mov	r3, #0
 2129 029c BE304BE1 		strh	r3, [fp, #-14]	@ movhi
  88:../lcd.c      **** 	uint8 c = color & 0xf;
 2130              		.loc 1 88 0
 2131 02a0 15305BE5 		ldrb	r3, [fp, #-21]
 2132 02a4 0F3003E2 		and	r3, r3, #15
 2133 02a8 0F304BE5 		strb	r3, [fp, #-15]
  89:../lcd.c      **** 
  90:../lcd.c      ****     while(i < LCD_BUFFER_SIZE) {
 2134              		.loc 1 90 0
 2135 02ac 0C0000EA 		b	.L19
 2136              	.L20:
  91:../lcd.c      ****     	lcd_buffer[i] = (c << 4) | c;
 2137              		.loc 1 91 0
 2138 02b0 BE305BE1 		ldrh	r3, [fp, #-14]
 2139 02b4 0F205BE5 		ldrb	r2, [fp, #-15]	@ zero_extendqisi2
 2140 02b8 0222A0E1 		mov	r2, r2, asl #4
 2141 02bc FF1002E2 		and	r1, r2, #255
 2142 02c0 0F205BE5 		ldrb	r2, [fp, #-15]	@ zero_extendqisi2
 2143 02c4 022081E1 		orr	r2, r1, r2
 2144 02c8 FF2002E2 		and	r2, r2, #255
 2145 02cc FF1002E2 		and	r1, r2, #255
 2146 02d0 28209FE5 		ldr	r2, .L21
 2147 02d4 0310C2E7 		strb	r1, [r2, r3]
  92:../lcd.c      ****     	i++;
 2148              		.loc 1 92 0
 2149 02d8 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2150 02dc 013083E2 		add	r3, r3, #1
 2151 02e0 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 2152              	.L19:
  90:../lcd.c      ****     while(i < LCD_BUFFER_SIZE) {
 2153              		.loc 1 90 0 discriminator 1
 2154 02e4 BE205BE1 		ldrh	r2, [fp, #-14]
 2155 02e8 14309FE5 		ldr	r3, .L21+4
 2156 02ec 030052E1 		cmp	r2, r3
 2157 02f0 EEFFFF9A 		bls	.L20
  93:../lcd.c      ****     }
  94:../lcd.c      **** }
 2158              		.loc 1 94 0
 2159 02f4 0CD04BE2 		sub	sp, fp, #12
 2160 02f8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2161 02fc 1EFF2FE1 		bx	lr
 2162              	.L22:
 2163              		.align	2
 2164              	.L21:
 2165 0300 00000000 		.word	lcd_buffer
 2166 0304 FF950000 		.word	38399
 2167              		.cfi_endproc
 2168              	.LFE5:
 2170              		.align	2
 2171              		.global	lcd_putpixel
 2173              	lcd_putpixel:
 2174              	.LFB6:
  95:../lcd.c      **** 
  96:../lcd.c      **** 
  97:../lcd.c      **** void lcd_putpixel( uint16 x, uint16 y, uint8 c)
  98:../lcd.c      **** {
 2175              		.loc 1 98 0
 2176              		.cfi_startproc
 2177              		@ Function supports interworking.
 2178              		@ args = 0, pretend = 0, frame = 16
 2179              		@ frame_needed = 1, uses_anonymous_args = 0
 2180 0308 0DC0A0E1 		mov	ip, sp
 2181              	.LCFI12:
 2182              		.cfi_def_cfa_register 12
 2183 030c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2184 0310 04B04CE2 		sub	fp, ip, #4
 2185              		.cfi_offset 14, -8
 2186              		.cfi_offset 13, -12
 2187              		.cfi_offset 11, -16
 2188              	.LCFI13:
 2189              		.cfi_def_cfa 11, 4
 2190 0314 10D04DE2 		sub	sp, sp, #16
 2191 0318 0230A0E1 		mov	r3, r2
 2192 031c B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2193 0320 B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2194 0324 19304BE5 		strb	r3, [fp, #-25]
  99:../lcd.c      ****     uint8 byte, bit;
 100:../lcd.c      ****     uint16 i;
 101:../lcd.c      **** 
 102:../lcd.c      ****     i = x/2 + y*(LCD_WIDTH/2);
 2195              		.loc 1 102 0
 2196 0328 B6315BE1 		ldrh	r3, [fp, #-22]
 2197 032c A330A0E1 		mov	r3, r3, lsr #1
 2198 0330 0338A0E1 		mov	r3, r3, asl #16
 2199 0334 2328A0E1 		mov	r2, r3, lsr #16
 2200 0338 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2201 033c 0310A0E1 		mov	r1, r3	@ movhi
 2202 0340 0111A0E1 		mov	r1, r1, asl #2
 2203 0344 033081E0 		add	r3, r1, r3
 2204 0348 8332A0E1 		mov	r3, r3, asl #5
 2205 034c 0338A0E1 		mov	r3, r3, asl #16
 2206 0350 2338A0E1 		mov	r3, r3, lsr #16
 2207 0354 033082E0 		add	r3, r2, r3
 2208 0358 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 103:../lcd.c      ****     bit = (1-x%2)*4;
 2209              		.loc 1 103 0
 2210 035c B6315BE1 		ldrh	r3, [fp, #-22]
 2211 0360 013003E2 		and	r3, r3, #1
 2212 0364 000053E3 		cmp	r3, #0
 2213 0368 0100001A 		bne	.L24
 2214              		.loc 1 103 0 is_stmt 0 discriminator 1
 2215 036c 0430A0E3 		mov	r3, #4
 2216 0370 000000EA 		b	.L25
 2217              	.L24:
 2218              		.loc 1 103 0 discriminator 2
 2219 0374 0030A0E3 		mov	r3, #0
 2220              	.L25:
 2221              		.loc 1 103 0 discriminator 3
 2222 0378 0F304BE5 		strb	r3, [fp, #-15]
 104:../lcd.c      **** 
 105:../lcd.c      ****     byte = lcd_buffer[i];
 2223              		.loc 1 105 0 is_stmt 1 discriminator 3
 2224 037c BE305BE1 		ldrh	r3, [fp, #-14]
 2225 0380 68209FE5 		ldr	r2, .L26
 2226 0384 0330D2E7 		ldrb	r3, [r2, r3]
 2227 0388 10304BE5 		strb	r3, [fp, #-16]
 106:../lcd.c      ****     byte &= ~(0xF << bit);
 2228              		.loc 1 106 0 discriminator 3
 2229 038c 0F305BE5 		ldrb	r3, [fp, #-15]	@ zero_extendqisi2
 2230 0390 0F20A0E3 		mov	r2, #15
 2231 0394 1233A0E1 		mov	r3, r2, asl r3
 2232 0398 FF3003E2 		and	r3, r3, #255
 2233 039c 0330E0E1 		mvn	r3, r3
 2234 03a0 FF2003E2 		and	r2, r3, #255
 2235 03a4 10305BE5 		ldrb	r3, [fp, #-16]	@ zero_extendqisi2
 2236 03a8 033002E0 		and	r3, r2, r3
 2237 03ac FF3003E2 		and	r3, r3, #255
 2238 03b0 10304BE5 		strb	r3, [fp, #-16]
 107:../lcd.c      ****     byte |= c << bit;
 2239              		.loc 1 107 0 discriminator 3
 2240 03b4 19205BE5 		ldrb	r2, [fp, #-25]	@ zero_extendqisi2
 2241 03b8 0F305BE5 		ldrb	r3, [fp, #-15]	@ zero_extendqisi2
 2242 03bc 1233A0E1 		mov	r3, r2, asl r3
 2243 03c0 FF2003E2 		and	r2, r3, #255
 2244 03c4 10305BE5 		ldrb	r3, [fp, #-16]	@ zero_extendqisi2
 2245 03c8 033082E1 		orr	r3, r2, r3
 2246 03cc FF3003E2 		and	r3, r3, #255
 2247 03d0 10304BE5 		strb	r3, [fp, #-16]
 108:../lcd.c      ****     lcd_buffer[i] = byte;
 2248              		.loc 1 108 0 discriminator 3
 2249 03d4 BE305BE1 		ldrh	r3, [fp, #-14]
 2250 03d8 10209FE5 		ldr	r2, .L26
 2251 03dc 10105BE5 		ldrb	r1, [fp, #-16]
 2252 03e0 0310C2E7 		strb	r1, [r2, r3]
 109:../lcd.c      **** }
 2253              		.loc 1 109 0 discriminator 3
 2254 03e4 0CD04BE2 		sub	sp, fp, #12
 2255 03e8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2256 03ec 1EFF2FE1 		bx	lr
 2257              	.L27:
 2258              		.align	2
 2259              	.L26:
 2260 03f0 00000000 		.word	lcd_buffer
 2261              		.cfi_endproc
 2262              	.LFE6:
 2264              		.align	2
 2265              		.global	lcd_getpixel
 2267              	lcd_getpixel:
 2268              	.LFB7:
 110:../lcd.c      **** 
 111:../lcd.c      **** uint8 lcd_getpixel( uint16 x, uint16 y )
 112:../lcd.c      **** {
 2269              		.loc 1 112 0
 2270              		.cfi_startproc
 2271              		@ Function supports interworking.
 2272              		@ args = 0, pretend = 0, frame = 16
 2273              		@ frame_needed = 1, uses_anonymous_args = 0
 2274 03f4 0DC0A0E1 		mov	ip, sp
 2275              	.LCFI14:
 2276              		.cfi_def_cfa_register 12
 2277 03f8 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2278 03fc 04B04CE2 		sub	fp, ip, #4
 2279              		.cfi_offset 14, -8
 2280              		.cfi_offset 13, -12
 2281              		.cfi_offset 11, -16
 2282              	.LCFI15:
 2283              		.cfi_def_cfa 11, 4
 2284 0400 10D04DE2 		sub	sp, sp, #16
 2285 0404 0020A0E1 		mov	r2, r0
 2286 0408 0130A0E1 		mov	r3, r1
 2287 040c B6214BE1 		strh	r2, [fp, #-22]	@ movhi
 2288 0410 B8314BE1 		strh	r3, [fp, #-24]	@ movhi
 113:../lcd.c      **** 	uint8 byte, bit;
 114:../lcd.c      **** 	uint16 i = x/2 + y*(LCD_WIDTH/2);
 2289              		.loc 1 114 0
 2290 0414 B6315BE1 		ldrh	r3, [fp, #-22]
 2291 0418 A330A0E1 		mov	r3, r3, lsr #1
 2292 041c 0338A0E1 		mov	r3, r3, asl #16
 2293 0420 2328A0E1 		mov	r2, r3, lsr #16
 2294 0424 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2295 0428 0310A0E1 		mov	r1, r3	@ movhi
 2296 042c 0111A0E1 		mov	r1, r1, asl #2
 2297 0430 033081E0 		add	r3, r1, r3
 2298 0434 8332A0E1 		mov	r3, r3, asl #5
 2299 0438 0338A0E1 		mov	r3, r3, asl #16
 2300 043c 2338A0E1 		mov	r3, r3, lsr #16
 2301 0440 033082E0 		add	r3, r2, r3
 2302 0444 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 115:../lcd.c      **** 
 116:../lcd.c      **** 	bit = (1-x%2)*4;
 2303              		.loc 1 116 0
 2304 0448 B6315BE1 		ldrh	r3, [fp, #-22]
 2305 044c 013003E2 		and	r3, r3, #1
 2306 0450 000053E3 		cmp	r3, #0
 2307 0454 0100001A 		bne	.L29
 2308              		.loc 1 116 0 is_stmt 0 discriminator 1
 2309 0458 0430A0E3 		mov	r3, #4
 2310 045c 000000EA 		b	.L30
 2311              	.L29:
 2312              		.loc 1 116 0 discriminator 2
 2313 0460 0030A0E3 		mov	r3, #0
 2314              	.L30:
 2315              		.loc 1 116 0 discriminator 3
 2316 0464 0F304BE5 		strb	r3, [fp, #-15]
 117:../lcd.c      **** 	byte = lcd_buffer[i];
 2317              		.loc 1 117 0 is_stmt 1 discriminator 3
 2318 0468 BE305BE1 		ldrh	r3, [fp, #-14]
 2319 046c 2C209FE5 		ldr	r2, .L31
 2320 0470 0330D2E7 		ldrb	r3, [r2, r3]
 2321 0474 10304BE5 		strb	r3, [fp, #-16]
 118:../lcd.c      **** 
 119:../lcd.c      **** 	return (byte >> bit ) & 0xf;
 2322              		.loc 1 119 0 discriminator 3
 2323 0478 10205BE5 		ldrb	r2, [fp, #-16]	@ zero_extendqisi2
 2324 047c 0F305BE5 		ldrb	r3, [fp, #-15]	@ zero_extendqisi2
 2325 0480 5233A0E1 		mov	r3, r2, asr r3
 2326 0484 FF3003E2 		and	r3, r3, #255
 2327 0488 0F3003E2 		and	r3, r3, #15
 2328 048c FF3003E2 		and	r3, r3, #255
 120:../lcd.c      **** }
 2329              		.loc 1 120 0 discriminator 3
 2330 0490 0300A0E1 		mov	r0, r3
 2331 0494 0CD04BE2 		sub	sp, fp, #12
 2332 0498 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2333 049c 1EFF2FE1 		bx	lr
 2334              	.L32:
 2335              		.align	2
 2336              	.L31:
 2337 04a0 00000000 		.word	lcd_buffer
 2338              		.cfi_endproc
 2339              	.LFE7:
 2341              		.align	2
 2342              		.global	lcd_draw_hline
 2344              	lcd_draw_hline:
 2345              	.LFB8:
 121:../lcd.c      **** 
 122:../lcd.c      **** void lcd_draw_hline( uint16 xleft, uint16 xright, uint16 y, uint8 color, uint16 width )
 123:../lcd.c      **** {
 2346              		.loc 1 123 0
 2347              		.cfi_startproc
 2348              		@ Function supports interworking.
 2349              		@ args = 4, pretend = 0, frame = 16
 2350              		@ frame_needed = 1, uses_anonymous_args = 0
 2351 04a4 0DC0A0E1 		mov	ip, sp
 2352              	.LCFI16:
 2353              		.cfi_def_cfa_register 12
 2354 04a8 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2355 04ac 04B04CE2 		sub	fp, ip, #4
 2356              		.cfi_offset 14, -8
 2357              		.cfi_offset 13, -12
 2358              		.cfi_offset 11, -16
 2359              	.LCFI17:
 2360              		.cfi_def_cfa 11, 4
 2361 04b0 10D04DE2 		sub	sp, sp, #16
 2362 04b4 B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2363 04b8 B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2364 04bc BA214BE1 		strh	r2, [fp, #-26]	@ movhi
 2365 04c0 1B304BE5 		strb	r3, [fp, #-27]
 124:../lcd.c      **** 	int x_i, y_i;
 125:../lcd.c      **** 	for(x_i = xleft; x_i <= xright; ++x_i)
 2366              		.loc 1 125 0
 2367 04c4 B6315BE1 		ldrh	r3, [fp, #-22]
 2368 04c8 10300BE5 		str	r3, [fp, #-16]
 2369 04cc 190000EA 		b	.L34
 2370              	.L37:
 126:../lcd.c      **** 		for(y_i = y; y_i < y + width; ++y_i)
 2371              		.loc 1 126 0
 2372 04d0 BA315BE1 		ldrh	r3, [fp, #-26]
 2373 04d4 14300BE5 		str	r3, [fp, #-20]
 2374 04d8 0D0000EA 		b	.L35
 2375              	.L36:
 127:../lcd.c      **** 			lcd_putpixel(x_i, y_i, color);
 2376              		.loc 1 127 0 discriminator 2
 2377 04dc 10301BE5 		ldr	r3, [fp, #-16]
 2378 04e0 0338A0E1 		mov	r3, r3, asl #16
 2379 04e4 2318A0E1 		mov	r1, r3, lsr #16
 2380 04e8 14301BE5 		ldr	r3, [fp, #-20]
 2381 04ec 0338A0E1 		mov	r3, r3, asl #16
 2382 04f0 2328A0E1 		mov	r2, r3, lsr #16
 2383 04f4 1B305BE5 		ldrb	r3, [fp, #-27]	@ zero_extendqisi2
 2384 04f8 0100A0E1 		mov	r0, r1
 2385 04fc 0210A0E1 		mov	r1, r2
 2386 0500 0320A0E1 		mov	r2, r3
 2387 0504 FEFFFFEB 		bl	lcd_putpixel
 126:../lcd.c      **** 		for(y_i = y; y_i < y + width; ++y_i)
 2388              		.loc 1 126 0 discriminator 2
 2389 0508 14301BE5 		ldr	r3, [fp, #-20]
 2390 050c 013083E2 		add	r3, r3, #1
 2391 0510 14300BE5 		str	r3, [fp, #-20]
 2392              	.L35:
 126:../lcd.c      **** 		for(y_i = y; y_i < y + width; ++y_i)
 2393              		.loc 1 126 0 is_stmt 0 discriminator 1
 2394 0514 BA215BE1 		ldrh	r2, [fp, #-26]
 2395 0518 B430DBE1 		ldrh	r3, [fp, #4]
 2396 051c 032082E0 		add	r2, r2, r3
 2397 0520 14301BE5 		ldr	r3, [fp, #-20]
 2398 0524 030052E1 		cmp	r2, r3
 2399 0528 EBFFFFCA 		bgt	.L36
 125:../lcd.c      **** 	for(x_i = xleft; x_i <= xright; ++x_i)
 2400              		.loc 1 125 0 is_stmt 1
 2401 052c 10301BE5 		ldr	r3, [fp, #-16]
 2402 0530 013083E2 		add	r3, r3, #1
 2403 0534 10300BE5 		str	r3, [fp, #-16]
 2404              	.L34:
 125:../lcd.c      **** 	for(x_i = xleft; x_i <= xright; ++x_i)
 2405              		.loc 1 125 0 is_stmt 0 discriminator 1
 2406 0538 B8215BE1 		ldrh	r2, [fp, #-24]
 2407 053c 10301BE5 		ldr	r3, [fp, #-16]
 2408 0540 030052E1 		cmp	r2, r3
 2409 0544 E1FFFFAA 		bge	.L37
 128:../lcd.c      **** }
 2410              		.loc 1 128 0 is_stmt 1
 2411 0548 0CD04BE2 		sub	sp, fp, #12
 2412 054c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2413 0550 1EFF2FE1 		bx	lr
 2414              		.cfi_endproc
 2415              	.LFE8:
 2417              		.align	2
 2418              		.global	lcd_draw_vline
 2420              	lcd_draw_vline:
 2421              	.LFB9:
 129:../lcd.c      **** 
 130:../lcd.c      **** void lcd_draw_vline( uint16 yup, uint16 ydown, uint16 x, uint8 color, uint16 width )
 131:../lcd.c      **** {
 2422              		.loc 1 131 0
 2423              		.cfi_startproc
 2424              		@ Function supports interworking.
 2425              		@ args = 4, pretend = 0, frame = 16
 2426              		@ frame_needed = 1, uses_anonymous_args = 0
 2427 0554 0DC0A0E1 		mov	ip, sp
 2428              	.LCFI18:
 2429              		.cfi_def_cfa_register 12
 2430 0558 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2431 055c 04B04CE2 		sub	fp, ip, #4
 2432              		.cfi_offset 14, -8
 2433              		.cfi_offset 13, -12
 2434              		.cfi_offset 11, -16
 2435              	.LCFI19:
 2436              		.cfi_def_cfa 11, 4
 2437 0560 10D04DE2 		sub	sp, sp, #16
 2438 0564 B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2439 0568 B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2440 056c BA214BE1 		strh	r2, [fp, #-26]	@ movhi
 2441 0570 1B304BE5 		strb	r3, [fp, #-27]
 132:../lcd.c      **** 	int x_i, y_i;
 133:../lcd.c      **** 	for(y_i = yup; y_i <= ydown; ++y_i)
 2442              		.loc 1 133 0
 2443 0574 B6315BE1 		ldrh	r3, [fp, #-22]
 2444 0578 14300BE5 		str	r3, [fp, #-20]
 2445 057c 190000EA 		b	.L39
 2446              	.L42:
 134:../lcd.c      **** 		for(x_i = x; x_i < x + width; ++x_i)
 2447              		.loc 1 134 0
 2448 0580 BA315BE1 		ldrh	r3, [fp, #-26]
 2449 0584 10300BE5 		str	r3, [fp, #-16]
 2450 0588 0D0000EA 		b	.L40
 2451              	.L41:
 135:../lcd.c      **** 			lcd_putpixel(x_i, y_i, color);
 2452              		.loc 1 135 0 discriminator 2
 2453 058c 10301BE5 		ldr	r3, [fp, #-16]
 2454 0590 0338A0E1 		mov	r3, r3, asl #16
 2455 0594 2318A0E1 		mov	r1, r3, lsr #16
 2456 0598 14301BE5 		ldr	r3, [fp, #-20]
 2457 059c 0338A0E1 		mov	r3, r3, asl #16
 2458 05a0 2328A0E1 		mov	r2, r3, lsr #16
 2459 05a4 1B305BE5 		ldrb	r3, [fp, #-27]	@ zero_extendqisi2
 2460 05a8 0100A0E1 		mov	r0, r1
 2461 05ac 0210A0E1 		mov	r1, r2
 2462 05b0 0320A0E1 		mov	r2, r3
 2463 05b4 FEFFFFEB 		bl	lcd_putpixel
 134:../lcd.c      **** 		for(x_i = x; x_i < x + width; ++x_i)
 2464              		.loc 1 134 0 discriminator 2
 2465 05b8 10301BE5 		ldr	r3, [fp, #-16]
 2466 05bc 013083E2 		add	r3, r3, #1
 2467 05c0 10300BE5 		str	r3, [fp, #-16]
 2468              	.L40:
 134:../lcd.c      **** 		for(x_i = x; x_i < x + width; ++x_i)
 2469              		.loc 1 134 0 is_stmt 0 discriminator 1
 2470 05c4 BA215BE1 		ldrh	r2, [fp, #-26]
 2471 05c8 B430DBE1 		ldrh	r3, [fp, #4]
 2472 05cc 032082E0 		add	r2, r2, r3
 2473 05d0 10301BE5 		ldr	r3, [fp, #-16]
 2474 05d4 030052E1 		cmp	r2, r3
 2475 05d8 EBFFFFCA 		bgt	.L41
 133:../lcd.c      **** 	for(y_i = yup; y_i <= ydown; ++y_i)
 2476              		.loc 1 133 0 is_stmt 1
 2477 05dc 14301BE5 		ldr	r3, [fp, #-20]
 2478 05e0 013083E2 		add	r3, r3, #1
 2479 05e4 14300BE5 		str	r3, [fp, #-20]
 2480              	.L39:
 133:../lcd.c      **** 	for(y_i = yup; y_i <= ydown; ++y_i)
 2481              		.loc 1 133 0 is_stmt 0 discriminator 1
 2482 05e8 B8215BE1 		ldrh	r2, [fp, #-24]
 2483 05ec 14301BE5 		ldr	r3, [fp, #-20]
 2484 05f0 030052E1 		cmp	r2, r3
 2485 05f4 E1FFFFAA 		bge	.L42
 136:../lcd.c      **** }
 2486              		.loc 1 136 0 is_stmt 1
 2487 05f8 0CD04BE2 		sub	sp, fp, #12
 2488 05fc 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2489 0600 1EFF2FE1 		bx	lr
 2490              		.cfi_endproc
 2491              	.LFE9:
 2493              		.align	2
 2494              		.global	lcd_draw_box
 2496              	lcd_draw_box:
 2497              	.LFB10:
 137:../lcd.c      **** 
 138:../lcd.c      **** void lcd_draw_box( uint16 xleft, uint16 yup, uint16 xright, uint16 ydown, uint8 color, uint16 width
 139:../lcd.c      **** {
 2498              		.loc 1 139 0
 2499              		.cfi_startproc
 2500              		@ Function supports interworking.
 2501              		@ args = 8, pretend = 0, frame = 8
 2502              		@ frame_needed = 1, uses_anonymous_args = 0
 2503 0604 0DC0A0E1 		mov	ip, sp
 2504              	.LCFI20:
 2505              		.cfi_def_cfa_register 12
 2506 0608 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2507 060c 04B04CE2 		sub	fp, ip, #4
 2508              		.cfi_offset 14, -8
 2509              		.cfi_offset 13, -12
 2510              		.cfi_offset 11, -16
 2511              	.LCFI21:
 2512              		.cfi_def_cfa 11, 4
 2513 0610 10D04DE2 		sub	sp, sp, #16
 2514 0614 BE004BE1 		strh	r0, [fp, #-14]	@ movhi
 2515 0618 B0114BE1 		strh	r1, [fp, #-16]	@ movhi
 2516 061c B2214BE1 		strh	r2, [fp, #-18]	@ movhi
 2517 0620 B4314BE1 		strh	r3, [fp, #-20]	@ movhi
 140:../lcd.c      **** 	lcd_draw_hline(xleft, xright, yup, color, width);
 2518              		.loc 1 140 0
 2519 0624 BE005BE1 		ldrh	r0, [fp, #-14]
 2520 0628 B2115BE1 		ldrh	r1, [fp, #-18]
 2521 062c B0215BE1 		ldrh	r2, [fp, #-16]
 2522 0630 0430DBE5 		ldrb	r3, [fp, #4]	@ zero_extendqisi2
 2523 0634 B8C0DBE1 		ldrh	ip, [fp, #8]
 2524 0638 00C08DE5 		str	ip, [sp, #0]
 2525 063c FEFFFFEB 		bl	lcd_draw_hline
 141:../lcd.c      **** 	lcd_draw_vline(yup, ydown, xleft, color, width);
 2526              		.loc 1 141 0
 2527 0640 B0015BE1 		ldrh	r0, [fp, #-16]
 2528 0644 B4115BE1 		ldrh	r1, [fp, #-20]
 2529 0648 BE205BE1 		ldrh	r2, [fp, #-14]
 2530 064c 0430DBE5 		ldrb	r3, [fp, #4]	@ zero_extendqisi2
 2531 0650 B8C0DBE1 		ldrh	ip, [fp, #8]
 2532 0654 00C08DE5 		str	ip, [sp, #0]
 2533 0658 FEFFFFEB 		bl	lcd_draw_vline
 142:../lcd.c      **** 	lcd_draw_vline(yup, ydown, xright - width + 1, color, width);
 2534              		.loc 1 142 0
 2535 065c B2215BE1 		ldrh	r2, [fp, #-18]	@ movhi
 2536 0660 B830DBE1 		ldrh	r3, [fp, #8]	@ movhi
 2537 0664 023063E0 		rsb	r3, r3, r2
 2538 0668 0338A0E1 		mov	r3, r3, asl #16
 2539 066c 2338A0E1 		mov	r3, r3, lsr #16
 2540 0670 013083E2 		add	r3, r3, #1
 2541 0674 0338A0E1 		mov	r3, r3, asl #16
 2542 0678 2328A0E1 		mov	r2, r3, lsr #16
 2543 067c B0015BE1 		ldrh	r0, [fp, #-16]
 2544 0680 B4115BE1 		ldrh	r1, [fp, #-20]
 2545 0684 0430DBE5 		ldrb	r3, [fp, #4]	@ zero_extendqisi2
 2546 0688 B8C0DBE1 		ldrh	ip, [fp, #8]
 2547 068c 00C08DE5 		str	ip, [sp, #0]
 2548 0690 FEFFFFEB 		bl	lcd_draw_vline
 143:../lcd.c      **** 	lcd_draw_hline(xleft, xright, ydown - width + 1, color, width);
 2549              		.loc 1 143 0
 2550 0694 B4215BE1 		ldrh	r2, [fp, #-20]	@ movhi
 2551 0698 B830DBE1 		ldrh	r3, [fp, #8]	@ movhi
 2552 069c 023063E0 		rsb	r3, r3, r2
 2553 06a0 0338A0E1 		mov	r3, r3, asl #16
 2554 06a4 2338A0E1 		mov	r3, r3, lsr #16
 2555 06a8 013083E2 		add	r3, r3, #1
 2556 06ac 0338A0E1 		mov	r3, r3, asl #16
 2557 06b0 2328A0E1 		mov	r2, r3, lsr #16
 2558 06b4 BE005BE1 		ldrh	r0, [fp, #-14]
 2559 06b8 B2115BE1 		ldrh	r1, [fp, #-18]
 2560 06bc 0430DBE5 		ldrb	r3, [fp, #4]	@ zero_extendqisi2
 2561 06c0 B8C0DBE1 		ldrh	ip, [fp, #8]
 2562 06c4 00C08DE5 		str	ip, [sp, #0]
 2563 06c8 FEFFFFEB 		bl	lcd_draw_hline
 144:../lcd.c      **** }
 2564              		.loc 1 144 0
 2565 06cc 0CD04BE2 		sub	sp, fp, #12
 2566 06d0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2567 06d4 1EFF2FE1 		bx	lr
 2568              		.cfi_endproc
 2569              	.LFE10:
 2571              		.align	2
 2572              		.global	lcd_putchar
 2574              	lcd_putchar:
 2575              	.LFB11:
 145:../lcd.c      **** 
 146:../lcd.c      **** void lcd_putchar( uint16 x, uint16 y, uint8 color, char ch )
 147:../lcd.c      **** {
 2576              		.loc 1 147 0
 2577              		.cfi_startproc
 2578              		@ Function supports interworking.
 2579              		@ args = 0, pretend = 0, frame = 16
 2580              		@ frame_needed = 1, uses_anonymous_args = 0
 2581 06d8 0DC0A0E1 		mov	ip, sp
 2582              	.LCFI22:
 2583              		.cfi_def_cfa_register 12
 2584 06dc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2585 06e0 04B04CE2 		sub	fp, ip, #4
 2586              		.cfi_offset 14, -8
 2587              		.cfi_offset 13, -12
 2588              		.cfi_offset 11, -16
 2589              	.LCFI23:
 2590              		.cfi_def_cfa 11, 4
 2591 06e4 10D04DE2 		sub	sp, sp, #16
 2592 06e8 B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2593 06ec B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2594 06f0 19204BE5 		strb	r2, [fp, #-25]
 2595 06f4 1A304BE5 		strb	r3, [fp, #-26]
 148:../lcd.c      ****     uint8 line, row;
 149:../lcd.c      ****     uint8 *bitmap;
 150:../lcd.c      **** 
 151:../lcd.c      ****     bitmap = font + ch*16;
 2596              		.loc 1 151 0
 2597 06f8 1A305BE5 		ldrb	r3, [fp, #-26]	@ zero_extendqisi2
 2598 06fc 0332A0E1 		mov	r3, r3, asl #4
 2599 0700 0320A0E1 		mov	r2, r3
 2600 0704 1C319FE5 		ldr	r3, .L51
 2601 0708 033082E0 		add	r3, r2, r3
 2602 070c 14300BE5 		str	r3, [fp, #-20]
 152:../lcd.c      ****     for( line=0; line<16; line++ )
 2603              		.loc 1 152 0
 2604 0710 0030A0E3 		mov	r3, #0
 2605 0714 0D304BE5 		strb	r3, [fp, #-13]
 2606 0718 3C0000EA 		b	.L45
 2607              	.L50:
 153:../lcd.c      ****         for( row=0; row<8; row++ )
 2608              		.loc 1 153 0
 2609 071c 0030A0E3 		mov	r3, #0
 2610 0720 0E304BE5 		strb	r3, [fp, #-14]
 2611 0724 330000EA 		b	.L46
 2612              	.L49:
 154:../lcd.c      ****             if( bitmap[line] & (0x80 >> row) )
 2613              		.loc 1 154 0
 2614 0728 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2615 072c 14201BE5 		ldr	r2, [fp, #-20]
 2616 0730 033082E0 		add	r3, r2, r3
 2617 0734 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2618 0738 0320A0E1 		mov	r2, r3
 2619 073c 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2620 0740 8010A0E3 		mov	r1, #128
 2621 0744 5133A0E1 		mov	r3, r1, asr r3
 2622 0748 033002E0 		and	r3, r2, r3
 2623 074c 000053E3 		cmp	r3, #0
 2624 0750 1300000A 		beq	.L47
 155:../lcd.c      ****                 lcd_putpixel( x+row, y+line, color );
 2625              		.loc 1 155 0
 2626 0754 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2627 0758 0338A0E1 		mov	r3, r3, asl #16
 2628 075c 2328A0E1 		mov	r2, r3, lsr #16
 2629 0760 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2630 0764 033082E0 		add	r3, r2, r3
 2631 0768 0338A0E1 		mov	r3, r3, asl #16
 2632 076c 2318A0E1 		mov	r1, r3, lsr #16
 2633 0770 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2634 0774 0338A0E1 		mov	r3, r3, asl #16
 2635 0778 2328A0E1 		mov	r2, r3, lsr #16
 2636 077c B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2637 0780 033082E0 		add	r3, r2, r3
 2638 0784 0338A0E1 		mov	r3, r3, asl #16
 2639 0788 2328A0E1 		mov	r2, r3, lsr #16
 2640 078c 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 2641 0790 0100A0E1 		mov	r0, r1
 2642 0794 0210A0E1 		mov	r1, r2
 2643 0798 0320A0E1 		mov	r2, r3
 2644 079c FEFFFFEB 		bl	lcd_putpixel
 2645 07a0 110000EA 		b	.L48
 2646              	.L47:
 156:../lcd.c      ****             else
 157:../lcd.c      ****                 lcd_putpixel( x+row, y+line, WHITE );
 2647              		.loc 1 157 0
 2648 07a4 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2649 07a8 0338A0E1 		mov	r3, r3, asl #16
 2650 07ac 2328A0E1 		mov	r2, r3, lsr #16
 2651 07b0 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2652 07b4 033082E0 		add	r3, r2, r3
 2653 07b8 0338A0E1 		mov	r3, r3, asl #16
 2654 07bc 2328A0E1 		mov	r2, r3, lsr #16
 2655 07c0 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2656 07c4 0338A0E1 		mov	r3, r3, asl #16
 2657 07c8 2318A0E1 		mov	r1, r3, lsr #16
 2658 07cc B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2659 07d0 033081E0 		add	r3, r1, r3
 2660 07d4 0338A0E1 		mov	r3, r3, asl #16
 2661 07d8 2338A0E1 		mov	r3, r3, lsr #16
 2662 07dc 0200A0E1 		mov	r0, r2
 2663 07e0 0310A0E1 		mov	r1, r3
 2664 07e4 0020A0E3 		mov	r2, #0
 2665 07e8 FEFFFFEB 		bl	lcd_putpixel
 2666              	.L48:
 153:../lcd.c      ****         for( row=0; row<8; row++ )
 2667              		.loc 1 153 0
 2668 07ec 0E305BE5 		ldrb	r3, [fp, #-14]
 2669 07f0 013083E2 		add	r3, r3, #1
 2670 07f4 0E304BE5 		strb	r3, [fp, #-14]
 2671              	.L46:
 153:../lcd.c      ****         for( row=0; row<8; row++ )
 2672              		.loc 1 153 0 is_stmt 0 discriminator 1
 2673 07f8 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2674 07fc 070053E3 		cmp	r3, #7
 2675 0800 C8FFFF9A 		bls	.L49
 152:../lcd.c      ****     for( line=0; line<16; line++ )
 2676              		.loc 1 152 0 is_stmt 1
 2677 0804 0D305BE5 		ldrb	r3, [fp, #-13]
 2678 0808 013083E2 		add	r3, r3, #1
 2679 080c 0D304BE5 		strb	r3, [fp, #-13]
 2680              	.L45:
 152:../lcd.c      ****     for( line=0; line<16; line++ )
 2681              		.loc 1 152 0 is_stmt 0 discriminator 1
 2682 0810 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2683 0814 0F0053E3 		cmp	r3, #15
 2684 0818 BFFFFF9A 		bls	.L50
 158:../lcd.c      **** }
 2685              		.loc 1 158 0 is_stmt 1
 2686 081c 0CD04BE2 		sub	sp, fp, #12
 2687 0820 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2688 0824 1EFF2FE1 		bx	lr
 2689              	.L52:
 2690              		.align	2
 2691              	.L51:
 2692 0828 00000000 		.word	font
 2693              		.cfi_endproc
 2694              	.LFE11:
 2696              		.align	2
 2697              		.global	lcd_puts
 2699              	lcd_puts:
 2700              	.LFB12:
 159:../lcd.c      **** 
 160:../lcd.c      **** void lcd_puts( uint16 x, uint16 y, uint8 color, char *s )
 161:../lcd.c      **** {
 2701              		.loc 1 161 0
 2702              		.cfi_startproc
 2703              		@ Function supports interworking.
 2704              		@ args = 0, pretend = 0, frame = 16
 2705              		@ frame_needed = 1, uses_anonymous_args = 0
 2706 082c 0DC0A0E1 		mov	ip, sp
 2707              	.LCFI24:
 2708              		.cfi_def_cfa_register 12
 2709 0830 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2710 0834 04B04CE2 		sub	fp, ip, #4
 2711              		.cfi_offset 14, -8
 2712              		.cfi_offset 13, -12
 2713              		.cfi_offset 11, -16
 2714              	.LCFI25:
 2715              		.cfi_def_cfa 11, 4
 2716 0838 10D04DE2 		sub	sp, sp, #16
 2717 083c 18300BE5 		str	r3, [fp, #-24]
 2718 0840 BE004BE1 		strh	r0, [fp, #-14]	@ movhi
 2719 0844 B0114BE1 		strh	r1, [fp, #-16]	@ movhi
 2720 0848 0230A0E1 		mov	r3, r2
 2721 084c 11304BE5 		strb	r3, [fp, #-17]
 162:../lcd.c      **** 	while(*s) {
 2722              		.loc 1 162 0
 2723 0850 150000EA 		b	.L54
 2724              	.L56:
 163:../lcd.c      **** 		lcd_putchar(x, y, color, *s);
 2725              		.loc 1 163 0
 2726 0854 18301BE5 		ldr	r3, [fp, #-24]
 2727 0858 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2728 085c BE005BE1 		ldrh	r0, [fp, #-14]
 2729 0860 B0115BE1 		ldrh	r1, [fp, #-16]
 2730 0864 11205BE5 		ldrb	r2, [fp, #-17]	@ zero_extendqisi2
 2731 0868 FEFFFFEB 		bl	lcd_putchar
 164:../lcd.c      **** 
 165:../lcd.c      **** 		x += 8;
 2732              		.loc 1 165 0
 2733 086c BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2734 0870 083083E2 		add	r3, r3, #8
 2735 0874 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 166:../lcd.c      **** 		if(x + 8 >= LCD_WIDTH) {
 2736              		.loc 1 166 0
 2737 0878 BE305BE1 		ldrh	r3, [fp, #-14]
 2738 087c 082083E2 		add	r2, r3, #8
 2739 0880 40309FE5 		ldr	r3, .L57
 2740 0884 030052E1 		cmp	r2, r3
 2741 0888 040000DA 		ble	.L55
 167:../lcd.c      **** 			x = 0;
 2742              		.loc 1 167 0
 2743 088c 0030A0E3 		mov	r3, #0
 2744 0890 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 168:../lcd.c      **** 			y += 16;
 2745              		.loc 1 168 0
 2746 0894 B0315BE1 		ldrh	r3, [fp, #-16]	@ movhi
 2747 0898 103083E2 		add	r3, r3, #16
 2748 089c B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 2749              	.L55:
 169:../lcd.c      **** 		}
 170:../lcd.c      **** 		s++;
 2750              		.loc 1 170 0
 2751 08a0 18301BE5 		ldr	r3, [fp, #-24]
 2752 08a4 013083E2 		add	r3, r3, #1
 2753 08a8 18300BE5 		str	r3, [fp, #-24]
 2754              	.L54:
 162:../lcd.c      **** 	while(*s) {
 2755              		.loc 1 162 0 discriminator 1
 2756 08ac 18301BE5 		ldr	r3, [fp, #-24]
 2757 08b0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2758 08b4 000053E3 		cmp	r3, #0
 2759 08b8 E5FFFF1A 		bne	.L56
 171:../lcd.c      **** 	}
 172:../lcd.c      **** }
 2760              		.loc 1 172 0
 2761 08bc 0CD04BE2 		sub	sp, fp, #12
 2762 08c0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2763 08c4 1EFF2FE1 		bx	lr
 2764              	.L58:
 2765              		.align	2
 2766              	.L57:
 2767 08c8 3F010000 		.word	319
 2768              		.cfi_endproc
 2769              	.LFE12:
 2771              		.align	2
 2772              		.global	lcd_putWallpaper
 2774              	lcd_putWallpaper:
 2775              	.LFB13:
 173:../lcd.c      **** 
 174:../lcd.c      **** void lcd_putWallpaper( uint8 *bmp )
 175:../lcd.c      **** {
 2776              		.loc 1 175 0
 2777              		.cfi_startproc
 2778              		@ Function supports interworking.
 2779              		@ args = 0, pretend = 0, frame = 24
 2780              		@ frame_needed = 1, uses_anonymous_args = 0
 2781 08cc 0DC0A0E1 		mov	ip, sp
 2782              	.LCFI26:
 2783              		.cfi_def_cfa_register 12
 2784 08d0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2785 08d4 04B04CE2 		sub	fp, ip, #4
 2786              		.cfi_offset 14, -8
 2787              		.cfi_offset 13, -12
 2788              		.cfi_offset 11, -16
 2789              	.LCFI27:
 2790              		.cfi_def_cfa 11, 4
 2791 08d8 18D04DE2 		sub	sp, sp, #24
 2792 08dc 20000BE5 		str	r0, [fp, #-32]
 176:../lcd.c      ****     uint32 headerSize;
 177:../lcd.c      **** 
 178:../lcd.c      ****     uint16 x, ySrc, yDst;
 179:../lcd.c      ****     uint16 offsetSrc, offsetDst;
 180:../lcd.c      **** 
 181:../lcd.c      ****     headerSize = bmp[10] + (bmp[11] << 8) + (bmp[12] << 16) + (bmp[13] << 24);
 2793              		.loc 1 181 0
 2794 08e0 20301BE5 		ldr	r3, [fp, #-32]
 2795 08e4 0A3083E2 		add	r3, r3, #10
 2796 08e8 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2797 08ec 0320A0E1 		mov	r2, r3
 2798 08f0 20301BE5 		ldr	r3, [fp, #-32]
 2799 08f4 0B3083E2 		add	r3, r3, #11
 2800 08f8 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2801 08fc 0334A0E1 		mov	r3, r3, asl #8
 2802 0900 032082E0 		add	r2, r2, r3
 2803 0904 20301BE5 		ldr	r3, [fp, #-32]
 2804 0908 0C3083E2 		add	r3, r3, #12
 2805 090c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2806 0910 0338A0E1 		mov	r3, r3, asl #16
 2807 0914 032082E0 		add	r2, r2, r3
 2808 0918 20301BE5 		ldr	r3, [fp, #-32]
 2809 091c 0D3083E2 		add	r3, r3, #13
 2810 0920 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2811 0924 033CA0E1 		mov	r3, r3, asl #24
 2812 0928 033082E0 		add	r3, r2, r3
 2813 092c 18300BE5 		str	r3, [fp, #-24]
 182:../lcd.c      **** 
 183:../lcd.c      ****     bmp = bmp + headerSize;
 2814              		.loc 1 183 0
 2815 0930 20201BE5 		ldr	r2, [fp, #-32]
 2816 0934 18301BE5 		ldr	r3, [fp, #-24]
 2817 0938 033082E0 		add	r3, r2, r3
 2818 093c 20300BE5 		str	r3, [fp, #-32]
 184:../lcd.c      **** 
 185:../lcd.c      ****     for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )
 2819              		.loc 1 185 0
 2820 0940 0030A0E3 		mov	r3, #0
 2821 0944 B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 2822 0948 EF30A0E3 		mov	r3, #239
 2823 094c B2314BE1 		strh	r3, [fp, #-18]	@ movhi
 2824 0950 2D0000EA 		b	.L60
 2825              	.L63:
 186:../lcd.c      ****     {
 187:../lcd.c      ****         offsetDst = yDst*LCD_WIDTH/2;
 2826              		.loc 1 187 0
 2827 0954 B2215BE1 		ldrh	r2, [fp, #-18]
 2828 0958 0230A0E1 		mov	r3, r2
 2829 095c 0331A0E1 		mov	r3, r3, asl #2
 2830 0960 023083E0 		add	r3, r3, r2
 2831 0964 0333A0E1 		mov	r3, r3, asl #6
 2832 0968 A32FA0E1 		mov	r2, r3, lsr #31
 2833 096c 033082E0 		add	r3, r2, r3
 2834 0970 C330A0E1 		mov	r3, r3, asr #1
 2835 0974 BA314BE1 		strh	r3, [fp, #-26]	@ movhi
 188:../lcd.c      ****         offsetSrc = ySrc*LCD_WIDTH/2;
 2836              		.loc 1 188 0
 2837 0978 B0215BE1 		ldrh	r2, [fp, #-16]
 2838 097c 0230A0E1 		mov	r3, r2
 2839 0980 0331A0E1 		mov	r3, r3, asl #2
 2840 0984 023083E0 		add	r3, r3, r2
 2841 0988 0333A0E1 		mov	r3, r3, asl #6
 2842 098c A32FA0E1 		mov	r2, r3, lsr #31
 2843 0990 033082E0 		add	r3, r2, r3
 2844 0994 C330A0E1 		mov	r3, r3, asr #1
 2845 0998 BC314BE1 		strh	r3, [fp, #-28]	@ movhi
 189:../lcd.c      ****         for( x=0; x<LCD_WIDTH/2; x++ )
 2846              		.loc 1 189 0
 2847 099c 0030A0E3 		mov	r3, #0
 2848 09a0 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 2849 09a4 0F0000EA 		b	.L61
 2850              	.L62:
 190:../lcd.c      ****             lcd_buffer[offsetDst+x] = ~bmp[offsetSrc+x];
 2851              		.loc 1 190 0 discriminator 2
 2852 09a8 BA215BE1 		ldrh	r2, [fp, #-26]
 2853 09ac BE305BE1 		ldrh	r3, [fp, #-14]
 2854 09b0 033082E0 		add	r3, r2, r3
 2855 09b4 BC115BE1 		ldrh	r1, [fp, #-28]
 2856 09b8 BE205BE1 		ldrh	r2, [fp, #-14]
 2857 09bc 022081E0 		add	r2, r1, r2
 2858 09c0 20101BE5 		ldr	r1, [fp, #-32]
 2859 09c4 022081E0 		add	r2, r1, r2
 2860 09c8 0020D2E5 		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 2861 09cc 0220E0E1 		mvn	r2, r2
 2862 09d0 FF1002E2 		and	r1, r2, #255
 2863 09d4 48209FE5 		ldr	r2, .L64
 2864 09d8 0310C2E7 		strb	r1, [r2, r3]
 189:../lcd.c      ****         for( x=0; x<LCD_WIDTH/2; x++ )
 2865              		.loc 1 189 0 discriminator 2
 2866 09dc BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2867 09e0 013083E2 		add	r3, r3, #1
 2868 09e4 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 2869              	.L61:
 189:../lcd.c      ****         for( x=0; x<LCD_WIDTH/2; x++ )
 2870              		.loc 1 189 0 is_stmt 0 discriminator 1
 2871 09e8 BE305BE1 		ldrh	r3, [fp, #-14]
 2872 09ec 9F0053E3 		cmp	r3, #159
 2873 09f0 ECFFFF9A 		bls	.L62
 185:../lcd.c      ****     for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )
 2874              		.loc 1 185 0 is_stmt 1
 2875 09f4 B0315BE1 		ldrh	r3, [fp, #-16]	@ movhi
 2876 09f8 013083E2 		add	r3, r3, #1
 2877 09fc B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 2878 0a00 B2315BE1 		ldrh	r3, [fp, #-18]	@ movhi
 2879 0a04 013043E2 		sub	r3, r3, #1
 2880 0a08 B2314BE1 		strh	r3, [fp, #-18]	@ movhi
 2881              	.L60:
 185:../lcd.c      ****     for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )
 2882              		.loc 1 185 0 is_stmt 0 discriminator 1
 2883 0a0c B0315BE1 		ldrh	r3, [fp, #-16]
 2884 0a10 EF0053E3 		cmp	r3, #239
 2885 0a14 CEFFFF9A 		bls	.L63
 191:../lcd.c      ****     }
 192:../lcd.c      **** }
 2886              		.loc 1 192 0 is_stmt 1
 2887 0a18 0CD04BE2 		sub	sp, fp, #12
 2888 0a1c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2889 0a20 1EFF2FE1 		bx	lr
 2890              	.L65:
 2891              		.align	2
 2892              	.L64:
 2893 0a24 00000000 		.word	lcd_buffer
 2894              		.cfi_endproc
 2895              	.LFE13:
 2897              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 lcd.c
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:1787   .bss:00000000 $d
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:1788   .bss:00000000 lcd_buffer
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:1790   .bss:00009600 state
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:1793   .text:00000000 $a
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:1796   .text:00000000 lcd_init
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:1977   .text:000001c0 lcd_off
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:1901   .text:00000110 $d
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:1933   .text:00000184 $a
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:1936   .text:00000184 lcd_on
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:1970   .text:000001bc $d
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:1974   .text:000001c0 $a
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:2011   .text:000001f8 $d
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:2015   .text:000001fc $a
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:2018   .text:000001fc lcd_status
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:2046   .text:00000220 $d
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:2050   .text:00000224 $a
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:2053   .text:00000224 lcd_clear
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:2099   .text:00000278 $d
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:2104   .text:00000280 $a
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:2107   .text:00000280 lcd_clear_color
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:2165   .text:00000300 $d
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:2170   .text:00000308 $a
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:2173   .text:00000308 lcd_putpixel
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:2260   .text:000003f0 $d
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:2264   .text:000003f4 $a
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:2267   .text:000003f4 lcd_getpixel
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:2337   .text:000004a0 $d
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:2341   .text:000004a4 $a
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:2344   .text:000004a4 lcd_draw_hline
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:2420   .text:00000554 lcd_draw_vline
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:2496   .text:00000604 lcd_draw_box
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:2574   .text:000006d8 lcd_putchar
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:2692   .text:00000828 $d
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:2696   .text:0000082c $a
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:2699   .text:0000082c lcd_puts
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:2767   .text:000008c8 $d
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:2771   .text:000008cc $a
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:2774   .text:000008cc lcd_putWallpaper
C:\Users\Pedro\AppData\Local\Temp\ccxCTuvo.s:2893   .text:00000a24 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
font


prac2a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000148  0c100000  0c100000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .bss          00000018  0c100148  0c100148  00008148  2**2
                  ALLOC
  2 .text         00003620  0c100160  0c100160  00008160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .debug_abbrev 00000808  00000000  00000000  0000b780  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001699  00000000  00000000  0000bf88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000b70  00000000  00000000  0000d621  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_macinfo 0003790c  00000000  00000000  0000e191  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00000b58  00000000  00000000  00045a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000004c5  00000000  00000000  000465f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubtypes 00000251  00000000  00000000  00046aba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000180  00000000  00000000  00046d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000068a  00000000  00000000  00046e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      0000002a  00000000  00000000  0004751a  2**0
                  CONTENTS, READONLY
 13 .ARM.attributes 00000030  00000000  00000000  00047544  2**0
                  CONTENTS, READONLY
 14 .debug_frame  00000968  00000000  00000000  00047574  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0c100160 <D8Led_init>:
	 							 DIGIT_4, DIGIT_5, DIGIT_6, DIGIT_7, 
								 DIGIT_8, DIGIT_9, DIGIT_A, DIGIT_B,
								 DIGIT_C, DIGIT_D, DIGIT_E, DIGIT_F };
			  					  
void D8Led_init(void)
{
 c100160:	e1a0c00d 	mov	ip, sp
 c100164:	e92dd800 	push	{fp, ip, lr, pc}
 c100168:	e24cb004 	sub	fp, ip, #4
    LED8ADDR = ~0 ;
 c10016c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c100170:	e3e02000 	mvn	r2, #0
 c100174:	e5c32000 	strb	r2, [r3]
}
 c100178:	e24bd00c 	sub	sp, fp, #12
 c10017c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100180:	e12fff1e 	bx	lr

0c100184 <D8Led_segment>:

void D8Led_segment(int value)
{
 c100184:	e1a0c00d 	mov	ip, sp
 c100188:	e92dd800 	push	{fp, ip, lr, pc}
 c10018c:	e24cb004 	sub	fp, ip, #4
 c100190:	e24dd008 	sub	sp, sp, #8
 c100194:	e50b0010 	str	r0, [fp, #-16]
	if( (value >= 0) && (value < 8) )
 c100198:	e51b3010 	ldr	r3, [fp, #-16]
 c10019c:	e3530000 	cmp	r3, #0
 c1001a0:	ba00000a 	blt	c1001d0 <D8Led_segment+0x4c>
 c1001a4:	e51b3010 	ldr	r3, [fp, #-16]
 c1001a8:	e3530007 	cmp	r3, #7
 c1001ac:	ca000007 	bgt	c1001d0 <D8Led_segment+0x4c>
		// COMPLETAR: debemos escribir en el display (LED8ADDR) el valor
		// correcto para que se ilumine el segmento que está en la posición
		// value del array Segmentes. Hay que tener en cuente que el display
		// usa lógica invertida (0 enciende, 1 apaga).
		LED8ADDR = ~Segments[value];
 c1001b0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1001b4:	e59f2020 	ldr	r2, [pc, #32]	; c1001dc <D8Led_segment+0x58>
 c1001b8:	e51b1010 	ldr	r1, [fp, #-16]
 c1001bc:	e7922101 	ldr	r2, [r2, r1, lsl #2]
 c1001c0:	e20220ff 	and	r2, r2, #255	; 0xff
 c1001c4:	e1e02002 	mvn	r2, r2
 c1001c8:	e20220ff 	and	r2, r2, #255	; 0xff
 c1001cc:	e5c32000 	strb	r2, [r3]
}
 c1001d0:	e24bd00c 	sub	sp, fp, #12
 c1001d4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1001d8:	e12fff1e 	bx	lr
 c1001dc:	0c100000 	.word	0x0c100000

0c1001e0 <D8Led_digit>:

void D8Led_digit(int value)
{
 c1001e0:	e1a0c00d 	mov	ip, sp
 c1001e4:	e92dd800 	push	{fp, ip, lr, pc}
 c1001e8:	e24cb004 	sub	fp, ip, #4
 c1001ec:	e24dd008 	sub	sp, sp, #8
 c1001f0:	e50b0010 	str	r0, [fp, #-16]
	if( (value >= 0) && (value < 16) )
 c1001f4:	e51b3010 	ldr	r3, [fp, #-16]
 c1001f8:	e3530000 	cmp	r3, #0
 c1001fc:	ba00000a 	blt	c10022c <D8Led_digit+0x4c>
 c100200:	e51b3010 	ldr	r3, [fp, #-16]
 c100204:	e353000f 	cmp	r3, #15
 c100208:	ca000007 	bgt	c10022c <D8Led_digit+0x4c>
		// COMPLETAR: debemos escribir en el display (LED8ADDR) el valor
		// correcto para que se ilumine el dígito que está en la posición
		// value del array Digits. Hay que tener en cuente que el display
		// usa lógica invertida (0 enciende, 1 apaga).
		LED8ADDR = ~Digits[value];
 c10020c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c100210:	e59f2020 	ldr	r2, [pc, #32]	; c100238 <D8Led_digit+0x58>
 c100214:	e51b1010 	ldr	r1, [fp, #-16]
 c100218:	e7922101 	ldr	r2, [r2, r1, lsl #2]
 c10021c:	e20220ff 	and	r2, r2, #255	; 0xff
 c100220:	e1e02002 	mvn	r2, r2
 c100224:	e20220ff 	and	r2, r2, #255	; 0xff
 c100228:	e5c32000 	strb	r2, [r3]
}
 c10022c:	e24bd00c 	sub	sp, fp, #12
 c100230:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100234:	e12fff1e 	bx	lr
 c100238:	0c100020 	.word	0x0c100020

0c10023c <read_button>:
#include "button.h"
#include "leds.h"
#include "gpio.h"

unsigned int read_button(void)
{
 c10023c:	e1a0c00d 	mov	ip, sp
 c100240:	e92dd800 	push	{fp, ip, lr, pc}
 c100244:	e24cb004 	sub	fp, ip, #4
 c100248:	e24dd008 	sub	sp, sp, #8
	unsigned int buttons = 0;
 c10024c:	e3a03000 	mov	r3, #0
 c100250:	e50b3010 	str	r3, [fp, #-16]
	//pines 6 y 7 del puerto G (portG_read) debemos devolver un valor (buttons)
	//en el que el bit 0 (el menos significativo) representa el estado del botÃ³n
	//del pin 6 y el bit 1 representa el estado del botÃ³n del pin 7 (a 1 si
	//estÃ¡n pulsados a 0 si no lo estÃ¡n).

	portG_read(6, &val);
 c100254:	e24b3011 	sub	r3, fp, #17
 c100258:	e3a00006 	mov	r0, #6
 c10025c:	e1a01003 	mov	r1, r3
 c100260:	eb0001d7 	bl	c1009c4 <portG_read>
	if(!val)
 c100264:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c100268:	e3530000 	cmp	r3, #0
 c10026c:	1a000002 	bne	c10027c <read_button+0x40>
		buttons |= BUT1;
 c100270:	e51b3010 	ldr	r3, [fp, #-16]
 c100274:	e3833001 	orr	r3, r3, #1
 c100278:	e50b3010 	str	r3, [fp, #-16]

	portG_read(7, &val);
 c10027c:	e24b3011 	sub	r3, fp, #17
 c100280:	e3a00007 	mov	r0, #7
 c100284:	e1a01003 	mov	r1, r3
 c100288:	eb0001cd 	bl	c1009c4 <portG_read>
	if(!val)
 c10028c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c100290:	e3530000 	cmp	r3, #0
 c100294:	1a000002 	bne	c1002a4 <read_button+0x68>
		buttons |= BUT2;
 c100298:	e51b3010 	ldr	r3, [fp, #-16]
 c10029c:	e3833002 	orr	r3, r3, #2
 c1002a0:	e50b3010 	str	r3, [fp, #-16]

	return buttons;
 c1002a4:	e51b3010 	ldr	r3, [fp, #-16]
}
 c1002a8:	e1a00003 	mov	r0, r3
 c1002ac:	e24bd00c 	sub	sp, fp, #12
 c1002b0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1002b4:	e12fff1e 	bx	lr

0c1002b8 <portB_conf>:
#include "gpio.h"

/* Port B interface implementation */

int portB_conf(int pin, enum port_mode mode)
{
 c1002b8:	e1a0c00d 	mov	ip, sp
 c1002bc:	e92dd800 	push	{fp, ip, lr, pc}
 c1002c0:	e24cb004 	sub	fp, ip, #4
 c1002c4:	e24dd010 	sub	sp, sp, #16
 c1002c8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c1002cc:	e1a03001 	mov	r3, r1
 c1002d0:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
	int ret = 0;
 c1002d4:	e3a03000 	mov	r3, #0
 c1002d8:	e50b3010 	str	r3, [fp, #-16]
	if (pin < 0 || pin > 10)
 c1002dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1002e0:	e3530000 	cmp	r3, #0
 c1002e4:	ba000002 	blt	c1002f4 <portB_conf+0x3c>
 c1002e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1002ec:	e353000a 	cmp	r3, #10
 c1002f0:	da000001 	ble	c1002fc <portB_conf+0x44>
		return -1; // indica error
 c1002f4:	e3e03000 	mvn	r3, #0
 c1002f8:	ea00001b 	b	c10036c <portB_conf+0xb4>

	if (mode == SIGOUT)
 c1002fc:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c100300:	e3530002 	cmp	r3, #2
 c100304:	1a000008 	bne	c10032c <portB_conf+0x74>
		// COMPLETAR: poner en rPCONB el bit indicado por pin a 1 para que por
		// dicho pin en el puerto B salga la seÃ±al correspondiente del
		// controlador de memoria
		rPCONB |= 1 << pin;
 c100308:	e59f306c 	ldr	r3, [pc, #108]	; c10037c <portB_conf+0xc4>
 c10030c:	e59f2068 	ldr	r2, [pc, #104]	; c10037c <portB_conf+0xc4>
 c100310:	e5921000 	ldr	r1, [r2]
 c100314:	e3a00001 	mov	r0, #1
 c100318:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c10031c:	e1a02210 	lsl	r2, r0, r2
 c100320:	e1812002 	orr	r2, r1, r2
 c100324:	e5832000 	str	r2, [r3]
 c100328:	ea00000e 	b	c100368 <portB_conf+0xb0>
	else if (mode == OUTPUT)
 c10032c:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c100330:	e3530001 	cmp	r3, #1
 c100334:	1a000009 	bne	c100360 <portB_conf+0xa8>
		// COMPLETAR: poner en rPCONB el bit indicado por pin a 0 para que dicho
		// pin sea un pin de salida
		rPCONB &= ~(1 << pin);
 c100338:	e59f303c 	ldr	r3, [pc, #60]	; c10037c <portB_conf+0xc4>
 c10033c:	e59f2038 	ldr	r2, [pc, #56]	; c10037c <portB_conf+0xc4>
 c100340:	e5921000 	ldr	r1, [r2]
 c100344:	e3a00001 	mov	r0, #1
 c100348:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c10034c:	e1a02210 	lsl	r2, r0, r2
 c100350:	e1e02002 	mvn	r2, r2
 c100354:	e0012002 	and	r2, r1, r2
 c100358:	e5832000 	str	r2, [r3]
 c10035c:	ea000001 	b	c100368 <portB_conf+0xb0>
	else
		ret = -1; // indica error
 c100360:	e3e03000 	mvn	r3, #0
 c100364:	e50b3010 	str	r3, [fp, #-16]

	return ret;
 c100368:	e51b3010 	ldr	r3, [fp, #-16]
}
 c10036c:	e1a00003 	mov	r0, r3
 c100370:	e24bd00c 	sub	sp, fp, #12
 c100374:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100378:	e12fff1e 	bx	lr
 c10037c:	01d20008 	.word	0x01d20008

0c100380 <portB_write>:

int portB_write(int pin, enum digital val)
{
 c100380:	e1a0c00d 	mov	ip, sp
 c100384:	e92dd800 	push	{fp, ip, lr, pc}
 c100388:	e24cb004 	sub	fp, ip, #4
 c10038c:	e24dd008 	sub	sp, sp, #8
 c100390:	e50b0010 	str	r0, [fp, #-16]
 c100394:	e1a03001 	mov	r3, r1
 c100398:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	if (pin < 0 || pin > 10)
 c10039c:	e51b3010 	ldr	r3, [fp, #-16]
 c1003a0:	e3530000 	cmp	r3, #0
 c1003a4:	ba000002 	blt	c1003b4 <portB_write+0x34>
 c1003a8:	e51b3010 	ldr	r3, [fp, #-16]
 c1003ac:	e353000a 	cmp	r3, #10
 c1003b0:	da000001 	ble	c1003bc <portB_write+0x3c>
		return -1; // indica error
 c1003b4:	e3e03000 	mvn	r3, #0
 c1003b8:	ea00001a 	b	c100428 <portB_write+0xa8>

	if (val < 0 || val > 1)
 c1003bc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1003c0:	e3530001 	cmp	r3, #1
 c1003c4:	9a000001 	bls	c1003d0 <portB_write+0x50>
		return -1; // indica error
 c1003c8:	e3e03000 	mvn	r3, #0
 c1003cc:	ea000015 	b	c100428 <portB_write+0xa8>

	if (val)
 c1003d0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1003d4:	e3530000 	cmp	r3, #0
 c1003d8:	0a000008 	beq	c100400 <portB_write+0x80>
		// COMPLETAR: poner en rPDATB el bit indicado por pin a 1
		rPDATB |= 1 << pin;
 c1003dc:	e59f3054 	ldr	r3, [pc, #84]	; c100438 <portB_write+0xb8>
 c1003e0:	e59f2050 	ldr	r2, [pc, #80]	; c100438 <portB_write+0xb8>
 c1003e4:	e5921000 	ldr	r1, [r2]
 c1003e8:	e3a00001 	mov	r0, #1
 c1003ec:	e51b2010 	ldr	r2, [fp, #-16]
 c1003f0:	e1a02210 	lsl	r2, r0, r2
 c1003f4:	e1812002 	orr	r2, r1, r2
 c1003f8:	e5832000 	str	r2, [r3]
 c1003fc:	ea000008 	b	c100424 <portB_write+0xa4>
	else
		// COMPLETAR: poner en rPDATB el bit indicado por pin a 0
		rPDATB &= ~(1 << pin);
 c100400:	e59f3030 	ldr	r3, [pc, #48]	; c100438 <portB_write+0xb8>
 c100404:	e59f202c 	ldr	r2, [pc, #44]	; c100438 <portB_write+0xb8>
 c100408:	e5921000 	ldr	r1, [r2]
 c10040c:	e3a00001 	mov	r0, #1
 c100410:	e51b2010 	ldr	r2, [fp, #-16]
 c100414:	e1a02210 	lsl	r2, r0, r2
 c100418:	e1e02002 	mvn	r2, r2
 c10041c:	e0012002 	and	r2, r1, r2
 c100420:	e5832000 	str	r2, [r3]

	return 0;
 c100424:	e3a03000 	mov	r3, #0
}
 c100428:	e1a00003 	mov	r0, r3
 c10042c:	e24bd00c 	sub	sp, fp, #12
 c100430:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100434:	e12fff1e 	bx	lr
 c100438:	01d2000c 	.word	0x01d2000c

0c10043c <portG_conf>:

/* Port G interface implementation */

int portG_conf(int pin, enum port_mode mode)
{
 c10043c:	e1a0c00d 	mov	ip, sp
 c100440:	e92dd800 	push	{fp, ip, lr, pc}
 c100444:	e24cb004 	sub	fp, ip, #4
 c100448:	e24dd010 	sub	sp, sp, #16
 c10044c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c100450:	e1a03001 	mov	r3, r1
 c100454:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
	int pos  = pin*2;
 c100458:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10045c:	e1a03083 	lsl	r3, r3, #1
 c100460:	e50b3010 	str	r3, [fp, #-16]

	if (pin < 0 || pin > 7)
 c100464:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100468:	e3530000 	cmp	r3, #0
 c10046c:	ba000002 	blt	c10047c <portG_conf+0x40>
 c100470:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100474:	e3530007 	cmp	r3, #7
 c100478:	da000001 	ble	c100484 <portG_conf+0x48>
		return -1; // indica error
 c10047c:	e3e03000 	mvn	r3, #0
 c100480:	ea000056 	b	c1005e0 <portG_conf+0x1a4>

	switch (mode) {
 c100484:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c100488:	e3530003 	cmp	r3, #3
 c10048c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 c100490:	ea00004f 	b	c1005d4 <portG_conf+0x198>
 c100494:	0c1004a4 	.word	0x0c1004a4
 c100498:	0c1004f4 	.word	0x0c1004f4
 c10049c:	0c100540 	.word	0x0c100540
 c1004a0:	0c10058c 	.word	0x0c10058c
		case INPUT:
			// COMPLETAR: poner en rPCONG 00 a partir de la posiciÃ³n pos para
			// configurar como pin de entrada el pin indicado por el parÃ¡metro pin
			rPCONG &= ~(1 << pos);  	 // 0
 c1004a4:	e59f3144 	ldr	r3, [pc, #324]	; c1005f0 <portG_conf+0x1b4>
 c1004a8:	e59f2140 	ldr	r2, [pc, #320]	; c1005f0 <portG_conf+0x1b4>
 c1004ac:	e5921000 	ldr	r1, [r2]
 c1004b0:	e3a00001 	mov	r0, #1
 c1004b4:	e51b2010 	ldr	r2, [fp, #-16]
 c1004b8:	e1a02210 	lsl	r2, r0, r2
 c1004bc:	e1e02002 	mvn	r2, r2
 c1004c0:	e0012002 	and	r2, r1, r2
 c1004c4:	e5832000 	str	r2, [r3]
			rPCONG &= ~(1 << (pos + 1)); // 0
 c1004c8:	e59f3120 	ldr	r3, [pc, #288]	; c1005f0 <portG_conf+0x1b4>
 c1004cc:	e59f211c 	ldr	r2, [pc, #284]	; c1005f0 <portG_conf+0x1b4>
 c1004d0:	e5921000 	ldr	r1, [r2]
 c1004d4:	e51b2010 	ldr	r2, [fp, #-16]
 c1004d8:	e2822001 	add	r2, r2, #1
 c1004dc:	e3a00001 	mov	r0, #1
 c1004e0:	e1a02210 	lsl	r2, r0, r2
 c1004e4:	e1e02002 	mvn	r2, r2
 c1004e8:	e0012002 	and	r2, r1, r2
 c1004ec:	e5832000 	str	r2, [r3]
			break;
 c1004f0:	ea000039 	b	c1005dc <portG_conf+0x1a0>
		case OUTPUT:
			// COMPLETAR: poner en rPCONG 01 a partir de la posiciÃ³n pos para
			// configurar como pin de salida el pin indicado por el parÃ¡metro pin
			rPCONG |= 1 << pos;			 // 1
 c1004f4:	e59f30f4 	ldr	r3, [pc, #244]	; c1005f0 <portG_conf+0x1b4>
 c1004f8:	e59f20f0 	ldr	r2, [pc, #240]	; c1005f0 <portG_conf+0x1b4>
 c1004fc:	e5921000 	ldr	r1, [r2]
 c100500:	e3a00001 	mov	r0, #1
 c100504:	e51b2010 	ldr	r2, [fp, #-16]
 c100508:	e1a02210 	lsl	r2, r0, r2
 c10050c:	e1812002 	orr	r2, r1, r2
 c100510:	e5832000 	str	r2, [r3]
			rPCONG &= ~(1 << (pos + 1)); // 0
 c100514:	e59f30d4 	ldr	r3, [pc, #212]	; c1005f0 <portG_conf+0x1b4>
 c100518:	e59f20d0 	ldr	r2, [pc, #208]	; c1005f0 <portG_conf+0x1b4>
 c10051c:	e5921000 	ldr	r1, [r2]
 c100520:	e51b2010 	ldr	r2, [fp, #-16]
 c100524:	e2822001 	add	r2, r2, #1
 c100528:	e3a00001 	mov	r0, #1
 c10052c:	e1a02210 	lsl	r2, r0, r2
 c100530:	e1e02002 	mvn	r2, r2
 c100534:	e0012002 	and	r2, r1, r2
 c100538:	e5832000 	str	r2, [r3]
			break;
 c10053c:	ea000026 	b	c1005dc <portG_conf+0x1a0>
		case SIGOUT:
			// COMPLETAR: poner en rPCONG 10 a partir de la posiciÃ³n pos para
			// que salga la seÃ±al interna correspondiente por el pin indicado
			// por el parÃ¡metro pin
			rPCONG &= ~(1 << pos); 		// 0
 c100540:	e59f30a8 	ldr	r3, [pc, #168]	; c1005f0 <portG_conf+0x1b4>
 c100544:	e59f20a4 	ldr	r2, [pc, #164]	; c1005f0 <portG_conf+0x1b4>
 c100548:	e5921000 	ldr	r1, [r2]
 c10054c:	e3a00001 	mov	r0, #1
 c100550:	e51b2010 	ldr	r2, [fp, #-16]
 c100554:	e1a02210 	lsl	r2, r0, r2
 c100558:	e1e02002 	mvn	r2, r2
 c10055c:	e0012002 	and	r2, r1, r2
 c100560:	e5832000 	str	r2, [r3]
			rPCONG |= 1 << (pos + 1);	// 1
 c100564:	e59f3084 	ldr	r3, [pc, #132]	; c1005f0 <portG_conf+0x1b4>
 c100568:	e59f2080 	ldr	r2, [pc, #128]	; c1005f0 <portG_conf+0x1b4>
 c10056c:	e5921000 	ldr	r1, [r2]
 c100570:	e51b2010 	ldr	r2, [fp, #-16]
 c100574:	e2822001 	add	r2, r2, #1
 c100578:	e3a00001 	mov	r0, #1
 c10057c:	e1a02210 	lsl	r2, r0, r2
 c100580:	e1812002 	orr	r2, r1, r2
 c100584:	e5832000 	str	r2, [r3]
			break;
 c100588:	ea000013 	b	c1005dc <portG_conf+0x1a0>
		case EINT:
			// COMPLETAR: poner en rPCONG 11 a partir de la posiciÃ³n pos para
			// habilitar la generaciÃ³n de interrupciones externas por el pin
			// indicado por el parÃ¡metro pin
			rPCONG |= 1 << pos;			// 1
 c10058c:	e59f305c 	ldr	r3, [pc, #92]	; c1005f0 <portG_conf+0x1b4>
 c100590:	e59f2058 	ldr	r2, [pc, #88]	; c1005f0 <portG_conf+0x1b4>
 c100594:	e5921000 	ldr	r1, [r2]
 c100598:	e3a00001 	mov	r0, #1
 c10059c:	e51b2010 	ldr	r2, [fp, #-16]
 c1005a0:	e1a02210 	lsl	r2, r0, r2
 c1005a4:	e1812002 	orr	r2, r1, r2
 c1005a8:	e5832000 	str	r2, [r3]
			rPCONG |= 1 << (pos + 1);	// 1
 c1005ac:	e59f303c 	ldr	r3, [pc, #60]	; c1005f0 <portG_conf+0x1b4>
 c1005b0:	e59f2038 	ldr	r2, [pc, #56]	; c1005f0 <portG_conf+0x1b4>
 c1005b4:	e5921000 	ldr	r1, [r2]
 c1005b8:	e51b2010 	ldr	r2, [fp, #-16]
 c1005bc:	e2822001 	add	r2, r2, #1
 c1005c0:	e3a00001 	mov	r0, #1
 c1005c4:	e1a02210 	lsl	r2, r0, r2
 c1005c8:	e1812002 	orr	r2, r1, r2
 c1005cc:	e5832000 	str	r2, [r3]
			break;
 c1005d0:	ea000001 	b	c1005dc <portG_conf+0x1a0>
		default:
			return -1;
 c1005d4:	e3e03000 	mvn	r3, #0
 c1005d8:	ea000000 	b	c1005e0 <portG_conf+0x1a4>
	}

	return 0;
 c1005dc:	e3a03000 	mov	r3, #0
}
 c1005e0:	e1a00003 	mov	r0, r3
 c1005e4:	e24bd00c 	sub	sp, fp, #12
 c1005e8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1005ec:	e12fff1e 	bx	lr
 c1005f0:	01d20040 	.word	0x01d20040

0c1005f4 <portG_eint_trig>:

int portG_eint_trig(int pin, enum trigger trig)
{
 c1005f4:	e1a0c00d 	mov	ip, sp
 c1005f8:	e92dd800 	push	{fp, ip, lr, pc}
 c1005fc:	e24cb004 	sub	fp, ip, #4
 c100600:	e24dd010 	sub	sp, sp, #16
 c100604:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c100608:	e1a03001 	mov	r3, r1
 c10060c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
	int pos = pin*4;
 c100610:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100614:	e1a03103 	lsl	r3, r3, #2
 c100618:	e50b3010 	str	r3, [fp, #-16]

	if (pin < 0 || pin > 7)
 c10061c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100620:	e3530000 	cmp	r3, #0
 c100624:	ba000002 	blt	c100634 <portG_eint_trig+0x40>
 c100628:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10062c:	e3530007 	cmp	r3, #7
 c100630:	da000001 	ble	c10063c <portG_eint_trig+0x48>
		return -1;
 c100634:	e3e03000 	mvn	r3, #0
 c100638:	ea00009c 	b	c1008b0 <portG_eint_trig+0x2bc>

switch (trig) {
 c10063c:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c100640:	e3530004 	cmp	r3, #4
 c100644:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 c100648:	ea000095 	b	c1008a4 <portG_eint_trig+0x2b0>
 c10064c:	0c100660 	.word	0x0c100660
 c100650:	0c1006d8 	.word	0x0c1006d8
 c100654:	0c10074c 	.word	0x0c10074c
 c100658:	0c1007c0 	.word	0x0c1007c0
 c10065c:	0c100834 	.word	0x0c100834
		case LLOW:
			// COMPLETAR: poner en rEXTINT a partir de la posiciÃ³n pos tres bits
			// a 000, para configurar interrupciones externas por nivel bajo
			rEXTINT &= ~(1 << pos);	 		// 0
 c100660:	e59f3258 	ldr	r3, [pc, #600]	; c1008c0 <portG_eint_trig+0x2cc>
 c100664:	e59f2254 	ldr	r2, [pc, #596]	; c1008c0 <portG_eint_trig+0x2cc>
 c100668:	e5921000 	ldr	r1, [r2]
 c10066c:	e3a00001 	mov	r0, #1
 c100670:	e51b2010 	ldr	r2, [fp, #-16]
 c100674:	e1a02210 	lsl	r2, r0, r2
 c100678:	e1e02002 	mvn	r2, r2
 c10067c:	e0012002 	and	r2, r1, r2
 c100680:	e5832000 	str	r2, [r3]
			rEXTINT &= ~(1 << (pos + 1));	// 0
 c100684:	e59f3234 	ldr	r3, [pc, #564]	; c1008c0 <portG_eint_trig+0x2cc>
 c100688:	e59f2230 	ldr	r2, [pc, #560]	; c1008c0 <portG_eint_trig+0x2cc>
 c10068c:	e5921000 	ldr	r1, [r2]
 c100690:	e51b2010 	ldr	r2, [fp, #-16]
 c100694:	e2822001 	add	r2, r2, #1
 c100698:	e3a00001 	mov	r0, #1
 c10069c:	e1a02210 	lsl	r2, r0, r2
 c1006a0:	e1e02002 	mvn	r2, r2
 c1006a4:	e0012002 	and	r2, r1, r2
 c1006a8:	e5832000 	str	r2, [r3]
			rEXTINT &= ~(1 << (pos + 2));	// 0
 c1006ac:	e59f320c 	ldr	r3, [pc, #524]	; c1008c0 <portG_eint_trig+0x2cc>
 c1006b0:	e59f2208 	ldr	r2, [pc, #520]	; c1008c0 <portG_eint_trig+0x2cc>
 c1006b4:	e5921000 	ldr	r1, [r2]
 c1006b8:	e51b2010 	ldr	r2, [fp, #-16]
 c1006bc:	e2822002 	add	r2, r2, #2
 c1006c0:	e3a00001 	mov	r0, #1
 c1006c4:	e1a02210 	lsl	r2, r0, r2
 c1006c8:	e1e02002 	mvn	r2, r2
 c1006cc:	e0012002 	and	r2, r1, r2
 c1006d0:	e5832000 	str	r2, [r3]
			break;
 c1006d4:	ea000074 	b	c1008ac <portG_eint_trig+0x2b8>
		case LHIGH:
			// COMPLETAR: poner en rEXTINT a partir de la posiciÃ³n pos tres bits
			// a 001, para configurar interrupciones externas por nivel alto
			rEXTINT |= 1 << pos;	 		// 1
 c1006d8:	e59f31e0 	ldr	r3, [pc, #480]	; c1008c0 <portG_eint_trig+0x2cc>
 c1006dc:	e59f21dc 	ldr	r2, [pc, #476]	; c1008c0 <portG_eint_trig+0x2cc>
 c1006e0:	e5921000 	ldr	r1, [r2]
 c1006e4:	e3a00001 	mov	r0, #1
 c1006e8:	e51b2010 	ldr	r2, [fp, #-16]
 c1006ec:	e1a02210 	lsl	r2, r0, r2
 c1006f0:	e1812002 	orr	r2, r1, r2
 c1006f4:	e5832000 	str	r2, [r3]
			rEXTINT &= ~(1 << (pos + 1));	// 0
 c1006f8:	e59f31c0 	ldr	r3, [pc, #448]	; c1008c0 <portG_eint_trig+0x2cc>
 c1006fc:	e59f21bc 	ldr	r2, [pc, #444]	; c1008c0 <portG_eint_trig+0x2cc>
 c100700:	e5921000 	ldr	r1, [r2]
 c100704:	e51b2010 	ldr	r2, [fp, #-16]
 c100708:	e2822001 	add	r2, r2, #1
 c10070c:	e3a00001 	mov	r0, #1
 c100710:	e1a02210 	lsl	r2, r0, r2
 c100714:	e1e02002 	mvn	r2, r2
 c100718:	e0012002 	and	r2, r1, r2
 c10071c:	e5832000 	str	r2, [r3]
			rEXTINT &= ~(1 << (pos + 2));	// 0
 c100720:	e59f3198 	ldr	r3, [pc, #408]	; c1008c0 <portG_eint_trig+0x2cc>
 c100724:	e59f2194 	ldr	r2, [pc, #404]	; c1008c0 <portG_eint_trig+0x2cc>
 c100728:	e5921000 	ldr	r1, [r2]
 c10072c:	e51b2010 	ldr	r2, [fp, #-16]
 c100730:	e2822002 	add	r2, r2, #2
 c100734:	e3a00001 	mov	r0, #1
 c100738:	e1a02210 	lsl	r2, r0, r2
 c10073c:	e1e02002 	mvn	r2, r2
 c100740:	e0012002 	and	r2, r1, r2
 c100744:	e5832000 	str	r2, [r3]
			break;
 c100748:	ea000057 	b	c1008ac <portG_eint_trig+0x2b8>
		case FALLING:
			// COMPLETAR: poner en rEXTINT a partir de la posiciÃ³n pos tres bits
			// a 010, para configurar interrupciones externas por flanco de
			// bajada
			rEXTINT &= ~(1 << pos);	 		// 0
 c10074c:	e59f316c 	ldr	r3, [pc, #364]	; c1008c0 <portG_eint_trig+0x2cc>
 c100750:	e59f2168 	ldr	r2, [pc, #360]	; c1008c0 <portG_eint_trig+0x2cc>
 c100754:	e5921000 	ldr	r1, [r2]
 c100758:	e3a00001 	mov	r0, #1
 c10075c:	e51b2010 	ldr	r2, [fp, #-16]
 c100760:	e1a02210 	lsl	r2, r0, r2
 c100764:	e1e02002 	mvn	r2, r2
 c100768:	e0012002 	and	r2, r1, r2
 c10076c:	e5832000 	str	r2, [r3]
			rEXTINT |= 1 << (pos + 1);	 	// 1
 c100770:	e59f3148 	ldr	r3, [pc, #328]	; c1008c0 <portG_eint_trig+0x2cc>
 c100774:	e59f2144 	ldr	r2, [pc, #324]	; c1008c0 <portG_eint_trig+0x2cc>
 c100778:	e5921000 	ldr	r1, [r2]
 c10077c:	e51b2010 	ldr	r2, [fp, #-16]
 c100780:	e2822001 	add	r2, r2, #1
 c100784:	e3a00001 	mov	r0, #1
 c100788:	e1a02210 	lsl	r2, r0, r2
 c10078c:	e1812002 	orr	r2, r1, r2
 c100790:	e5832000 	str	r2, [r3]
			rEXTINT &= ~(1 << (pos + 2));	// 0
 c100794:	e59f3124 	ldr	r3, [pc, #292]	; c1008c0 <portG_eint_trig+0x2cc>
 c100798:	e59f2120 	ldr	r2, [pc, #288]	; c1008c0 <portG_eint_trig+0x2cc>
 c10079c:	e5921000 	ldr	r1, [r2]
 c1007a0:	e51b2010 	ldr	r2, [fp, #-16]
 c1007a4:	e2822002 	add	r2, r2, #2
 c1007a8:	e3a00001 	mov	r0, #1
 c1007ac:	e1a02210 	lsl	r2, r0, r2
 c1007b0:	e1e02002 	mvn	r2, r2
 c1007b4:	e0012002 	and	r2, r1, r2
 c1007b8:	e5832000 	str	r2, [r3]
			break;
 c1007bc:	ea00003a 	b	c1008ac <portG_eint_trig+0x2b8>
		case RISING:
			// COMPLETAR: poner en rEXTINT a partir de la posiciÃ³n pos tres bits
			// a 100, para configurar interrupciones externas por flanco de
			// subida
			rEXTINT &= ~(1 << pos);	 		// 0
 c1007c0:	e59f30f8 	ldr	r3, [pc, #248]	; c1008c0 <portG_eint_trig+0x2cc>
 c1007c4:	e59f20f4 	ldr	r2, [pc, #244]	; c1008c0 <portG_eint_trig+0x2cc>
 c1007c8:	e5921000 	ldr	r1, [r2]
 c1007cc:	e3a00001 	mov	r0, #1
 c1007d0:	e51b2010 	ldr	r2, [fp, #-16]
 c1007d4:	e1a02210 	lsl	r2, r0, r2
 c1007d8:	e1e02002 	mvn	r2, r2
 c1007dc:	e0012002 	and	r2, r1, r2
 c1007e0:	e5832000 	str	r2, [r3]
			rEXTINT &= ~(1 << (pos + 1));	// 0
 c1007e4:	e59f30d4 	ldr	r3, [pc, #212]	; c1008c0 <portG_eint_trig+0x2cc>
 c1007e8:	e59f20d0 	ldr	r2, [pc, #208]	; c1008c0 <portG_eint_trig+0x2cc>
 c1007ec:	e5921000 	ldr	r1, [r2]
 c1007f0:	e51b2010 	ldr	r2, [fp, #-16]
 c1007f4:	e2822001 	add	r2, r2, #1
 c1007f8:	e3a00001 	mov	r0, #1
 c1007fc:	e1a02210 	lsl	r2, r0, r2
 c100800:	e1e02002 	mvn	r2, r2
 c100804:	e0012002 	and	r2, r1, r2
 c100808:	e5832000 	str	r2, [r3]
			rEXTINT |= 1 << (pos + 2);	 	// 1
 c10080c:	e59f30ac 	ldr	r3, [pc, #172]	; c1008c0 <portG_eint_trig+0x2cc>
 c100810:	e59f20a8 	ldr	r2, [pc, #168]	; c1008c0 <portG_eint_trig+0x2cc>
 c100814:	e5921000 	ldr	r1, [r2]
 c100818:	e51b2010 	ldr	r2, [fp, #-16]
 c10081c:	e2822002 	add	r2, r2, #2
 c100820:	e3a00001 	mov	r0, #1
 c100824:	e1a02210 	lsl	r2, r0, r2
 c100828:	e1812002 	orr	r2, r1, r2
 c10082c:	e5832000 	str	r2, [r3]
			break;
 c100830:	ea00001d 	b	c1008ac <portG_eint_trig+0x2b8>
		case EDGE:
			// COMPLETAR: poner en rEXTINT a partir de la posiciÃ³n pos tres bits
			// a 110, para configurar interrupciones externas por cualquier
			// flanco
			rEXTINT &= ~(1 << pos);	 		// 0
 c100834:	e59f3084 	ldr	r3, [pc, #132]	; c1008c0 <portG_eint_trig+0x2cc>
 c100838:	e59f2080 	ldr	r2, [pc, #128]	; c1008c0 <portG_eint_trig+0x2cc>
 c10083c:	e5921000 	ldr	r1, [r2]
 c100840:	e3a00001 	mov	r0, #1
 c100844:	e51b2010 	ldr	r2, [fp, #-16]
 c100848:	e1a02210 	lsl	r2, r0, r2
 c10084c:	e1e02002 	mvn	r2, r2
 c100850:	e0012002 	and	r2, r1, r2
 c100854:	e5832000 	str	r2, [r3]
			rEXTINT |= 1 << (pos + 1);	 	// 1
 c100858:	e59f3060 	ldr	r3, [pc, #96]	; c1008c0 <portG_eint_trig+0x2cc>
 c10085c:	e59f205c 	ldr	r2, [pc, #92]	; c1008c0 <portG_eint_trig+0x2cc>
 c100860:	e5921000 	ldr	r1, [r2]
 c100864:	e51b2010 	ldr	r2, [fp, #-16]
 c100868:	e2822001 	add	r2, r2, #1
 c10086c:	e3a00001 	mov	r0, #1
 c100870:	e1a02210 	lsl	r2, r0, r2
 c100874:	e1812002 	orr	r2, r1, r2
 c100878:	e5832000 	str	r2, [r3]
			rEXTINT |= 1 << (pos + 2);	 	// 1
 c10087c:	e59f303c 	ldr	r3, [pc, #60]	; c1008c0 <portG_eint_trig+0x2cc>
 c100880:	e59f2038 	ldr	r2, [pc, #56]	; c1008c0 <portG_eint_trig+0x2cc>
 c100884:	e5921000 	ldr	r1, [r2]
 c100888:	e51b2010 	ldr	r2, [fp, #-16]
 c10088c:	e2822002 	add	r2, r2, #2
 c100890:	e3a00001 	mov	r0, #1
 c100894:	e1a02210 	lsl	r2, r0, r2
 c100898:	e1812002 	orr	r2, r1, r2
 c10089c:	e5832000 	str	r2, [r3]
			break;
 c1008a0:	ea000001 	b	c1008ac <portG_eint_trig+0x2b8>
		default:
			return -1;
 c1008a4:	e3e03000 	mvn	r3, #0
 c1008a8:	ea000000 	b	c1008b0 <portG_eint_trig+0x2bc>
	}
	return 0;
 c1008ac:	e3a03000 	mov	r3, #0
}
 c1008b0:	e1a00003 	mov	r0, r3
 c1008b4:	e24bd00c 	sub	sp, fp, #12
 c1008b8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1008bc:	e12fff1e 	bx	lr
 c1008c0:	01d20050 	.word	0x01d20050

0c1008c4 <portG_write>:

int portG_write(int pin, enum digital val)
{
 c1008c4:	e1a0c00d 	mov	ip, sp
 c1008c8:	e92dd800 	push	{fp, ip, lr, pc}
 c1008cc:	e24cb004 	sub	fp, ip, #4
 c1008d0:	e24dd010 	sub	sp, sp, #16
 c1008d4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c1008d8:	e1a03001 	mov	r3, r1
 c1008dc:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
	int pos = pin*2;
 c1008e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1008e4:	e1a03083 	lsl	r3, r3, #1
 c1008e8:	e50b3010 	str	r3, [fp, #-16]

		if (pin < 0 || pin > 7)
 c1008ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1008f0:	e3530000 	cmp	r3, #0
 c1008f4:	ba000002 	blt	c100904 <portG_write+0x40>
 c1008f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1008fc:	e3530007 	cmp	r3, #7
 c100900:	da000001 	ble	c10090c <portG_write+0x48>
			return -1; // indica error
 c100904:	e3e03000 	mvn	r3, #0
 c100908:	ea000027 	b	c1009ac <portG_write+0xe8>

		if (val < 0 || val > 1)
 c10090c:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c100910:	e3530001 	cmp	r3, #1
 c100914:	9a000001 	bls	c100920 <portG_write+0x5c>
			return -1; // indica error
 c100918:	e3e03000 	mvn	r3, #0
 c10091c:	ea000022 	b	c1009ac <portG_write+0xe8>

		if ((rPCONG & (0x3 << pos)) != (0x1 << pos))
 c100920:	e59f3094 	ldr	r3, [pc, #148]	; c1009bc <portG_write+0xf8>
 c100924:	e5932000 	ldr	r2, [r3]
 c100928:	e3a01003 	mov	r1, #3
 c10092c:	e51b3010 	ldr	r3, [fp, #-16]
 c100930:	e1a03311 	lsl	r3, r1, r3
 c100934:	e0022003 	and	r2, r2, r3
 c100938:	e3a01001 	mov	r1, #1
 c10093c:	e51b3010 	ldr	r3, [fp, #-16]
 c100940:	e1a03311 	lsl	r3, r1, r3
 c100944:	e1520003 	cmp	r2, r3
 c100948:	0a000001 	beq	c100954 <portG_write+0x90>
			return -1; // indica error
 c10094c:	e3e03000 	mvn	r3, #0
 c100950:	ea000015 	b	c1009ac <portG_write+0xe8>

		if (val)
 c100954:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c100958:	e3530000 	cmp	r3, #0
 c10095c:	0a000008 	beq	c100984 <portG_write+0xc0>
			// COMPLETAR: poner en rPDATG el bit indicado por pin a 1
			rPDATG |= 1 << pin;
 c100960:	e59f3058 	ldr	r3, [pc, #88]	; c1009c0 <portG_write+0xfc>
 c100964:	e59f2054 	ldr	r2, [pc, #84]	; c1009c0 <portG_write+0xfc>
 c100968:	e5921000 	ldr	r1, [r2]
 c10096c:	e3a00001 	mov	r0, #1
 c100970:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c100974:	e1a02210 	lsl	r2, r0, r2
 c100978:	e1812002 	orr	r2, r1, r2
 c10097c:	e5832000 	str	r2, [r3]
 c100980:	ea000008 	b	c1009a8 <portG_write+0xe4>
		else
			// COMPLETAR: poner en rPDATG el bit indicado por pin a 0
			rPDATG &= ~(1 << pin);
 c100984:	e59f3034 	ldr	r3, [pc, #52]	; c1009c0 <portG_write+0xfc>
 c100988:	e59f2030 	ldr	r2, [pc, #48]	; c1009c0 <portG_write+0xfc>
 c10098c:	e5921000 	ldr	r1, [r2]
 c100990:	e3a00001 	mov	r0, #1
 c100994:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c100998:	e1a02210 	lsl	r2, r0, r2
 c10099c:	e1e02002 	mvn	r2, r2
 c1009a0:	e0012002 	and	r2, r1, r2
 c1009a4:	e5832000 	str	r2, [r3]

		return 0;
 c1009a8:	e3a03000 	mov	r3, #0
}
 c1009ac:	e1a00003 	mov	r0, r3
 c1009b0:	e24bd00c 	sub	sp, fp, #12
 c1009b4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1009b8:	e12fff1e 	bx	lr
 c1009bc:	01d20040 	.word	0x01d20040
 c1009c0:	01d20044 	.word	0x01d20044

0c1009c4 <portG_read>:

int portG_read(int pin, enum digital* val)
{
 c1009c4:	e1a0c00d 	mov	ip, sp
 c1009c8:	e92dd800 	push	{fp, ip, lr, pc}
 c1009cc:	e24cb004 	sub	fp, ip, #4
 c1009d0:	e24dd010 	sub	sp, sp, #16
 c1009d4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c1009d8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
	int pos = pin*2;
 c1009dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1009e0:	e1a03083 	lsl	r3, r3, #1
 c1009e4:	e50b3010 	str	r3, [fp, #-16]

	if (pin < 0 || pin > 7)
 c1009e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1009ec:	e3530000 	cmp	r3, #0
 c1009f0:	ba000002 	blt	c100a00 <portG_read+0x3c>
 c1009f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1009f8:	e3530007 	cmp	r3, #7
 c1009fc:	da000001 	ble	c100a08 <portG_read+0x44>
		return -1; // indica error
 c100a00:	e3e03000 	mvn	r3, #0
 c100a04:	ea000019 	b	c100a70 <portG_read+0xac>

	if (rPCONG & (0x3 << pos))
 c100a08:	e59f3070 	ldr	r3, [pc, #112]	; c100a80 <portG_read+0xbc>
 c100a0c:	e5932000 	ldr	r2, [r3]
 c100a10:	e3a01003 	mov	r1, #3
 c100a14:	e51b3010 	ldr	r3, [fp, #-16]
 c100a18:	e1a03311 	lsl	r3, r1, r3
 c100a1c:	e0023003 	and	r3, r2, r3
 c100a20:	e3530000 	cmp	r3, #0
 c100a24:	0a000001 	beq	c100a30 <portG_read+0x6c>
		return -1; // indica error
 c100a28:	e3e03000 	mvn	r3, #0
 c100a2c:	ea00000f 	b	c100a70 <portG_read+0xac>

	/*COMPLETAR: true si estÃ¡ a 1 en rPDATG el pin indicado por el parÃ¡metro pin*/
	if (rPDATG & (1 << pin))
 c100a30:	e59f304c 	ldr	r3, [pc, #76]	; c100a84 <portG_read+0xc0>
 c100a34:	e5932000 	ldr	r2, [r3]
 c100a38:	e3a01001 	mov	r1, #1
 c100a3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c100a40:	e1a03311 	lsl	r3, r1, r3
 c100a44:	e0023003 	and	r3, r2, r3
 c100a48:	e3530000 	cmp	r3, #0
 c100a4c:	0a000003 	beq	c100a60 <portG_read+0x9c>
		*val = HIGH;
 c100a50:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c100a54:	e3a02001 	mov	r2, #1
 c100a58:	e5c32000 	strb	r2, [r3]
 c100a5c:	ea000002 	b	c100a6c <portG_read+0xa8>
	else
		*val = LOW;
 c100a60:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c100a64:	e3a02000 	mov	r2, #0
 c100a68:	e5c32000 	strb	r2, [r3]

	return 0;
 c100a6c:	e3a03000 	mov	r3, #0
}
 c100a70:	e1a00003 	mov	r0, r3
 c100a74:	e24bd00c 	sub	sp, fp, #12
 c100a78:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100a7c:	e12fff1e 	bx	lr
 c100a80:	01d20040 	.word	0x01d20040
 c100a84:	01d20044 	.word	0x01d20044

0c100a88 <portG_conf_pup>:

int portG_conf_pup(int pin, enum enable st)
{
 c100a88:	e1a0c00d 	mov	ip, sp
 c100a8c:	e92dd800 	push	{fp, ip, lr, pc}
 c100a90:	e24cb004 	sub	fp, ip, #4
 c100a94:	e24dd008 	sub	sp, sp, #8
 c100a98:	e50b0010 	str	r0, [fp, #-16]
 c100a9c:	e1a03001 	mov	r3, r1
 c100aa0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	if (pin < 0 || pin > 7)
 c100aa4:	e51b3010 	ldr	r3, [fp, #-16]
 c100aa8:	e3530000 	cmp	r3, #0
 c100aac:	ba000002 	blt	c100abc <portG_conf_pup+0x34>
 c100ab0:	e51b3010 	ldr	r3, [fp, #-16]
 c100ab4:	e3530007 	cmp	r3, #7
 c100ab8:	da000001 	ble	c100ac4 <portG_conf_pup+0x3c>
		return -1; // indica error
 c100abc:	e3e03000 	mvn	r3, #0
 c100ac0:	ea00001d 	b	c100b3c <portG_conf_pup+0xb4>

	if (st != ENABLE && st != DISABLE)
 c100ac4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c100ac8:	e3530001 	cmp	r3, #1
 c100acc:	0a000004 	beq	c100ae4 <portG_conf_pup+0x5c>
 c100ad0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c100ad4:	e3530000 	cmp	r3, #0
 c100ad8:	0a000001 	beq	c100ae4 <portG_conf_pup+0x5c>
		return -1; // indica error
 c100adc:	e3e03000 	mvn	r3, #0
 c100ae0:	ea000015 	b	c100b3c <portG_conf_pup+0xb4>

	if (st == ENABLE)
 c100ae4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c100ae8:	e3530001 	cmp	r3, #1
 c100aec:	1a000009 	bne	c100b18 <portG_conf_pup+0x90>
		// COMPLETAR: poner el pin de rPUPG indicado por el parametro pin al valor adecuado,
		// para activar la resistencia de pull-up
		rPUPG &= ~(1 << pin);
 c100af0:	e59f3054 	ldr	r3, [pc, #84]	; c100b4c <portG_conf_pup+0xc4>
 c100af4:	e59f2050 	ldr	r2, [pc, #80]	; c100b4c <portG_conf_pup+0xc4>
 c100af8:	e5921000 	ldr	r1, [r2]
 c100afc:	e3a00001 	mov	r0, #1
 c100b00:	e51b2010 	ldr	r2, [fp, #-16]
 c100b04:	e1a02210 	lsl	r2, r0, r2
 c100b08:	e1e02002 	mvn	r2, r2
 c100b0c:	e0012002 	and	r2, r1, r2
 c100b10:	e5832000 	str	r2, [r3]
 c100b14:	ea000007 	b	c100b38 <portG_conf_pup+0xb0>
	else
		// COMPLETAR: poner el pin de rPUPG indicado por el parametro pin al valor adecuado,
		// para desactivar la resistencia de pull-up
		rPUPG |= 1 << pin;
 c100b18:	e59f302c 	ldr	r3, [pc, #44]	; c100b4c <portG_conf_pup+0xc4>
 c100b1c:	e59f2028 	ldr	r2, [pc, #40]	; c100b4c <portG_conf_pup+0xc4>
 c100b20:	e5921000 	ldr	r1, [r2]
 c100b24:	e3a00001 	mov	r0, #1
 c100b28:	e51b2010 	ldr	r2, [fp, #-16]
 c100b2c:	e1a02210 	lsl	r2, r0, r2
 c100b30:	e1812002 	orr	r2, r1, r2
 c100b34:	e5832000 	str	r2, [r3]

	return 0;
 c100b38:	e3a03000 	mov	r3, #0
}
 c100b3c:	e1a00003 	mov	r0, r3
 c100b40:	e24bd00c 	sub	sp, fp, #12
 c100b44:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100b48:	e12fff1e 	bx	lr
 c100b4c:	01d20048 	.word	0x01d20048

0c100b50 <start>:
	.equ rEXTINTPND, 0x1d20054

start:

	/* Pasa a modo supervisor */
    mrs	r0, cpsr
 c100b50:	e10f0000 	mrs	r0, CPSR
    bic	r0, r0, #MODEMASK
 c100b54:	e3c0001f 	bic	r0, r0, #31
    orr	r1, r0, #SVCMODE
 c100b58:	e3801013 	orr	r1, r0, #19
    msr	cpsr_c, r1 
 c100b5c:	e121f001 	msr	CPSR_c, r1

	/* InicializaciÃ³n de la secciÃ³n bss a 0, estÃ¡ndar C */
    ldr	    r3, =Image_ZI_Base
 c100b60:	e59f30b8 	ldr	r3, [pc, #184]	; c100c20 <InitStacks+0x48>
	ldr	    r1, =Image_ZI_Limit	/* Top of zero init segment */
 c100b64:	e59f10b8 	ldr	r1, [pc, #184]	; c100c24 <InitStacks+0x4c>
    mov	    r2, #0
 c100b68:	e3a02000 	mov	r2, #0

0c100b6c <L0>:
L0:
    cmp	    r3, r1	    		/* Zero init */
 c100b6c:	e1530001 	cmp	r3, r1
    strcc   r2, [r3], #4
 c100b70:	34832004 	strcc	r2, [r3], #4
    bcc	    L0
 c100b74:	3afffffc 	bcc	c100b6c <L0>
	/****************************************************/

	/* Desde modo SVC inicializa los SP de todos los modos de ejecuciï¿½n privilegiados */
    bl InitStacks
 c100b78:	eb000016 	bl	c100bd8 <InitStacks>

	ldr r0, =rEXTINTPND
 c100b7c:	e59f00a4 	ldr	r0, [pc, #164]	; c100c28 <InitStacks+0x50>
	ldr r1, =0xff
 c100b80:	e3a010ff 	mov	r1, #255	; 0xff
	str r1, [r0]
 c100b84:	e5801000 	str	r1, [r0]
	ldr r0, =rI_ISPC
 c100b88:	e59f009c 	ldr	r0, [pc, #156]	; c100c2c <InitStacks+0x54>
	ldr r1, =0x1fffffff
 c100b8c:	e3e0120e 	mvn	r1, #-536870912	; 0xe0000000
	str r1, [r0]
 c100b90:	e5801000 	str	r1, [r0]
	ldr r0, =rF_ISPC
 c100b94:	e59f0094 	ldr	r0, [pc, #148]	; c100c30 <InitStacks+0x58>
	ldr r1, =0x1fffffff
 c100b98:	e3e0120e 	mvn	r1, #-536870912	; 0xe0000000
	str r1, [r0]
 c100b9c:	e5801000 	str	r1, [r0]

	/* Enmascara interrupciones */
	ldr r0, =rINTMSK
 c100ba0:	e59f008c 	ldr	r0, [pc, #140]	; c100c34 <InitStacks+0x5c>
	ldr r1, =0x1fffffff
 c100ba4:	e3e0120e 	mvn	r1, #-536870912	; 0xe0000000
    str r1, [r0]
 c100ba8:	e5801000 	str	r1, [r0]

	/* Habilita linea IRQ y FIQ del CPSR */
	mrs r0, cpsr
 c100bac:	e10f0000 	mrs	r0, CPSR
	bic r0, r0, #0xC0
 c100bb0:	e3c000c0 	bic	r0, r0, #192	; 0xc0
	msr cpsr_c, r0
 c100bb4:	e121f000 	msr	CPSR_c, r0
	
	/* Desde modo SVC cambia a modo USR e inicializa el SP_usr */
	mrs r0, cpsr
 c100bb8:	e10f0000 	mrs	r0, CPSR
	bic r0, r0, #MODEMASK
 c100bbc:	e3c0001f 	bic	r0, r0, #31
	orr r1, r0, #USRMODE  
 c100bc0:	e3801010 	orr	r1, r0, #16
	msr cpsr_c, r1
 c100bc4:	e121f001 	msr	CPSR_c, r1
	ldr sp, =USRSTACK
 c100bc8:	e59fd068 	ldr	sp, [pc, #104]	; c100c38 <InitStacks+0x60>

    mov fp, #0
 c100bcc:	e3a0b000 	mov	fp, #0

    bl main
 c100bd0:	eb0003a5 	bl	c101a6c <main>

0c100bd4 <End>:
End:
    B End
 c100bd4:	eafffffe 	b	c100bd4 <End>

0c100bd8 <InitStacks>:

InitStacks:
	mrs r0, cpsr
 c100bd8:	e10f0000 	mrs	r0, CPSR
	bic r0, r0, #MODEMASK
 c100bdc:	e3c0001f 	bic	r0, r0, #31

	orr r1, r0, #UNDMODE  /* desde modo SVC cambia a modo UND e inicializa el SP_und */
 c100be0:	e380101b 	orr	r1, r0, #27
	msr cpsr_c, r1    
 c100be4:	e121f001 	msr	CPSR_c, r1
	ldr sp, =UNDSTACK
 c100be8:	e59fd04c 	ldr	sp, [pc, #76]	; c100c3c <InitStacks+0x64>

	orr r1, r0, #ABTMODE  /* desde modo UND cambia a modo ABT e inicializa el SP_abt */
 c100bec:	e3801017 	orr	r1, r0, #23
	msr cpsr_c, r1 
 c100bf0:	e121f001 	msr	CPSR_c, r1
	ldr sp, =ABTSTACK
 c100bf4:	e59fd044 	ldr	sp, [pc, #68]	; c100c40 <InitStacks+0x68>

	orr r1, r0, #IRQMODE  /* desde modo ABT cambia a modo IRQ e inicializa el SP_abt */
 c100bf8:	e3801012 	orr	r1, r0, #18
	msr cpsr_c, r1
 c100bfc:	e121f001 	msr	CPSR_c, r1
	ldr sp, =IRQSTACK
 c100c00:	e59fd03c 	ldr	sp, [pc, #60]	; c100c44 <InitStacks+0x6c>

	orr r1, r0, #FIQMODE  /* desde modo IRQ cambia a modo FIQ e inicializa el SP_fiq */
 c100c04:	e3801011 	orr	r1, r0, #17
	msr cpsr_c, r1
 c100c08:	e121f001 	msr	CPSR_c, r1
	ldr sp, =FIQSTACK
 c100c0c:	e59fd034 	ldr	sp, [pc, #52]	; c100c48 <InitStacks+0x70>

	orr r1, r0, #SVCMODE  /* desde modo FIQ cambia a modo SVC e inicializa el SP_svc */
 c100c10:	e3801013 	orr	r1, r0, #19
	msr cpsr_c, r1
 c100c14:	e121f001 	msr	CPSR_c, r1
	ldr sp, =SVCSTACK
 c100c18:	e59fd02c 	ldr	sp, [pc, #44]	; c100c4c <InitStacks+0x74>
	
    mov pc, lr
 c100c1c:	e1a0f00e 	mov	pc, lr
 c100c20:	0c100148 	.word	0x0c100148
 c100c24:	0c100160 	.word	0x0c100160
 c100c28:	01d20054 	.word	0x01d20054
 c100c2c:	01e00024 	.word	0x01e00024
 c100c30:	01e0003c 	.word	0x01e0003c
 c100c34:	01e0000c 	.word	0x01e0000c
 c100c38:	0c7ff000 	.word	0x0c7ff000
 c100c3c:	0c7ff200 	.word	0x0c7ff200
 c100c40:	0c7ff300 	.word	0x0c7ff300
 c100c44:	0c7ff400 	.word	0x0c7ff400
 c100c48:	0c7ff500 	.word	0x0c7ff500
 c100c4c:	0c7ff100 	.word	0x0c7ff100

0c100c50 <ic_init>:
/*--- ficheros de cabecera ---*/
#include "44b.h"
#include "intcontroller.h"

void ic_init(void)
{
 c100c50:	e1a0c00d 	mov	ip, sp
 c100c54:	e92dd800 	push	{fp, ip, lr, pc}
 c100c58:	e24cb004 	sub	fp, ip, #4
	 *    Lineas IRQ y FIQ no habilitadas
	 *    Linea IRQ en modo no vectorizado
	 *    Todo por la lÃ­nea IRQ
	 *    Todas las interrupciones enmascaradas
	 **/
	rINTMOD = 0x0; // Configura las lineas como de tipo IRQ
 c100c5c:	e59f3028 	ldr	r3, [pc, #40]	; c100c8c <ic_init+0x3c>
 c100c60:	e3a02000 	mov	r2, #0
 c100c64:	e5832000 	str	r2, [r3]
	rINTCON = 0x7; // IRQ y FIQ enmascaradas, IRQ en modo no vectorizado
 c100c68:	e3a0361e 	mov	r3, #31457280	; 0x1e00000
 c100c6c:	e3a02007 	mov	r2, #7
 c100c70:	e5832000 	str	r2, [r3]
	rINTMSK = ~(0x0); // Enmascara todas las lineas
 c100c74:	e59f3014 	ldr	r3, [pc, #20]	; c100c90 <ic_init+0x40>
 c100c78:	e3e02000 	mvn	r2, #0
 c100c7c:	e5832000 	str	r2, [r3]
}
 c100c80:	e24bd00c 	sub	sp, fp, #12
 c100c84:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100c88:	e12fff1e 	bx	lr
 c100c8c:	01e00008 	.word	0x01e00008
 c100c90:	01e0000c 	.word	0x01e0000c

0c100c94 <ic_conf_irq>:

int ic_conf_irq(enum enable st, enum int_vec vec)
{
 c100c94:	e1a0c00d 	mov	ip, sp
 c100c98:	e92dd800 	push	{fp, ip, lr, pc}
 c100c9c:	e24cb004 	sub	fp, ip, #4
 c100ca0:	e24dd010 	sub	sp, sp, #16
 c100ca4:	e1a02000 	mov	r2, r0
 c100ca8:	e1a03001 	mov	r3, r1
 c100cac:	e54b2015 	strb	r2, [fp, #-21]	; 0xffffffeb
 c100cb0:	e54b3016 	strb	r3, [fp, #-22]	; 0xffffffea
	int conf = rINTCON;
 c100cb4:	e3a0361e 	mov	r3, #31457280	; 0x1e00000
 c100cb8:	e5933000 	ldr	r3, [r3]
 c100cbc:	e50b3010 	str	r3, [fp, #-16]

	if (st != ENABLE && st != DISABLE)
 c100cc0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c100cc4:	e3530001 	cmp	r3, #1
 c100cc8:	0a000004 	beq	c100ce0 <ic_conf_irq+0x4c>
 c100ccc:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c100cd0:	e3530000 	cmp	r3, #0
 c100cd4:	0a000001 	beq	c100ce0 <ic_conf_irq+0x4c>
		return -1;
 c100cd8:	e3e03000 	mvn	r3, #0
 c100cdc:	ea000017 	b	c100d40 <ic_conf_irq+0xac>

	if (vec == VEC)
 c100ce0:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
 c100ce4:	e3530000 	cmp	r3, #0
 c100ce8:	1a000003 	bne	c100cfc <ic_conf_irq+0x68>
		//COMPLETAR: poner la linea IRQ en modo vectorizado
		conf &= ~(1 << 2);
 c100cec:	e51b3010 	ldr	r3, [fp, #-16]
 c100cf0:	e3c33004 	bic	r3, r3, #4
 c100cf4:	e50b3010 	str	r3, [fp, #-16]
 c100cf8:	ea000002 	b	c100d08 <ic_conf_irq+0x74>
	else
		//COMPLETAR: poner la linea IRQ en modo no vectorizado
		conf |= 1 << 2;
 c100cfc:	e51b3010 	ldr	r3, [fp, #-16]
 c100d00:	e3833004 	orr	r3, r3, #4
 c100d04:	e50b3010 	str	r3, [fp, #-16]

	if (st == ENABLE)
 c100d08:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c100d0c:	e3530001 	cmp	r3, #1
 c100d10:	1a000003 	bne	c100d24 <ic_conf_irq+0x90>
		//COMPLETAR: habilitar la linea IRQ
		conf &= ~(1 << 1);
 c100d14:	e51b3010 	ldr	r3, [fp, #-16]
 c100d18:	e3c33002 	bic	r3, r3, #2
 c100d1c:	e50b3010 	str	r3, [fp, #-16]
 c100d20:	ea000002 	b	c100d30 <ic_conf_irq+0x9c>
	else
		//COMPLETAR: deshabilitar la linea IRQ
		conf |= 1 << 1;
 c100d24:	e51b3010 	ldr	r3, [fp, #-16]
 c100d28:	e3833002 	orr	r3, r3, #2
 c100d2c:	e50b3010 	str	r3, [fp, #-16]

	rINTCON = conf;
 c100d30:	e3a0361e 	mov	r3, #31457280	; 0x1e00000
 c100d34:	e51b2010 	ldr	r2, [fp, #-16]
 c100d38:	e5832000 	str	r2, [r3]
	return 0;
 c100d3c:	e3a03000 	mov	r3, #0
}
 c100d40:	e1a00003 	mov	r0, r3
 c100d44:	e24bd00c 	sub	sp, fp, #12
 c100d48:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100d4c:	e12fff1e 	bx	lr

0c100d50 <ic_conf_fiq>:

int ic_conf_fiq(enum enable st)
{
 c100d50:	e1a0c00d 	mov	ip, sp
 c100d54:	e92dd800 	push	{fp, ip, lr, pc}
 c100d58:	e24cb004 	sub	fp, ip, #4
 c100d5c:	e24dd010 	sub	sp, sp, #16
 c100d60:	e1a03000 	mov	r3, r0
 c100d64:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	int ret = 0;
 c100d68:	e3a03000 	mov	r3, #0
 c100d6c:	e50b3010 	str	r3, [fp, #-16]

	if (st == ENABLE)
 c100d70:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c100d74:	e3530001 	cmp	r3, #1
 c100d78:	1a000005 	bne	c100d94 <ic_conf_fiq+0x44>
		//COMPLETAR: habilitar la linea FIQ
		rINTCON &= ~(1 << 0);
 c100d7c:	e3a0361e 	mov	r3, #31457280	; 0x1e00000
 c100d80:	e3a0261e 	mov	r2, #31457280	; 0x1e00000
 c100d84:	e5922000 	ldr	r2, [r2]
 c100d88:	e3c22001 	bic	r2, r2, #1
 c100d8c:	e5832000 	str	r2, [r3]
 c100d90:	ea00000a 	b	c100dc0 <ic_conf_fiq+0x70>
	else if (st == DISABLE)
 c100d94:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c100d98:	e3530000 	cmp	r3, #0
 c100d9c:	1a000005 	bne	c100db8 <ic_conf_fiq+0x68>
		//COMPLETAR: deshabilitar la linea FIQ
		rINTCON |= 1 << 0;
 c100da0:	e3a0361e 	mov	r3, #31457280	; 0x1e00000
 c100da4:	e3a0261e 	mov	r2, #31457280	; 0x1e00000
 c100da8:	e5922000 	ldr	r2, [r2]
 c100dac:	e3822001 	orr	r2, r2, #1
 c100db0:	e5832000 	str	r2, [r3]
 c100db4:	ea000001 	b	c100dc0 <ic_conf_fiq+0x70>
	else
		ret = -1;
 c100db8:	e3e03000 	mvn	r3, #0
 c100dbc:	e50b3010 	str	r3, [fp, #-16]

	return ret;
 c100dc0:	e51b3010 	ldr	r3, [fp, #-16]
}
 c100dc4:	e1a00003 	mov	r0, r3
 c100dc8:	e24bd00c 	sub	sp, fp, #12
 c100dcc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100dd0:	e12fff1e 	bx	lr

0c100dd4 <ic_conf_line>:

int ic_conf_line(enum int_line line, enum int_mode mode)
{
 c100dd4:	e1a0c00d 	mov	ip, sp
 c100dd8:	e92dd800 	push	{fp, ip, lr, pc}
 c100ddc:	e24cb004 	sub	fp, ip, #4
 c100de0:	e24dd010 	sub	sp, sp, #16
 c100de4:	e1a02000 	mov	r2, r0
 c100de8:	e1a03001 	mov	r3, r1
 c100dec:	e54b2015 	strb	r2, [fp, #-21]	; 0xffffffeb
 c100df0:	e54b3016 	strb	r3, [fp, #-22]	; 0xffffffea
	unsigned int bit = INT_BIT(line);
 c100df4:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c100df8:	e3a02001 	mov	r2, #1
 c100dfc:	e1a03312 	lsl	r3, r2, r3
 c100e00:	e50b3010 	str	r3, [fp, #-16]

	if (line < 0 || line > 26)
 c100e04:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c100e08:	e353001a 	cmp	r3, #26
 c100e0c:	9a000001 	bls	c100e18 <ic_conf_line+0x44>
		return -1;
 c100e10:	e3e03000 	mvn	r3, #0
 c100e14:	ea000019 	b	c100e80 <ic_conf_line+0xac>

	if (mode != IRQ && mode != FIQ)
 c100e18:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
 c100e1c:	e3530000 	cmp	r3, #0
 c100e20:	0a000004 	beq	c100e38 <ic_conf_line+0x64>
 c100e24:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
 c100e28:	e3530001 	cmp	r3, #1
 c100e2c:	0a000001 	beq	c100e38 <ic_conf_line+0x64>
		return -1;
 c100e30:	e3e03000 	mvn	r3, #0
 c100e34:	ea000011 	b	c100e80 <ic_conf_line+0xac>

	if (mode == IRQ)
 c100e38:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
 c100e3c:	e3530000 	cmp	r3, #0
 c100e40:	1a000007 	bne	c100e64 <ic_conf_line+0x90>
		//COMPLETAR: poner la linea line en modo IRQ
		rINTMOD &= ~bit;
 c100e44:	e59f3044 	ldr	r3, [pc, #68]	; c100e90 <ic_conf_line+0xbc>
 c100e48:	e59f2040 	ldr	r2, [pc, #64]	; c100e90 <ic_conf_line+0xbc>
 c100e4c:	e5921000 	ldr	r1, [r2]
 c100e50:	e51b2010 	ldr	r2, [fp, #-16]
 c100e54:	e1e02002 	mvn	r2, r2
 c100e58:	e0012002 	and	r2, r1, r2
 c100e5c:	e5832000 	str	r2, [r3]
 c100e60:	ea000005 	b	c100e7c <ic_conf_line+0xa8>
	else
		//COMPLETAR: poner la linea line en modo FIQ
		rINTMOD |= bit;
 c100e64:	e59f3024 	ldr	r3, [pc, #36]	; c100e90 <ic_conf_line+0xbc>
 c100e68:	e59f2020 	ldr	r2, [pc, #32]	; c100e90 <ic_conf_line+0xbc>
 c100e6c:	e5921000 	ldr	r1, [r2]
 c100e70:	e51b2010 	ldr	r2, [fp, #-16]
 c100e74:	e1812002 	orr	r2, r1, r2
 c100e78:	e5832000 	str	r2, [r3]
	return 0;
 c100e7c:	e3a03000 	mov	r3, #0
}
 c100e80:	e1a00003 	mov	r0, r3
 c100e84:	e24bd00c 	sub	sp, fp, #12
 c100e88:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100e8c:	e12fff1e 	bx	lr
 c100e90:	01e00008 	.word	0x01e00008

0c100e94 <ic_enable>:

int ic_enable(enum int_line line)
{
 c100e94:	e1a0c00d 	mov	ip, sp
 c100e98:	e92dd800 	push	{fp, ip, lr, pc}
 c100e9c:	e24cb004 	sub	fp, ip, #4
 c100ea0:	e24dd008 	sub	sp, sp, #8
 c100ea4:	e1a03000 	mov	r3, r0
 c100ea8:	e54b300d 	strb	r3, [fp, #-13]
	if (line < 0 || line > 26)
 c100eac:	e55b300d 	ldrb	r3, [fp, #-13]
 c100eb0:	e353001a 	cmp	r3, #26
 c100eb4:	9a000001 	bls	c100ec0 <ic_enable+0x2c>
		return -1;
 c100eb8:	e3e03000 	mvn	r3, #0
 c100ebc:	ea000009 	b	c100ee8 <ic_enable+0x54>

	//COMPLETAR: habilitar las interrupciones por la linea line
	rINTMSK &= ~(1 << line);
 c100ec0:	e59f3030 	ldr	r3, [pc, #48]	; c100ef8 <ic_enable+0x64>
 c100ec4:	e59f202c 	ldr	r2, [pc, #44]	; c100ef8 <ic_enable+0x64>
 c100ec8:	e5921000 	ldr	r1, [r2]
 c100ecc:	e55b200d 	ldrb	r2, [fp, #-13]
 c100ed0:	e3a00001 	mov	r0, #1
 c100ed4:	e1a02210 	lsl	r2, r0, r2
 c100ed8:	e1e02002 	mvn	r2, r2
 c100edc:	e0012002 	and	r2, r1, r2
 c100ee0:	e5832000 	str	r2, [r3]
	return 0;
 c100ee4:	e3a03000 	mov	r3, #0
}
 c100ee8:	e1a00003 	mov	r0, r3
 c100eec:	e24bd00c 	sub	sp, fp, #12
 c100ef0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100ef4:	e12fff1e 	bx	lr
 c100ef8:	01e0000c 	.word	0x01e0000c

0c100efc <ic_disable>:

int ic_disable(enum int_line line)
{
 c100efc:	e1a0c00d 	mov	ip, sp
 c100f00:	e92dd800 	push	{fp, ip, lr, pc}
 c100f04:	e24cb004 	sub	fp, ip, #4
 c100f08:	e24dd008 	sub	sp, sp, #8
 c100f0c:	e1a03000 	mov	r3, r0
 c100f10:	e54b300d 	strb	r3, [fp, #-13]
	if (line < 0 || line > 26)
 c100f14:	e55b300d 	ldrb	r3, [fp, #-13]
 c100f18:	e353001a 	cmp	r3, #26
 c100f1c:	9a000001 	bls	c100f28 <ic_disable+0x2c>
		return -1;
 c100f20:	e3e03000 	mvn	r3, #0
 c100f24:	ea000008 	b	c100f4c <ic_disable+0x50>

	//COMPLETAR: enmascarar las interrupciones por la linea line
	rINTMSK |= 1 << line;
 c100f28:	e59f302c 	ldr	r3, [pc, #44]	; c100f5c <ic_disable+0x60>
 c100f2c:	e59f2028 	ldr	r2, [pc, #40]	; c100f5c <ic_disable+0x60>
 c100f30:	e5921000 	ldr	r1, [r2]
 c100f34:	e55b200d 	ldrb	r2, [fp, #-13]
 c100f38:	e3a00001 	mov	r0, #1
 c100f3c:	e1a02210 	lsl	r2, r0, r2
 c100f40:	e1812002 	orr	r2, r1, r2
 c100f44:	e5832000 	str	r2, [r3]
	return 0;
 c100f48:	e3a03000 	mov	r3, #0
}
 c100f4c:	e1a00003 	mov	r0, r3
 c100f50:	e24bd00c 	sub	sp, fp, #12
 c100f54:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100f58:	e12fff1e 	bx	lr
 c100f5c:	01e0000c 	.word	0x01e0000c

0c100f60 <ic_cleanflag>:

int ic_cleanflag(enum int_line line)
{
 c100f60:	e1a0c00d 	mov	ip, sp
 c100f64:	e92dd800 	push	{fp, ip, lr, pc}
 c100f68:	e24cb004 	sub	fp, ip, #4
 c100f6c:	e24dd010 	sub	sp, sp, #16
 c100f70:	e1a03000 	mov	r3, r0
 c100f74:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	int bit;

	if (line < 0 || line > 26)
 c100f78:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c100f7c:	e353001a 	cmp	r3, #26
 c100f80:	9a000001 	bls	c100f8c <ic_cleanflag+0x2c>
		return -1;
 c100f84:	e3e03000 	mvn	r3, #0
 c100f88:	ea000017 	b	c100fec <ic_cleanflag+0x8c>

	bit = INT_BIT(line);
 c100f8c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c100f90:	e3a02001 	mov	r2, #1
 c100f94:	e1a03312 	lsl	r3, r2, r3
 c100f98:	e50b3010 	str	r3, [fp, #-16]

	if (rINTMOD & bit)
 c100f9c:	e59f3058 	ldr	r3, [pc, #88]	; c100ffc <ic_cleanflag+0x9c>
 c100fa0:	e5932000 	ldr	r2, [r3]
 c100fa4:	e51b3010 	ldr	r3, [fp, #-16]
 c100fa8:	e0023003 	and	r3, r2, r3
 c100fac:	e3530000 	cmp	r3, #0
 c100fb0:	0a000006 	beq	c100fd0 <ic_cleanflag+0x70>
		//COMPLETAR: borrar el flag de interrupcion correspondiente a la linea line
		//con la linea configurada por FIQ
		rF_ISPC |= bit;
 c100fb4:	e59f3044 	ldr	r3, [pc, #68]	; c101000 <ic_cleanflag+0xa0>
 c100fb8:	e59f2040 	ldr	r2, [pc, #64]	; c101000 <ic_cleanflag+0xa0>
 c100fbc:	e5921000 	ldr	r1, [r2]
 c100fc0:	e51b2010 	ldr	r2, [fp, #-16]
 c100fc4:	e1812002 	orr	r2, r1, r2
 c100fc8:	e5832000 	str	r2, [r3]
 c100fcc:	ea000005 	b	c100fe8 <ic_cleanflag+0x88>
	else
		//COMPLETAR: borrar el flag de interrupcion correspondiente a la linea line
		//con la linea configurada por IRQ
		rI_ISPC |= bit;
 c100fd0:	e59f302c 	ldr	r3, [pc, #44]	; c101004 <ic_cleanflag+0xa4>
 c100fd4:	e59f2028 	ldr	r2, [pc, #40]	; c101004 <ic_cleanflag+0xa4>
 c100fd8:	e5921000 	ldr	r1, [r2]
 c100fdc:	e51b2010 	ldr	r2, [fp, #-16]
 c100fe0:	e1812002 	orr	r2, r1, r2
 c100fe4:	e5832000 	str	r2, [r3]
	return 0;
 c100fe8:	e3a03000 	mov	r3, #0
}
 c100fec:	e1a00003 	mov	r0, r3
 c100ff0:	e24bd00c 	sub	sp, fp, #12
 c100ff4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100ff8:	e12fff1e 	bx	lr
 c100ffc:	01e00008 	.word	0x01e00008
 c101000:	01e0003c 	.word	0x01e0003c
 c101004:	01e00024 	.word	0x01e00024

0c101008 <kb_scan>:
/*--- Variables globales ---*/
volatile static unsigned char *keyboard_base = (unsigned char *)0x06000000;


int kb_scan(void)
{
 c101008:	e1a0c00d 	mov	ip, sp
 c10100c:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c101010:	e24cb004 	sub	fp, ip, #4
 c101014:	e24dd064 	sub	sp, sp, #100	; 0x64
	int value = -1;
 c101018:	e3e03000 	mvn	r3, #0
 c10101c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
	int i;
	char temp;
	int lines[4]  = {0xfd, 0xfb, 0xf7, 0xef};
 c101020:	e59f3178 	ldr	r3, [pc, #376]	; c1011a0 <kb_scan+0x198>
 c101024:	e24bc030 	sub	ip, fp, #48	; 0x30
 c101028:	e893000f 	ldm	r3, {r0, r1, r2, r3}
 c10102c:	e88c000f 	stm	ip, {r0, r1, r2, r3}
	int map[4][4] = {{0, 1, 2, 3},
 c101030:	e59f316c 	ldr	r3, [pc, #364]	; c1011a4 <kb_scan+0x19c>
 c101034:	e24bc070 	sub	ip, fp, #112	; 0x70
 c101038:	e1a04003 	mov	r4, r3
 c10103c:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
 c101040:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
 c101044:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
 c101048:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
 c10104c:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
 c101050:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
 c101054:	e894000f 	ldm	r4, {r0, r1, r2, r3}
 c101058:	e88c000f 	stm	ip, {r0, r1, r2, r3}
					{4, 5, 6, 7},
					{8, 9, 0xA, 0xB},
					{0xC, 0xD, 0xE, 0xF}};

	for (i = 0; (i < 4) && (value == -1); i++) {
 c10105c:	e3a03000 	mov	r3, #0
 c101060:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c101064:	ea000042 	b	c101174 <kb_scan+0x16c>
		temp = *(keyboard_base+lines[i]);
 c101068:	e59f3138 	ldr	r3, [pc, #312]	; c1011a8 <kb_scan+0x1a0>
 c10106c:	e5932000 	ldr	r2, [r3]
 c101070:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
 c101074:	e3e0301b 	mvn	r3, #27
 c101078:	e1a01101 	lsl	r1, r1, #2
 c10107c:	e24b0014 	sub	r0, fp, #20
 c101080:	e0801001 	add	r1, r0, r1
 c101084:	e0813003 	add	r3, r1, r3
 c101088:	e5933000 	ldr	r3, [r3]
 c10108c:	e0823003 	add	r3, r2, r3
 c101090:	e5d33000 	ldrb	r3, [r3]
 c101094:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3

		if(( temp & KEY_VALUE_MASK) != KEY_VALUE_MASK) {
 c101098:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c10109c:	e203300f 	and	r3, r3, #15
 c1010a0:	e353000f 	cmp	r3, #15
 c1010a4:	0a00002f 	beq	c101168 <kb_scan+0x160>
			//COMPLETAR: 
			//      si estÃ¡ el bit 1 a 0 la tecla es la map[i][3]
			//      si estÃ¡ el bit 2 a 0 la tecla es la map[i][2]
			//      si estÃ¡ el bit 3 a 0 la tecla es la map[i][1]
			//      si estÃ¡ el bit 4 a 0 la tecla es la map[i][0]
			if(!(temp & 1 << 0)) {
 c1010a8:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c1010ac:	e2033001 	and	r3, r3, #1
 c1010b0:	e3530000 	cmp	r3, #0
 c1010b4:	1a000007 	bne	c1010d8 <kb_scan+0xd0>
				return map[i][3];
 c1010b8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c1010bc:	e3e0304f 	mvn	r3, #79	; 0x4f
 c1010c0:	e1a02202 	lsl	r2, r2, #4
 c1010c4:	e24b1014 	sub	r1, fp, #20
 c1010c8:	e0812002 	add	r2, r1, r2
 c1010cc:	e0823003 	add	r3, r2, r3
 c1010d0:	e5933000 	ldr	r3, [r3]
 c1010d4:	ea00002d 	b	c101190 <kb_scan+0x188>
			}

			if(!(temp & 1 << 1)) {
 c1010d8:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c1010dc:	e2033002 	and	r3, r3, #2
 c1010e0:	e3530000 	cmp	r3, #0
 c1010e4:	1a000007 	bne	c101108 <kb_scan+0x100>
				return map[i][2];
 c1010e8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c1010ec:	e3e03053 	mvn	r3, #83	; 0x53
 c1010f0:	e1a02202 	lsl	r2, r2, #4
 c1010f4:	e24b0014 	sub	r0, fp, #20
 c1010f8:	e0802002 	add	r2, r0, r2
 c1010fc:	e0823003 	add	r3, r2, r3
 c101100:	e5933000 	ldr	r3, [r3]
 c101104:	ea000021 	b	c101190 <kb_scan+0x188>
			}

			if(!(temp & 1 << 2)) {
 c101108:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c10110c:	e2033004 	and	r3, r3, #4
 c101110:	e3530000 	cmp	r3, #0
 c101114:	1a000007 	bne	c101138 <kb_scan+0x130>
				return map[i][1];
 c101118:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c10111c:	e3e03057 	mvn	r3, #87	; 0x57
 c101120:	e1a02202 	lsl	r2, r2, #4
 c101124:	e24b1014 	sub	r1, fp, #20
 c101128:	e0812002 	add	r2, r1, r2
 c10112c:	e0823003 	add	r3, r2, r3
 c101130:	e5933000 	ldr	r3, [r3]
 c101134:	ea000015 	b	c101190 <kb_scan+0x188>
			}

			if(!(temp & 1 << 3)) {
 c101138:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c10113c:	e2033008 	and	r3, r3, #8
 c101140:	e3530000 	cmp	r3, #0
 c101144:	1a000007 	bne	c101168 <kb_scan+0x160>
				return map[i][0];
 c101148:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c10114c:	e3e0305b 	mvn	r3, #91	; 0x5b
 c101150:	e1a02202 	lsl	r2, r2, #4
 c101154:	e24b0014 	sub	r0, fp, #20
 c101158:	e0802002 	add	r2, r0, r2
 c10115c:	e0823003 	add	r3, r2, r3
 c101160:	e5933000 	ldr	r3, [r3]
 c101164:	ea000009 	b	c101190 <kb_scan+0x188>
	int map[4][4] = {{0, 1, 2, 3},
					{4, 5, 6, 7},
					{8, 9, 0xA, 0xB},
					{0xC, 0xD, 0xE, 0xF}};

	for (i = 0; (i < 4) && (value == -1); i++) {
 c101168:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10116c:	e2833001 	add	r3, r3, #1
 c101170:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c101174:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c101178:	e3530003 	cmp	r3, #3
 c10117c:	ca000002 	bgt	c10118c <kb_scan+0x184>
 c101180:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c101184:	e3730001 	cmn	r3, #1
 c101188:	0affffb6 	beq	c101068 <kb_scan+0x60>
			}

	}
	}

	return value;
 c10118c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
}
 c101190:	e1a00003 	mov	r0, r3
 c101194:	e24bd010 	sub	sp, fp, #16
 c101198:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c10119c:	e12fff1e 	bx	lr
 c1011a0:	0c100068 	.word	0x0c100068
 c1011a4:	0c100078 	.word	0x0c100078
 c1011a8:	0c100060 	.word	0x0c100060

0c1011ac <leds_init>:
// significativos, cada uno para un led
// 1 encendido y 0 apagado
static unsigned int status = 0;

void leds_init( void )
{
 c1011ac:	e1a0c00d 	mov	ip, sp
 c1011b0:	e92dd800 	push	{fp, ip, lr, pc}
 c1011b4:	e24cb004 	sub	fp, ip, #4
	//COMPLETAR usando el interfaz del puerto B definido en gpio.h
	// hay que configurar los pines 9 y 10 como pines de salida
	portB_conf(BIT_LED1, OUTPUT);
 c1011b8:	e3a00009 	mov	r0, #9
 c1011bc:	e3a01001 	mov	r1, #1
 c1011c0:	ebfffc3c 	bl	c1002b8 <portB_conf>
	portB_conf(BIT_LED2, OUTPUT);
 c1011c4:	e3a0000a 	mov	r0, #10
 c1011c8:	e3a01001 	mov	r1, #1
 c1011cc:	ebfffc39 	bl	c1002b8 <portB_conf>
	leds_display( status );
 c1011d0:	e59f3014 	ldr	r3, [pc, #20]	; c1011ec <leds_init+0x40>
 c1011d4:	e5933000 	ldr	r3, [r3]
 c1011d8:	e1a00003 	mov	r0, r3
 c1011dc:	eb000073 	bl	c1013b0 <leds_display>
}
 c1011e0:	e24bd00c 	sub	sp, fp, #12
 c1011e4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1011e8:	e12fff1e 	bx	lr
 c1011ec:	0c100148 	.word	0x0c100148

0c1011f0 <led1_on>:

void led1_on( void )
{
 c1011f0:	e1a0c00d 	mov	ip, sp
 c1011f4:	e92dd800 	push	{fp, ip, lr, pc}
 c1011f8:	e24cb004 	sub	fp, ip, #4
	status |=  LED1;
 c1011fc:	e59f3028 	ldr	r3, [pc, #40]	; c10122c <led1_on+0x3c>
 c101200:	e5933000 	ldr	r3, [r3]
 c101204:	e3832001 	orr	r2, r3, #1
 c101208:	e59f301c 	ldr	r3, [pc, #28]	; c10122c <led1_on+0x3c>
 c10120c:	e5832000 	str	r2, [r3]
	leds_display( status );
 c101210:	e59f3014 	ldr	r3, [pc, #20]	; c10122c <led1_on+0x3c>
 c101214:	e5933000 	ldr	r3, [r3]
 c101218:	e1a00003 	mov	r0, r3
 c10121c:	eb000063 	bl	c1013b0 <leds_display>
}
 c101220:	e24bd00c 	sub	sp, fp, #12
 c101224:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101228:	e12fff1e 	bx	lr
 c10122c:	0c100148 	.word	0x0c100148

0c101230 <led1_off>:

void led1_off( void )
{
 c101230:	e1a0c00d 	mov	ip, sp
 c101234:	e92dd800 	push	{fp, ip, lr, pc}
 c101238:	e24cb004 	sub	fp, ip, #4
	status &=  ~LED1;
 c10123c:	e59f3028 	ldr	r3, [pc, #40]	; c10126c <led1_off+0x3c>
 c101240:	e5933000 	ldr	r3, [r3]
 c101244:	e3c32001 	bic	r2, r3, #1
 c101248:	e59f301c 	ldr	r3, [pc, #28]	; c10126c <led1_off+0x3c>
 c10124c:	e5832000 	str	r2, [r3]
	leds_display( status );
 c101250:	e59f3014 	ldr	r3, [pc, #20]	; c10126c <led1_off+0x3c>
 c101254:	e5933000 	ldr	r3, [r3]
 c101258:	e1a00003 	mov	r0, r3
 c10125c:	eb000053 	bl	c1013b0 <leds_display>
}
 c101260:	e24bd00c 	sub	sp, fp, #12
 c101264:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101268:	e12fff1e 	bx	lr
 c10126c:	0c100148 	.word	0x0c100148

0c101270 <led2_on>:

void led2_on( void )
{
 c101270:	e1a0c00d 	mov	ip, sp
 c101274:	e92dd800 	push	{fp, ip, lr, pc}
 c101278:	e24cb004 	sub	fp, ip, #4
	status |=  LED2;
 c10127c:	e59f3028 	ldr	r3, [pc, #40]	; c1012ac <led2_on+0x3c>
 c101280:	e5933000 	ldr	r3, [r3]
 c101284:	e3832002 	orr	r2, r3, #2
 c101288:	e59f301c 	ldr	r3, [pc, #28]	; c1012ac <led2_on+0x3c>
 c10128c:	e5832000 	str	r2, [r3]
	leds_display( status );
 c101290:	e59f3014 	ldr	r3, [pc, #20]	; c1012ac <led2_on+0x3c>
 c101294:	e5933000 	ldr	r3, [r3]
 c101298:	e1a00003 	mov	r0, r3
 c10129c:	eb000043 	bl	c1013b0 <leds_display>
}
 c1012a0:	e24bd00c 	sub	sp, fp, #12
 c1012a4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1012a8:	e12fff1e 	bx	lr
 c1012ac:	0c100148 	.word	0x0c100148

0c1012b0 <led2_off>:

void led2_off( void )
{
 c1012b0:	e1a0c00d 	mov	ip, sp
 c1012b4:	e92dd800 	push	{fp, ip, lr, pc}
 c1012b8:	e24cb004 	sub	fp, ip, #4
	status &=  ~LED2;
 c1012bc:	e59f3028 	ldr	r3, [pc, #40]	; c1012ec <led2_off+0x3c>
 c1012c0:	e5933000 	ldr	r3, [r3]
 c1012c4:	e3c32002 	bic	r2, r3, #2
 c1012c8:	e59f301c 	ldr	r3, [pc, #28]	; c1012ec <led2_off+0x3c>
 c1012cc:	e5832000 	str	r2, [r3]
	leds_display( status );
 c1012d0:	e59f3014 	ldr	r3, [pc, #20]	; c1012ec <led2_off+0x3c>
 c1012d4:	e5933000 	ldr	r3, [r3]
 c1012d8:	e1a00003 	mov	r0, r3
 c1012dc:	eb000033 	bl	c1013b0 <leds_display>
}
 c1012e0:	e24bd00c 	sub	sp, fp, #12
 c1012e4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1012e8:	e12fff1e 	bx	lr
 c1012ec:	0c100148 	.word	0x0c100148

0c1012f0 <led1_switch>:

void led1_switch( void )
{
 c1012f0:	e1a0c00d 	mov	ip, sp
 c1012f4:	e92dd800 	push	{fp, ip, lr, pc}
 c1012f8:	e24cb004 	sub	fp, ip, #4
	status ^= LED1;
 c1012fc:	e59f3028 	ldr	r3, [pc, #40]	; c10132c <led1_switch+0x3c>
 c101300:	e5933000 	ldr	r3, [r3]
 c101304:	e2232001 	eor	r2, r3, #1
 c101308:	e59f301c 	ldr	r3, [pc, #28]	; c10132c <led1_switch+0x3c>
 c10130c:	e5832000 	str	r2, [r3]
	leds_display( status );
 c101310:	e59f3014 	ldr	r3, [pc, #20]	; c10132c <led1_switch+0x3c>
 c101314:	e5933000 	ldr	r3, [r3]
 c101318:	e1a00003 	mov	r0, r3
 c10131c:	eb000023 	bl	c1013b0 <leds_display>
}
 c101320:	e24bd00c 	sub	sp, fp, #12
 c101324:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101328:	e12fff1e 	bx	lr
 c10132c:	0c100148 	.word	0x0c100148

0c101330 <led2_switch>:

void led2_switch( void )
{
 c101330:	e1a0c00d 	mov	ip, sp
 c101334:	e92dd800 	push	{fp, ip, lr, pc}
 c101338:	e24cb004 	sub	fp, ip, #4
	status ^= LED2;
 c10133c:	e59f3028 	ldr	r3, [pc, #40]	; c10136c <led2_switch+0x3c>
 c101340:	e5933000 	ldr	r3, [r3]
 c101344:	e2232002 	eor	r2, r3, #2
 c101348:	e59f301c 	ldr	r3, [pc, #28]	; c10136c <led2_switch+0x3c>
 c10134c:	e5832000 	str	r2, [r3]
	leds_display( status );
 c101350:	e59f3014 	ldr	r3, [pc, #20]	; c10136c <led2_switch+0x3c>
 c101354:	e5933000 	ldr	r3, [r3]
 c101358:	e1a00003 	mov	r0, r3
 c10135c:	eb000013 	bl	c1013b0 <leds_display>
}
 c101360:	e24bd00c 	sub	sp, fp, #12
 c101364:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101368:	e12fff1e 	bx	lr
 c10136c:	0c100148 	.word	0x0c100148

0c101370 <leds_switch>:

void leds_switch( void ){
 c101370:	e1a0c00d 	mov	ip, sp
 c101374:	e92dd800 	push	{fp, ip, lr, pc}
 c101378:	e24cb004 	sub	fp, ip, #4
	status ^= (LED1 | LED2);
 c10137c:	e59f3028 	ldr	r3, [pc, #40]	; c1013ac <leds_switch+0x3c>
 c101380:	e5933000 	ldr	r3, [r3]
 c101384:	e2232003 	eor	r2, r3, #3
 c101388:	e59f301c 	ldr	r3, [pc, #28]	; c1013ac <leds_switch+0x3c>
 c10138c:	e5832000 	str	r2, [r3]
	leds_display( status );
 c101390:	e59f3014 	ldr	r3, [pc, #20]	; c1013ac <leds_switch+0x3c>
 c101394:	e5933000 	ldr	r3, [r3]
 c101398:	e1a00003 	mov	r0, r3
 c10139c:	eb000003 	bl	c1013b0 <leds_display>
}
 c1013a0:	e24bd00c 	sub	sp, fp, #12
 c1013a4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1013a8:	e12fff1e 	bx	lr
 c1013ac:	0c100148 	.word	0x0c100148

0c1013b0 <leds_display>:

void leds_display( unsigned int leds_status )
{
 c1013b0:	e1a0c00d 	mov	ip, sp
 c1013b4:	e92dd800 	push	{fp, ip, lr, pc}
 c1013b8:	e24cb004 	sub	fp, ip, #4
 c1013bc:	e24dd008 	sub	sp, sp, #8
 c1013c0:	e50b0010 	str	r0, [fp, #-16]
	status = leds_status;
 c1013c4:	e59f3074 	ldr	r3, [pc, #116]	; c101440 <leds_display+0x90>
 c1013c8:	e51b2010 	ldr	r2, [fp, #-16]
 c1013cc:	e5832000 	str	r2, [r3]
	
	// LED 1
	if( status & LED1 )
 c1013d0:	e59f3068 	ldr	r3, [pc, #104]	; c101440 <leds_display+0x90>
 c1013d4:	e5933000 	ldr	r3, [r3]
 c1013d8:	e2033001 	and	r3, r3, #1
 c1013dc:	e20330ff 	and	r3, r3, #255	; 0xff
 c1013e0:	e3530000 	cmp	r3, #0
 c1013e4:	0a000003 	beq	c1013f8 <leds_display+0x48>
		//COMPLETAR usando el interfaz del puerto B definido en gpio.h
		//hay que poner a nivel bajo el bit correspondiente al led 1
		portB_write(BIT_LED1, DISABLE);
 c1013e8:	e3a00009 	mov	r0, #9
 c1013ec:	e3a01000 	mov	r1, #0
 c1013f0:	ebfffbe2 	bl	c100380 <portB_write>
 c1013f4:	ea000002 	b	c101404 <leds_display+0x54>
	else
		//COMPLETAR usando el interfaz del puerto B definido en gpio.h
		//hay que poner a nivel alto el bit correspondiente al led 1
		portB_write(BIT_LED1, ENABLE);
 c1013f8:	e3a00009 	mov	r0, #9
 c1013fc:	e3a01001 	mov	r1, #1
 c101400:	ebfffbde 	bl	c100380 <portB_write>

	// LED 2
	if( status & LED2 )
 c101404:	e59f3034 	ldr	r3, [pc, #52]	; c101440 <leds_display+0x90>
 c101408:	e5933000 	ldr	r3, [r3]
 c10140c:	e2033002 	and	r3, r3, #2
 c101410:	e3530000 	cmp	r3, #0
 c101414:	0a000003 	beq	c101428 <leds_display+0x78>
		//COMPLETAR usando el interfaz del puerto B definido en gpio.h
		//hay que poner a nivel bajo el bit correspondiente al led 2
		portB_write(BIT_LED2, DISABLE);
 c101418:	e3a0000a 	mov	r0, #10
 c10141c:	e3a01000 	mov	r1, #0
 c101420:	ebfffbd6 	bl	c100380 <portB_write>
 c101424:	ea000002 	b	c101434 <leds_display+0x84>
	else
		//COMPLETAR usando el interfaz del puerto B definido en gpio.h
		//hay que poner a nivel alto el bit correspondiente al led 2
		portB_write(BIT_LED2, ENABLE);
 c101428:	e3a0000a 	mov	r0, #10
 c10142c:	e3a01001 	mov	r1, #1
 c101430:	ebfffbd2 	bl	c100380 <portB_write>
}
 c101434:	e24bd00c 	sub	sp, fp, #12
 c101438:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10143c:	e12fff1e 	bx	lr
 c101440:	0c100148 	.word	0x0c100148

0c101444 <timer_ISR>:
void rtc_ISR(void)  __attribute__ ((interrupt ("IRQ")));
void rtc_alarm_ISR(void)  __attribute__ ((interrupt ("IRQ")));


void timer_ISR(void)
{
 c101444:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101448:	e1a0c00d 	mov	ip, sp
 c10144c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101450:	e24cb004 	sub	fp, ip, #4
	//Timer ISR Implementation
	led1_switch();
 c101454:	ebffffa5 	bl	c1012f0 <led1_switch>
	led2_switch();
 c101458:	ebffffb4 	bl	c101330 <led2_switch>

	ic_cleanflag(INT_TIMER0);
 c10145c:	e3a0000d 	mov	r0, #13
 c101460:	ebfffebe 	bl	c100f60 <ic_cleanflag>
}
 c101464:	e24bd01c 	sub	sp, fp, #28
 c101468:	e89d680f 	ldm	sp, {r0, r1, r2, r3, fp, sp, lr}
 c10146c:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c101470:	e25ef004 	subs	pc, lr, #4

0c101474 <button_ISR>:

void button_ISR(void)
{
 c101474:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101478:	e1a0c00d 	mov	ip, sp
 c10147c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101480:	e24cb004 	sub	fp, ip, #4
 c101484:	e24dd008 	sub	sp, sp, #8
	unsigned int whicheint = rEXTINTPND;
 c101488:	e59f3080 	ldr	r3, [pc, #128]	; c101510 <button_ISR+0x9c>
 c10148c:	e5933000 	ldr	r3, [r3]
 c101490:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
	unsigned int buttons = (whicheint >> 2) & 0x3;
 c101494:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c101498:	e1a03123 	lsr	r3, r3, #2
 c10149c:	e2033003 	and	r3, r3, #3
 c1014a0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
	if (buttons & BUT2) {
		//BUT2 pressed
	}

	// eliminamos rebotes
	Delay(2000);
 c1014a4:	e3a00e7d 	mov	r0, #2000	; 0x7d0
 c1014a8:	eb000813 	bl	c1034fc <Delay>
	// borramos el flag en extintpnd
	//COMPLETAR: debemos borrar las peticiones de interrupciÃ³n en
	//EXTINTPND escribiendo un 1 en los flags que queremos borrar (los
	//correspondientes a los pulsadores pulsados)

	if(buttons & BUT1)
 c1014ac:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c1014b0:	e2033001 	and	r3, r3, #1
 c1014b4:	e20330ff 	and	r3, r3, #255	; 0xff
 c1014b8:	e3530000 	cmp	r3, #0
 c1014bc:	0a000004 	beq	c1014d4 <button_ISR+0x60>
		//Borrar bit 2
		rEXTINTPND |= 1 << 2;
 c1014c0:	e59f3048 	ldr	r3, [pc, #72]	; c101510 <button_ISR+0x9c>
 c1014c4:	e59f2044 	ldr	r2, [pc, #68]	; c101510 <button_ISR+0x9c>
 c1014c8:	e5922000 	ldr	r2, [r2]
 c1014cc:	e3822004 	orr	r2, r2, #4
 c1014d0:	e5832000 	str	r2, [r3]

	if(buttons & BUT2)
 c1014d4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c1014d8:	e2033002 	and	r3, r3, #2
 c1014dc:	e3530000 	cmp	r3, #0
 c1014e0:	0a000004 	beq	c1014f8 <button_ISR+0x84>
		//Borrar bit 3
		rEXTINTPND |= 1 << 3;
 c1014e4:	e59f3024 	ldr	r3, [pc, #36]	; c101510 <button_ISR+0x9c>
 c1014e8:	e59f2020 	ldr	r2, [pc, #32]	; c101510 <button_ISR+0x9c>
 c1014ec:	e5922000 	ldr	r2, [r2]
 c1014f0:	e3822008 	orr	r2, r2, #8
 c1014f4:	e5832000 	str	r2, [r3]

	ic_cleanflag(INT_EINT4567);
 c1014f8:	e3a00015 	mov	r0, #21
 c1014fc:	ebfffe97 	bl	c100f60 <ic_cleanflag>
}
 c101500:	e24bd01c 	sub	sp, fp, #28
 c101504:	e89d680f 	ldm	sp, {r0, r1, r2, r3, fp, sp, lr}
 c101508:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c10150c:	e25ef004 	subs	pc, lr, #4
 c101510:	01d20054 	.word	0x01d20054

0c101514 <keyboard_ISR>:

void keyboard_ISR(void)
{
 c101514:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101518:	e1a0c00d 	mov	ip, sp
 c10151c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101520:	e24cb004 	sub	fp, ip, #4
 c101524:	e24dd008 	sub	sp, sp, #8
	static unsigned n = 0;
	int key = -1;
 c101528:	e3e03000 	mvn	r3, #0
 c10152c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

	/* Eliminar rebotes de presiÃ³n */
	Delay(200);
 c101530:	e3a000c8 	mov	r0, #200	; 0xc8
 c101534:	eb0007f0 	bl	c1034fc <Delay>
	
	/* Escaneo de tecla */
	key = kb_scan();
 c101538:	ebfffeb2 	bl	c101008 <kb_scan>
 c10153c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0

	n = (n+1) & 0xf;
 c101540:	e59f3044 	ldr	r3, [pc, #68]	; c10158c <keyboard_ISR+0x78>
 c101544:	e5933000 	ldr	r3, [r3]
 c101548:	e2833001 	add	r3, r3, #1
 c10154c:	e203200f 	and	r2, r3, #15
 c101550:	e59f3034 	ldr	r3, [pc, #52]	; c10158c <keyboard_ISR+0x78>
 c101554:	e5832000 	str	r2, [r3]

	if (key != -1) {
 c101558:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10155c:	e3730001 	cmn	r3, #1
 c101560:	0a000001 	beq	c10156c <keyboard_ISR+0x58>
		/* Visualizacion en el display */
		//COMPLETAR: mostrar la tecla en el display utilizando el interfaz
		//definido en D8Led.h

		D8Led_digit(key);
 c101564:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
 c101568:	ebfffb1c 	bl	c1001e0 <D8Led_digit>
		/* Esperar a que la tecla se suelte, consultando el registro de datos */		
		//while (/*COMPLETAR: true si estÃ¡ pulsada la tecla (leer del registro rPDATG)*/);
	}

    /* Eliminar rebotes de depresiÃ³n */
    Delay(200);
 c10156c:	e3a000c8 	mov	r0, #200	; 0xc8
 c101570:	eb0007e1 	bl	c1034fc <Delay>
     
    /* Borrar interrupciones pendientes */
	//COMPLETAR
	//borrar la interrupciÃ³n por la lÃ­nea EINT1 en el registro rI_ISPC
    ic_cleanflag(INT_EINT1);
 c101574:	e3a00018 	mov	r0, #24
 c101578:	ebfffe78 	bl	c100f60 <ic_cleanflag>
}
 c10157c:	e24bd01c 	sub	sp, fp, #28
 c101580:	e89d680f 	ldm	sp, {r0, r1, r2, r3, fp, sp, lr}
 c101584:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c101588:	e25ef004 	subs	pc, lr, #4
 c10158c:	0c10015c 	.word	0x0c10015c

0c101590 <setup>:

int setup(void)
{
 c101590:	e1a0c00d 	mov	ip, sp
 c101594:	e92dd800 	push	{fp, ip, lr, pc}
 c101598:	e24cb004 	sub	fp, ip, #4
	leds_init();
 c10159c:	ebffff02 	bl	c1011ac <leds_init>
	D8Led_init();
 c1015a0:	ebfffaee 	bl	c100160 <D8Led_init>
	D8Led_segment(0x02); // "-" Symbol
 c1015a4:	e3a00002 	mov	r0, #2
 c1015a8:	ebfffaf5 	bl	c100184 <D8Led_segment>
	led1_on();
 c1015ac:	ebffff0f 	bl	c1011f0 <led1_on>
	//COMPLETAR: utilizando el interfaz para el puerto G definido en gpio.h
	//configurar los pines 1, 6 y 7 del puerto G para poder generar interrupciones
	//externas por flanco de bajada por ellos y activar las correspondientes
	//resistencias de pull-up.

	portG_conf(6, EINT);
 c1015b0:	e3a00006 	mov	r0, #6
 c1015b4:	e3a01003 	mov	r1, #3
 c1015b8:	ebfffb9f 	bl	c10043c <portG_conf>
	portG_eint_trig(6, FALLING);
 c1015bc:	e3a00006 	mov	r0, #6
 c1015c0:	e3a01002 	mov	r1, #2
 c1015c4:	ebfffc0a 	bl	c1005f4 <portG_eint_trig>
	portG_conf_pup(6, ENABLE);
 c1015c8:	e3a00006 	mov	r0, #6
 c1015cc:	e3a01001 	mov	r1, #1
 c1015d0:	ebfffd2c 	bl	c100a88 <portG_conf_pup>

	portG_conf(7, EINT);
 c1015d4:	e3a00007 	mov	r0, #7
 c1015d8:	e3a01003 	mov	r1, #3
 c1015dc:	ebfffb96 	bl	c10043c <portG_conf>
	portG_eint_trig(7, FALLING);
 c1015e0:	e3a00007 	mov	r0, #7
 c1015e4:	e3a01002 	mov	r1, #2
 c1015e8:	ebfffc01 	bl	c1005f4 <portG_eint_trig>
	portG_conf_pup(7, ENABLE);
 c1015ec:	e3a00007 	mov	r0, #7
 c1015f0:	e3a01001 	mov	r1, #1
 c1015f4:	ebfffd23 	bl	c100a88 <portG_conf_pup>
	/********************************************************************/

	/* ConfiguraciÃ³n del timer */

	//TIMER0: 0.5 seconds
	tmr_set_mode(TIMER0, RELOAD);
 c1015f8:	e3a00000 	mov	r0, #0
 c1015fc:	e3a01001 	mov	r1, #1
 c101600:	eb0005be 	bl	c102d00 <tmr_set_mode>
	tmr_set_prescaler(TIMER0, 255);
 c101604:	e3a00000 	mov	r0, #0
 c101608:	e3a010ff 	mov	r1, #255	; 0xff
 c10160c:	eb0004ba 	bl	c1028fc <tmr_set_prescaler>
	tmr_set_divider(TIMER0, D1_8);
 c101610:	e3a00000 	mov	r0, #0
 c101614:	e3a01002 	mov	r1, #2
 c101618:	eb0004ee 	bl	c1029d8 <tmr_set_divider>
	tmr_set_count(TIMER0, 62500 >> 3, 1);
 c10161c:	e3a00000 	mov	r0, #0
 c101620:	e59f10a0 	ldr	r1, [pc, #160]	; c1016c8 <setup+0x138>
 c101624:	e3a02001 	mov	r2, #1
 c101628:	eb000539 	bl	c102b14 <tmr_set_count>

	tmr_update(TIMER0);
 c10162c:	e3a00000 	mov	r0, #0
 c101630:	eb000584 	bl	c102c48 <tmr_update>

	//COMPLETAR: tomar el cÃ³digo de la segunda parte

	tmr_start(TIMER0);
 c101634:	e3a00000 	mov	r0, #0
 c101638:	eb0005f3 	bl	c102e0c <tmr_start>
	//if (RL.moving)
	//
	/***************************/

	// Registramos las ISRs
	pISR_TIMER0 = (unsigned)timer_ISR;//COMPLETAR: registrar la RTI del timer
 c10163c:	e59f3088 	ldr	r3, [pc, #136]	; c1016cc <setup+0x13c>
 c101640:	e59f2088 	ldr	r2, [pc, #136]	; c1016d0 <setup+0x140>
 c101644:	e5832000 	str	r2, [r3]
	pISR_EINT4567 = (unsigned)button_ISR; //COMPLETAR: registrar la RTI de los botones
 c101648:	e59f3084 	ldr	r3, [pc, #132]	; c1016d4 <setup+0x144>
 c10164c:	e59f2084 	ldr	r2, [pc, #132]	; c1016d8 <setup+0x148>
 c101650:	e5832000 	str	r2, [r3]
	pISR_EINT1    = (unsigned)keyboard_ISR; //COMPLETAR: registrar la RTI del teclado
 c101654:	e59f3080 	ldr	r3, [pc, #128]	; c1016dc <setup+0x14c>
 c101658:	e59f2080 	ldr	r2, [pc, #128]	; c1016e0 <setup+0x150>
 c10165c:	e5832000 	str	r2, [r3]
	 * Configuramos el timer 0 en modo IRQ y habilitamos esta lÃ­nea
	 * Configuramos la lÃ­nea EINT4567 en modo IRQ y la habilitamos
	 * Configuramos la lÃ­nea EINT1 en modo IRQ y la habilitamos
	 */

	uart0_init();
 c101660:	eb000652 	bl	c102fb0 <uart0_init>
	rtc_init();
 c101664:	eb00011f 	bl	c101ae8 <rtc_init>
	ic_init();
 c101668:	ebfffd78 	bl	c100c50 <ic_init>
	//		habilitar la lÃ­nea INT_EINT4567
	//		habilitar la lÃ­nea INT_EINT1

	/***************************************************/

	ic_conf_irq(ENABLE, VEC);
 c10166c:	e3a00001 	mov	r0, #1
 c101670:	e3a01000 	mov	r1, #0
 c101674:	ebfffd86 	bl	c100c94 <ic_conf_irq>
	ic_conf_fiq(DISABLE);
 c101678:	e3a00000 	mov	r0, #0
 c10167c:	ebfffdb3 	bl	c100d50 <ic_conf_fiq>

	ic_conf_line(INT_TIMER0, IRQ);
 c101680:	e3a0000d 	mov	r0, #13
 c101684:	e3a01000 	mov	r1, #0
 c101688:	ebfffdd1 	bl	c100dd4 <ic_conf_line>
	ic_conf_line(INT_EINT4567, IRQ);
 c10168c:	e3a00015 	mov	r0, #21
 c101690:	e3a01000 	mov	r1, #0
 c101694:	ebfffdce 	bl	c100dd4 <ic_conf_line>
	ic_conf_line(INT_EINT1, IRQ);
 c101698:	e3a00018 	mov	r0, #24
 c10169c:	e3a01000 	mov	r1, #0
 c1016a0:	ebfffdcb 	bl	c100dd4 <ic_conf_line>

	//ic_enable(INT_TIMER0);
	//ic_enable(INT_EINT4567);
	//ic_enable(INT_EINT1);

	ic_enable(INT_GLOBAL);
 c1016a4:	e3a0001a 	mov	r0, #26
 c1016a8:	ebfffdf9 	bl	c100e94 <ic_enable>

	Delay(0);
 c1016ac:	e3a00000 	mov	r0, #0
 c1016b0:	eb000791 	bl	c1034fc <Delay>
	return 0;
 c1016b4:	e3a03000 	mov	r3, #0
}
 c1016b8:	e1a00003 	mov	r0, r3
 c1016bc:	e24bd00c 	sub	sp, fp, #12
 c1016c0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1016c4:	e12fff1e 	bx	lr
 c1016c8:	00001e84 	.word	0x00001e84
 c1016cc:	0c7fff54 	.word	0x0c7fff54
 c1016d0:	0c101444 	.word	0x0c101444
 c1016d4:	0c7fff74 	.word	0x0c7fff74
 c1016d8:	0c101474 	.word	0x0c101474
 c1016dc:	0c7fff80 	.word	0x0c7fff80
 c1016e0:	0c101514 	.word	0x0c101514

0c1016e4 <print_date>:

void print_date(rtc_time_t* rtc_time)
{
 c1016e4:	e1a0c00d 	mov	ip, sp
 c1016e8:	e92dd800 	push	{fp, ip, lr, pc}
 c1016ec:	e24cb004 	sub	fp, ip, #4
 c1016f0:	e24dd008 	sub	sp, sp, #8
 c1016f4:	e50b0010 	str	r0, [fp, #-16]
	uart0_puts( "\nFecha y hora: " );
 c1016f8:	e59f0094 	ldr	r0, [pc, #148]	; c101794 <print_date+0xb0>
 c1016fc:	eb00066a 	bl	c1030ac <uart0_puts>
	uart0_putint( rtc_time->mday );
 c101700:	e51b3010 	ldr	r3, [fp, #-16]
 c101704:	e5d33003 	ldrb	r3, [r3, #3]
 c101708:	e1a00003 	mov	r0, r3
 c10170c:	eb00067a 	bl	c1030fc <uart0_putint>
	uart0_putchar( '/' );
 c101710:	e3a0002f 	mov	r0, #47	; 0x2f
 c101714:	eb00063e 	bl	c103014 <uart0_putchar>
	uart0_putint( rtc_time->mon );
 c101718:	e51b3010 	ldr	r3, [fp, #-16]
 c10171c:	e5d33005 	ldrb	r3, [r3, #5]
 c101720:	e1a00003 	mov	r0, r3
 c101724:	eb000674 	bl	c1030fc <uart0_putint>
	uart0_putchar( '/' );
 c101728:	e3a0002f 	mov	r0, #47	; 0x2f
 c10172c:	eb000638 	bl	c103014 <uart0_putchar>
	uart0_putint( rtc_time->year );
 c101730:	e51b3010 	ldr	r3, [fp, #-16]
 c101734:	e5d33006 	ldrb	r3, [r3, #6]
 c101738:	e1a00003 	mov	r0, r3
 c10173c:	eb00066e 	bl	c1030fc <uart0_putint>
	uart0_putchar( ' ' );
 c101740:	e3a00020 	mov	r0, #32
 c101744:	eb000632 	bl	c103014 <uart0_putchar>
	uart0_putint( rtc_time->hour );
 c101748:	e51b3010 	ldr	r3, [fp, #-16]
 c10174c:	e5d33002 	ldrb	r3, [r3, #2]
 c101750:	e1a00003 	mov	r0, r3
 c101754:	eb000668 	bl	c1030fc <uart0_putint>
	uart0_putchar( ':' );
 c101758:	e3a0003a 	mov	r0, #58	; 0x3a
 c10175c:	eb00062c 	bl	c103014 <uart0_putchar>
	uart0_putint( rtc_time->min );
 c101760:	e51b3010 	ldr	r3, [fp, #-16]
 c101764:	e5d33001 	ldrb	r3, [r3, #1]
 c101768:	e1a00003 	mov	r0, r3
 c10176c:	eb000662 	bl	c1030fc <uart0_putint>
	uart0_putchar( ':' );
 c101770:	e3a0003a 	mov	r0, #58	; 0x3a
 c101774:	eb000626 	bl	c103014 <uart0_putchar>
	uart0_putint( rtc_time->sec );
 c101778:	e51b3010 	ldr	r3, [fp, #-16]
 c10177c:	e5d33000 	ldrb	r3, [r3]
 c101780:	e1a00003 	mov	r0, r3
 c101784:	eb00065c 	bl	c1030fc <uart0_putint>
}
 c101788:	e24bd00c 	sub	sp, fp, #12
 c10178c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101790:	e12fff1e 	bx	lr
 c101794:	0c1000b8 	.word	0x0c1000b8

0c101798 <read_date>:

void read_date(rtc_time_t* rtc_time)
{
 c101798:	e1a0c00d 	mov	ip, sp
 c10179c:	e92dd800 	push	{fp, ip, lr, pc}
 c1017a0:	e24cb004 	sub	fp, ip, #4
 c1017a4:	e24dd008 	sub	sp, sp, #8
 c1017a8:	e50b0010 	str	r0, [fp, #-16]
	uart0_puts( "\nDia: " );
 c1017ac:	e59f00c8 	ldr	r0, [pc, #200]	; c10187c <read_date+0xe4>
 c1017b0:	eb00063d 	bl	c1030ac <uart0_puts>
	rtc_time->mday = uart0_getint();
 c1017b4:	eb0006d9 	bl	c103320 <uart0_getint>
 c1017b8:	e1a03000 	mov	r3, r0
 c1017bc:	e20320ff 	and	r2, r3, #255	; 0xff
 c1017c0:	e51b3010 	ldr	r3, [fp, #-16]
 c1017c4:	e5c32003 	strb	r2, [r3, #3]
	uart0_puts( "\nMes: " );
 c1017c8:	e59f00b0 	ldr	r0, [pc, #176]	; c101880 <read_date+0xe8>
 c1017cc:	eb000636 	bl	c1030ac <uart0_puts>
	rtc_time->mon = uart0_getint();
 c1017d0:	eb0006d2 	bl	c103320 <uart0_getint>
 c1017d4:	e1a03000 	mov	r3, r0
 c1017d8:	e20320ff 	and	r2, r3, #255	; 0xff
 c1017dc:	e51b3010 	ldr	r3, [fp, #-16]
 c1017e0:	e5c32005 	strb	r2, [r3, #5]
	uart0_puts( "\nAño: " );
 c1017e4:	e59f0098 	ldr	r0, [pc, #152]	; c101884 <read_date+0xec>
 c1017e8:	eb00062f 	bl	c1030ac <uart0_puts>
	rtc_time->year = uart0_getint();
 c1017ec:	eb0006cb 	bl	c103320 <uart0_getint>
 c1017f0:	e1a03000 	mov	r3, r0
 c1017f4:	e20320ff 	and	r2, r3, #255	; 0xff
 c1017f8:	e51b3010 	ldr	r3, [fp, #-16]
 c1017fc:	e5c32006 	strb	r2, [r3, #6]
	uart0_puts( "\nDia de la semana: " );
 c101800:	e59f0080 	ldr	r0, [pc, #128]	; c101888 <read_date+0xf0>
 c101804:	eb000628 	bl	c1030ac <uart0_puts>
	rtc_time->wday = uart0_getint();
 c101808:	eb0006c4 	bl	c103320 <uart0_getint>
 c10180c:	e1a03000 	mov	r3, r0
 c101810:	e20320ff 	and	r2, r3, #255	; 0xff
 c101814:	e51b3010 	ldr	r3, [fp, #-16]
 c101818:	e5c32004 	strb	r2, [r3, #4]

	uart0_puts( "\nHora: " );
 c10181c:	e59f0068 	ldr	r0, [pc, #104]	; c10188c <read_date+0xf4>
 c101820:	eb000621 	bl	c1030ac <uart0_puts>
	rtc_time->hour = uart0_getint();
 c101824:	eb0006bd 	bl	c103320 <uart0_getint>
 c101828:	e1a03000 	mov	r3, r0
 c10182c:	e20320ff 	and	r2, r3, #255	; 0xff
 c101830:	e51b3010 	ldr	r3, [fp, #-16]
 c101834:	e5c32002 	strb	r2, [r3, #2]
	uart0_puts( "\nMinutos: " );
 c101838:	e59f0050 	ldr	r0, [pc, #80]	; c101890 <read_date+0xf8>
 c10183c:	eb00061a 	bl	c1030ac <uart0_puts>
	rtc_time->min = uart0_getint();
 c101840:	eb0006b6 	bl	c103320 <uart0_getint>
 c101844:	e1a03000 	mov	r3, r0
 c101848:	e20320ff 	and	r2, r3, #255	; 0xff
 c10184c:	e51b3010 	ldr	r3, [fp, #-16]
 c101850:	e5c32001 	strb	r2, [r3, #1]
	uart0_puts( "\nSegundos: " );
 c101854:	e59f0038 	ldr	r0, [pc, #56]	; c101894 <read_date+0xfc>
 c101858:	eb000613 	bl	c1030ac <uart0_puts>
	rtc_time->sec = uart0_getint();
 c10185c:	eb0006af 	bl	c103320 <uart0_getint>
 c101860:	e1a03000 	mov	r3, r0
 c101864:	e20320ff 	and	r2, r3, #255	; 0xff
 c101868:	e51b3010 	ldr	r3, [fp, #-16]
 c10186c:	e5c32000 	strb	r2, [r3]
}
 c101870:	e24bd00c 	sub	sp, fp, #12
 c101874:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101878:	e12fff1e 	bx	lr
 c10187c:	0c1000c8 	.word	0x0c1000c8
 c101880:	0c1000d0 	.word	0x0c1000d0
 c101884:	0c1000d8 	.word	0x0c1000d8
 c101888:	0c1000e0 	.word	0x0c1000e0
 c10188c:	0c1000f4 	.word	0x0c1000f4
 c101890:	0c1000fc 	.word	0x0c1000fc
 c101894:	0c100108 	.word	0x0c100108

0c101898 <rtc_ISR>:

void rtc_ISR() {
 c101898:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10189c:	e1a0c00d 	mov	ip, sp
 c1018a0:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1018a4:	e24cb004 	sub	fp, ip, #4
	static rtc_time_t rtc_time;

	rtc_gettime(&rtc_time);
 c1018a8:	e59f0020 	ldr	r0, [pc, #32]	; c1018d0 <rtc_ISR+0x38>
 c1018ac:	eb0001d3 	bl	c102000 <rtc_gettime>
	print_date(&rtc_time);
 c1018b0:	e59f0018 	ldr	r0, [pc, #24]	; c1018d0 <rtc_ISR+0x38>
 c1018b4:	ebffff8a 	bl	c1016e4 <print_date>

	ic_cleanflag(INT_TICK);
 c1018b8:	e3a00014 	mov	r0, #20
 c1018bc:	ebfffda7 	bl	c100f60 <ic_cleanflag>
}
 c1018c0:	e24bd01c 	sub	sp, fp, #28
 c1018c4:	e89d680f 	ldm	sp, {r0, r1, r2, r3, fp, sp, lr}
 c1018c8:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c1018cc:	e25ef004 	subs	pc, lr, #4
 c1018d0:	0c100154 	.word	0x0c100154

0c1018d4 <rtc_alarm_ISR>:

void rtc_alarm_ISR(void) {
 c1018d4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1018d8:	e1a0c00d 	mov	ip, sp
 c1018dc:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1018e0:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\nALARM GOES OFF!\n");
 c1018e4:	e59f0018 	ldr	r0, [pc, #24]	; c101904 <rtc_alarm_ISR+0x30>
 c1018e8:	eb0005ef 	bl	c1030ac <uart0_puts>
	ic_cleanflag(INT_RTC);
 c1018ec:	e3a00001 	mov	r0, #1
 c1018f0:	ebfffd9a 	bl	c100f60 <ic_cleanflag>
}
 c1018f4:	e24bd01c 	sub	sp, fp, #28
 c1018f8:	e89d680f 	ldm	sp, {r0, r1, r2, r3, fp, sp, lr}
 c1018fc:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c101900:	e25ef004 	subs	pc, lr, #4
 c101904:	0c100114 	.word	0x0c100114

0c101908 <clock_setup>:

void clock_setup() {
 c101908:	e1a0c00d 	mov	ip, sp
 c10190c:	e92dd800 	push	{fp, ip, lr, pc}
 c101910:	e24cb004 	sub	fp, ip, #4
	static rtc_time_t rtc_time;
	uart0_puts("Initial time: \n");
 c101914:	e59f0120 	ldr	r0, [pc, #288]	; c101a3c <clock_setup+0x134>
 c101918:	eb0005e3 	bl	c1030ac <uart0_puts>
	rtc_gettime(&rtc_time);
 c10191c:	e59f011c 	ldr	r0, [pc, #284]	; c101a40 <clock_setup+0x138>
 c101920:	eb0001b6 	bl	c102000 <rtc_gettime>
	print_date(&rtc_time);
 c101924:	e59f0114 	ldr	r0, [pc, #276]	; c101a40 <clock_setup+0x138>
 c101928:	ebffff6d 	bl	c1016e4 <print_date>

	//Ask for time first time
	read_date(&rtc_time);
 c10192c:	e59f010c 	ldr	r0, [pc, #268]	; c101a40 <clock_setup+0x138>
 c101930:	ebffff98 	bl	c101798 <read_date>
	rtc_puttime(&rtc_time);
 c101934:	e59f0104 	ldr	r0, [pc, #260]	; c101a40 <clock_setup+0x138>
 c101938:	eb0000bb 	bl	c101c2c <rtc_puttime>

	//Set alarm 10 seconds from now (imperfect but enough)

	rtc_time.sec += 10;
 c10193c:	e59f30fc 	ldr	r3, [pc, #252]	; c101a40 <clock_setup+0x138>
 c101940:	e5d33000 	ldrb	r3, [r3]
 c101944:	e283300a 	add	r3, r3, #10
 c101948:	e20320ff 	and	r2, r3, #255	; 0xff
 c10194c:	e59f30ec 	ldr	r3, [pc, #236]	; c101a40 <clock_setup+0x138>
 c101950:	e5c32000 	strb	r2, [r3]
	if(rtc_time.sec >= 60) {
 c101954:	e59f30e4 	ldr	r3, [pc, #228]	; c101a40 <clock_setup+0x138>
 c101958:	e5d33000 	ldrb	r3, [r3]
 c10195c:	e353003b 	cmp	r3, #59	; 0x3b
 c101960:	9a00000b 	bls	c101994 <clock_setup+0x8c>
		rtc_time.sec -= 60;
 c101964:	e59f30d4 	ldr	r3, [pc, #212]	; c101a40 <clock_setup+0x138>
 c101968:	e5d33000 	ldrb	r3, [r3]
 c10196c:	e243303c 	sub	r3, r3, #60	; 0x3c
 c101970:	e20320ff 	and	r2, r3, #255	; 0xff
 c101974:	e59f30c4 	ldr	r3, [pc, #196]	; c101a40 <clock_setup+0x138>
 c101978:	e5c32000 	strb	r2, [r3]
		rtc_time.min++;
 c10197c:	e59f30bc 	ldr	r3, [pc, #188]	; c101a40 <clock_setup+0x138>
 c101980:	e5d33001 	ldrb	r3, [r3, #1]
 c101984:	e2833001 	add	r3, r3, #1
 c101988:	e20320ff 	and	r2, r3, #255	; 0xff
 c10198c:	e59f30ac 	ldr	r3, [pc, #172]	; c101a40 <clock_setup+0x138>
 c101990:	e5c32001 	strb	r2, [r3, #1]
	}

	if(rtc_time.min >= 60) {
 c101994:	e59f30a4 	ldr	r3, [pc, #164]	; c101a40 <clock_setup+0x138>
 c101998:	e5d33001 	ldrb	r3, [r3, #1]
 c10199c:	e353003b 	cmp	r3, #59	; 0x3b
 c1019a0:	9a00000b 	bls	c1019d4 <clock_setup+0xcc>
		rtc_time.min -= 60;
 c1019a4:	e59f3094 	ldr	r3, [pc, #148]	; c101a40 <clock_setup+0x138>
 c1019a8:	e5d33001 	ldrb	r3, [r3, #1]
 c1019ac:	e243303c 	sub	r3, r3, #60	; 0x3c
 c1019b0:	e20320ff 	and	r2, r3, #255	; 0xff
 c1019b4:	e59f3084 	ldr	r3, [pc, #132]	; c101a40 <clock_setup+0x138>
 c1019b8:	e5c32001 	strb	r2, [r3, #1]
		rtc_time.hour++;
 c1019bc:	e59f307c 	ldr	r3, [pc, #124]	; c101a40 <clock_setup+0x138>
 c1019c0:	e5d33002 	ldrb	r3, [r3, #2]
 c1019c4:	e2833001 	add	r3, r3, #1
 c1019c8:	e20320ff 	and	r2, r3, #255	; 0xff
 c1019cc:	e59f306c 	ldr	r3, [pc, #108]	; c101a40 <clock_setup+0x138>
 c1019d0:	e5c32002 	strb	r2, [r3, #2]
	}

	if(rtc_time.hour >= 24) {
 c1019d4:	e59f3064 	ldr	r3, [pc, #100]	; c101a40 <clock_setup+0x138>
 c1019d8:	e5d33002 	ldrb	r3, [r3, #2]
 c1019dc:	e3530017 	cmp	r3, #23
 c1019e0:	9a00000b 	bls	c101a14 <clock_setup+0x10c>
		rtc_time.hour--;
 c1019e4:	e59f3054 	ldr	r3, [pc, #84]	; c101a40 <clock_setup+0x138>
 c1019e8:	e5d33002 	ldrb	r3, [r3, #2]
 c1019ec:	e2433001 	sub	r3, r3, #1
 c1019f0:	e20320ff 	and	r2, r3, #255	; 0xff
 c1019f4:	e59f3044 	ldr	r3, [pc, #68]	; c101a40 <clock_setup+0x138>
 c1019f8:	e5c32002 	strb	r2, [r3, #2]
		rtc_time.mday++;
 c1019fc:	e59f303c 	ldr	r3, [pc, #60]	; c101a40 <clock_setup+0x138>
 c101a00:	e5d33003 	ldrb	r3, [r3, #3]
 c101a04:	e2833001 	add	r3, r3, #1
 c101a08:	e20320ff 	and	r2, r3, #255	; 0xff
 c101a0c:	e59f302c 	ldr	r3, [pc, #44]	; c101a40 <clock_setup+0x138>
 c101a10:	e5c32003 	strb	r2, [r3, #3]
	}

	uart0_puts("Alarm time: ");
 c101a14:	e59f0028 	ldr	r0, [pc, #40]	; c101a44 <clock_setup+0x13c>
 c101a18:	eb0005a3 	bl	c1030ac <uart0_puts>
	print_date(&rtc_time);
 c101a1c:	e59f001c 	ldr	r0, [pc, #28]	; c101a40 <clock_setup+0x138>
 c101a20:	ebffff2f 	bl	c1016e4 <print_date>

	rtc_set_alarm(rtc_alarm_ISR, &rtc_time);
 c101a24:	e59f001c 	ldr	r0, [pc, #28]	; c101a48 <clock_setup+0x140>
 c101a28:	e59f1010 	ldr	r1, [pc, #16]	; c101a40 <clock_setup+0x138>
 c101a2c:	eb000283 	bl	c102440 <rtc_set_alarm>
}
 c101a30:	e24bd00c 	sub	sp, fp, #12
 c101a34:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101a38:	e12fff1e 	bx	lr
 c101a3c:	0c100128 	.word	0x0c100128
 c101a40:	0c10014c 	.word	0x0c10014c
 c101a44:	0c100138 	.word	0x0c100138
 c101a48:	0c1018d4 	.word	0x0c1018d4

0c101a4c <loop>:

int loop(void) {
 c101a4c:	e1a0c00d 	mov	ip, sp
 c101a50:	e92dd800 	push	{fp, ip, lr, pc}
 c101a54:	e24cb004 	sub	fp, ip, #4
	return 0;
 c101a58:	e3a03000 	mov	r3, #0
}
 c101a5c:	e1a00003 	mov	r0, r3
 c101a60:	e24bd00c 	sub	sp, fp, #12
 c101a64:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101a68:	e12fff1e 	bx	lr

0c101a6c <main>:

int main(void) {
 c101a6c:	e1a0c00d 	mov	ip, sp
 c101a70:	e92dd800 	push	{fp, ip, lr, pc}
 c101a74:	e24cb004 	sub	fp, ip, #4

	setup();
 c101a78:	ebfffec4 	bl	c101590 <setup>
	clock_setup();
 c101a7c:	ebffffa1 	bl	c101908 <clock_setup>

	rtc_open(rtc_ISR, 127);
 c101a80:	e59f000c 	ldr	r0, [pc, #12]	; c101a94 <main+0x28>
 c101a84:	e3a0107f 	mov	r1, #127	; 0x7f
 c101a88:	eb00036e 	bl	c102848 <rtc_open>

	while (1) {
		loop();
 c101a8c:	ebffffee 	bl	c101a4c <loop>
	}
 c101a90:	eafffffd 	b	c101a8c <main+0x20>
 c101a94:	0c101898 	.word	0x0c101898

0c101a98 <isr_TICK_dummy>:
#include "intcontroller.h"

void isr_TICK_dummy(void)  __attribute__ ((interrupt ("IRQ")));
void isr_ALARM_dummy(void) __attribute__ ((interrupt ("IRQ")));

void isr_TICK_dummy(void){
 c101a98:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101a9c:	e1a0c00d 	mov	ip, sp
 c101aa0:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101aa4:	e24cb004 	sub	fp, ip, #4
	ic_cleanflag(INT_TICK);
 c101aa8:	e3a00014 	mov	r0, #20
 c101aac:	ebfffd2b 	bl	c100f60 <ic_cleanflag>
}
 c101ab0:	e24bd01c 	sub	sp, fp, #28
 c101ab4:	e89d680f 	ldm	sp, {r0, r1, r2, r3, fp, sp, lr}
 c101ab8:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c101abc:	e25ef004 	subs	pc, lr, #4

0c101ac0 <isr_ALARM_dummy>:

void isr_ALARM_dummy(void){
 c101ac0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101ac4:	e1a0c00d 	mov	ip, sp
 c101ac8:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101acc:	e24cb004 	sub	fp, ip, #4
	ic_cleanflag(INT_RTC);
 c101ad0:	e3a00001 	mov	r0, #1
 c101ad4:	ebfffd21 	bl	c100f60 <ic_cleanflag>
}
 c101ad8:	e24bd01c 	sub	sp, fp, #28
 c101adc:	e89d680f 	ldm	sp, {r0, r1, r2, r3, fp, sp, lr}
 c101ae0:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c101ae4:	e25ef004 	subs	pc, lr, #4

0c101ae8 <rtc_init>:

void rtc_init( void )
{
 c101ae8:	e1a0c00d 	mov	ip, sp
 c101aec:	e92dd800 	push	{fp, ip, lr, pc}
 c101af0:	e24cb004 	sub	fp, ip, #4
	//Disable Tick interrupt
    rTICINT   = 0x0;
 c101af4:	e59f30ec 	ldr	r3, [pc, #236]	; c101be8 <rtc_init+0x100>
 c101af8:	e3a02000 	mov	r2, #0
 c101afc:	e5c32000 	strb	r2, [r3]

    //Disable alarm
    rRTCALM  = 0x0;
 c101b00:	e59f30e4 	ldr	r3, [pc, #228]	; c101bec <rtc_init+0x104>
 c101b04:	e3a02000 	mov	r2, #0
 c101b08:	e5c32000 	strb	r2, [r3]

    //Disable Rounding
    rRTCRST  = 0x0;
 c101b0c:	e59f30dc 	ldr	r3, [pc, #220]	; c101bf0 <rtc_init+0x108>
 c101b10:	e3a02000 	mov	r2, #0
 c101b14:	e5c32000 	strb	r2, [r3]


    // RTCCON[2] = 0 merged BCD registers: única opción posible
    // RTCCON[1] = 0 Fuente de reloj primaria: única opción posible: XTAL
    // RTCCON[0] = 1 Enabled register read/write
    rRTCCON  = 0x1;
 c101b18:	e59f30d4 	ldr	r3, [pc, #212]	; c101bf4 <rtc_init+0x10c>
 c101b1c:	e3a02001 	mov	r2, #1
 c101b20:	e5c32000 	strb	r2, [r3]

    //Set to 00:00:00 1/1/2021
    rBCDYEAR = 0x2 << 4 | 0x1;
 c101b24:	e59f30cc 	ldr	r3, [pc, #204]	; c101bf8 <rtc_init+0x110>
 c101b28:	e3a02021 	mov	r2, #33	; 0x21
 c101b2c:	e5c32000 	strb	r2, [r3]
    rBCDMON  = 0x1;
 c101b30:	e59f30c4 	ldr	r3, [pc, #196]	; c101bfc <rtc_init+0x114>
 c101b34:	e3a02001 	mov	r2, #1
 c101b38:	e5c32000 	strb	r2, [r3]
    rBCDDAY  = 0x1;
 c101b3c:	e59f30bc 	ldr	r3, [pc, #188]	; c101c00 <rtc_init+0x118>
 c101b40:	e3a02001 	mov	r2, #1
 c101b44:	e5c32000 	strb	r2, [r3]
    rBCDDATE = 0x4;
 c101b48:	e59f30b4 	ldr	r3, [pc, #180]	; c101c04 <rtc_init+0x11c>
 c101b4c:	e3a02004 	mov	r2, #4
 c101b50:	e5c32000 	strb	r2, [r3]
    rBCDHOUR = 0x0;
 c101b54:	e59f30ac 	ldr	r3, [pc, #172]	; c101c08 <rtc_init+0x120>
 c101b58:	e3a02000 	mov	r2, #0
 c101b5c:	e5c32000 	strb	r2, [r3]
    rBCDMIN  = 0x0;
 c101b60:	e59f30a4 	ldr	r3, [pc, #164]	; c101c0c <rtc_init+0x124>
 c101b64:	e3a02000 	mov	r2, #0
 c101b68:	e5c32000 	strb	r2, [r3]
    rBCDSEC  = 0x0;
 c101b6c:	e59f309c 	ldr	r3, [pc, #156]	; c101c10 <rtc_init+0x128>
 c101b70:	e3a02000 	mov	r2, #0
 c101b74:	e5c32000 	strb	r2, [r3]

    //Init to 0
    rALMYEAR = 0;
 c101b78:	e59f3094 	ldr	r3, [pc, #148]	; c101c14 <rtc_init+0x12c>
 c101b7c:	e3a02000 	mov	r2, #0
 c101b80:	e5c32000 	strb	r2, [r3]
    rALMMON  = 0;
 c101b84:	e59f308c 	ldr	r3, [pc, #140]	; c101c18 <rtc_init+0x130>
 c101b88:	e3a02000 	mov	r2, #0
 c101b8c:	e5c32000 	strb	r2, [r3]
    rALMDAY  = 0;
 c101b90:	e59f3084 	ldr	r3, [pc, #132]	; c101c1c <rtc_init+0x134>
 c101b94:	e3a02000 	mov	r2, #0
 c101b98:	e5c32000 	strb	r2, [r3]
    rALMHOUR = 0;
 c101b9c:	e59f307c 	ldr	r3, [pc, #124]	; c101c20 <rtc_init+0x138>
 c101ba0:	e3a02000 	mov	r2, #0
 c101ba4:	e5c32000 	strb	r2, [r3]
    rALMMIN  = 0;
 c101ba8:	e59f3074 	ldr	r3, [pc, #116]	; c101c24 <rtc_init+0x13c>
 c101bac:	e3a02000 	mov	r2, #0
 c101bb0:	e5c32000 	strb	r2, [r3]
    rALMSEC  = 0;
 c101bb4:	e59f306c 	ldr	r3, [pc, #108]	; c101c28 <rtc_init+0x140>
 c101bb8:	e3a02000 	mov	r2, #0
 c101bbc:	e5c32000 	strb	r2, [r3]

    rRTCCON &= ~1;
 c101bc0:	e59f302c 	ldr	r3, [pc, #44]	; c101bf4 <rtc_init+0x10c>
 c101bc4:	e59f2028 	ldr	r2, [pc, #40]	; c101bf4 <rtc_init+0x10c>
 c101bc8:	e5d22000 	ldrb	r2, [r2]
 c101bcc:	e20220ff 	and	r2, r2, #255	; 0xff
 c101bd0:	e3c22001 	bic	r2, r2, #1
 c101bd4:	e20220ff 	and	r2, r2, #255	; 0xff
 c101bd8:	e5c32000 	strb	r2, [r3]
}
 c101bdc:	e24bd00c 	sub	sp, fp, #12
 c101be0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101be4:	e12fff1e 	bx	lr
 c101be8:	01d7008c 	.word	0x01d7008c
 c101bec:	01d70050 	.word	0x01d70050
 c101bf0:	01d7006c 	.word	0x01d7006c
 c101bf4:	01d70040 	.word	0x01d70040
 c101bf8:	01d70088 	.word	0x01d70088
 c101bfc:	01d70084 	.word	0x01d70084
 c101c00:	01d7007c 	.word	0x01d7007c
 c101c04:	01d70080 	.word	0x01d70080
 c101c08:	01d70078 	.word	0x01d70078
 c101c0c:	01d70074 	.word	0x01d70074
 c101c10:	01d70070 	.word	0x01d70070
 c101c14:	01d70068 	.word	0x01d70068
 c101c18:	01d70064 	.word	0x01d70064
 c101c1c:	01d70060 	.word	0x01d70060
 c101c20:	01d7005c 	.word	0x01d7005c
 c101c24:	01d70058 	.word	0x01d70058
 c101c28:	01d70054 	.word	0x01d70054

0c101c2c <rtc_puttime>:

void rtc_puttime( rtc_time_t *rtc_time )
{
 c101c2c:	e1a0c00d 	mov	ip, sp
 c101c30:	e92dd800 	push	{fp, ip, lr, pc}
 c101c34:	e24cb004 	sub	fp, ip, #4
 c101c38:	e24dd008 	sub	sp, sp, #8
 c101c3c:	e50b0010 	str	r0, [fp, #-16]
	//Set RTCEN=RTCCON[0] = 1
    rRTCCON |= 1;
 c101c40:	e59f3394 	ldr	r3, [pc, #916]	; c101fdc <rtc_puttime+0x3b0>
 c101c44:	e59f2390 	ldr	r2, [pc, #912]	; c101fdc <rtc_puttime+0x3b0>
 c101c48:	e5d22000 	ldrb	r2, [r2]
 c101c4c:	e20220ff 	and	r2, r2, #255	; 0xff
 c101c50:	e3822001 	orr	r2, r2, #1
 c101c54:	e20220ff 	and	r2, r2, #255	; 0xff
 c101c58:	e5c32000 	strb	r2, [r3]

    rBCDYEAR = ((rtc_time->year / 10) % 10) << 4 | (rtc_time->year % 10);
 c101c5c:	e59f037c 	ldr	r0, [pc, #892]	; c101fe0 <rtc_puttime+0x3b4>
 c101c60:	e51b3010 	ldr	r3, [fp, #-16]
 c101c64:	e5d32006 	ldrb	r2, [r3, #6]
 c101c68:	e59f3374 	ldr	r3, [pc, #884]	; c101fe4 <rtc_puttime+0x3b8>
 c101c6c:	e0831392 	umull	r1, r3, r2, r3
 c101c70:	e1a031a3 	lsr	r3, r3, #3
 c101c74:	e20320ff 	and	r2, r3, #255	; 0xff
 c101c78:	e59f3364 	ldr	r3, [pc, #868]	; c101fe4 <rtc_puttime+0x3b8>
 c101c7c:	e0831392 	umull	r1, r3, r2, r3
 c101c80:	e1a011a3 	lsr	r1, r3, #3
 c101c84:	e1a03001 	mov	r3, r1
 c101c88:	e1a03103 	lsl	r3, r3, #2
 c101c8c:	e0833001 	add	r3, r3, r1
 c101c90:	e1a03083 	lsl	r3, r3, #1
 c101c94:	e0633002 	rsb	r3, r3, r2
 c101c98:	e20330ff 	and	r3, r3, #255	; 0xff
 c101c9c:	e1a03203 	lsl	r3, r3, #4
 c101ca0:	e203c0ff 	and	ip, r3, #255	; 0xff
 c101ca4:	e51b3010 	ldr	r3, [fp, #-16]
 c101ca8:	e5d32006 	ldrb	r2, [r3, #6]
 c101cac:	e59f3330 	ldr	r3, [pc, #816]	; c101fe4 <rtc_puttime+0x3b8>
 c101cb0:	e0831392 	umull	r1, r3, r2, r3
 c101cb4:	e1a011a3 	lsr	r1, r3, #3
 c101cb8:	e1a03001 	mov	r3, r1
 c101cbc:	e1a03103 	lsl	r3, r3, #2
 c101cc0:	e0833001 	add	r3, r3, r1
 c101cc4:	e1a03083 	lsl	r3, r3, #1
 c101cc8:	e0633002 	rsb	r3, r3, r2
 c101ccc:	e20330ff 	and	r3, r3, #255	; 0xff
 c101cd0:	e20330ff 	and	r3, r3, #255	; 0xff
 c101cd4:	e1a0200c 	mov	r2, ip
 c101cd8:	e1823003 	orr	r3, r2, r3
 c101cdc:	e20330ff 	and	r3, r3, #255	; 0xff
 c101ce0:	e20330ff 	and	r3, r3, #255	; 0xff
 c101ce4:	e5c03000 	strb	r3, [r0]
    rBCDMON  = ((rtc_time->mon / 10) % 10) << 4 | (rtc_time->mon % 10);
 c101ce8:	e59f02f8 	ldr	r0, [pc, #760]	; c101fe8 <rtc_puttime+0x3bc>
 c101cec:	e51b3010 	ldr	r3, [fp, #-16]
 c101cf0:	e5d32005 	ldrb	r2, [r3, #5]
 c101cf4:	e59f32e8 	ldr	r3, [pc, #744]	; c101fe4 <rtc_puttime+0x3b8>
 c101cf8:	e0831392 	umull	r1, r3, r2, r3
 c101cfc:	e1a031a3 	lsr	r3, r3, #3
 c101d00:	e20320ff 	and	r2, r3, #255	; 0xff
 c101d04:	e59f32d8 	ldr	r3, [pc, #728]	; c101fe4 <rtc_puttime+0x3b8>
 c101d08:	e0831392 	umull	r1, r3, r2, r3
 c101d0c:	e1a011a3 	lsr	r1, r3, #3
 c101d10:	e1a03001 	mov	r3, r1
 c101d14:	e1a03103 	lsl	r3, r3, #2
 c101d18:	e0833001 	add	r3, r3, r1
 c101d1c:	e1a03083 	lsl	r3, r3, #1
 c101d20:	e0633002 	rsb	r3, r3, r2
 c101d24:	e20330ff 	and	r3, r3, #255	; 0xff
 c101d28:	e1a03203 	lsl	r3, r3, #4
 c101d2c:	e203c0ff 	and	ip, r3, #255	; 0xff
 c101d30:	e51b3010 	ldr	r3, [fp, #-16]
 c101d34:	e5d32005 	ldrb	r2, [r3, #5]
 c101d38:	e59f32a4 	ldr	r3, [pc, #676]	; c101fe4 <rtc_puttime+0x3b8>
 c101d3c:	e0831392 	umull	r1, r3, r2, r3
 c101d40:	e1a011a3 	lsr	r1, r3, #3
 c101d44:	e1a03001 	mov	r3, r1
 c101d48:	e1a03103 	lsl	r3, r3, #2
 c101d4c:	e0833001 	add	r3, r3, r1
 c101d50:	e1a03083 	lsl	r3, r3, #1
 c101d54:	e0633002 	rsb	r3, r3, r2
 c101d58:	e20330ff 	and	r3, r3, #255	; 0xff
 c101d5c:	e20330ff 	and	r3, r3, #255	; 0xff
 c101d60:	e1a0200c 	mov	r2, ip
 c101d64:	e1823003 	orr	r3, r2, r3
 c101d68:	e20330ff 	and	r3, r3, #255	; 0xff
 c101d6c:	e20330ff 	and	r3, r3, #255	; 0xff
 c101d70:	e5c03000 	strb	r3, [r0]
    rBCDDAY  = ((rtc_time->mday / 10) % 10) << 4 | (rtc_time->mday % 10);
 c101d74:	e59f0270 	ldr	r0, [pc, #624]	; c101fec <rtc_puttime+0x3c0>
 c101d78:	e51b3010 	ldr	r3, [fp, #-16]
 c101d7c:	e5d32003 	ldrb	r2, [r3, #3]
 c101d80:	e59f325c 	ldr	r3, [pc, #604]	; c101fe4 <rtc_puttime+0x3b8>
 c101d84:	e0831392 	umull	r1, r3, r2, r3
 c101d88:	e1a031a3 	lsr	r3, r3, #3
 c101d8c:	e20320ff 	and	r2, r3, #255	; 0xff
 c101d90:	e59f324c 	ldr	r3, [pc, #588]	; c101fe4 <rtc_puttime+0x3b8>
 c101d94:	e0831392 	umull	r1, r3, r2, r3
 c101d98:	e1a011a3 	lsr	r1, r3, #3
 c101d9c:	e1a03001 	mov	r3, r1
 c101da0:	e1a03103 	lsl	r3, r3, #2
 c101da4:	e0833001 	add	r3, r3, r1
 c101da8:	e1a03083 	lsl	r3, r3, #1
 c101dac:	e0633002 	rsb	r3, r3, r2
 c101db0:	e20330ff 	and	r3, r3, #255	; 0xff
 c101db4:	e1a03203 	lsl	r3, r3, #4
 c101db8:	e203c0ff 	and	ip, r3, #255	; 0xff
 c101dbc:	e51b3010 	ldr	r3, [fp, #-16]
 c101dc0:	e5d32003 	ldrb	r2, [r3, #3]
 c101dc4:	e59f3218 	ldr	r3, [pc, #536]	; c101fe4 <rtc_puttime+0x3b8>
 c101dc8:	e0831392 	umull	r1, r3, r2, r3
 c101dcc:	e1a011a3 	lsr	r1, r3, #3
 c101dd0:	e1a03001 	mov	r3, r1
 c101dd4:	e1a03103 	lsl	r3, r3, #2
 c101dd8:	e0833001 	add	r3, r3, r1
 c101ddc:	e1a03083 	lsl	r3, r3, #1
 c101de0:	e0633002 	rsb	r3, r3, r2
 c101de4:	e20330ff 	and	r3, r3, #255	; 0xff
 c101de8:	e20330ff 	and	r3, r3, #255	; 0xff
 c101dec:	e1a0200c 	mov	r2, ip
 c101df0:	e1823003 	orr	r3, r2, r3
 c101df4:	e20330ff 	and	r3, r3, #255	; 0xff
 c101df8:	e20330ff 	and	r3, r3, #255	; 0xff
 c101dfc:	e5c03000 	strb	r3, [r0]
    rBCDDATE = rtc_time->wday;
 c101e00:	e59f31e8 	ldr	r3, [pc, #488]	; c101ff0 <rtc_puttime+0x3c4>
 c101e04:	e51b2010 	ldr	r2, [fp, #-16]
 c101e08:	e5d22004 	ldrb	r2, [r2, #4]
 c101e0c:	e5c32000 	strb	r2, [r3]
    rBCDHOUR = ((rtc_time->hour / 10) % 10) << 4 | (rtc_time->hour % 10);
 c101e10:	e59f01dc 	ldr	r0, [pc, #476]	; c101ff4 <rtc_puttime+0x3c8>
 c101e14:	e51b3010 	ldr	r3, [fp, #-16]
 c101e18:	e5d32002 	ldrb	r2, [r3, #2]
 c101e1c:	e59f31c0 	ldr	r3, [pc, #448]	; c101fe4 <rtc_puttime+0x3b8>
 c101e20:	e0831392 	umull	r1, r3, r2, r3
 c101e24:	e1a031a3 	lsr	r3, r3, #3
 c101e28:	e20320ff 	and	r2, r3, #255	; 0xff
 c101e2c:	e59f31b0 	ldr	r3, [pc, #432]	; c101fe4 <rtc_puttime+0x3b8>
 c101e30:	e0831392 	umull	r1, r3, r2, r3
 c101e34:	e1a011a3 	lsr	r1, r3, #3
 c101e38:	e1a03001 	mov	r3, r1
 c101e3c:	e1a03103 	lsl	r3, r3, #2
 c101e40:	e0833001 	add	r3, r3, r1
 c101e44:	e1a03083 	lsl	r3, r3, #1
 c101e48:	e0633002 	rsb	r3, r3, r2
 c101e4c:	e20330ff 	and	r3, r3, #255	; 0xff
 c101e50:	e1a03203 	lsl	r3, r3, #4
 c101e54:	e203c0ff 	and	ip, r3, #255	; 0xff
 c101e58:	e51b3010 	ldr	r3, [fp, #-16]
 c101e5c:	e5d32002 	ldrb	r2, [r3, #2]
 c101e60:	e59f317c 	ldr	r3, [pc, #380]	; c101fe4 <rtc_puttime+0x3b8>
 c101e64:	e0831392 	umull	r1, r3, r2, r3
 c101e68:	e1a011a3 	lsr	r1, r3, #3
 c101e6c:	e1a03001 	mov	r3, r1
 c101e70:	e1a03103 	lsl	r3, r3, #2
 c101e74:	e0833001 	add	r3, r3, r1
 c101e78:	e1a03083 	lsl	r3, r3, #1
 c101e7c:	e0633002 	rsb	r3, r3, r2
 c101e80:	e20330ff 	and	r3, r3, #255	; 0xff
 c101e84:	e20330ff 	and	r3, r3, #255	; 0xff
 c101e88:	e1a0200c 	mov	r2, ip
 c101e8c:	e1823003 	orr	r3, r2, r3
 c101e90:	e20330ff 	and	r3, r3, #255	; 0xff
 c101e94:	e20330ff 	and	r3, r3, #255	; 0xff
 c101e98:	e5c03000 	strb	r3, [r0]
    rBCDMIN  = ((rtc_time->min / 10) % 10) << 4 | (rtc_time->min % 10);
 c101e9c:	e59f0154 	ldr	r0, [pc, #340]	; c101ff8 <rtc_puttime+0x3cc>
 c101ea0:	e51b3010 	ldr	r3, [fp, #-16]
 c101ea4:	e5d32001 	ldrb	r2, [r3, #1]
 c101ea8:	e59f3134 	ldr	r3, [pc, #308]	; c101fe4 <rtc_puttime+0x3b8>
 c101eac:	e0831392 	umull	r1, r3, r2, r3
 c101eb0:	e1a031a3 	lsr	r3, r3, #3
 c101eb4:	e20320ff 	and	r2, r3, #255	; 0xff
 c101eb8:	e59f3124 	ldr	r3, [pc, #292]	; c101fe4 <rtc_puttime+0x3b8>
 c101ebc:	e0831392 	umull	r1, r3, r2, r3
 c101ec0:	e1a011a3 	lsr	r1, r3, #3
 c101ec4:	e1a03001 	mov	r3, r1
 c101ec8:	e1a03103 	lsl	r3, r3, #2
 c101ecc:	e0833001 	add	r3, r3, r1
 c101ed0:	e1a03083 	lsl	r3, r3, #1
 c101ed4:	e0633002 	rsb	r3, r3, r2
 c101ed8:	e20330ff 	and	r3, r3, #255	; 0xff
 c101edc:	e1a03203 	lsl	r3, r3, #4
 c101ee0:	e203c0ff 	and	ip, r3, #255	; 0xff
 c101ee4:	e51b3010 	ldr	r3, [fp, #-16]
 c101ee8:	e5d32001 	ldrb	r2, [r3, #1]
 c101eec:	e59f30f0 	ldr	r3, [pc, #240]	; c101fe4 <rtc_puttime+0x3b8>
 c101ef0:	e0831392 	umull	r1, r3, r2, r3
 c101ef4:	e1a011a3 	lsr	r1, r3, #3
 c101ef8:	e1a03001 	mov	r3, r1
 c101efc:	e1a03103 	lsl	r3, r3, #2
 c101f00:	e0833001 	add	r3, r3, r1
 c101f04:	e1a03083 	lsl	r3, r3, #1
 c101f08:	e0633002 	rsb	r3, r3, r2
 c101f0c:	e20330ff 	and	r3, r3, #255	; 0xff
 c101f10:	e20330ff 	and	r3, r3, #255	; 0xff
 c101f14:	e1a0200c 	mov	r2, ip
 c101f18:	e1823003 	orr	r3, r2, r3
 c101f1c:	e20330ff 	and	r3, r3, #255	; 0xff
 c101f20:	e20330ff 	and	r3, r3, #255	; 0xff
 c101f24:	e5c03000 	strb	r3, [r0]
    rBCDSEC  = ((rtc_time->sec / 10) % 10) << 4 | (rtc_time->sec % 10);
 c101f28:	e59f00cc 	ldr	r0, [pc, #204]	; c101ffc <rtc_puttime+0x3d0>
 c101f2c:	e51b3010 	ldr	r3, [fp, #-16]
 c101f30:	e5d32000 	ldrb	r2, [r3]
 c101f34:	e59f30a8 	ldr	r3, [pc, #168]	; c101fe4 <rtc_puttime+0x3b8>
 c101f38:	e0831392 	umull	r1, r3, r2, r3
 c101f3c:	e1a031a3 	lsr	r3, r3, #3
 c101f40:	e20320ff 	and	r2, r3, #255	; 0xff
 c101f44:	e59f3098 	ldr	r3, [pc, #152]	; c101fe4 <rtc_puttime+0x3b8>
 c101f48:	e0831392 	umull	r1, r3, r2, r3
 c101f4c:	e1a011a3 	lsr	r1, r3, #3
 c101f50:	e1a03001 	mov	r3, r1
 c101f54:	e1a03103 	lsl	r3, r3, #2
 c101f58:	e0833001 	add	r3, r3, r1
 c101f5c:	e1a03083 	lsl	r3, r3, #1
 c101f60:	e0633002 	rsb	r3, r3, r2
 c101f64:	e20330ff 	and	r3, r3, #255	; 0xff
 c101f68:	e1a03203 	lsl	r3, r3, #4
 c101f6c:	e203c0ff 	and	ip, r3, #255	; 0xff
 c101f70:	e51b3010 	ldr	r3, [fp, #-16]
 c101f74:	e5d32000 	ldrb	r2, [r3]
 c101f78:	e59f3064 	ldr	r3, [pc, #100]	; c101fe4 <rtc_puttime+0x3b8>
 c101f7c:	e0831392 	umull	r1, r3, r2, r3
 c101f80:	e1a011a3 	lsr	r1, r3, #3
 c101f84:	e1a03001 	mov	r3, r1
 c101f88:	e1a03103 	lsl	r3, r3, #2
 c101f8c:	e0833001 	add	r3, r3, r1
 c101f90:	e1a03083 	lsl	r3, r3, #1
 c101f94:	e0633002 	rsb	r3, r3, r2
 c101f98:	e20330ff 	and	r3, r3, #255	; 0xff
 c101f9c:	e20330ff 	and	r3, r3, #255	; 0xff
 c101fa0:	e1a0200c 	mov	r2, ip
 c101fa4:	e1823003 	orr	r3, r2, r3
 c101fa8:	e20330ff 	and	r3, r3, #255	; 0xff
 c101fac:	e20330ff 	and	r3, r3, #255	; 0xff
 c101fb0:	e5c03000 	strb	r3, [r0]

	//Set RTCEN=RTCCON[0] = 0
    rRTCCON &= ~1;
 c101fb4:	e59f3020 	ldr	r3, [pc, #32]	; c101fdc <rtc_puttime+0x3b0>
 c101fb8:	e59f201c 	ldr	r2, [pc, #28]	; c101fdc <rtc_puttime+0x3b0>
 c101fbc:	e5d22000 	ldrb	r2, [r2]
 c101fc0:	e20220ff 	and	r2, r2, #255	; 0xff
 c101fc4:	e3c22001 	bic	r2, r2, #1
 c101fc8:	e20220ff 	and	r2, r2, #255	; 0xff
 c101fcc:	e5c32000 	strb	r2, [r3]
}
 c101fd0:	e24bd00c 	sub	sp, fp, #12
 c101fd4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101fd8:	e12fff1e 	bx	lr
 c101fdc:	01d70040 	.word	0x01d70040
 c101fe0:	01d70088 	.word	0x01d70088
 c101fe4:	cccccccd 	.word	0xcccccccd
 c101fe8:	01d70084 	.word	0x01d70084
 c101fec:	01d7007c 	.word	0x01d7007c
 c101ff0:	01d70080 	.word	0x01d70080
 c101ff4:	01d70078 	.word	0x01d70078
 c101ff8:	01d70074 	.word	0x01d70074
 c101ffc:	01d70070 	.word	0x01d70070

0c102000 <rtc_gettime>:

void rtc_gettime( rtc_time_t *rtc_time )
{
 c102000:	e1a0c00d 	mov	ip, sp
 c102004:	e92dd800 	push	{fp, ip, lr, pc}
 c102008:	e24cb004 	sub	fp, ip, #4
 c10200c:	e24dd008 	sub	sp, sp, #8
 c102010:	e50b0010 	str	r0, [fp, #-16]
	//Set RTCEN=RTCCON[0] = 1
    rRTCCON |= 1;
 c102014:	e59f3404 	ldr	r3, [pc, #1028]	; c102420 <rtc_gettime+0x420>
 c102018:	e59f2400 	ldr	r2, [pc, #1024]	; c102420 <rtc_gettime+0x420>
 c10201c:	e5d22000 	ldrb	r2, [r2]
 c102020:	e20220ff 	and	r2, r2, #255	; 0xff
 c102024:	e3822001 	orr	r2, r2, #1
 c102028:	e20220ff 	and	r2, r2, #255	; 0xff
 c10202c:	e5c32000 	strb	r2, [r3]

    rtc_time->year = (rBCDYEAR & 0b1111) + 10 * (rBCDYEAR >> 4);
 c102030:	e59f33ec 	ldr	r3, [pc, #1004]	; c102424 <rtc_gettime+0x424>
 c102034:	e5d33000 	ldrb	r3, [r3]
 c102038:	e20330ff 	and	r3, r3, #255	; 0xff
 c10203c:	e203300f 	and	r3, r3, #15
 c102040:	e20320ff 	and	r2, r3, #255	; 0xff
 c102044:	e59f33d8 	ldr	r3, [pc, #984]	; c102424 <rtc_gettime+0x424>
 c102048:	e5d33000 	ldrb	r3, [r3]
 c10204c:	e20330ff 	and	r3, r3, #255	; 0xff
 c102050:	e1a03223 	lsr	r3, r3, #4
 c102054:	e20330ff 	and	r3, r3, #255	; 0xff
 c102058:	e1a01003 	mov	r1, r3
 c10205c:	e1a01101 	lsl	r1, r1, #2
 c102060:	e0813003 	add	r3, r1, r3
 c102064:	e1a03083 	lsl	r3, r3, #1
 c102068:	e20330ff 	and	r3, r3, #255	; 0xff
 c10206c:	e0823003 	add	r3, r2, r3
 c102070:	e20320ff 	and	r2, r3, #255	; 0xff
 c102074:	e51b3010 	ldr	r3, [fp, #-16]
 c102078:	e5c32006 	strb	r2, [r3, #6]
    rtc_time->mon  = (rBCDMON & 0b1111) + 10 * (rBCDMON >> 4);
 c10207c:	e59f33a4 	ldr	r3, [pc, #932]	; c102428 <rtc_gettime+0x428>
 c102080:	e5d33000 	ldrb	r3, [r3]
 c102084:	e20330ff 	and	r3, r3, #255	; 0xff
 c102088:	e203300f 	and	r3, r3, #15
 c10208c:	e20320ff 	and	r2, r3, #255	; 0xff
 c102090:	e59f3390 	ldr	r3, [pc, #912]	; c102428 <rtc_gettime+0x428>
 c102094:	e5d33000 	ldrb	r3, [r3]
 c102098:	e20330ff 	and	r3, r3, #255	; 0xff
 c10209c:	e1a03223 	lsr	r3, r3, #4
 c1020a0:	e20330ff 	and	r3, r3, #255	; 0xff
 c1020a4:	e1a01003 	mov	r1, r3
 c1020a8:	e1a01101 	lsl	r1, r1, #2
 c1020ac:	e0813003 	add	r3, r1, r3
 c1020b0:	e1a03083 	lsl	r3, r3, #1
 c1020b4:	e20330ff 	and	r3, r3, #255	; 0xff
 c1020b8:	e0823003 	add	r3, r2, r3
 c1020bc:	e20320ff 	and	r2, r3, #255	; 0xff
 c1020c0:	e51b3010 	ldr	r3, [fp, #-16]
 c1020c4:	e5c32005 	strb	r2, [r3, #5]
    rtc_time->mday = (rBCDDAY & 0b1111) + 10 * (rBCDDAY >> 4);
 c1020c8:	e59f335c 	ldr	r3, [pc, #860]	; c10242c <rtc_gettime+0x42c>
 c1020cc:	e5d33000 	ldrb	r3, [r3]
 c1020d0:	e20330ff 	and	r3, r3, #255	; 0xff
 c1020d4:	e203300f 	and	r3, r3, #15
 c1020d8:	e20320ff 	and	r2, r3, #255	; 0xff
 c1020dc:	e59f3348 	ldr	r3, [pc, #840]	; c10242c <rtc_gettime+0x42c>
 c1020e0:	e5d33000 	ldrb	r3, [r3]
 c1020e4:	e20330ff 	and	r3, r3, #255	; 0xff
 c1020e8:	e1a03223 	lsr	r3, r3, #4
 c1020ec:	e20330ff 	and	r3, r3, #255	; 0xff
 c1020f0:	e1a01003 	mov	r1, r3
 c1020f4:	e1a01101 	lsl	r1, r1, #2
 c1020f8:	e0813003 	add	r3, r1, r3
 c1020fc:	e1a03083 	lsl	r3, r3, #1
 c102100:	e20330ff 	and	r3, r3, #255	; 0xff
 c102104:	e0823003 	add	r3, r2, r3
 c102108:	e20320ff 	and	r2, r3, #255	; 0xff
 c10210c:	e51b3010 	ldr	r3, [fp, #-16]
 c102110:	e5c32003 	strb	r2, [r3, #3]
    rtc_time->wday = rBCDDATE;
 c102114:	e59f3314 	ldr	r3, [pc, #788]	; c102430 <rtc_gettime+0x430>
 c102118:	e5d33000 	ldrb	r3, [r3]
 c10211c:	e20320ff 	and	r2, r3, #255	; 0xff
 c102120:	e51b3010 	ldr	r3, [fp, #-16]
 c102124:	e5c32004 	strb	r2, [r3, #4]
    rtc_time->hour = (rBCDHOUR & 0b1111) + 10 * (rBCDHOUR >> 4);
 c102128:	e59f3304 	ldr	r3, [pc, #772]	; c102434 <rtc_gettime+0x434>
 c10212c:	e5d33000 	ldrb	r3, [r3]
 c102130:	e20330ff 	and	r3, r3, #255	; 0xff
 c102134:	e203300f 	and	r3, r3, #15
 c102138:	e20320ff 	and	r2, r3, #255	; 0xff
 c10213c:	e59f32f0 	ldr	r3, [pc, #752]	; c102434 <rtc_gettime+0x434>
 c102140:	e5d33000 	ldrb	r3, [r3]
 c102144:	e20330ff 	and	r3, r3, #255	; 0xff
 c102148:	e1a03223 	lsr	r3, r3, #4
 c10214c:	e20330ff 	and	r3, r3, #255	; 0xff
 c102150:	e1a01003 	mov	r1, r3
 c102154:	e1a01101 	lsl	r1, r1, #2
 c102158:	e0813003 	add	r3, r1, r3
 c10215c:	e1a03083 	lsl	r3, r3, #1
 c102160:	e20330ff 	and	r3, r3, #255	; 0xff
 c102164:	e0823003 	add	r3, r2, r3
 c102168:	e20320ff 	and	r2, r3, #255	; 0xff
 c10216c:	e51b3010 	ldr	r3, [fp, #-16]
 c102170:	e5c32002 	strb	r2, [r3, #2]
    rtc_time->min  = (rBCDMIN & 0b1111) + 10 * (rBCDMIN >> 4);
 c102174:	e59f32bc 	ldr	r3, [pc, #700]	; c102438 <rtc_gettime+0x438>
 c102178:	e5d33000 	ldrb	r3, [r3]
 c10217c:	e20330ff 	and	r3, r3, #255	; 0xff
 c102180:	e203300f 	and	r3, r3, #15
 c102184:	e20320ff 	and	r2, r3, #255	; 0xff
 c102188:	e59f32a8 	ldr	r3, [pc, #680]	; c102438 <rtc_gettime+0x438>
 c10218c:	e5d33000 	ldrb	r3, [r3]
 c102190:	e20330ff 	and	r3, r3, #255	; 0xff
 c102194:	e1a03223 	lsr	r3, r3, #4
 c102198:	e20330ff 	and	r3, r3, #255	; 0xff
 c10219c:	e1a01003 	mov	r1, r3
 c1021a0:	e1a01101 	lsl	r1, r1, #2
 c1021a4:	e0813003 	add	r3, r1, r3
 c1021a8:	e1a03083 	lsl	r3, r3, #1
 c1021ac:	e20330ff 	and	r3, r3, #255	; 0xff
 c1021b0:	e0823003 	add	r3, r2, r3
 c1021b4:	e20320ff 	and	r2, r3, #255	; 0xff
 c1021b8:	e51b3010 	ldr	r3, [fp, #-16]
 c1021bc:	e5c32001 	strb	r2, [r3, #1]
    rtc_time->sec  = (rBCDSEC & 0b1111) + 10 * (rBCDSEC >> 4);
 c1021c0:	e59f3274 	ldr	r3, [pc, #628]	; c10243c <rtc_gettime+0x43c>
 c1021c4:	e5d33000 	ldrb	r3, [r3]
 c1021c8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1021cc:	e203300f 	and	r3, r3, #15
 c1021d0:	e20320ff 	and	r2, r3, #255	; 0xff
 c1021d4:	e59f3260 	ldr	r3, [pc, #608]	; c10243c <rtc_gettime+0x43c>
 c1021d8:	e5d33000 	ldrb	r3, [r3]
 c1021dc:	e20330ff 	and	r3, r3, #255	; 0xff
 c1021e0:	e1a03223 	lsr	r3, r3, #4
 c1021e4:	e20330ff 	and	r3, r3, #255	; 0xff
 c1021e8:	e1a01003 	mov	r1, r3
 c1021ec:	e1a01101 	lsl	r1, r1, #2
 c1021f0:	e0813003 	add	r3, r1, r3
 c1021f4:	e1a03083 	lsl	r3, r3, #1
 c1021f8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1021fc:	e0823003 	add	r3, r2, r3
 c102200:	e20320ff 	and	r2, r3, #255	; 0xff
 c102204:	e51b3010 	ldr	r3, [fp, #-16]
 c102208:	e5c32000 	strb	r2, [r3]
    if( ! rtc_time->sec ){
 c10220c:	e51b3010 	ldr	r3, [fp, #-16]
 c102210:	e5d33000 	ldrb	r3, [r3]
 c102214:	e3530000 	cmp	r3, #0
 c102218:	1a000076 	bne	c1023f8 <rtc_gettime+0x3f8>
    	//Reread, a second may have elapsed so date is invalid
        rtc_time->year = (rBCDYEAR & 0b1111) + 10 * (rBCDYEAR >> 4);
 c10221c:	e59f3200 	ldr	r3, [pc, #512]	; c102424 <rtc_gettime+0x424>
 c102220:	e5d33000 	ldrb	r3, [r3]
 c102224:	e20330ff 	and	r3, r3, #255	; 0xff
 c102228:	e203300f 	and	r3, r3, #15
 c10222c:	e20320ff 	and	r2, r3, #255	; 0xff
 c102230:	e59f31ec 	ldr	r3, [pc, #492]	; c102424 <rtc_gettime+0x424>
 c102234:	e5d33000 	ldrb	r3, [r3]
 c102238:	e20330ff 	and	r3, r3, #255	; 0xff
 c10223c:	e1a03223 	lsr	r3, r3, #4
 c102240:	e20330ff 	and	r3, r3, #255	; 0xff
 c102244:	e1a01003 	mov	r1, r3
 c102248:	e1a01101 	lsl	r1, r1, #2
 c10224c:	e0813003 	add	r3, r1, r3
 c102250:	e1a03083 	lsl	r3, r3, #1
 c102254:	e20330ff 	and	r3, r3, #255	; 0xff
 c102258:	e0823003 	add	r3, r2, r3
 c10225c:	e20320ff 	and	r2, r3, #255	; 0xff
 c102260:	e51b3010 	ldr	r3, [fp, #-16]
 c102264:	e5c32006 	strb	r2, [r3, #6]
        rtc_time->mon  = (rBCDMON & 0b1111) + 10 * (rBCDMON >> 4);
 c102268:	e59f31b8 	ldr	r3, [pc, #440]	; c102428 <rtc_gettime+0x428>
 c10226c:	e5d33000 	ldrb	r3, [r3]
 c102270:	e20330ff 	and	r3, r3, #255	; 0xff
 c102274:	e203300f 	and	r3, r3, #15
 c102278:	e20320ff 	and	r2, r3, #255	; 0xff
 c10227c:	e59f31a4 	ldr	r3, [pc, #420]	; c102428 <rtc_gettime+0x428>
 c102280:	e5d33000 	ldrb	r3, [r3]
 c102284:	e20330ff 	and	r3, r3, #255	; 0xff
 c102288:	e1a03223 	lsr	r3, r3, #4
 c10228c:	e20330ff 	and	r3, r3, #255	; 0xff
 c102290:	e1a01003 	mov	r1, r3
 c102294:	e1a01101 	lsl	r1, r1, #2
 c102298:	e0813003 	add	r3, r1, r3
 c10229c:	e1a03083 	lsl	r3, r3, #1
 c1022a0:	e20330ff 	and	r3, r3, #255	; 0xff
 c1022a4:	e0823003 	add	r3, r2, r3
 c1022a8:	e20320ff 	and	r2, r3, #255	; 0xff
 c1022ac:	e51b3010 	ldr	r3, [fp, #-16]
 c1022b0:	e5c32005 	strb	r2, [r3, #5]
        rtc_time->mday = (rBCDDAY & 0b1111) + 10 * (rBCDDAY >> 4);
 c1022b4:	e59f3170 	ldr	r3, [pc, #368]	; c10242c <rtc_gettime+0x42c>
 c1022b8:	e5d33000 	ldrb	r3, [r3]
 c1022bc:	e20330ff 	and	r3, r3, #255	; 0xff
 c1022c0:	e203300f 	and	r3, r3, #15
 c1022c4:	e20320ff 	and	r2, r3, #255	; 0xff
 c1022c8:	e59f315c 	ldr	r3, [pc, #348]	; c10242c <rtc_gettime+0x42c>
 c1022cc:	e5d33000 	ldrb	r3, [r3]
 c1022d0:	e20330ff 	and	r3, r3, #255	; 0xff
 c1022d4:	e1a03223 	lsr	r3, r3, #4
 c1022d8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1022dc:	e1a01003 	mov	r1, r3
 c1022e0:	e1a01101 	lsl	r1, r1, #2
 c1022e4:	e0813003 	add	r3, r1, r3
 c1022e8:	e1a03083 	lsl	r3, r3, #1
 c1022ec:	e20330ff 	and	r3, r3, #255	; 0xff
 c1022f0:	e0823003 	add	r3, r2, r3
 c1022f4:	e20320ff 	and	r2, r3, #255	; 0xff
 c1022f8:	e51b3010 	ldr	r3, [fp, #-16]
 c1022fc:	e5c32003 	strb	r2, [r3, #3]
        rtc_time->wday = rBCDDATE;
 c102300:	e59f3128 	ldr	r3, [pc, #296]	; c102430 <rtc_gettime+0x430>
 c102304:	e5d33000 	ldrb	r3, [r3]
 c102308:	e20320ff 	and	r2, r3, #255	; 0xff
 c10230c:	e51b3010 	ldr	r3, [fp, #-16]
 c102310:	e5c32004 	strb	r2, [r3, #4]
        rtc_time->hour = (rBCDHOUR & 0b1111) + 10 * (rBCDHOUR >> 4);
 c102314:	e59f3118 	ldr	r3, [pc, #280]	; c102434 <rtc_gettime+0x434>
 c102318:	e5d33000 	ldrb	r3, [r3]
 c10231c:	e20330ff 	and	r3, r3, #255	; 0xff
 c102320:	e203300f 	and	r3, r3, #15
 c102324:	e20320ff 	and	r2, r3, #255	; 0xff
 c102328:	e59f3104 	ldr	r3, [pc, #260]	; c102434 <rtc_gettime+0x434>
 c10232c:	e5d33000 	ldrb	r3, [r3]
 c102330:	e20330ff 	and	r3, r3, #255	; 0xff
 c102334:	e1a03223 	lsr	r3, r3, #4
 c102338:	e20330ff 	and	r3, r3, #255	; 0xff
 c10233c:	e1a01003 	mov	r1, r3
 c102340:	e1a01101 	lsl	r1, r1, #2
 c102344:	e0813003 	add	r3, r1, r3
 c102348:	e1a03083 	lsl	r3, r3, #1
 c10234c:	e20330ff 	and	r3, r3, #255	; 0xff
 c102350:	e0823003 	add	r3, r2, r3
 c102354:	e20320ff 	and	r2, r3, #255	; 0xff
 c102358:	e51b3010 	ldr	r3, [fp, #-16]
 c10235c:	e5c32002 	strb	r2, [r3, #2]
        rtc_time->min  = (rBCDMIN & 0b1111) + 10 * (rBCDMIN >> 4);
 c102360:	e59f30d0 	ldr	r3, [pc, #208]	; c102438 <rtc_gettime+0x438>
 c102364:	e5d33000 	ldrb	r3, [r3]
 c102368:	e20330ff 	and	r3, r3, #255	; 0xff
 c10236c:	e203300f 	and	r3, r3, #15
 c102370:	e20320ff 	and	r2, r3, #255	; 0xff
 c102374:	e59f30bc 	ldr	r3, [pc, #188]	; c102438 <rtc_gettime+0x438>
 c102378:	e5d33000 	ldrb	r3, [r3]
 c10237c:	e20330ff 	and	r3, r3, #255	; 0xff
 c102380:	e1a03223 	lsr	r3, r3, #4
 c102384:	e20330ff 	and	r3, r3, #255	; 0xff
 c102388:	e1a01003 	mov	r1, r3
 c10238c:	e1a01101 	lsl	r1, r1, #2
 c102390:	e0813003 	add	r3, r1, r3
 c102394:	e1a03083 	lsl	r3, r3, #1
 c102398:	e20330ff 	and	r3, r3, #255	; 0xff
 c10239c:	e0823003 	add	r3, r2, r3
 c1023a0:	e20320ff 	and	r2, r3, #255	; 0xff
 c1023a4:	e51b3010 	ldr	r3, [fp, #-16]
 c1023a8:	e5c32001 	strb	r2, [r3, #1]
        rtc_time->sec  = (rBCDSEC & 0b1111) + 10 * (rBCDSEC >> 4);
 c1023ac:	e59f3088 	ldr	r3, [pc, #136]	; c10243c <rtc_gettime+0x43c>
 c1023b0:	e5d33000 	ldrb	r3, [r3]
 c1023b4:	e20330ff 	and	r3, r3, #255	; 0xff
 c1023b8:	e203300f 	and	r3, r3, #15
 c1023bc:	e20320ff 	and	r2, r3, #255	; 0xff
 c1023c0:	e59f3074 	ldr	r3, [pc, #116]	; c10243c <rtc_gettime+0x43c>
 c1023c4:	e5d33000 	ldrb	r3, [r3]
 c1023c8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1023cc:	e1a03223 	lsr	r3, r3, #4
 c1023d0:	e20330ff 	and	r3, r3, #255	; 0xff
 c1023d4:	e1a01003 	mov	r1, r3
 c1023d8:	e1a01101 	lsl	r1, r1, #2
 c1023dc:	e0813003 	add	r3, r1, r3
 c1023e0:	e1a03083 	lsl	r3, r3, #1
 c1023e4:	e20330ff 	and	r3, r3, #255	; 0xff
 c1023e8:	e0823003 	add	r3, r2, r3
 c1023ec:	e20320ff 	and	r2, r3, #255	; 0xff
 c1023f0:	e51b3010 	ldr	r3, [fp, #-16]
 c1023f4:	e5c32000 	strb	r2, [r3]
    }

	//Set RTCEN=RTCCON[0] = 0
    rRTCCON &= ~1;
 c1023f8:	e59f3020 	ldr	r3, [pc, #32]	; c102420 <rtc_gettime+0x420>
 c1023fc:	e59f201c 	ldr	r2, [pc, #28]	; c102420 <rtc_gettime+0x420>
 c102400:	e5d22000 	ldrb	r2, [r2]
 c102404:	e20220ff 	and	r2, r2, #255	; 0xff
 c102408:	e3c22001 	bic	r2, r2, #1
 c10240c:	e20220ff 	and	r2, r2, #255	; 0xff
 c102410:	e5c32000 	strb	r2, [r3]
}
 c102414:	e24bd00c 	sub	sp, fp, #12
 c102418:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10241c:	e12fff1e 	bx	lr
 c102420:	01d70040 	.word	0x01d70040
 c102424:	01d70088 	.word	0x01d70088
 c102428:	01d70084 	.word	0x01d70084
 c10242c:	01d7007c 	.word	0x01d7007c
 c102430:	01d70080 	.word	0x01d70080
 c102434:	01d70078 	.word	0x01d70078
 c102438:	01d70074 	.word	0x01d70074
 c10243c:	01d70070 	.word	0x01d70070

0c102440 <rtc_set_alarm>:

void rtc_set_alarm( void(*isr)(void), rtc_time_t* rtc_time ) {
 c102440:	e1a0c00d 	mov	ip, sp
 c102444:	e92dd800 	push	{fp, ip, lr, pc}
 c102448:	e24cb004 	sub	fp, ip, #4
 c10244c:	e24dd008 	sub	sp, sp, #8
 c102450:	e50b0010 	str	r0, [fp, #-16]
 c102454:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec


    //Set alarm date
    rALMYEAR = ((rtc_time->year / 10) % 10) << 4 | (rtc_time->year % 10);
 c102458:	e59f0380 	ldr	r0, [pc, #896]	; c1027e0 <rtc_set_alarm+0x3a0>
 c10245c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c102460:	e5d32006 	ldrb	r2, [r3, #6]
 c102464:	e59f3378 	ldr	r3, [pc, #888]	; c1027e4 <rtc_set_alarm+0x3a4>
 c102468:	e0831392 	umull	r1, r3, r2, r3
 c10246c:	e1a031a3 	lsr	r3, r3, #3
 c102470:	e20320ff 	and	r2, r3, #255	; 0xff
 c102474:	e59f3368 	ldr	r3, [pc, #872]	; c1027e4 <rtc_set_alarm+0x3a4>
 c102478:	e0831392 	umull	r1, r3, r2, r3
 c10247c:	e1a011a3 	lsr	r1, r3, #3
 c102480:	e1a03001 	mov	r3, r1
 c102484:	e1a03103 	lsl	r3, r3, #2
 c102488:	e0833001 	add	r3, r3, r1
 c10248c:	e1a03083 	lsl	r3, r3, #1
 c102490:	e0633002 	rsb	r3, r3, r2
 c102494:	e20330ff 	and	r3, r3, #255	; 0xff
 c102498:	e1a03203 	lsl	r3, r3, #4
 c10249c:	e203c0ff 	and	ip, r3, #255	; 0xff
 c1024a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1024a4:	e5d32006 	ldrb	r2, [r3, #6]
 c1024a8:	e59f3334 	ldr	r3, [pc, #820]	; c1027e4 <rtc_set_alarm+0x3a4>
 c1024ac:	e0831392 	umull	r1, r3, r2, r3
 c1024b0:	e1a011a3 	lsr	r1, r3, #3
 c1024b4:	e1a03001 	mov	r3, r1
 c1024b8:	e1a03103 	lsl	r3, r3, #2
 c1024bc:	e0833001 	add	r3, r3, r1
 c1024c0:	e1a03083 	lsl	r3, r3, #1
 c1024c4:	e0633002 	rsb	r3, r3, r2
 c1024c8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1024cc:	e20330ff 	and	r3, r3, #255	; 0xff
 c1024d0:	e1a0200c 	mov	r2, ip
 c1024d4:	e1823003 	orr	r3, r2, r3
 c1024d8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1024dc:	e20330ff 	and	r3, r3, #255	; 0xff
 c1024e0:	e5c03000 	strb	r3, [r0]
    rALMMON  = ((rtc_time->mon / 10) % 10) << 4 | (rtc_time->mon % 10);
 c1024e4:	e59f02fc 	ldr	r0, [pc, #764]	; c1027e8 <rtc_set_alarm+0x3a8>
 c1024e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1024ec:	e5d32005 	ldrb	r2, [r3, #5]
 c1024f0:	e59f32ec 	ldr	r3, [pc, #748]	; c1027e4 <rtc_set_alarm+0x3a4>
 c1024f4:	e0831392 	umull	r1, r3, r2, r3
 c1024f8:	e1a031a3 	lsr	r3, r3, #3
 c1024fc:	e20320ff 	and	r2, r3, #255	; 0xff
 c102500:	e59f32dc 	ldr	r3, [pc, #732]	; c1027e4 <rtc_set_alarm+0x3a4>
 c102504:	e0831392 	umull	r1, r3, r2, r3
 c102508:	e1a011a3 	lsr	r1, r3, #3
 c10250c:	e1a03001 	mov	r3, r1
 c102510:	e1a03103 	lsl	r3, r3, #2
 c102514:	e0833001 	add	r3, r3, r1
 c102518:	e1a03083 	lsl	r3, r3, #1
 c10251c:	e0633002 	rsb	r3, r3, r2
 c102520:	e20330ff 	and	r3, r3, #255	; 0xff
 c102524:	e1a03203 	lsl	r3, r3, #4
 c102528:	e203c0ff 	and	ip, r3, #255	; 0xff
 c10252c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c102530:	e5d32005 	ldrb	r2, [r3, #5]
 c102534:	e59f32a8 	ldr	r3, [pc, #680]	; c1027e4 <rtc_set_alarm+0x3a4>
 c102538:	e0831392 	umull	r1, r3, r2, r3
 c10253c:	e1a011a3 	lsr	r1, r3, #3
 c102540:	e1a03001 	mov	r3, r1
 c102544:	e1a03103 	lsl	r3, r3, #2
 c102548:	e0833001 	add	r3, r3, r1
 c10254c:	e1a03083 	lsl	r3, r3, #1
 c102550:	e0633002 	rsb	r3, r3, r2
 c102554:	e20330ff 	and	r3, r3, #255	; 0xff
 c102558:	e20330ff 	and	r3, r3, #255	; 0xff
 c10255c:	e1a0200c 	mov	r2, ip
 c102560:	e1823003 	orr	r3, r2, r3
 c102564:	e20330ff 	and	r3, r3, #255	; 0xff
 c102568:	e20330ff 	and	r3, r3, #255	; 0xff
 c10256c:	e5c03000 	strb	r3, [r0]
    rALMDAY  = ((rtc_time->mday / 10) % 10) << 4 | (rtc_time->mday % 10);
 c102570:	e59f0274 	ldr	r0, [pc, #628]	; c1027ec <rtc_set_alarm+0x3ac>
 c102574:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c102578:	e5d32003 	ldrb	r2, [r3, #3]
 c10257c:	e59f3260 	ldr	r3, [pc, #608]	; c1027e4 <rtc_set_alarm+0x3a4>
 c102580:	e0831392 	umull	r1, r3, r2, r3
 c102584:	e1a031a3 	lsr	r3, r3, #3
 c102588:	e20320ff 	and	r2, r3, #255	; 0xff
 c10258c:	e59f3250 	ldr	r3, [pc, #592]	; c1027e4 <rtc_set_alarm+0x3a4>
 c102590:	e0831392 	umull	r1, r3, r2, r3
 c102594:	e1a011a3 	lsr	r1, r3, #3
 c102598:	e1a03001 	mov	r3, r1
 c10259c:	e1a03103 	lsl	r3, r3, #2
 c1025a0:	e0833001 	add	r3, r3, r1
 c1025a4:	e1a03083 	lsl	r3, r3, #1
 c1025a8:	e0633002 	rsb	r3, r3, r2
 c1025ac:	e20330ff 	and	r3, r3, #255	; 0xff
 c1025b0:	e1a03203 	lsl	r3, r3, #4
 c1025b4:	e203c0ff 	and	ip, r3, #255	; 0xff
 c1025b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1025bc:	e5d32003 	ldrb	r2, [r3, #3]
 c1025c0:	e59f321c 	ldr	r3, [pc, #540]	; c1027e4 <rtc_set_alarm+0x3a4>
 c1025c4:	e0831392 	umull	r1, r3, r2, r3
 c1025c8:	e1a011a3 	lsr	r1, r3, #3
 c1025cc:	e1a03001 	mov	r3, r1
 c1025d0:	e1a03103 	lsl	r3, r3, #2
 c1025d4:	e0833001 	add	r3, r3, r1
 c1025d8:	e1a03083 	lsl	r3, r3, #1
 c1025dc:	e0633002 	rsb	r3, r3, r2
 c1025e0:	e20330ff 	and	r3, r3, #255	; 0xff
 c1025e4:	e20330ff 	and	r3, r3, #255	; 0xff
 c1025e8:	e1a0200c 	mov	r2, ip
 c1025ec:	e1823003 	orr	r3, r2, r3
 c1025f0:	e20330ff 	and	r3, r3, #255	; 0xff
 c1025f4:	e20330ff 	and	r3, r3, #255	; 0xff
 c1025f8:	e5c03000 	strb	r3, [r0]
    rALMHOUR = ((rtc_time->hour / 10) % 10) << 4 | (rtc_time->hour % 10);
 c1025fc:	e59f01ec 	ldr	r0, [pc, #492]	; c1027f0 <rtc_set_alarm+0x3b0>
 c102600:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c102604:	e5d32002 	ldrb	r2, [r3, #2]
 c102608:	e59f31d4 	ldr	r3, [pc, #468]	; c1027e4 <rtc_set_alarm+0x3a4>
 c10260c:	e0831392 	umull	r1, r3, r2, r3
 c102610:	e1a031a3 	lsr	r3, r3, #3
 c102614:	e20320ff 	and	r2, r3, #255	; 0xff
 c102618:	e59f31c4 	ldr	r3, [pc, #452]	; c1027e4 <rtc_set_alarm+0x3a4>
 c10261c:	e0831392 	umull	r1, r3, r2, r3
 c102620:	e1a011a3 	lsr	r1, r3, #3
 c102624:	e1a03001 	mov	r3, r1
 c102628:	e1a03103 	lsl	r3, r3, #2
 c10262c:	e0833001 	add	r3, r3, r1
 c102630:	e1a03083 	lsl	r3, r3, #1
 c102634:	e0633002 	rsb	r3, r3, r2
 c102638:	e20330ff 	and	r3, r3, #255	; 0xff
 c10263c:	e1a03203 	lsl	r3, r3, #4
 c102640:	e203c0ff 	and	ip, r3, #255	; 0xff
 c102644:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c102648:	e5d32002 	ldrb	r2, [r3, #2]
 c10264c:	e59f3190 	ldr	r3, [pc, #400]	; c1027e4 <rtc_set_alarm+0x3a4>
 c102650:	e0831392 	umull	r1, r3, r2, r3
 c102654:	e1a011a3 	lsr	r1, r3, #3
 c102658:	e1a03001 	mov	r3, r1
 c10265c:	e1a03103 	lsl	r3, r3, #2
 c102660:	e0833001 	add	r3, r3, r1
 c102664:	e1a03083 	lsl	r3, r3, #1
 c102668:	e0633002 	rsb	r3, r3, r2
 c10266c:	e20330ff 	and	r3, r3, #255	; 0xff
 c102670:	e20330ff 	and	r3, r3, #255	; 0xff
 c102674:	e1a0200c 	mov	r2, ip
 c102678:	e1823003 	orr	r3, r2, r3
 c10267c:	e20330ff 	and	r3, r3, #255	; 0xff
 c102680:	e20330ff 	and	r3, r3, #255	; 0xff
 c102684:	e5c03000 	strb	r3, [r0]
    rALMMIN  = ((rtc_time->min / 10) % 10) << 4 | (rtc_time->min % 10);
 c102688:	e59f0164 	ldr	r0, [pc, #356]	; c1027f4 <rtc_set_alarm+0x3b4>
 c10268c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c102690:	e5d32001 	ldrb	r2, [r3, #1]
 c102694:	e59f3148 	ldr	r3, [pc, #328]	; c1027e4 <rtc_set_alarm+0x3a4>
 c102698:	e0831392 	umull	r1, r3, r2, r3
 c10269c:	e1a031a3 	lsr	r3, r3, #3
 c1026a0:	e20320ff 	and	r2, r3, #255	; 0xff
 c1026a4:	e59f3138 	ldr	r3, [pc, #312]	; c1027e4 <rtc_set_alarm+0x3a4>
 c1026a8:	e0831392 	umull	r1, r3, r2, r3
 c1026ac:	e1a011a3 	lsr	r1, r3, #3
 c1026b0:	e1a03001 	mov	r3, r1
 c1026b4:	e1a03103 	lsl	r3, r3, #2
 c1026b8:	e0833001 	add	r3, r3, r1
 c1026bc:	e1a03083 	lsl	r3, r3, #1
 c1026c0:	e0633002 	rsb	r3, r3, r2
 c1026c4:	e20330ff 	and	r3, r3, #255	; 0xff
 c1026c8:	e1a03203 	lsl	r3, r3, #4
 c1026cc:	e203c0ff 	and	ip, r3, #255	; 0xff
 c1026d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1026d4:	e5d32001 	ldrb	r2, [r3, #1]
 c1026d8:	e59f3104 	ldr	r3, [pc, #260]	; c1027e4 <rtc_set_alarm+0x3a4>
 c1026dc:	e0831392 	umull	r1, r3, r2, r3
 c1026e0:	e1a011a3 	lsr	r1, r3, #3
 c1026e4:	e1a03001 	mov	r3, r1
 c1026e8:	e1a03103 	lsl	r3, r3, #2
 c1026ec:	e0833001 	add	r3, r3, r1
 c1026f0:	e1a03083 	lsl	r3, r3, #1
 c1026f4:	e0633002 	rsb	r3, r3, r2
 c1026f8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1026fc:	e20330ff 	and	r3, r3, #255	; 0xff
 c102700:	e1a0200c 	mov	r2, ip
 c102704:	e1823003 	orr	r3, r2, r3
 c102708:	e20330ff 	and	r3, r3, #255	; 0xff
 c10270c:	e20330ff 	and	r3, r3, #255	; 0xff
 c102710:	e5c03000 	strb	r3, [r0]
    rALMSEC  = ((rtc_time->sec / 10) % 10) << 4 | (rtc_time->sec % 10);
 c102714:	e59f00dc 	ldr	r0, [pc, #220]	; c1027f8 <rtc_set_alarm+0x3b8>
 c102718:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10271c:	e5d32000 	ldrb	r2, [r3]
 c102720:	e59f30bc 	ldr	r3, [pc, #188]	; c1027e4 <rtc_set_alarm+0x3a4>
 c102724:	e0831392 	umull	r1, r3, r2, r3
 c102728:	e1a031a3 	lsr	r3, r3, #3
 c10272c:	e20320ff 	and	r2, r3, #255	; 0xff
 c102730:	e59f30ac 	ldr	r3, [pc, #172]	; c1027e4 <rtc_set_alarm+0x3a4>
 c102734:	e0831392 	umull	r1, r3, r2, r3
 c102738:	e1a011a3 	lsr	r1, r3, #3
 c10273c:	e1a03001 	mov	r3, r1
 c102740:	e1a03103 	lsl	r3, r3, #2
 c102744:	e0833001 	add	r3, r3, r1
 c102748:	e1a03083 	lsl	r3, r3, #1
 c10274c:	e0633002 	rsb	r3, r3, r2
 c102750:	e20330ff 	and	r3, r3, #255	; 0xff
 c102754:	e1a03203 	lsl	r3, r3, #4
 c102758:	e203c0ff 	and	ip, r3, #255	; 0xff
 c10275c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c102760:	e5d32000 	ldrb	r2, [r3]
 c102764:	e59f3078 	ldr	r3, [pc, #120]	; c1027e4 <rtc_set_alarm+0x3a4>
 c102768:	e0831392 	umull	r1, r3, r2, r3
 c10276c:	e1a011a3 	lsr	r1, r3, #3
 c102770:	e1a03001 	mov	r3, r1
 c102774:	e1a03103 	lsl	r3, r3, #2
 c102778:	e0833001 	add	r3, r3, r1
 c10277c:	e1a03083 	lsl	r3, r3, #1
 c102780:	e0633002 	rsb	r3, r3, r2
 c102784:	e20330ff 	and	r3, r3, #255	; 0xff
 c102788:	e20330ff 	and	r3, r3, #255	; 0xff
 c10278c:	e1a0200c 	mov	r2, ip
 c102790:	e1823003 	orr	r3, r2, r3
 c102794:	e20330ff 	and	r3, r3, #255	; 0xff
 c102798:	e20330ff 	and	r3, r3, #255	; 0xff
 c10279c:	e5c03000 	strb	r3, [r0]

	//Enable alarm (bits [7:0] = 1)
    rRTCALM  = 0x7F;
 c1027a0:	e59f3054 	ldr	r3, [pc, #84]	; c1027fc <rtc_set_alarm+0x3bc>
 c1027a4:	e3a0207f 	mov	r2, #127	; 0x7f
 c1027a8:	e5c32000 	strb	r2, [r3]

    ic_conf_line(INT_RTC, IRQ);
 c1027ac:	e3a00001 	mov	r0, #1
 c1027b0:	e3a01000 	mov	r1, #0
 c1027b4:	ebfff986 	bl	c100dd4 <ic_conf_line>
    ic_cleanflag(INT_RTC);
 c1027b8:	e3a00001 	mov	r0, #1
 c1027bc:	ebfff9e7 	bl	c100f60 <ic_cleanflag>
    ic_enable(INT_RTC);
 c1027c0:	e3a00001 	mov	r0, #1
 c1027c4:	ebfff9b2 	bl	c100e94 <ic_enable>

    pISR_RTC = (unsigned) isr;
 c1027c8:	e59f3030 	ldr	r3, [pc, #48]	; c102800 <rtc_set_alarm+0x3c0>
 c1027cc:	e51b2010 	ldr	r2, [fp, #-16]
 c1027d0:	e5832000 	str	r2, [r3]
}
 c1027d4:	e24bd00c 	sub	sp, fp, #12
 c1027d8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1027dc:	e12fff1e 	bx	lr
 c1027e0:	01d70068 	.word	0x01d70068
 c1027e4:	cccccccd 	.word	0xcccccccd
 c1027e8:	01d70064 	.word	0x01d70064
 c1027ec:	01d70060 	.word	0x01d70060
 c1027f0:	01d7005c 	.word	0x01d7005c
 c1027f4:	01d70058 	.word	0x01d70058
 c1027f8:	01d70054 	.word	0x01d70054
 c1027fc:	01d70050 	.word	0x01d70050
 c102800:	0c7fff24 	.word	0x0c7fff24

0c102804 <rtc_clear_alarm>:

void rtc_clear_alarm() {
 c102804:	e1a0c00d 	mov	ip, sp
 c102808:	e92dd800 	push	{fp, ip, lr, pc}
 c10280c:	e24cb004 	sub	fp, ip, #4
	ic_disable(INT_RTC);
 c102810:	e3a00001 	mov	r0, #1
 c102814:	ebfff9b8 	bl	c100efc <ic_disable>
	pISR_RTC = (unsigned) isr_ALARM_dummy;
 c102818:	e59f301c 	ldr	r3, [pc, #28]	; c10283c <rtc_clear_alarm+0x38>
 c10281c:	e59f201c 	ldr	r2, [pc, #28]	; c102840 <rtc_clear_alarm+0x3c>
 c102820:	e5832000 	str	r2, [r3]
    rRTCALM  = 0;
 c102824:	e59f3018 	ldr	r3, [pc, #24]	; c102844 <rtc_clear_alarm+0x40>
 c102828:	e3a02000 	mov	r2, #0
 c10282c:	e5c32000 	strb	r2, [r3]
}
 c102830:	e24bd00c 	sub	sp, fp, #12
 c102834:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102838:	e12fff1e 	bx	lr
 c10283c:	0c7fff24 	.word	0x0c7fff24
 c102840:	0c101ac0 	.word	0x0c101ac0
 c102844:	01d70050 	.word	0x01d70050

0c102848 <rtc_open>:

// Sets ISR to RTC ticks (tick_count)
void rtc_open( void (*isr)(void), uint8 tick_count )
{
 c102848:	e1a0c00d 	mov	ip, sp
 c10284c:	e92dd800 	push	{fp, ip, lr, pc}
 c102850:	e24cb004 	sub	fp, ip, #4
 c102854:	e24dd008 	sub	sp, sp, #8
 c102858:	e50b0010 	str	r0, [fp, #-16]
 c10285c:	e1a03001 	mov	r3, r1
 c102860:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    pISR_TICK = (unsigned)isr;
 c102864:	e59f3044 	ldr	r3, [pc, #68]	; c1028b0 <rtc_open+0x68>
 c102868:	e51b2010 	ldr	r2, [fp, #-16]
 c10286c:	e5832000 	str	r2, [r3]

    ic_conf_line(INT_TICK, IRQ);
 c102870:	e3a00014 	mov	r0, #20
 c102874:	e3a01000 	mov	r1, #0
 c102878:	ebfff955 	bl	c100dd4 <ic_conf_line>
    ic_cleanflag(INT_TICK);
 c10287c:	e3a00014 	mov	r0, #20
 c102880:	ebfff9b6 	bl	c100f60 <ic_cleanflag>
    ic_enable(INT_TICK);
 c102884:	e3a00014 	mov	r0, #20
 c102888:	ebfff981 	bl	c100e94 <ic_enable>

    rTICINT = 1 << 7 | (tick_count & 0b1111111);
 c10288c:	e59f2020 	ldr	r2, [pc, #32]	; c1028b4 <rtc_open+0x6c>
 c102890:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102894:	e1e03c83 	mvn	r3, r3, lsl #25
 c102898:	e1e03ca3 	mvn	r3, r3, lsr #25
 c10289c:	e20330ff 	and	r3, r3, #255	; 0xff
 c1028a0:	e5c23000 	strb	r3, [r2]
}
 c1028a4:	e24bd00c 	sub	sp, fp, #12
 c1028a8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1028ac:	e12fff1e 	bx	lr
 c1028b0:	0c7fff70 	.word	0x0c7fff70
 c1028b4:	01d7008c 	.word	0x01d7008c

0c1028b8 <rtc_close>:

// Removes RTC ISR
void rtc_close( void )
{
 c1028b8:	e1a0c00d 	mov	ip, sp
 c1028bc:	e92dd800 	push	{fp, ip, lr, pc}
 c1028c0:	e24cb004 	sub	fp, ip, #4
    rTICINT = 0;
 c1028c4:	e59f3024 	ldr	r3, [pc, #36]	; c1028f0 <rtc_close+0x38>
 c1028c8:	e3a02000 	mov	r2, #0
 c1028cc:	e5c32000 	strb	r2, [r3]
    ic_disable(INT_TICK);
 c1028d0:	e3a00014 	mov	r0, #20
 c1028d4:	ebfff988 	bl	c100efc <ic_disable>
    pISR_TICK = (unsigned)isr_TICK_dummy;
 c1028d8:	e59f3014 	ldr	r3, [pc, #20]	; c1028f4 <rtc_close+0x3c>
 c1028dc:	e59f2014 	ldr	r2, [pc, #20]	; c1028f8 <rtc_close+0x40>
 c1028e0:	e5832000 	str	r2, [r3]
}
 c1028e4:	e24bd00c 	sub	sp, fp, #12
 c1028e8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1028ec:	e12fff1e 	bx	lr
 c1028f0:	01d7008c 	.word	0x01d7008c
 c1028f4:	0c7fff70 	.word	0x0c7fff70
 c1028f8:	0c101a98 	.word	0x0c101a98

0c1028fc <tmr_set_prescaler>:
/*--- ficheros de cabecera ---*/
#include "44b.h"
#include "timer.h"

int tmr_set_prescaler(int p, int  value)
{
 c1028fc:	e1a0c00d 	mov	ip, sp
 c102900:	e92dd800 	push	{fp, ip, lr, pc}
 c102904:	e24cb004 	sub	fp, ip, #4
 c102908:	e24dd018 	sub	sp, sp, #24
 c10290c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
 c102910:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
	int offset = p*8;
 c102914:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102918:	e1a03183 	lsl	r3, r3, #3
 c10291c:	e50b3010 	str	r3, [fp, #-16]
	value &= 0xFF;
 c102920:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c102924:	e20330ff 	and	r3, r3, #255	; 0xff
 c102928:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc

	if (p < 0 || p > 3)
 c10292c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102930:	e3530000 	cmp	r3, #0
 c102934:	ba000002 	blt	c102944 <tmr_set_prescaler+0x48>
 c102938:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10293c:	e3530003 	cmp	r3, #3
 c102940:	da000001 	ble	c10294c <tmr_set_prescaler+0x50>
		return -1;
 c102944:	e3e03000 	mvn	r3, #0
 c102948:	ea00001d 	b	c1029c4 <tmr_set_prescaler+0xc8>

	//COMPLETAR: escribir el valor value a partir de la posiciÃ³n offset en el
	//registro rTCFG0, para establecer el valor de pre-escalado del mÃ³dulo p

	int bitfield = value, mask = 0xff, reg = rTCFG0;
 c10294c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c102950:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c102954:	e3a030ff 	mov	r3, #255	; 0xff
 c102958:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c10295c:	e59f3070 	ldr	r3, [pc, #112]	; c1029d4 <tmr_set_prescaler+0xd8>
 c102960:	e5933000 	ldr	r3, [r3]
 c102964:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
	bitfield <<= offset;
 c102968:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c10296c:	e51b3010 	ldr	r3, [fp, #-16]
 c102970:	e1a03312 	lsl	r3, r2, r3
 c102974:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

	mask <<= offset;
 c102978:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c10297c:	e51b3010 	ldr	r3, [fp, #-16]
 c102980:	e1a03312 	lsl	r3, r2, r3
 c102984:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	mask ^= ~0;
 c102988:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10298c:	e1e03003 	mvn	r3, r3
 c102990:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

	reg &= mask; // Ponemos a 0 todos los valores en la zona que va a ir el nuevo byte
 c102994:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c102998:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10299c:	e0023003 	and	r3, r2, r3
 c1029a0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
	reg |= bitfield; // Ponemos a 1 los bits que esten a 1 del nuevo byte
 c1029a4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c1029a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1029ac:	e1823003 	orr	r3, r2, r3
 c1029b0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

	rTCFG0 = reg;
 c1029b4:	e59f3018 	ldr	r3, [pc, #24]	; c1029d4 <tmr_set_prescaler+0xd8>
 c1029b8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c1029bc:	e5832000 	str	r2, [r3]

	return 0;
 c1029c0:	e3a03000 	mov	r3, #0
}
 c1029c4:	e1a00003 	mov	r0, r3
 c1029c8:	e24bd00c 	sub	sp, fp, #12
 c1029cc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1029d0:	e12fff1e 	bx	lr
 c1029d4:	01d50000 	.word	0x01d50000

0c1029d8 <tmr_set_divider>:

int tmr_set_divider(int d, enum tmr_div div)
{
 c1029d8:	e1a0c00d 	mov	ip, sp
 c1029dc:	e92dd800 	push	{fp, ip, lr, pc}
 c1029e0:	e24cb004 	sub	fp, ip, #4
 c1029e4:	e24dd018 	sub	sp, sp, #24
 c1029e8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
 c1029ec:	e1a03001 	mov	r3, r1
 c1029f0:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
	int pos = d*4;
 c1029f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c1029f8:	e1a03103 	lsl	r3, r3, #2
 c1029fc:	e50b3010 	str	r3, [fp, #-16]

	if ((d < 0 || d > 5) ||
 c102a00:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102a04:	e3530000 	cmp	r3, #0
 c102a08:	ba000014 	blt	c102a60 <tmr_set_divider+0x88>
 c102a0c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102a10:	e3530005 	cmp	r3, #5
 c102a14:	ca000011 	bgt	c102a60 <tmr_set_divider+0x88>
 c102a18:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
 c102a1c:	e3530004 	cmp	r3, #4
 c102a20:	1a000002 	bne	c102a30 <tmr_set_divider+0x58>
			(div == D1_32 && d > 3) ||
 c102a24:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102a28:	e3530003 	cmp	r3, #3
 c102a2c:	ca00000b 	bgt	c102a60 <tmr_set_divider+0x88>
 c102a30:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
 c102a34:	e3530005 	cmp	r3, #5
 c102a38:	1a000002 	bne	c102a48 <tmr_set_divider+0x70>
			(div == EXTCLK && d != 5) ||
 c102a3c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102a40:	e3530005 	cmp	r3, #5
 c102a44:	1a000005 	bne	c102a60 <tmr_set_divider+0x88>
 c102a48:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
 c102a4c:	e3530006 	cmp	r3, #6
 c102a50:	1a000004 	bne	c102a68 <tmr_set_divider+0x90>
			(div == TCLK && d != 4))
 c102a54:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102a58:	e3530004 	cmp	r3, #4
 c102a5c:	0a000001 	beq	c102a68 <tmr_set_divider+0x90>
		return -1;
 c102a60:	e3e03000 	mvn	r3, #0
 c102a64:	ea000025 	b	c102b00 <tmr_set_divider+0x128>

	if (div == EXTCLK || div == TCLK)
 c102a68:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
 c102a6c:	e3530005 	cmp	r3, #5
 c102a70:	0a000002 	beq	c102a80 <tmr_set_divider+0xa8>
 c102a74:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
 c102a78:	e3530006 	cmp	r3, #6
 c102a7c:	1a000001 	bne	c102a88 <tmr_set_divider+0xb0>
		div = 4;
 c102a80:	e3a03004 	mov	r3, #4
 c102a84:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf

	//COMPLETAR: escribir el valor div a partir de la posiciÃ³n pos en el
	//registro rTCFG1 para establecer el valor para el divisor d

	int bitfield = div, mask = 0xf, reg = rTCFG1;
 c102a88:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
 c102a8c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c102a90:	e3a0300f 	mov	r3, #15
 c102a94:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c102a98:	e59f3070 	ldr	r3, [pc, #112]	; c102b10 <tmr_set_divider+0x138>
 c102a9c:	e5933000 	ldr	r3, [r3]
 c102aa0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
	bitfield <<= pos;
 c102aa4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c102aa8:	e51b3010 	ldr	r3, [fp, #-16]
 c102aac:	e1a03312 	lsl	r3, r2, r3
 c102ab0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

	mask <<= pos;
 c102ab4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c102ab8:	e51b3010 	ldr	r3, [fp, #-16]
 c102abc:	e1a03312 	lsl	r3, r2, r3
 c102ac0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	mask ^= ~0;
 c102ac4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102ac8:	e1e03003 	mvn	r3, r3
 c102acc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

	reg &= mask; // Ponemos a 0 todos los valores en la zona que va a ir el nuevo nibble
 c102ad0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c102ad4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c102ad8:	e0023003 	and	r3, r2, r3
 c102adc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
	reg |= bitfield; // Ponemos a 1 los bits que esten a 1 del nuevo nibble
 c102ae0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c102ae4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c102ae8:	e1823003 	orr	r3, r2, r3
 c102aec:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

	rTCFG1 = reg;
 c102af0:	e59f3018 	ldr	r3, [pc, #24]	; c102b10 <tmr_set_divider+0x138>
 c102af4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c102af8:	e5832000 	str	r2, [r3]

	return 0;
 c102afc:	e3a03000 	mov	r3, #0
}
 c102b00:	e1a00003 	mov	r0, r3
 c102b04:	e24bd00c 	sub	sp, fp, #12
 c102b08:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102b0c:	e12fff1e 	bx	lr
 c102b10:	01d50004 	.word	0x01d50004

0c102b14 <tmr_set_count>:

int tmr_set_count(enum tmr_timer t, int count, int cmp)
{
 c102b14:	e1a0c00d 	mov	ip, sp
 c102b18:	e92dd800 	push	{fp, ip, lr, pc}
 c102b1c:	e24cb004 	sub	fp, ip, #4
 c102b20:	e24dd018 	sub	sp, sp, #24
 c102b24:	e1a03000 	mov	r3, r0
 c102b28:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 c102b2c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
 c102b30:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	int err = 0;
 c102b34:	e3a03000 	mov	r3, #0
 c102b38:	e50b3010 	str	r3, [fp, #-16]
	switch (t) {
 c102b3c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c102b40:	e3530005 	cmp	r3, #5
 c102b44:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 c102b48:	ea00002c 	b	c102c00 <tmr_set_count+0xec>
 c102b4c:	0c102b64 	.word	0x0c102b64
 c102b50:	0c102b80 	.word	0x0c102b80
 c102b54:	0c102b9c 	.word	0x0c102b9c
 c102b58:	0c102bb8 	.word	0x0c102bb8
 c102b5c:	0c102bd4 	.word	0x0c102bd4
 c102b60:	0c102bf0 	.word	0x0c102bf0
		case TIMER0:
			//COMPLETAR: establecer el valor de cuenta count y el valor de
			//comparaciÃ³n cmp en los registros de buffer del timer0 (rTCNTB0 y
			//rTCMPB0)
			rTCNTB0 = count;
 c102b64:	e59f30b0 	ldr	r3, [pc, #176]	; c102c1c <tmr_set_count+0x108>
 c102b68:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c102b6c:	e5832000 	str	r2, [r3]
			rTCMPB0 = cmp;
 c102b70:	e59f30a8 	ldr	r3, [pc, #168]	; c102c20 <tmr_set_count+0x10c>
 c102b74:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c102b78:	e5832000 	str	r2, [r3]
			break;
 c102b7c:	ea000021 	b	c102c08 <tmr_set_count+0xf4>
		case TIMER1:
			//COMPLETAR: establecer el valor de cuenta count y el valor de
			//comparaciÃ³n cmp en los registros de buffer del timer1 (rTCNTB1 y
			//rTCMPB1)
			rTCNTB1 = count;
 c102b80:	e59f309c 	ldr	r3, [pc, #156]	; c102c24 <tmr_set_count+0x110>
 c102b84:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c102b88:	e5832000 	str	r2, [r3]
			rTCMPB1 = cmp;
 c102b8c:	e59f3094 	ldr	r3, [pc, #148]	; c102c28 <tmr_set_count+0x114>
 c102b90:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c102b94:	e5832000 	str	r2, [r3]
			 break;
 c102b98:	ea00001a 	b	c102c08 <tmr_set_count+0xf4>
		case TIMER2:
			//COMPLETAR: establecer el valor de cuenta count y el valor de
			//comparaciÃ³n cmp en los registros de buffer del timer2 (rTCNTB2 y
			//rTCMPB2)
			rTCNTB2 = count;
 c102b9c:	e59f3088 	ldr	r3, [pc, #136]	; c102c2c <tmr_set_count+0x118>
 c102ba0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c102ba4:	e5832000 	str	r2, [r3]
			rTCMPB2 = cmp;
 c102ba8:	e59f3080 	ldr	r3, [pc, #128]	; c102c30 <tmr_set_count+0x11c>
 c102bac:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c102bb0:	e5832000 	str	r2, [r3]
			 break;
 c102bb4:	ea000013 	b	c102c08 <tmr_set_count+0xf4>
		case TIMER3:
			//COMPLETAR: establecer el valor de cuenta count y el valor de
			//comparaciÃ³n cmp en los registros de buffer del timer3 (rTCNTB3 y
			//rTCMPB3)
			rTCNTB3 = count;
 c102bb8:	e59f3074 	ldr	r3, [pc, #116]	; c102c34 <tmr_set_count+0x120>
 c102bbc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c102bc0:	e5832000 	str	r2, [r3]
			rTCMPB3 = cmp;
 c102bc4:	e59f306c 	ldr	r3, [pc, #108]	; c102c38 <tmr_set_count+0x124>
 c102bc8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c102bcc:	e5832000 	str	r2, [r3]
			 break;
 c102bd0:	ea00000c 	b	c102c08 <tmr_set_count+0xf4>
		case TIMER4:
			//COMPLETAR: establecer el valor de cuenta count y el valor de
			//comparaciÃ³n cmp en los registros de buffer del timer4 (rTCNTB4 y
			//rTCMPB4)
			rTCNTB4 = count;
 c102bd4:	e59f3060 	ldr	r3, [pc, #96]	; c102c3c <tmr_set_count+0x128>
 c102bd8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c102bdc:	e5832000 	str	r2, [r3]
			rTCMPB4 = cmp;
 c102be0:	e59f3058 	ldr	r3, [pc, #88]	; c102c40 <tmr_set_count+0x12c>
 c102be4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c102be8:	e5832000 	str	r2, [r3]
			 break;
 c102bec:	ea000005 	b	c102c08 <tmr_set_count+0xf4>
		case TIMER5:
			//COMPLETAR: establecer el valor de cuenta count en el registro de 
			//buffer del timer5 (rTCNTB5)
			rTCNTB5 = count;
 c102bf0:	e59f304c 	ldr	r3, [pc, #76]	; c102c44 <tmr_set_count+0x130>
 c102bf4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c102bf8:	e5832000 	str	r2, [r3]
			 break;
 c102bfc:	ea000001 	b	c102c08 <tmr_set_count+0xf4>
		default:
			err = -1;
 c102c00:	e3e03000 	mvn	r3, #0
 c102c04:	e50b3010 	str	r3, [fp, #-16]
	}

	return err;
 c102c08:	e51b3010 	ldr	r3, [fp, #-16]
}
 c102c0c:	e1a00003 	mov	r0, r3
 c102c10:	e24bd00c 	sub	sp, fp, #12
 c102c14:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102c18:	e12fff1e 	bx	lr
 c102c1c:	01d5000c 	.word	0x01d5000c
 c102c20:	01d50010 	.word	0x01d50010
 c102c24:	01d50018 	.word	0x01d50018
 c102c28:	01d5001c 	.word	0x01d5001c
 c102c2c:	01d50024 	.word	0x01d50024
 c102c30:	01d50028 	.word	0x01d50028
 c102c34:	01d50030 	.word	0x01d50030
 c102c38:	01d50034 	.word	0x01d50034
 c102c3c:	01d5003c 	.word	0x01d5003c
 c102c40:	01d50040 	.word	0x01d50040
 c102c44:	01d50048 	.word	0x01d50048

0c102c48 <tmr_update>:

int tmr_update(enum tmr_timer t)
{
 c102c48:	e1a0c00d 	mov	ip, sp
 c102c4c:	e92dd800 	push	{fp, ip, lr, pc}
 c102c50:	e24cb004 	sub	fp, ip, #4
 c102c54:	e24dd010 	sub	sp, sp, #16
 c102c58:	e1a03000 	mov	r3, r0
 c102c5c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	int pos = t*4;
 c102c60:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c102c64:	e1a03103 	lsl	r3, r3, #2
 c102c68:	e50b3010 	str	r3, [fp, #-16]
	if (t > 0)
 c102c6c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c102c70:	e3530000 	cmp	r3, #0
 c102c74:	0a000002 	beq	c102c84 <tmr_update+0x3c>
		pos += 4;
 c102c78:	e51b3010 	ldr	r3, [fp, #-16]
 c102c7c:	e2833004 	add	r3, r3, #4
 c102c80:	e50b3010 	str	r3, [fp, #-16]

	if (t < 0 || t > 5)
 c102c84:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c102c88:	e3530005 	cmp	r3, #5
 c102c8c:	9a000001 	bls	c102c98 <tmr_update+0x50>
		return -1;
 c102c90:	e3e03000 	mvn	r3, #0
 c102c94:	ea000014 	b	c102cec <tmr_update+0xa4>

	pos++;
 c102c98:	e51b3010 	ldr	r3, [fp, #-16]
 c102c9c:	e2833001 	add	r3, r3, #1
 c102ca0:	e50b3010 	str	r3, [fp, #-16]

	//COMPLETAR: poner a 1 en el registro rTCON el bit indicado por pos 
	// y justo despuÃ©s ponerlo a 0 (deben ser stores distintos, lo hacemos con
	// sentencias C distintas)
	rTCON |= 1 << pos;
 c102ca4:	e59f3050 	ldr	r3, [pc, #80]	; c102cfc <tmr_update+0xb4>
 c102ca8:	e59f204c 	ldr	r2, [pc, #76]	; c102cfc <tmr_update+0xb4>
 c102cac:	e5921000 	ldr	r1, [r2]
 c102cb0:	e3a00001 	mov	r0, #1
 c102cb4:	e51b2010 	ldr	r2, [fp, #-16]
 c102cb8:	e1a02210 	lsl	r2, r0, r2
 c102cbc:	e1812002 	orr	r2, r1, r2
 c102cc0:	e5832000 	str	r2, [r3]
	rTCON &= ~(1 << pos);
 c102cc4:	e59f3030 	ldr	r3, [pc, #48]	; c102cfc <tmr_update+0xb4>
 c102cc8:	e59f202c 	ldr	r2, [pc, #44]	; c102cfc <tmr_update+0xb4>
 c102ccc:	e5921000 	ldr	r1, [r2]
 c102cd0:	e3a00001 	mov	r0, #1
 c102cd4:	e51b2010 	ldr	r2, [fp, #-16]
 c102cd8:	e1a02210 	lsl	r2, r0, r2
 c102cdc:	e1e02002 	mvn	r2, r2
 c102ce0:	e0012002 	and	r2, r1, r2
 c102ce4:	e5832000 	str	r2, [r3]

	return 0;
 c102ce8:	e3a03000 	mov	r3, #0
}
 c102cec:	e1a00003 	mov	r0, r3
 c102cf0:	e24bd00c 	sub	sp, fp, #12
 c102cf4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102cf8:	e12fff1e 	bx	lr
 c102cfc:	01d50008 	.word	0x01d50008

0c102d00 <tmr_set_mode>:

int tmr_set_mode(enum tmr_timer t, enum tmr_mode mode)
{
 c102d00:	e1a0c00d 	mov	ip, sp
 c102d04:	e92dd800 	push	{fp, ip, lr, pc}
 c102d08:	e24cb004 	sub	fp, ip, #4
 c102d0c:	e24dd010 	sub	sp, sp, #16
 c102d10:	e1a02000 	mov	r2, r0
 c102d14:	e1a03001 	mov	r3, r1
 c102d18:	e54b2015 	strb	r2, [fp, #-21]	; 0xffffffeb
 c102d1c:	e54b3016 	strb	r3, [fp, #-22]	; 0xffffffea
	int err = 0;
 c102d20:	e3a03000 	mov	r3, #0
 c102d24:	e50b3010 	str	r3, [fp, #-16]
	int pos = t*4;
 c102d28:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c102d2c:	e1a03103 	lsl	r3, r3, #2
 c102d30:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	if (t > 0)
 c102d34:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c102d38:	e3530000 	cmp	r3, #0
 c102d3c:	0a000002 	beq	c102d4c <tmr_set_mode+0x4c>
		pos += 4;
 c102d40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c102d44:	e2833004 	add	r3, r3, #4
 c102d48:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

	if (t < 0 || t > 5)
 c102d4c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c102d50:	e3530005 	cmp	r3, #5
 c102d54:	9a000001 	bls	c102d60 <tmr_set_mode+0x60>
		return -1;
 c102d58:	e3e03000 	mvn	r3, #0
 c102d5c:	ea000025 	b	c102df8 <tmr_set_mode+0xf8>

	if(t == 5)
 c102d60:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c102d64:	e3530005 	cmp	r3, #5
 c102d68:	1a000003 	bne	c102d7c <tmr_set_mode+0x7c>
		pos += 2;
 c102d6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c102d70:	e2833002 	add	r3, r3, #2
 c102d74:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c102d78:	ea000002 	b	c102d88 <tmr_set_mode+0x88>
	else
		pos += 3;
 c102d7c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c102d80:	e2833003 	add	r3, r3, #3
 c102d84:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

	if (mode == ONE_SHOT)
 c102d88:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
 c102d8c:	e3530000 	cmp	r3, #0
 c102d90:	1a000009 	bne	c102dbc <tmr_set_mode+0xbc>
		//COMPLETAR: poner a 0 el bit autoreload a partir de la posiciÃ³n pos (es
		//el cuarto bit a partir de esa posiciÃ³n)
		rTCON &= ~(1 << pos);
 c102d94:	e59f306c 	ldr	r3, [pc, #108]	; c102e08 <tmr_set_mode+0x108>
 c102d98:	e59f2068 	ldr	r2, [pc, #104]	; c102e08 <tmr_set_mode+0x108>
 c102d9c:	e5921000 	ldr	r1, [r2]
 c102da0:	e3a00001 	mov	r0, #1
 c102da4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c102da8:	e1a02210 	lsl	r2, r0, r2
 c102dac:	e1e02002 	mvn	r2, r2
 c102db0:	e0012002 	and	r2, r1, r2
 c102db4:	e5832000 	str	r2, [r3]
 c102db8:	ea00000d 	b	c102df4 <tmr_set_mode+0xf4>
	else if (mode == RELOAD)
 c102dbc:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
 c102dc0:	e3530001 	cmp	r3, #1
 c102dc4:	1a000008 	bne	c102dec <tmr_set_mode+0xec>
		//COMPLETAR: poner a 1 el bit autoreload a partir de la posiciÃ³n pos (es
		//el cuarto bit a partir de esa posiciÃ³n)
		rTCON |= 1 << pos;
 c102dc8:	e59f3038 	ldr	r3, [pc, #56]	; c102e08 <tmr_set_mode+0x108>
 c102dcc:	e59f2034 	ldr	r2, [pc, #52]	; c102e08 <tmr_set_mode+0x108>
 c102dd0:	e5921000 	ldr	r1, [r2]
 c102dd4:	e3a00001 	mov	r0, #1
 c102dd8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c102ddc:	e1a02210 	lsl	r2, r0, r2
 c102de0:	e1812002 	orr	r2, r1, r2
 c102de4:	e5832000 	str	r2, [r3]
 c102de8:	ea000001 	b	c102df4 <tmr_set_mode+0xf4>
	else
		err = -1;
 c102dec:	e3e03000 	mvn	r3, #0
 c102df0:	e50b3010 	str	r3, [fp, #-16]

	return err;
 c102df4:	e51b3010 	ldr	r3, [fp, #-16]
}
 c102df8:	e1a00003 	mov	r0, r3
 c102dfc:	e24bd00c 	sub	sp, fp, #12
 c102e00:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102e04:	e12fff1e 	bx	lr
 c102e08:	01d50008 	.word	0x01d50008

0c102e0c <tmr_start>:

int tmr_start(enum tmr_timer t)
{
 c102e0c:	e1a0c00d 	mov	ip, sp
 c102e10:	e92dd800 	push	{fp, ip, lr, pc}
 c102e14:	e24cb004 	sub	fp, ip, #4
 c102e18:	e24dd010 	sub	sp, sp, #16
 c102e1c:	e1a03000 	mov	r3, r0
 c102e20:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	int pos = t*4;
 c102e24:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c102e28:	e1a03103 	lsl	r3, r3, #2
 c102e2c:	e50b3010 	str	r3, [fp, #-16]
	if (t > 0)
 c102e30:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c102e34:	e3530000 	cmp	r3, #0
 c102e38:	0a000002 	beq	c102e48 <tmr_start+0x3c>
		pos += 4;
 c102e3c:	e51b3010 	ldr	r3, [fp, #-16]
 c102e40:	e2833004 	add	r3, r3, #4
 c102e44:	e50b3010 	str	r3, [fp, #-16]

	if (t < 0 || t > 5)
 c102e48:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c102e4c:	e3530005 	cmp	r3, #5
 c102e50:	9a000001 	bls	c102e5c <tmr_start+0x50>
		return -1;
 c102e54:	e3e03000 	mvn	r3, #0
 c102e58:	ea000008 	b	c102e80 <tmr_start+0x74>

	//COMPLETAR: poner a 1 el bit de start a partir de la posiciÃ³n pos en el
	//registro rTCON (es el primer bit del grupo)
	rTCON |= 1 << pos;
 c102e5c:	e59f302c 	ldr	r3, [pc, #44]	; c102e90 <tmr_start+0x84>
 c102e60:	e59f2028 	ldr	r2, [pc, #40]	; c102e90 <tmr_start+0x84>
 c102e64:	e5921000 	ldr	r1, [r2]
 c102e68:	e3a00001 	mov	r0, #1
 c102e6c:	e51b2010 	ldr	r2, [fp, #-16]
 c102e70:	e1a02210 	lsl	r2, r0, r2
 c102e74:	e1812002 	orr	r2, r1, r2
 c102e78:	e5832000 	str	r2, [r3]
	return 0;
 c102e7c:	e3a03000 	mov	r3, #0
}
 c102e80:	e1a00003 	mov	r0, r3
 c102e84:	e24bd00c 	sub	sp, fp, #12
 c102e88:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102e8c:	e12fff1e 	bx	lr
 c102e90:	01d50008 	.word	0x01d50008

0c102e94 <tmr_stop>:

int tmr_stop(enum tmr_timer t)
{
 c102e94:	e1a0c00d 	mov	ip, sp
 c102e98:	e92dd800 	push	{fp, ip, lr, pc}
 c102e9c:	e24cb004 	sub	fp, ip, #4
 c102ea0:	e24dd010 	sub	sp, sp, #16
 c102ea4:	e1a03000 	mov	r3, r0
 c102ea8:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	int pos = t*4;
 c102eac:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c102eb0:	e1a03103 	lsl	r3, r3, #2
 c102eb4:	e50b3010 	str	r3, [fp, #-16]
	if (t > 0)
 c102eb8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c102ebc:	e3530000 	cmp	r3, #0
 c102ec0:	0a000002 	beq	c102ed0 <tmr_stop+0x3c>
		pos += 4;
 c102ec4:	e51b3010 	ldr	r3, [fp, #-16]
 c102ec8:	e2833004 	add	r3, r3, #4
 c102ecc:	e50b3010 	str	r3, [fp, #-16]

	if (t < 0 || t > 5)
 c102ed0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c102ed4:	e3530005 	cmp	r3, #5
 c102ed8:	9a000001 	bls	c102ee4 <tmr_stop+0x50>
		return -1;
 c102edc:	e3e03000 	mvn	r3, #0
 c102ee0:	ea000009 	b	c102f0c <tmr_stop+0x78>

	//COMPLETAR: poner a 0 el bit de start a partir de la posiciÃ³n pos en el
	//registro rTCON (es el primer bit del grupo)
	rTCON &= ~(1 << pos);
 c102ee4:	e59f3030 	ldr	r3, [pc, #48]	; c102f1c <tmr_stop+0x88>
 c102ee8:	e59f202c 	ldr	r2, [pc, #44]	; c102f1c <tmr_stop+0x88>
 c102eec:	e5921000 	ldr	r1, [r2]
 c102ef0:	e3a00001 	mov	r0, #1
 c102ef4:	e51b2010 	ldr	r2, [fp, #-16]
 c102ef8:	e1a02210 	lsl	r2, r0, r2
 c102efc:	e1e02002 	mvn	r2, r2
 c102f00:	e0012002 	and	r2, r1, r2
 c102f04:	e5832000 	str	r2, [r3]

	return 0;
 c102f08:	e3a03000 	mov	r3, #0
}
 c102f0c:	e1a00003 	mov	r0, r3
 c102f10:	e24bd00c 	sub	sp, fp, #12
 c102f14:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102f18:	e12fff1e 	bx	lr
 c102f1c:	01d50008 	.word	0x01d50008

0c102f20 <tmr_isrunning>:

int tmr_isrunning(enum tmr_timer t)
{
 c102f20:	e1a0c00d 	mov	ip, sp
 c102f24:	e92dd800 	push	{fp, ip, lr, pc}
 c102f28:	e24cb004 	sub	fp, ip, #4
 c102f2c:	e24dd010 	sub	sp, sp, #16
 c102f30:	e1a03000 	mov	r3, r0
 c102f34:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	int ret = 0;
 c102f38:	e3a03000 	mov	r3, #0
 c102f3c:	e50b3010 	str	r3, [fp, #-16]
	int pos = t*4;
 c102f40:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c102f44:	e1a03103 	lsl	r3, r3, #2
 c102f48:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	if (t > 0)
 c102f4c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c102f50:	e3530000 	cmp	r3, #0
 c102f54:	0a000002 	beq	c102f64 <tmr_isrunning+0x44>
		pos += 4;
 c102f58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c102f5c:	e2833004 	add	r3, r3, #4
 c102f60:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

	if ((t >= 0) && (t <= 5) 
 c102f64:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c102f68:	e3530005 	cmp	r3, #5
 c102f6c:	8a000009 	bhi	c102f98 <tmr_isrunning+0x78>
			&& (rTCON & (0x1 << pos)))
 c102f70:	e59f3034 	ldr	r3, [pc, #52]	; c102fac <tmr_isrunning+0x8c>
 c102f74:	e5932000 	ldr	r2, [r3]
 c102f78:	e3a01001 	mov	r1, #1
 c102f7c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c102f80:	e1a03311 	lsl	r3, r1, r3
 c102f84:	e0023003 	and	r3, r2, r3
 c102f88:	e3530000 	cmp	r3, #0
 c102f8c:	0a000001 	beq	c102f98 <tmr_isrunning+0x78>
		ret = 1;
 c102f90:	e3a03001 	mov	r3, #1
 c102f94:	e50b3010 	str	r3, [fp, #-16]

	return ret;
 c102f98:	e51b3010 	ldr	r3, [fp, #-16]
}
 c102f9c:	e1a00003 	mov	r0, r3
 c102fa0:	e24bd00c 	sub	sp, fp, #12
 c102fa4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102fa8:	e12fff1e 	bx	lr
 c102fac:	01d50008 	.word	0x01d50008

0c102fb0 <uart0_init>:
#include "uart.h"
#include "44b.h"

void uart0_init( void )
{
 c102fb0:	e1a0c00d 	mov	ip, sp
 c102fb4:	e92dd800 	push	{fp, ip, lr, pc}
 c102fb8:	e24cb004 	sub	fp, ip, #4
	//*Enable FIFO, Rx normal, Tx normal
	//UFCON0[0] = 1
	//UFCON0[1] = 0  Rx FIFO normal (no reset)
	//UFCON0[2] = 0  Rx FIFO normal (no reset)
    rUFCON0 = 0x1;
 c102fbc:	e59f3040 	ldr	r3, [pc, #64]	; c103004 <uart0_init+0x54>
 c102fc0:	e3a02001 	mov	r2, #1
 c102fc4:	e5832000 	str	r2, [r3]

    //Disable Auto Flow Control and disable Request to Send
    //UMCON0[4] = 0
    rUMCON0 = 0x0;
 c102fc8:	e59f3038 	ldr	r3, [pc, #56]	; c103008 <uart0_init+0x58>
 c102fcc:	e3a02000 	mov	r2, #0
 c102fd0:	e5832000 	str	r2, [r3]
    //* Formato de la trama:
    //ULCON0[6]   = 0  normal (no infrarrojos)
    //ULCON0[5:3] = 0  sin paridad
    //ULCON0[2]   = 0  1 bit de stop
    //ULCON0[1:0] = 3  8 bits de datos
    rULCON0 = 0x3;
 c102fd4:	e3a0361d 	mov	r3, #30408704	; 0x1d00000
 c102fd8:	e3a02003 	mov	r2, #3
 c102fdc:	e5832000 	str	r2, [r3]

    //* 115200 Baudios
    //UBRDIV0 = 34  64MHz / (115200 Ã 16) â 1
    rUBRDIV0 = 34;
 c102fe0:	e59f3024 	ldr	r3, [pc, #36]	; c10300c <uart0_init+0x5c>
 c102fe4:	e3a02022 	mov	r2, #34	; 0x22
 c102fe8:	e5832000 	str	r2, [r3]

    //UCON0[1:0] = 1  Rx: polling/interrupt mode
    //UCON0[3:2] = 1  Tx: polling/interrupt mode
    //UCON0[4]   = 0  no break
    //UCON0[5]   = 0  no loopback
    rUCON0 = 0x5;
 c102fec:	e59f301c 	ldr	r3, [pc, #28]	; c103010 <uart0_init+0x60>
 c102ff0:	e3a02005 	mov	r2, #5
 c102ff4:	e5832000 	str	r2, [r3]
}
 c102ff8:	e24bd00c 	sub	sp, fp, #12
 c102ffc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103000:	e12fff1e 	bx	lr
 c103004:	01d00008 	.word	0x01d00008
 c103008:	01d0000c 	.word	0x01d0000c
 c10300c:	01d00028 	.word	0x01d00028
 c103010:	01d00004 	.word	0x01d00004

0c103014 <uart0_putchar>:

void uart0_putchar( char ch )
{
 c103014:	e1a0c00d 	mov	ip, sp
 c103018:	e92dd800 	push	{fp, ip, lr, pc}
 c10301c:	e24cb004 	sub	fp, ip, #4
 c103020:	e24dd008 	sub	sp, sp, #8
 c103024:	e1a03000 	mov	r3, r0
 c103028:	e54b300d 	strb	r3, [fp, #-13]
	//While FIFO is full wait (while UFSTAT0[9] == 1)
    while( rUFSTAT0 & (1 << 9) );
 c10302c:	e1a00000 	nop			; (mov r0, r0)
 c103030:	e59f3024 	ldr	r3, [pc, #36]	; c10305c <uart0_putchar+0x48>
 c103034:	e5933000 	ldr	r3, [r3]
 c103038:	e2033c02 	and	r3, r3, #512	; 0x200
 c10303c:	e3530000 	cmp	r3, #0
 c103040:	1afffffa 	bne	c103030 <uart0_putchar+0x1c>
    rUTXH0 = ch;
 c103044:	e59f3014 	ldr	r3, [pc, #20]	; c103060 <uart0_putchar+0x4c>
 c103048:	e55b200d 	ldrb	r2, [fp, #-13]
 c10304c:	e5c32000 	strb	r2, [r3]
}
 c103050:	e24bd00c 	sub	sp, fp, #12
 c103054:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103058:	e12fff1e 	bx	lr
 c10305c:	01d00018 	.word	0x01d00018
 c103060:	01d00020 	.word	0x01d00020

0c103064 <uart0_getchar>:

char uart0_getchar( void )
{
 c103064:	e1a0c00d 	mov	ip, sp
 c103068:	e92dd800 	push	{fp, ip, lr, pc}
 c10306c:	e24cb004 	sub	fp, ip, #4
	//While FIFO is empty wait (while UFSTAT0[3:0] == 0)
    while( (rUFSTAT0 & 0b1111) == 0 );
 c103070:	e1a00000 	nop			; (mov r0, r0)
 c103074:	e59f3028 	ldr	r3, [pc, #40]	; c1030a4 <uart0_getchar+0x40>
 c103078:	e5933000 	ldr	r3, [r3]
 c10307c:	e203300f 	and	r3, r3, #15
 c103080:	e3530000 	cmp	r3, #0
 c103084:	0afffffa 	beq	c103074 <uart0_getchar+0x10>

    //Read URXH0
    return rURXH0;
 c103088:	e59f3018 	ldr	r3, [pc, #24]	; c1030a8 <uart0_getchar+0x44>
 c10308c:	e5d33000 	ldrb	r3, [r3]
 c103090:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c103094:	e1a00003 	mov	r0, r3
 c103098:	e24bd00c 	sub	sp, fp, #12
 c10309c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1030a0:	e12fff1e 	bx	lr
 c1030a4:	01d00018 	.word	0x01d00018
 c1030a8:	01d00024 	.word	0x01d00024

0c1030ac <uart0_puts>:

void uart0_puts( char *s )
{
 c1030ac:	e1a0c00d 	mov	ip, sp
 c1030b0:	e92dd800 	push	{fp, ip, lr, pc}
 c1030b4:	e24cb004 	sub	fp, ip, #4
 c1030b8:	e24dd008 	sub	sp, sp, #8
 c1030bc:	e50b0010 	str	r0, [fp, #-16]
    while(*s) {
 c1030c0:	ea000006 	b	c1030e0 <uart0_puts+0x34>
    	uart0_putchar(*s);
 c1030c4:	e51b3010 	ldr	r3, [fp, #-16]
 c1030c8:	e5d33000 	ldrb	r3, [r3]
 c1030cc:	e1a00003 	mov	r0, r3
 c1030d0:	ebffffcf 	bl	c103014 <uart0_putchar>
    	s++;
 c1030d4:	e51b3010 	ldr	r3, [fp, #-16]
 c1030d8:	e2833001 	add	r3, r3, #1
 c1030dc:	e50b3010 	str	r3, [fp, #-16]
    return rURXH0;
}

void uart0_puts( char *s )
{
    while(*s) {
 c1030e0:	e51b3010 	ldr	r3, [fp, #-16]
 c1030e4:	e5d33000 	ldrb	r3, [r3]
 c1030e8:	e3530000 	cmp	r3, #0
 c1030ec:	1afffff4 	bne	c1030c4 <uart0_puts+0x18>
    	uart0_putchar(*s);
    	s++;
    }
}
 c1030f0:	e24bd00c 	sub	sp, fp, #12
 c1030f4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1030f8:	e12fff1e 	bx	lr

0c1030fc <uart0_putint>:

void uart0_putint( int32 i )
{
 c1030fc:	e1a0c00d 	mov	ip, sp
 c103100:	e92dd800 	push	{fp, ip, lr, pc}
 c103104:	e24cb004 	sub	fp, ip, #4
 c103108:	e24dd020 	sub	sp, sp, #32
 c10310c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
	char s[11 + 1];
	int negative = i < 0;
 c103110:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c103114:	e1a03fa3 	lsr	r3, r3, #31
 c103118:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	char* p = s + 11;
 c10311c:	e24b3020 	sub	r3, fp, #32
 c103120:	e283300b 	add	r3, r3, #11
 c103124:	e50b3010 	str	r3, [fp, #-16]

	*p = '\0';
 c103128:	e51b3010 	ldr	r3, [fp, #-16]
 c10312c:	e3a02000 	mov	r2, #0
 c103130:	e5c32000 	strb	r2, [r3]
	if (negative)
 c103134:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c103138:	e3530000 	cmp	r3, #0
 c10313c:	0a000002 	beq	c10314c <uart0_putint+0x50>
		i *= -1;
 c103140:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c103144:	e2633000 	rsb	r3, r3, #0
 c103148:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

	do {
		*--p = '0' + ( i % 10 );
 c10314c:	e51b3010 	ldr	r3, [fp, #-16]
 c103150:	e2433001 	sub	r3, r3, #1
 c103154:	e50b3010 	str	r3, [fp, #-16]
 c103158:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
 c10315c:	e59f3094 	ldr	r3, [pc, #148]	; c1031f8 <uart0_putint+0xfc>
 c103160:	e0c32391 	smull	r2, r3, r1, r3
 c103164:	e1a02143 	asr	r2, r3, #2
 c103168:	e1a03fc1 	asr	r3, r1, #31
 c10316c:	e0632002 	rsb	r2, r3, r2
 c103170:	e1a03002 	mov	r3, r2
 c103174:	e1a03103 	lsl	r3, r3, #2
 c103178:	e0833002 	add	r3, r3, r2
 c10317c:	e1a03083 	lsl	r3, r3, #1
 c103180:	e0632001 	rsb	r2, r3, r1
 c103184:	e20230ff 	and	r3, r2, #255	; 0xff
 c103188:	e2833030 	add	r3, r3, #48	; 0x30
 c10318c:	e20320ff 	and	r2, r3, #255	; 0xff
 c103190:	e51b3010 	ldr	r3, [fp, #-16]
 c103194:	e5c32000 	strb	r2, [r3]
		i /= 10;
 c103198:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c10319c:	e59f2054 	ldr	r2, [pc, #84]	; c1031f8 <uart0_putint+0xfc>
 c1031a0:	e0c21293 	smull	r1, r2, r3, r2
 c1031a4:	e1a02142 	asr	r2, r2, #2
 c1031a8:	e1a03fc3 	asr	r3, r3, #31
 c1031ac:	e0633002 	rsb	r3, r3, r2
 c1031b0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
	} while(i > 0);
 c1031b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c1031b8:	e3530000 	cmp	r3, #0
 c1031bc:	caffffe2 	bgt	c10314c <uart0_putint+0x50>

	if(negative) {
 c1031c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1031c4:	e3530000 	cmp	r3, #0
 c1031c8:	0a000005 	beq	c1031e4 <uart0_putint+0xe8>
		*--p = '-';
 c1031cc:	e51b3010 	ldr	r3, [fp, #-16]
 c1031d0:	e2433001 	sub	r3, r3, #1
 c1031d4:	e50b3010 	str	r3, [fp, #-16]
 c1031d8:	e51b3010 	ldr	r3, [fp, #-16]
 c1031dc:	e3a0202d 	mov	r2, #45	; 0x2d
 c1031e0:	e5c32000 	strb	r2, [r3]
	}

	uart0_puts(p);
 c1031e4:	e51b0010 	ldr	r0, [fp, #-16]
 c1031e8:	ebffffaf 	bl	c1030ac <uart0_puts>
}
 c1031ec:	e24bd00c 	sub	sp, fp, #12
 c1031f0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1031f4:	e12fff1e 	bx	lr
 c1031f8:	66666667 	.word	0x66666667

0c1031fc <uart0_puthex>:

void uart0_puthex( uint32 i )
{
 c1031fc:	e1a0c00d 	mov	ip, sp
 c103200:	e92dd800 	push	{fp, ip, lr, pc}
 c103204:	e24cb004 	sub	fp, ip, #4
 c103208:	e24dd018 	sub	sp, sp, #24
 c10320c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    char buf[8 + 1];
    char *p = buf + 8;
 c103210:	e24b301c 	sub	r3, fp, #28
 c103214:	e2833008 	add	r3, r3, #8
 c103218:	e50b3010 	str	r3, [fp, #-16]
    uint8 c;

    *p = '\0';
 c10321c:	e51b3010 	ldr	r3, [fp, #-16]
 c103220:	e3a02000 	mov	r2, #0
 c103224:	e5c32000 	strb	r2, [r3]

    do {
        c = i & 0xf;
 c103228:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10322c:	e20330ff 	and	r3, r3, #255	; 0xff
 c103230:	e203300f 	and	r3, r3, #15
 c103234:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        if( c < 10 )
 c103238:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10323c:	e3530009 	cmp	r3, #9
 c103240:	8a000008 	bhi	c103268 <uart0_puthex+0x6c>
            *--p = '0' + c;
 c103244:	e51b3010 	ldr	r3, [fp, #-16]
 c103248:	e2433001 	sub	r3, r3, #1
 c10324c:	e50b3010 	str	r3, [fp, #-16]
 c103250:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c103254:	e2833030 	add	r3, r3, #48	; 0x30
 c103258:	e20320ff 	and	r2, r3, #255	; 0xff
 c10325c:	e51b3010 	ldr	r3, [fp, #-16]
 c103260:	e5c32000 	strb	r2, [r3]
 c103264:	ea000007 	b	c103288 <uart0_puthex+0x8c>
        else
            *--p = 'a' + c - 10;
 c103268:	e51b3010 	ldr	r3, [fp, #-16]
 c10326c:	e2433001 	sub	r3, r3, #1
 c103270:	e50b3010 	str	r3, [fp, #-16]
 c103274:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c103278:	e2833057 	add	r3, r3, #87	; 0x57
 c10327c:	e20320ff 	and	r2, r3, #255	; 0xff
 c103280:	e51b3010 	ldr	r3, [fp, #-16]
 c103284:	e5c32000 	strb	r2, [r3]
        i = i >> 4;
 c103288:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10328c:	e1a03223 	lsr	r3, r3, #4
 c103290:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    } while( i );
 c103294:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c103298:	e3530000 	cmp	r3, #0
 c10329c:	1affffe1 	bne	c103228 <uart0_puthex+0x2c>

    uart0_puts( p );
 c1032a0:	e51b0010 	ldr	r0, [fp, #-16]
 c1032a4:	ebffff80 	bl	c1030ac <uart0_puts>
}
 c1032a8:	e24bd00c 	sub	sp, fp, #12
 c1032ac:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1032b0:	e12fff1e 	bx	lr

0c1032b4 <uart0_gets>:

void uart0_gets( char *s )
{
 c1032b4:	e1a0c00d 	mov	ip, sp
 c1032b8:	e92dd800 	push	{fp, ip, lr, pc}
 c1032bc:	e24cb004 	sub	fp, ip, #4
 c1032c0:	e24dd010 	sub	sp, sp, #16
 c1032c4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
	char c = uart0_getchar();
 c1032c8:	ebffff65 	bl	c103064 <uart0_getchar>
 c1032cc:	e1a03000 	mov	r3, r0
 c1032d0:	e54b300d 	strb	r3, [fp, #-13]

	while(c != '\n') {
 c1032d4:	ea000008 	b	c1032fc <uart0_gets+0x48>
		*s = c;
 c1032d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1032dc:	e55b200d 	ldrb	r2, [fp, #-13]
 c1032e0:	e5c32000 	strb	r2, [r3]
		s++;
 c1032e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1032e8:	e2833001 	add	r3, r3, #1
 c1032ec:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
		c = uart0_getchar();
 c1032f0:	ebffff5b 	bl	c103064 <uart0_getchar>
 c1032f4:	e1a03000 	mov	r3, r0
 c1032f8:	e54b300d 	strb	r3, [fp, #-13]

void uart0_gets( char *s )
{
	char c = uart0_getchar();

	while(c != '\n') {
 c1032fc:	e55b300d 	ldrb	r3, [fp, #-13]
 c103300:	e353000a 	cmp	r3, #10
 c103304:	1afffff3 	bne	c1032d8 <uart0_gets+0x24>
		*s = c;
		s++;
		c = uart0_getchar();
	}

	*s = '\0';
 c103308:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10330c:	e3a02000 	mov	r2, #0
 c103310:	e5c32000 	strb	r2, [r3]
}
 c103314:	e24bd00c 	sub	sp, fp, #12
 c103318:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10331c:	e12fff1e 	bx	lr

0c103320 <uart0_getint>:

int32 uart0_getint( void )
{
 c103320:	e1a0c00d 	mov	ip, sp
 c103324:	e92dd800 	push	{fp, ip, lr, pc}
 c103328:	e24cb004 	sub	fp, ip, #4
 c10332c:	e24dd018 	sub	sp, sp, #24
	char s[11 + 1];
	char* p = s;
 c103330:	e24b3020 	sub	r3, fp, #32
 c103334:	e50b3010 	str	r3, [fp, #-16]
	int32 res = 0;
 c103338:	e3a03000 	mov	r3, #0
 c10333c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

	uart0_gets(s);
 c103340:	e24b3020 	sub	r3, fp, #32
 c103344:	e1a00003 	mov	r0, r3
 c103348:	ebffffd9 	bl	c1032b4 <uart0_gets>

	if(s[0] == '\0')
 c10334c:	e55b3020 	ldrb	r3, [fp, #-32]	; 0xffffffe0
 c103350:	e3530000 	cmp	r3, #0
 c103354:	1a000001 	bne	c103360 <uart0_getint+0x40>
		return 0;
 c103358:	e3a03000 	mov	r3, #0
 c10335c:	ea000021 	b	c1033e8 <uart0_getint+0xc8>

	if(s[0]=='-')
 c103360:	e55b3020 	ldrb	r3, [fp, #-32]	; 0xffffffe0
 c103364:	e353002d 	cmp	r3, #45	; 0x2d
 c103368:	1a000012 	bne	c1033b8 <uart0_getint+0x98>
		p++;
 c10336c:	e51b3010 	ldr	r3, [fp, #-16]
 c103370:	e2833001 	add	r3, r3, #1
 c103374:	e50b3010 	str	r3, [fp, #-16]

	while(*p) {
 c103378:	ea00000f 	b	c1033bc <uart0_getint+0x9c>
		res = 10 * res + (*p - '0');
 c10337c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c103380:	e1a03002 	mov	r3, r2
 c103384:	e1a03103 	lsl	r3, r3, #2
 c103388:	e0833002 	add	r3, r3, r2
 c10338c:	e1a03083 	lsl	r3, r3, #1
 c103390:	e1a02003 	mov	r2, r3
 c103394:	e51b3010 	ldr	r3, [fp, #-16]
 c103398:	e5d33000 	ldrb	r3, [r3]
 c10339c:	e2433030 	sub	r3, r3, #48	; 0x30
 c1033a0:	e0823003 	add	r3, r2, r3
 c1033a4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		p++;
 c1033a8:	e51b3010 	ldr	r3, [fp, #-16]
 c1033ac:	e2833001 	add	r3, r3, #1
 c1033b0:	e50b3010 	str	r3, [fp, #-16]
 c1033b4:	ea000000 	b	c1033bc <uart0_getint+0x9c>
		return 0;

	if(s[0]=='-')
		p++;

	while(*p) {
 c1033b8:	e1a00000 	nop			; (mov r0, r0)
 c1033bc:	e51b3010 	ldr	r3, [fp, #-16]
 c1033c0:	e5d33000 	ldrb	r3, [r3]
 c1033c4:	e3530000 	cmp	r3, #0
 c1033c8:	1affffeb 	bne	c10337c <uart0_getint+0x5c>
		res = 10 * res + (*p - '0');
		p++;
	}

	if(s[0] == '-')
 c1033cc:	e55b3020 	ldrb	r3, [fp, #-32]	; 0xffffffe0
 c1033d0:	e353002d 	cmp	r3, #45	; 0x2d
 c1033d4:	1a000002 	bne	c1033e4 <uart0_getint+0xc4>
		res *= -1;
 c1033d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1033dc:	e2633000 	rsb	r3, r3, #0
 c1033e0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

	return res;
 c1033e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
 c1033e8:	e1a00003 	mov	r0, r3
 c1033ec:	e24bd00c 	sub	sp, fp, #12
 c1033f0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1033f4:	e12fff1e 	bx	lr

0c1033f8 <uart0_gethex>:

uint32 uart0_gethex( void )
{
 c1033f8:	e1a0c00d 	mov	ip, sp
 c1033fc:	e92dd800 	push	{fp, ip, lr, pc}
 c103400:	e24cb004 	sub	fp, ip, #4
 c103404:	e24dd018 	sub	sp, sp, #24
	char s[8 + 1];
	char* p = s;
 c103408:	e24b3020 	sub	r3, fp, #32
 c10340c:	e50b3010 	str	r3, [fp, #-16]
	int32 res = 0;
 c103410:	e3a03000 	mov	r3, #0
 c103414:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

	uart0_gets(s);
 c103418:	e24b3020 	sub	r3, fp, #32
 c10341c:	e1a00003 	mov	r0, r3
 c103420:	ebffffa3 	bl	c1032b4 <uart0_gets>

	while(*p) {
 c103424:	ea00002b 	b	c1034d8 <uart0_gethex+0xe0>
		res = res << 4;
 c103428:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10342c:	e1a03203 	lsl	r3, r3, #4
 c103430:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		char c = *p;
 c103434:	e51b3010 	ldr	r3, [fp, #-16]
 c103438:	e5d33000 	ldrb	r3, [r3]
 c10343c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
		if(c >= '0' && c <= '9')
 c103440:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c103444:	e353002f 	cmp	r3, #47	; 0x2f
 c103448:	9a000008 	bls	c103470 <uart0_gethex+0x78>
 c10344c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c103450:	e3530039 	cmp	r3, #57	; 0x39
 c103454:	8a000005 	bhi	c103470 <uart0_gethex+0x78>
			res += c - '0';
 c103458:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10345c:	e2433030 	sub	r3, r3, #48	; 0x30
 c103460:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c103464:	e0823003 	add	r3, r2, r3
 c103468:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c10346c:	ea000016 	b	c1034cc <uart0_gethex+0xd4>
		else if(c >= 'a' && c <= 'f')
 c103470:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c103474:	e3530060 	cmp	r3, #96	; 0x60
 c103478:	9a000008 	bls	c1034a0 <uart0_gethex+0xa8>
 c10347c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c103480:	e3530066 	cmp	r3, #102	; 0x66
 c103484:	8a000005 	bhi	c1034a0 <uart0_gethex+0xa8>
			res += 10 + c - 'a';
 c103488:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10348c:	e2433057 	sub	r3, r3, #87	; 0x57
 c103490:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c103494:	e0823003 	add	r3, r2, r3
 c103498:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c10349c:	ea00000a 	b	c1034cc <uart0_gethex+0xd4>
		else if(c >= 'A' && c <= 'F')
 c1034a0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c1034a4:	e3530040 	cmp	r3, #64	; 0x40
 c1034a8:	9a000007 	bls	c1034cc <uart0_gethex+0xd4>
 c1034ac:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c1034b0:	e3530046 	cmp	r3, #70	; 0x46
 c1034b4:	8a000004 	bhi	c1034cc <uart0_gethex+0xd4>
			res += 10 + c - 'A';
 c1034b8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c1034bc:	e2433037 	sub	r3, r3, #55	; 0x37
 c1034c0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c1034c4:	e0823003 	add	r3, r2, r3
 c1034c8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		p++;
 c1034cc:	e51b3010 	ldr	r3, [fp, #-16]
 c1034d0:	e2833001 	add	r3, r3, #1
 c1034d4:	e50b3010 	str	r3, [fp, #-16]
	char* p = s;
	int32 res = 0;

	uart0_gets(s);

	while(*p) {
 c1034d8:	e51b3010 	ldr	r3, [fp, #-16]
 c1034dc:	e5d33000 	ldrb	r3, [r3]
 c1034e0:	e3530000 	cmp	r3, #0
 c1034e4:	1affffcf 	bne	c103428 <uart0_gethex+0x30>
		else if(c >= 'A' && c <= 'F')
			res += 10 + c - 'A';
		p++;
	}

	return res;
 c1034e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
 c1034ec:	e1a00003 	mov	r0, r3
 c1034f0:	e24bd00c 	sub	sp, fp, #12
 c1034f4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1034f8:	e12fff1e 	bx	lr

0c1034fc <Delay>:

void Delay(int time)
// time=0: adjust the Delay function by WatchDog timer.//
// time>0: the number of loop time//
// 100us resolution.//
{
 c1034fc:	e1a0c00d 	mov	ip, sp
 c103500:	e92dd800 	push	{fp, ip, lr, pc}
 c103504:	e24cb004 	sub	fp, ip, #4
 c103508:	e24dd010 	sub	sp, sp, #16
 c10350c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
	int i,adjust=0;
 c103510:	e3a03000 	mov	r3, #0
 c103514:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	if(time==0)
 c103518:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10351c:	e3530000 	cmp	r3, #0
 c103520:	1a000021 	bne	c1035ac <Delay+0xb0>
	{
		time=200;
 c103524:	e3a030c8 	mov	r3, #200	; 0xc8
 c103528:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
		adjust=1;
 c10352c:	e3a03001 	mov	r3, #1
 c103530:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		delayLoopCount=400;
 c103534:	e59f30d8 	ldr	r3, [pc, #216]	; c103614 <Delay+0x118>
 c103538:	e3a02e19 	mov	r2, #400	; 0x190
 c10353c:	e5832000 	str	r2, [r3]
		rWTCON=((MCLK/1000000-1)<<8)|(2<<3);	// 1M/64,Watch-dog,nRESET,interrupt disable//
 c103540:	e59f30d0 	ldr	r3, [pc, #208]	; c103618 <Delay+0x11c>
 c103544:	e59f20d0 	ldr	r2, [pc, #208]	; c10361c <Delay+0x120>
 c103548:	e5832000 	str	r2, [r3]
		rWTDAT=0xffff;
 c10354c:	e59f30cc 	ldr	r3, [pc, #204]	; c103620 <Delay+0x124>
 c103550:	e59f20cc 	ldr	r2, [pc, #204]	; c103624 <Delay+0x128>
 c103554:	e5832000 	str	r2, [r3]
		rWTCNT=0xffff;
 c103558:	e59f30c8 	ldr	r3, [pc, #200]	; c103628 <Delay+0x12c>
 c10355c:	e59f20c0 	ldr	r2, [pc, #192]	; c103624 <Delay+0x128>
 c103560:	e5832000 	str	r2, [r3]
		rWTCON=((MCLK/1000000-1)<<8)|(2<<3)|(1<<5); // 1M/64,Watch-dog enable,nRESET,interrupt disable //
 c103564:	e59f30ac 	ldr	r3, [pc, #172]	; c103618 <Delay+0x11c>
 c103568:	e59f20bc 	ldr	r2, [pc, #188]	; c10362c <Delay+0x130>
 c10356c:	e5832000 	str	r2, [r3]
	}
	for(;time>0;time--)
 c103570:	ea00000d 	b	c1035ac <Delay+0xb0>
		for(i=0;i<delayLoopCount;i++);
 c103574:	e3a03000 	mov	r3, #0
 c103578:	e50b3010 	str	r3, [fp, #-16]
 c10357c:	ea000002 	b	c10358c <Delay+0x90>
 c103580:	e51b3010 	ldr	r3, [fp, #-16]
 c103584:	e2833001 	add	r3, r3, #1
 c103588:	e50b3010 	str	r3, [fp, #-16]
 c10358c:	e59f3080 	ldr	r3, [pc, #128]	; c103614 <Delay+0x118>
 c103590:	e5933000 	ldr	r3, [r3]
 c103594:	e51b2010 	ldr	r2, [fp, #-16]
 c103598:	e1520003 	cmp	r2, r3
 c10359c:	bafffff7 	blt	c103580 <Delay+0x84>
		rWTCON=((MCLK/1000000-1)<<8)|(2<<3);	// 1M/64,Watch-dog,nRESET,interrupt disable//
		rWTDAT=0xffff;
		rWTCNT=0xffff;
		rWTCON=((MCLK/1000000-1)<<8)|(2<<3)|(1<<5); // 1M/64,Watch-dog enable,nRESET,interrupt disable //
	}
	for(;time>0;time--)
 c1035a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1035a4:	e2433001 	sub	r3, r3, #1
 c1035a8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c1035ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1035b0:	e3530000 	cmp	r3, #0
 c1035b4:	caffffee 	bgt	c103574 <Delay+0x78>
		for(i=0;i<delayLoopCount;i++);
	if(adjust==1)
 c1035b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1035bc:	e3530001 	cmp	r3, #1
 c1035c0:	1a000010 	bne	c103608 <Delay+0x10c>
	{
		rWTCON=((MCLK/1000000-1)<<8)|(2<<3);
 c1035c4:	e59f304c 	ldr	r3, [pc, #76]	; c103618 <Delay+0x11c>
 c1035c8:	e59f204c 	ldr	r2, [pc, #76]	; c10361c <Delay+0x120>
 c1035cc:	e5832000 	str	r2, [r3]
		i=0xffff-rWTCNT;   //  1count/16us?????????//
 c1035d0:	e59f3050 	ldr	r3, [pc, #80]	; c103628 <Delay+0x12c>
 c1035d4:	e5933000 	ldr	r3, [r3]
 c1035d8:	e2633cff 	rsb	r3, r3, #65280	; 0xff00
 c1035dc:	e28330ff 	add	r3, r3, #255	; 0xff
 c1035e0:	e50b3010 	str	r3, [fp, #-16]
		delayLoopCount=8000000/(i*64);	//400*100/(i*64/200)   //
 c1035e4:	e51b3010 	ldr	r3, [fp, #-16]
 c1035e8:	e1a03303 	lsl	r3, r3, #6
 c1035ec:	e59f003c 	ldr	r0, [pc, #60]	; c103630 <Delay+0x134>
 c1035f0:	e1a01003 	mov	r1, r3
 c1035f4:	eb00000e 	bl	c103634 <__aeabi_idiv>
 c1035f8:	e1a03000 	mov	r3, r0
 c1035fc:	e1a02003 	mov	r2, r3
 c103600:	e59f300c 	ldr	r3, [pc, #12]	; c103614 <Delay+0x118>
 c103604:	e5832000 	str	r2, [r3]
	}
}
 c103608:	e24bd00c 	sub	sp, fp, #12
 c10360c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c103610:	e12fff1e 	bx	lr
 c103614:	0c100064 	.word	0x0c100064
 c103618:	01d30000 	.word	0x01d30000
 c10361c:	00003f10 	.word	0x00003f10
 c103620:	01d30004 	.word	0x01d30004
 c103624:	0000ffff 	.word	0x0000ffff
 c103628:	01d30008 	.word	0x01d30008
 c10362c:	00003f30 	.word	0x00003f30
 c103630:	007a1200 	.word	0x007a1200

0c103634 <__aeabi_idiv>:
 c103634:	e3510000 	cmp	r1, #0
 c103638:	0a000043 	beq	c10374c <.divsi3_skip_div0_test+0x110>

0c10363c <.divsi3_skip_div0_test>:
 c10363c:	e020c001 	eor	ip, r0, r1
 c103640:	42611000 	rsbmi	r1, r1, #0
 c103644:	e2512001 	subs	r2, r1, #1
 c103648:	0a000027 	beq	c1036ec <.divsi3_skip_div0_test+0xb0>
 c10364c:	e1b03000 	movs	r3, r0
 c103650:	42603000 	rsbmi	r3, r0, #0
 c103654:	e1530001 	cmp	r3, r1
 c103658:	9a000026 	bls	c1036f8 <.divsi3_skip_div0_test+0xbc>
 c10365c:	e1110002 	tst	r1, r2
 c103660:	0a000028 	beq	c103708 <.divsi3_skip_div0_test+0xcc>
 c103664:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 c103668:	01a01181 	lsleq	r1, r1, #3
 c10366c:	03a02008 	moveq	r2, #8
 c103670:	13a02001 	movne	r2, #1
 c103674:	e3510201 	cmp	r1, #268435456	; 0x10000000
 c103678:	31510003 	cmpcc	r1, r3
 c10367c:	31a01201 	lslcc	r1, r1, #4
 c103680:	31a02202 	lslcc	r2, r2, #4
 c103684:	3afffffa 	bcc	c103674 <.divsi3_skip_div0_test+0x38>
 c103688:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 c10368c:	31510003 	cmpcc	r1, r3
 c103690:	31a01081 	lslcc	r1, r1, #1
 c103694:	31a02082 	lslcc	r2, r2, #1
 c103698:	3afffffa 	bcc	c103688 <.divsi3_skip_div0_test+0x4c>
 c10369c:	e3a00000 	mov	r0, #0
 c1036a0:	e1530001 	cmp	r3, r1
 c1036a4:	20433001 	subcs	r3, r3, r1
 c1036a8:	21800002 	orrcs	r0, r0, r2
 c1036ac:	e15300a1 	cmp	r3, r1, lsr #1
 c1036b0:	204330a1 	subcs	r3, r3, r1, lsr #1
 c1036b4:	218000a2 	orrcs	r0, r0, r2, lsr #1
 c1036b8:	e1530121 	cmp	r3, r1, lsr #2
 c1036bc:	20433121 	subcs	r3, r3, r1, lsr #2
 c1036c0:	21800122 	orrcs	r0, r0, r2, lsr #2
 c1036c4:	e15301a1 	cmp	r3, r1, lsr #3
 c1036c8:	204331a1 	subcs	r3, r3, r1, lsr #3
 c1036cc:	218001a2 	orrcs	r0, r0, r2, lsr #3
 c1036d0:	e3530000 	cmp	r3, #0
 c1036d4:	11b02222 	lsrsne	r2, r2, #4
 c1036d8:	11a01221 	lsrne	r1, r1, #4
 c1036dc:	1affffef 	bne	c1036a0 <.divsi3_skip_div0_test+0x64>
 c1036e0:	e35c0000 	cmp	ip, #0
 c1036e4:	42600000 	rsbmi	r0, r0, #0
 c1036e8:	e12fff1e 	bx	lr
 c1036ec:	e13c0000 	teq	ip, r0
 c1036f0:	42600000 	rsbmi	r0, r0, #0
 c1036f4:	e12fff1e 	bx	lr
 c1036f8:	33a00000 	movcc	r0, #0
 c1036fc:	01a00fcc 	asreq	r0, ip, #31
 c103700:	03800001 	orreq	r0, r0, #1
 c103704:	e12fff1e 	bx	lr
 c103708:	e3510801 	cmp	r1, #65536	; 0x10000
 c10370c:	21a01821 	lsrcs	r1, r1, #16
 c103710:	23a02010 	movcs	r2, #16
 c103714:	33a02000 	movcc	r2, #0
 c103718:	e3510c01 	cmp	r1, #256	; 0x100
 c10371c:	21a01421 	lsrcs	r1, r1, #8
 c103720:	22822008 	addcs	r2, r2, #8
 c103724:	e3510010 	cmp	r1, #16
 c103728:	21a01221 	lsrcs	r1, r1, #4
 c10372c:	22822004 	addcs	r2, r2, #4
 c103730:	e3510004 	cmp	r1, #4
 c103734:	82822003 	addhi	r2, r2, #3
 c103738:	908220a1 	addls	r2, r2, r1, lsr #1
 c10373c:	e35c0000 	cmp	ip, #0
 c103740:	e1a00233 	lsr	r0, r3, r2
 c103744:	42600000 	rsbmi	r0, r0, #0
 c103748:	e12fff1e 	bx	lr
 c10374c:	e3500000 	cmp	r0, #0
 c103750:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
 c103754:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
 c103758:	ea000007 	b	c10377c <__aeabi_idiv0>

0c10375c <__aeabi_idivmod>:
 c10375c:	e3510000 	cmp	r1, #0
 c103760:	0afffff9 	beq	c10374c <.divsi3_skip_div0_test+0x110>
 c103764:	e92d4003 	push	{r0, r1, lr}
 c103768:	ebffffb3 	bl	c10363c <.divsi3_skip_div0_test>
 c10376c:	e8bd4006 	pop	{r1, r2, lr}
 c103770:	e0030092 	mul	r3, r2, r0
 c103774:	e0411003 	sub	r1, r1, r3
 c103778:	e12fff1e 	bx	lr

0c10377c <__aeabi_idiv0>:
 c10377c:	e12fff1e 	bx	lr

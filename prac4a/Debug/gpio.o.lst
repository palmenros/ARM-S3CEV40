   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"gpio.c"
  21              	.Ltext0:
  22              		.file 1 "../gpio.c"
 1698              		.align	2
 1699              		.global	portB_conf
 1701              	portB_conf:
 1702              	.LFB0:
   1:../gpio.c     **** #include "44b.h"
   2:../gpio.c     **** #include "gpio.h"
   3:../gpio.c     **** 
   4:../gpio.c     **** /* Port B interface implementation */
   5:../gpio.c     **** 
   6:../gpio.c     **** int portB_conf(int pin, enum port_mode mode)
   7:../gpio.c     **** {
 1703              		.loc 1 7 0
 1704              		.cfi_startproc
 1705              		@ Function supports interworking.
 1706              		@ args = 0, pretend = 0, frame = 16
 1707              		@ frame_needed = 1, uses_anonymous_args = 0
 1708 0000 0DC0A0E1 		mov	ip, sp
 1709              	.LCFI0:
 1710              		.cfi_def_cfa_register 12
 1711 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1712 0008 04B04CE2 		sub	fp, ip, #4
 1713              		.cfi_offset 14, -8
 1714              		.cfi_offset 13, -12
 1715              		.cfi_offset 11, -16
 1716              	.LCFI1:
 1717              		.cfi_def_cfa 11, 4
 1718 000c 10D04DE2 		sub	sp, sp, #16
 1719 0010 18000BE5 		str	r0, [fp, #-24]
 1720 0014 0130A0E1 		mov	r3, r1
 1721 0018 19304BE5 		strb	r3, [fp, #-25]
   8:../gpio.c     **** 	int ret = 0;
 1722              		.loc 1 8 0
 1723 001c 0030A0E3 		mov	r3, #0
 1724 0020 10300BE5 		str	r3, [fp, #-16]
   9:../gpio.c     **** 	if (pin < 0 || pin > 10)
 1725              		.loc 1 9 0
 1726 0024 18301BE5 		ldr	r3, [fp, #-24]
 1727 0028 000053E3 		cmp	r3, #0
 1728 002c 020000BA 		blt	.L2
 1729              		.loc 1 9 0 is_stmt 0 discriminator 1
 1730 0030 18301BE5 		ldr	r3, [fp, #-24]
 1731 0034 0A0053E3 		cmp	r3, #10
 1732 0038 010000DA 		ble	.L3
 1733              	.L2:
  10:../gpio.c     **** 		return -1; // indica error
 1734              		.loc 1 10 0 is_stmt 1
 1735 003c 0030E0E3 		mvn	r3, #0
 1736 0040 1B0000EA 		b	.L4
 1737              	.L3:
  11:../gpio.c     **** 
  12:../gpio.c     **** 	if (mode == SIGOUT)
 1738              		.loc 1 12 0
 1739 0044 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 1740 0048 020053E3 		cmp	r3, #2
 1741 004c 0800001A 		bne	.L5
  13:../gpio.c     **** 		// COMPLETAR: poner en rPCONB el bit indicado por pin a 1 para que por
  14:../gpio.c     **** 		// dicho pin en el puerto B salga la se√±al correspondiente del
  15:../gpio.c     **** 		// controlador de memoria
  16:../gpio.c     **** 		rPCONB |= 1 << pin;
 1742              		.loc 1 16 0
 1743 0050 6C309FE5 		ldr	r3, .L8
 1744 0054 68209FE5 		ldr	r2, .L8
 1745 0058 001092E5 		ldr	r1, [r2, #0]
 1746 005c 0100A0E3 		mov	r0, #1
 1747 0060 18201BE5 		ldr	r2, [fp, #-24]
 1748 0064 1022A0E1 		mov	r2, r0, asl r2
 1749 0068 022081E1 		orr	r2, r1, r2
 1750 006c 002083E5 		str	r2, [r3, #0]
 1751 0070 0E0000EA 		b	.L6
 1752              	.L5:
  17:../gpio.c     **** 	else if (mode == OUTPUT)
 1753              		.loc 1 17 0
 1754 0074 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 1755 0078 010053E3 		cmp	r3, #1
 1756 007c 0900001A 		bne	.L7
  18:../gpio.c     **** 		// COMPLETAR: poner en rPCONB el bit indicado por pin a 0 para que dicho
  19:../gpio.c     **** 		// pin sea un pin de salida
  20:../gpio.c     **** 		rPCONB &= ~(1 << pin);
 1757              		.loc 1 20 0
 1758 0080 3C309FE5 		ldr	r3, .L8
 1759 0084 38209FE5 		ldr	r2, .L8
 1760 0088 001092E5 		ldr	r1, [r2, #0]
 1761 008c 0100A0E3 		mov	r0, #1
 1762 0090 18201BE5 		ldr	r2, [fp, #-24]
 1763 0094 1022A0E1 		mov	r2, r0, asl r2
 1764 0098 0220E0E1 		mvn	r2, r2
 1765 009c 022001E0 		and	r2, r1, r2
 1766 00a0 002083E5 		str	r2, [r3, #0]
 1767 00a4 010000EA 		b	.L6
 1768              	.L7:
  21:../gpio.c     **** 	else
  22:../gpio.c     **** 		ret = -1; // indica error
 1769              		.loc 1 22 0
 1770 00a8 0030E0E3 		mvn	r3, #0
 1771 00ac 10300BE5 		str	r3, [fp, #-16]
 1772              	.L6:
  23:../gpio.c     **** 
  24:../gpio.c     **** 	return ret;
 1773              		.loc 1 24 0
 1774 00b0 10301BE5 		ldr	r3, [fp, #-16]
 1775              	.L4:
  25:../gpio.c     **** }
 1776              		.loc 1 25 0
 1777 00b4 0300A0E1 		mov	r0, r3
 1778 00b8 0CD04BE2 		sub	sp, fp, #12
 1779 00bc 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1780 00c0 1EFF2FE1 		bx	lr
 1781              	.L9:
 1782              		.align	2
 1783              	.L8:
 1784 00c4 0800D201 		.word	30539784
 1785              		.cfi_endproc
 1786              	.LFE0:
 1788              		.align	2
 1789              		.global	portB_write
 1791              	portB_write:
 1792              	.LFB1:
  26:../gpio.c     **** 
  27:../gpio.c     **** int portB_write(int pin, enum digital val)
  28:../gpio.c     **** {
 1793              		.loc 1 28 0
 1794              		.cfi_startproc
 1795              		@ Function supports interworking.
 1796              		@ args = 0, pretend = 0, frame = 8
 1797              		@ frame_needed = 1, uses_anonymous_args = 0
 1798 00c8 0DC0A0E1 		mov	ip, sp
 1799              	.LCFI2:
 1800              		.cfi_def_cfa_register 12
 1801 00cc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1802 00d0 04B04CE2 		sub	fp, ip, #4
 1803              		.cfi_offset 14, -8
 1804              		.cfi_offset 13, -12
 1805              		.cfi_offset 11, -16
 1806              	.LCFI3:
 1807              		.cfi_def_cfa 11, 4
 1808 00d4 08D04DE2 		sub	sp, sp, #8
 1809 00d8 10000BE5 		str	r0, [fp, #-16]
 1810 00dc 0130A0E1 		mov	r3, r1
 1811 00e0 11304BE5 		strb	r3, [fp, #-17]
  29:../gpio.c     **** 	if (pin < 0 || pin > 10)
 1812              		.loc 1 29 0
 1813 00e4 10301BE5 		ldr	r3, [fp, #-16]
 1814 00e8 000053E3 		cmp	r3, #0
 1815 00ec 020000BA 		blt	.L11
 1816              		.loc 1 29 0 is_stmt 0 discriminator 1
 1817 00f0 10301BE5 		ldr	r3, [fp, #-16]
 1818 00f4 0A0053E3 		cmp	r3, #10
 1819 00f8 010000DA 		ble	.L12
 1820              	.L11:
  30:../gpio.c     **** 		return -1; // indica error
 1821              		.loc 1 30 0 is_stmt 1
 1822 00fc 0030E0E3 		mvn	r3, #0
 1823 0100 1A0000EA 		b	.L13
 1824              	.L12:
  31:../gpio.c     **** 
  32:../gpio.c     **** 	if (val < 0 || val > 1)
 1825              		.loc 1 32 0
 1826 0104 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 1827 0108 010053E3 		cmp	r3, #1
 1828 010c 0100009A 		bls	.L14
  33:../gpio.c     **** 		return -1; // indica error
 1829              		.loc 1 33 0
 1830 0110 0030E0E3 		mvn	r3, #0
 1831 0114 150000EA 		b	.L13
 1832              	.L14:
  34:../gpio.c     **** 
  35:../gpio.c     **** 	if (val)
 1833              		.loc 1 35 0
 1834 0118 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 1835 011c 000053E3 		cmp	r3, #0
 1836 0120 0800000A 		beq	.L15
  36:../gpio.c     **** 		// COMPLETAR: poner en rPDATB el bit indicado por pin a 1
  37:../gpio.c     **** 		rPDATB |= 1 << pin;
 1837              		.loc 1 37 0
 1838 0124 54309FE5 		ldr	r3, .L17
 1839 0128 50209FE5 		ldr	r2, .L17
 1840 012c 001092E5 		ldr	r1, [r2, #0]
 1841 0130 0100A0E3 		mov	r0, #1
 1842 0134 10201BE5 		ldr	r2, [fp, #-16]
 1843 0138 1022A0E1 		mov	r2, r0, asl r2
 1844 013c 022081E1 		orr	r2, r1, r2
 1845 0140 002083E5 		str	r2, [r3, #0]
 1846 0144 080000EA 		b	.L16
 1847              	.L15:
  38:../gpio.c     **** 	else
  39:../gpio.c     **** 		// COMPLETAR: poner en rPDATB el bit indicado por pin a 0
  40:../gpio.c     **** 		rPDATB &= ~(1 << pin);
 1848              		.loc 1 40 0
 1849 0148 30309FE5 		ldr	r3, .L17
 1850 014c 2C209FE5 		ldr	r2, .L17
 1851 0150 001092E5 		ldr	r1, [r2, #0]
 1852 0154 0100A0E3 		mov	r0, #1
 1853 0158 10201BE5 		ldr	r2, [fp, #-16]
 1854 015c 1022A0E1 		mov	r2, r0, asl r2
 1855 0160 0220E0E1 		mvn	r2, r2
 1856 0164 022001E0 		and	r2, r1, r2
 1857 0168 002083E5 		str	r2, [r3, #0]
 1858              	.L16:
  41:../gpio.c     **** 
  42:../gpio.c     **** 	return 0;
 1859              		.loc 1 42 0
 1860 016c 0030A0E3 		mov	r3, #0
 1861              	.L13:
  43:../gpio.c     **** }
 1862              		.loc 1 43 0
 1863 0170 0300A0E1 		mov	r0, r3
 1864 0174 0CD04BE2 		sub	sp, fp, #12
 1865 0178 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1866 017c 1EFF2FE1 		bx	lr
 1867              	.L18:
 1868              		.align	2
 1869              	.L17:
 1870 0180 0C00D201 		.word	30539788
 1871              		.cfi_endproc
 1872              	.LFE1:
 1874              		.align	2
 1875              		.global	portG_conf
 1877              	portG_conf:
 1878              	.LFB2:
  44:../gpio.c     **** 
  45:../gpio.c     **** /* Port G interface implementation */
  46:../gpio.c     **** 
  47:../gpio.c     **** int portG_conf(int pin, enum port_mode mode)
  48:../gpio.c     **** {
 1879              		.loc 1 48 0
 1880              		.cfi_startproc
 1881              		@ Function supports interworking.
 1882              		@ args = 0, pretend = 0, frame = 16
 1883              		@ frame_needed = 1, uses_anonymous_args = 0
 1884 0184 0DC0A0E1 		mov	ip, sp
 1885              	.LCFI4:
 1886              		.cfi_def_cfa_register 12
 1887 0188 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1888 018c 04B04CE2 		sub	fp, ip, #4
 1889              		.cfi_offset 14, -8
 1890              		.cfi_offset 13, -12
 1891              		.cfi_offset 11, -16
 1892              	.LCFI5:
 1893              		.cfi_def_cfa 11, 4
 1894 0190 10D04DE2 		sub	sp, sp, #16
 1895 0194 18000BE5 		str	r0, [fp, #-24]
 1896 0198 0130A0E1 		mov	r3, r1
 1897 019c 19304BE5 		strb	r3, [fp, #-25]
  49:../gpio.c     **** 	int pos  = pin*2;
 1898              		.loc 1 49 0
 1899 01a0 18301BE5 		ldr	r3, [fp, #-24]
 1900 01a4 8330A0E1 		mov	r3, r3, asl #1
 1901 01a8 10300BE5 		str	r3, [fp, #-16]
  50:../gpio.c     **** 
  51:../gpio.c     **** 	if (pin < 0 || pin > 7)
 1902              		.loc 1 51 0
 1903 01ac 18301BE5 		ldr	r3, [fp, #-24]
 1904 01b0 000053E3 		cmp	r3, #0
 1905 01b4 020000BA 		blt	.L20
 1906              		.loc 1 51 0 is_stmt 0 discriminator 1
 1907 01b8 18301BE5 		ldr	r3, [fp, #-24]
 1908 01bc 070053E3 		cmp	r3, #7
 1909 01c0 010000DA 		ble	.L21
 1910              	.L20:
  52:../gpio.c     **** 		return -1; // indica error
 1911              		.loc 1 52 0 is_stmt 1
 1912 01c4 0030E0E3 		mvn	r3, #0
 1913 01c8 560000EA 		b	.L22
 1914              	.L21:
  53:../gpio.c     **** 
  54:../gpio.c     **** 	switch (mode) {
 1915              		.loc 1 54 0
 1916 01cc 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 1917 01d0 030053E3 		cmp	r3, #3
 1918 01d4 03F19F97 		ldrls	pc, [pc, r3, asl #2]
 1919 01d8 4F0000EA 		b	.L23
 1920              	.L28:
 1921 01dc EC010000 		.word	.L24
 1922 01e0 3C020000 		.word	.L25
 1923 01e4 88020000 		.word	.L26
 1924 01e8 D4020000 		.word	.L27
 1925              	.L24:
  55:../gpio.c     **** 		case INPUT:
  56:../gpio.c     **** 			// COMPLETAR: poner en rPCONG 00 a partir de la posici√≥n pos para
  57:../gpio.c     **** 			// configurar como pin de entrada el pin indicado por el par√°metro pin
  58:../gpio.c     **** 			rPCONG &= ~(1 << pos);  	 // 0
 1926              		.loc 1 58 0
 1927 01ec 44319FE5 		ldr	r3, .L30
 1928 01f0 40219FE5 		ldr	r2, .L30
 1929 01f4 001092E5 		ldr	r1, [r2, #0]
 1930 01f8 0100A0E3 		mov	r0, #1
 1931 01fc 10201BE5 		ldr	r2, [fp, #-16]
 1932 0200 1022A0E1 		mov	r2, r0, asl r2
 1933 0204 0220E0E1 		mvn	r2, r2
 1934 0208 022001E0 		and	r2, r1, r2
 1935 020c 002083E5 		str	r2, [r3, #0]
  59:../gpio.c     **** 			rPCONG &= ~(1 << (pos + 1)); // 0
 1936              		.loc 1 59 0
 1937 0210 20319FE5 		ldr	r3, .L30
 1938 0214 1C219FE5 		ldr	r2, .L30
 1939 0218 001092E5 		ldr	r1, [r2, #0]
 1940 021c 10201BE5 		ldr	r2, [fp, #-16]
 1941 0220 012082E2 		add	r2, r2, #1
 1942 0224 0100A0E3 		mov	r0, #1
 1943 0228 1022A0E1 		mov	r2, r0, asl r2
 1944 022c 0220E0E1 		mvn	r2, r2
 1945 0230 022001E0 		and	r2, r1, r2
 1946 0234 002083E5 		str	r2, [r3, #0]
  60:../gpio.c     **** 			break;
 1947              		.loc 1 60 0
 1948 0238 390000EA 		b	.L29
 1949              	.L25:
  61:../gpio.c     **** 		case OUTPUT:
  62:../gpio.c     **** 			// COMPLETAR: poner en rPCONG 01 a partir de la posici√≥n pos para
  63:../gpio.c     **** 			// configurar como pin de salida el pin indicado por el par√°metro pin
  64:../gpio.c     **** 			rPCONG |= 1 << pos;			 // 1
 1950              		.loc 1 64 0
 1951 023c F4309FE5 		ldr	r3, .L30
 1952 0240 F0209FE5 		ldr	r2, .L30
 1953 0244 001092E5 		ldr	r1, [r2, #0]
 1954 0248 0100A0E3 		mov	r0, #1
 1955 024c 10201BE5 		ldr	r2, [fp, #-16]
 1956 0250 1022A0E1 		mov	r2, r0, asl r2
 1957 0254 022081E1 		orr	r2, r1, r2
 1958 0258 002083E5 		str	r2, [r3, #0]
  65:../gpio.c     **** 			rPCONG &= ~(1 << (pos + 1)); // 0
 1959              		.loc 1 65 0
 1960 025c D4309FE5 		ldr	r3, .L30
 1961 0260 D0209FE5 		ldr	r2, .L30
 1962 0264 001092E5 		ldr	r1, [r2, #0]
 1963 0268 10201BE5 		ldr	r2, [fp, #-16]
 1964 026c 012082E2 		add	r2, r2, #1
 1965 0270 0100A0E3 		mov	r0, #1
 1966 0274 1022A0E1 		mov	r2, r0, asl r2
 1967 0278 0220E0E1 		mvn	r2, r2
 1968 027c 022001E0 		and	r2, r1, r2
 1969 0280 002083E5 		str	r2, [r3, #0]
  66:../gpio.c     **** 			break;
 1970              		.loc 1 66 0
 1971 0284 260000EA 		b	.L29
 1972              	.L26:
  67:../gpio.c     **** 		case SIGOUT:
  68:../gpio.c     **** 			// COMPLETAR: poner en rPCONG 10 a partir de la posici√≥n pos para
  69:../gpio.c     **** 			// que salga la se√±al interna correspondiente por el pin indicado
  70:../gpio.c     **** 			// por el par√°metro pin
  71:../gpio.c     **** 			rPCONG &= ~(1 << pos); 		// 0
 1973              		.loc 1 71 0
 1974 0288 A8309FE5 		ldr	r3, .L30
 1975 028c A4209FE5 		ldr	r2, .L30
 1976 0290 001092E5 		ldr	r1, [r2, #0]
 1977 0294 0100A0E3 		mov	r0, #1
 1978 0298 10201BE5 		ldr	r2, [fp, #-16]
 1979 029c 1022A0E1 		mov	r2, r0, asl r2
 1980 02a0 0220E0E1 		mvn	r2, r2
 1981 02a4 022001E0 		and	r2, r1, r2
 1982 02a8 002083E5 		str	r2, [r3, #0]
  72:../gpio.c     **** 			rPCONG |= 1 << (pos + 1);	// 1
 1983              		.loc 1 72 0
 1984 02ac 84309FE5 		ldr	r3, .L30
 1985 02b0 80209FE5 		ldr	r2, .L30
 1986 02b4 001092E5 		ldr	r1, [r2, #0]
 1987 02b8 10201BE5 		ldr	r2, [fp, #-16]
 1988 02bc 012082E2 		add	r2, r2, #1
 1989 02c0 0100A0E3 		mov	r0, #1
 1990 02c4 1022A0E1 		mov	r2, r0, asl r2
 1991 02c8 022081E1 		orr	r2, r1, r2
 1992 02cc 002083E5 		str	r2, [r3, #0]
  73:../gpio.c     **** 			break;
 1993              		.loc 1 73 0
 1994 02d0 130000EA 		b	.L29
 1995              	.L27:
  74:../gpio.c     **** 		case EINT:
  75:../gpio.c     **** 			// COMPLETAR: poner en rPCONG 11 a partir de la posici√≥n pos para
  76:../gpio.c     **** 			// habilitar la generaci√≥n de interrupciones externas por el pin
  77:../gpio.c     **** 			// indicado por el par√°metro pin
  78:../gpio.c     **** 			rPCONG |= 1 << pos;			// 1
 1996              		.loc 1 78 0
 1997 02d4 5C309FE5 		ldr	r3, .L30
 1998 02d8 58209FE5 		ldr	r2, .L30
 1999 02dc 001092E5 		ldr	r1, [r2, #0]
 2000 02e0 0100A0E3 		mov	r0, #1
 2001 02e4 10201BE5 		ldr	r2, [fp, #-16]
 2002 02e8 1022A0E1 		mov	r2, r0, asl r2
 2003 02ec 022081E1 		orr	r2, r1, r2
 2004 02f0 002083E5 		str	r2, [r3, #0]
  79:../gpio.c     **** 			rPCONG |= 1 << (pos + 1);	// 1
 2005              		.loc 1 79 0
 2006 02f4 3C309FE5 		ldr	r3, .L30
 2007 02f8 38209FE5 		ldr	r2, .L30
 2008 02fc 001092E5 		ldr	r1, [r2, #0]
 2009 0300 10201BE5 		ldr	r2, [fp, #-16]
 2010 0304 012082E2 		add	r2, r2, #1
 2011 0308 0100A0E3 		mov	r0, #1
 2012 030c 1022A0E1 		mov	r2, r0, asl r2
 2013 0310 022081E1 		orr	r2, r1, r2
 2014 0314 002083E5 		str	r2, [r3, #0]
  80:../gpio.c     **** 			break;
 2015              		.loc 1 80 0
 2016 0318 010000EA 		b	.L29
 2017              	.L23:
  81:../gpio.c     **** 		default:
  82:../gpio.c     **** 			return -1;
 2018              		.loc 1 82 0
 2019 031c 0030E0E3 		mvn	r3, #0
 2020 0320 000000EA 		b	.L22
 2021              	.L29:
  83:../gpio.c     **** 	}
  84:../gpio.c     **** 
  85:../gpio.c     **** 	return 0;
 2022              		.loc 1 85 0
 2023 0324 0030A0E3 		mov	r3, #0
 2024              	.L22:
  86:../gpio.c     **** }
 2025              		.loc 1 86 0
 2026 0328 0300A0E1 		mov	r0, r3
 2027 032c 0CD04BE2 		sub	sp, fp, #12
 2028 0330 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2029 0334 1EFF2FE1 		bx	lr
 2030              	.L31:
 2031              		.align	2
 2032              	.L30:
 2033 0338 4000D201 		.word	30539840
 2034              		.cfi_endproc
 2035              	.LFE2:
 2037              		.align	2
 2038              		.global	portG_eint_trig
 2040              	portG_eint_trig:
 2041              	.LFB3:
  87:../gpio.c     **** 
  88:../gpio.c     **** int portG_eint_trig(int pin, enum trigger trig)
  89:../gpio.c     **** {
 2042              		.loc 1 89 0
 2043              		.cfi_startproc
 2044              		@ Function supports interworking.
 2045              		@ args = 0, pretend = 0, frame = 16
 2046              		@ frame_needed = 1, uses_anonymous_args = 0
 2047 033c 0DC0A0E1 		mov	ip, sp
 2048              	.LCFI6:
 2049              		.cfi_def_cfa_register 12
 2050 0340 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2051 0344 04B04CE2 		sub	fp, ip, #4
 2052              		.cfi_offset 14, -8
 2053              		.cfi_offset 13, -12
 2054              		.cfi_offset 11, -16
 2055              	.LCFI7:
 2056              		.cfi_def_cfa 11, 4
 2057 0348 10D04DE2 		sub	sp, sp, #16
 2058 034c 18000BE5 		str	r0, [fp, #-24]
 2059 0350 0130A0E1 		mov	r3, r1
 2060 0354 19304BE5 		strb	r3, [fp, #-25]
  90:../gpio.c     **** 	int pos = pin*4;
 2061              		.loc 1 90 0
 2062 0358 18301BE5 		ldr	r3, [fp, #-24]
 2063 035c 0331A0E1 		mov	r3, r3, asl #2
 2064 0360 10300BE5 		str	r3, [fp, #-16]
  91:../gpio.c     **** 
  92:../gpio.c     **** 	if (pin < 0 || pin > 7)
 2065              		.loc 1 92 0
 2066 0364 18301BE5 		ldr	r3, [fp, #-24]
 2067 0368 000053E3 		cmp	r3, #0
 2068 036c 020000BA 		blt	.L33
 2069              		.loc 1 92 0 is_stmt 0 discriminator 1
 2070 0370 18301BE5 		ldr	r3, [fp, #-24]
 2071 0374 070053E3 		cmp	r3, #7
 2072 0378 010000DA 		ble	.L34
 2073              	.L33:
  93:../gpio.c     **** 		return -1;
 2074              		.loc 1 93 0 is_stmt 1
 2075 037c 0030E0E3 		mvn	r3, #0
 2076 0380 9C0000EA 		b	.L35
 2077              	.L34:
  94:../gpio.c     **** 
  95:../gpio.c     **** switch (trig) {
 2078              		.loc 1 95 0
 2079 0384 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 2080 0388 040053E3 		cmp	r3, #4
 2081 038c 03F19F97 		ldrls	pc, [pc, r3, asl #2]
 2082 0390 950000EA 		b	.L36
 2083              	.L42:
 2084 0394 A8030000 		.word	.L37
 2085 0398 20040000 		.word	.L38
 2086 039c 94040000 		.word	.L39
 2087 03a0 08050000 		.word	.L40
 2088 03a4 7C050000 		.word	.L41
 2089              	.L37:
  96:../gpio.c     **** 		case LLOW:
  97:../gpio.c     **** 			// COMPLETAR: poner en rEXTINT a partir de la posici√≥n pos tres bits
  98:../gpio.c     **** 			// a 000, para configurar interrupciones externas por nivel bajo
  99:../gpio.c     **** 			rEXTINT &= ~(1 << pos);	 		// 0
 2090              		.loc 1 99 0
 2091 03a8 58329FE5 		ldr	r3, .L44
 2092 03ac 54229FE5 		ldr	r2, .L44
 2093 03b0 001092E5 		ldr	r1, [r2, #0]
 2094 03b4 0100A0E3 		mov	r0, #1
 2095 03b8 10201BE5 		ldr	r2, [fp, #-16]
 2096 03bc 1022A0E1 		mov	r2, r0, asl r2
 2097 03c0 0220E0E1 		mvn	r2, r2
 2098 03c4 022001E0 		and	r2, r1, r2
 2099 03c8 002083E5 		str	r2, [r3, #0]
 100:../gpio.c     **** 			rEXTINT &= ~(1 << (pos + 1));	// 0
 2100              		.loc 1 100 0
 2101 03cc 34329FE5 		ldr	r3, .L44
 2102 03d0 30229FE5 		ldr	r2, .L44
 2103 03d4 001092E5 		ldr	r1, [r2, #0]
 2104 03d8 10201BE5 		ldr	r2, [fp, #-16]
 2105 03dc 012082E2 		add	r2, r2, #1
 2106 03e0 0100A0E3 		mov	r0, #1
 2107 03e4 1022A0E1 		mov	r2, r0, asl r2
 2108 03e8 0220E0E1 		mvn	r2, r2
 2109 03ec 022001E0 		and	r2, r1, r2
 2110 03f0 002083E5 		str	r2, [r3, #0]
 101:../gpio.c     **** 			rEXTINT &= ~(1 << (pos + 2));	// 0
 2111              		.loc 1 101 0
 2112 03f4 0C329FE5 		ldr	r3, .L44
 2113 03f8 08229FE5 		ldr	r2, .L44
 2114 03fc 001092E5 		ldr	r1, [r2, #0]
 2115 0400 10201BE5 		ldr	r2, [fp, #-16]
 2116 0404 022082E2 		add	r2, r2, #2
 2117 0408 0100A0E3 		mov	r0, #1
 2118 040c 1022A0E1 		mov	r2, r0, asl r2
 2119 0410 0220E0E1 		mvn	r2, r2
 2120 0414 022001E0 		and	r2, r1, r2
 2121 0418 002083E5 		str	r2, [r3, #0]
 102:../gpio.c     **** 			break;
 2122              		.loc 1 102 0
 2123 041c 740000EA 		b	.L43
 2124              	.L38:
 103:../gpio.c     **** 		case LHIGH:
 104:../gpio.c     **** 			// COMPLETAR: poner en rEXTINT a partir de la posici√≥n pos tres bits
 105:../gpio.c     **** 			// a 001, para configurar interrupciones externas por nivel alto
 106:../gpio.c     **** 			rEXTINT |= 1 << pos;	 		// 1
 2125              		.loc 1 106 0
 2126 0420 E0319FE5 		ldr	r3, .L44
 2127 0424 DC219FE5 		ldr	r2, .L44
 2128 0428 001092E5 		ldr	r1, [r2, #0]
 2129 042c 0100A0E3 		mov	r0, #1
 2130 0430 10201BE5 		ldr	r2, [fp, #-16]
 2131 0434 1022A0E1 		mov	r2, r0, asl r2
 2132 0438 022081E1 		orr	r2, r1, r2
 2133 043c 002083E5 		str	r2, [r3, #0]
 107:../gpio.c     **** 			rEXTINT &= ~(1 << (pos + 1));	// 0
 2134              		.loc 1 107 0
 2135 0440 C0319FE5 		ldr	r3, .L44
 2136 0444 BC219FE5 		ldr	r2, .L44
 2137 0448 001092E5 		ldr	r1, [r2, #0]
 2138 044c 10201BE5 		ldr	r2, [fp, #-16]
 2139 0450 012082E2 		add	r2, r2, #1
 2140 0454 0100A0E3 		mov	r0, #1
 2141 0458 1022A0E1 		mov	r2, r0, asl r2
 2142 045c 0220E0E1 		mvn	r2, r2
 2143 0460 022001E0 		and	r2, r1, r2
 2144 0464 002083E5 		str	r2, [r3, #0]
 108:../gpio.c     **** 			rEXTINT &= ~(1 << (pos + 2));	// 0
 2145              		.loc 1 108 0
 2146 0468 98319FE5 		ldr	r3, .L44
 2147 046c 94219FE5 		ldr	r2, .L44
 2148 0470 001092E5 		ldr	r1, [r2, #0]
 2149 0474 10201BE5 		ldr	r2, [fp, #-16]
 2150 0478 022082E2 		add	r2, r2, #2
 2151 047c 0100A0E3 		mov	r0, #1
 2152 0480 1022A0E1 		mov	r2, r0, asl r2
 2153 0484 0220E0E1 		mvn	r2, r2
 2154 0488 022001E0 		and	r2, r1, r2
 2155 048c 002083E5 		str	r2, [r3, #0]
 109:../gpio.c     **** 			break;
 2156              		.loc 1 109 0
 2157 0490 570000EA 		b	.L43
 2158              	.L39:
 110:../gpio.c     **** 		case FALLING:
 111:../gpio.c     **** 			// COMPLETAR: poner en rEXTINT a partir de la posici√≥n pos tres bits
 112:../gpio.c     **** 			// a 010, para configurar interrupciones externas por flanco de
 113:../gpio.c     **** 			// bajada
 114:../gpio.c     **** 			rEXTINT &= ~(1 << pos);	 		// 0
 2159              		.loc 1 114 0
 2160 0494 6C319FE5 		ldr	r3, .L44
 2161 0498 68219FE5 		ldr	r2, .L44
 2162 049c 001092E5 		ldr	r1, [r2, #0]
 2163 04a0 0100A0E3 		mov	r0, #1
 2164 04a4 10201BE5 		ldr	r2, [fp, #-16]
 2165 04a8 1022A0E1 		mov	r2, r0, asl r2
 2166 04ac 0220E0E1 		mvn	r2, r2
 2167 04b0 022001E0 		and	r2, r1, r2
 2168 04b4 002083E5 		str	r2, [r3, #0]
 115:../gpio.c     **** 			rEXTINT |= 1 << (pos + 1);	 	// 1
 2169              		.loc 1 115 0
 2170 04b8 48319FE5 		ldr	r3, .L44
 2171 04bc 44219FE5 		ldr	r2, .L44
 2172 04c0 001092E5 		ldr	r1, [r2, #0]
 2173 04c4 10201BE5 		ldr	r2, [fp, #-16]
 2174 04c8 012082E2 		add	r2, r2, #1
 2175 04cc 0100A0E3 		mov	r0, #1
 2176 04d0 1022A0E1 		mov	r2, r0, asl r2
 2177 04d4 022081E1 		orr	r2, r1, r2
 2178 04d8 002083E5 		str	r2, [r3, #0]
 116:../gpio.c     **** 			rEXTINT &= ~(1 << (pos + 2));	// 0
 2179              		.loc 1 116 0
 2180 04dc 24319FE5 		ldr	r3, .L44
 2181 04e0 20219FE5 		ldr	r2, .L44
 2182 04e4 001092E5 		ldr	r1, [r2, #0]
 2183 04e8 10201BE5 		ldr	r2, [fp, #-16]
 2184 04ec 022082E2 		add	r2, r2, #2
 2185 04f0 0100A0E3 		mov	r0, #1
 2186 04f4 1022A0E1 		mov	r2, r0, asl r2
 2187 04f8 0220E0E1 		mvn	r2, r2
 2188 04fc 022001E0 		and	r2, r1, r2
 2189 0500 002083E5 		str	r2, [r3, #0]
 117:../gpio.c     **** 			break;
 2190              		.loc 1 117 0
 2191 0504 3A0000EA 		b	.L43
 2192              	.L40:
 118:../gpio.c     **** 		case RISING:
 119:../gpio.c     **** 			// COMPLETAR: poner en rEXTINT a partir de la posici√≥n pos tres bits
 120:../gpio.c     **** 			// a 100, para configurar interrupciones externas por flanco de
 121:../gpio.c     **** 			// subida
 122:../gpio.c     **** 			rEXTINT &= ~(1 << pos);	 		// 0
 2193              		.loc 1 122 0
 2194 0508 F8309FE5 		ldr	r3, .L44
 2195 050c F4209FE5 		ldr	r2, .L44
 2196 0510 001092E5 		ldr	r1, [r2, #0]
 2197 0514 0100A0E3 		mov	r0, #1
 2198 0518 10201BE5 		ldr	r2, [fp, #-16]
 2199 051c 1022A0E1 		mov	r2, r0, asl r2
 2200 0520 0220E0E1 		mvn	r2, r2
 2201 0524 022001E0 		and	r2, r1, r2
 2202 0528 002083E5 		str	r2, [r3, #0]
 123:../gpio.c     **** 			rEXTINT &= ~(1 << (pos + 1));	// 0
 2203              		.loc 1 123 0
 2204 052c D4309FE5 		ldr	r3, .L44
 2205 0530 D0209FE5 		ldr	r2, .L44
 2206 0534 001092E5 		ldr	r1, [r2, #0]
 2207 0538 10201BE5 		ldr	r2, [fp, #-16]
 2208 053c 012082E2 		add	r2, r2, #1
 2209 0540 0100A0E3 		mov	r0, #1
 2210 0544 1022A0E1 		mov	r2, r0, asl r2
 2211 0548 0220E0E1 		mvn	r2, r2
 2212 054c 022001E0 		and	r2, r1, r2
 2213 0550 002083E5 		str	r2, [r3, #0]
 124:../gpio.c     **** 			rEXTINT |= 1 << (pos + 2);	 	// 1
 2214              		.loc 1 124 0
 2215 0554 AC309FE5 		ldr	r3, .L44
 2216 0558 A8209FE5 		ldr	r2, .L44
 2217 055c 001092E5 		ldr	r1, [r2, #0]
 2218 0560 10201BE5 		ldr	r2, [fp, #-16]
 2219 0564 022082E2 		add	r2, r2, #2
 2220 0568 0100A0E3 		mov	r0, #1
 2221 056c 1022A0E1 		mov	r2, r0, asl r2
 2222 0570 022081E1 		orr	r2, r1, r2
 2223 0574 002083E5 		str	r2, [r3, #0]
 125:../gpio.c     **** 			break;
 2224              		.loc 1 125 0
 2225 0578 1D0000EA 		b	.L43
 2226              	.L41:
 126:../gpio.c     **** 		case EDGE:
 127:../gpio.c     **** 			// COMPLETAR: poner en rEXTINT a partir de la posici√≥n pos tres bits
 128:../gpio.c     **** 			// a 110, para configurar interrupciones externas por cualquier
 129:../gpio.c     **** 			// flanco
 130:../gpio.c     **** 			rEXTINT &= ~(1 << pos);	 		// 0
 2227              		.loc 1 130 0
 2228 057c 84309FE5 		ldr	r3, .L44
 2229 0580 80209FE5 		ldr	r2, .L44
 2230 0584 001092E5 		ldr	r1, [r2, #0]
 2231 0588 0100A0E3 		mov	r0, #1
 2232 058c 10201BE5 		ldr	r2, [fp, #-16]
 2233 0590 1022A0E1 		mov	r2, r0, asl r2
 2234 0594 0220E0E1 		mvn	r2, r2
 2235 0598 022001E0 		and	r2, r1, r2
 2236 059c 002083E5 		str	r2, [r3, #0]
 131:../gpio.c     **** 			rEXTINT |= 1 << (pos + 1);	 	// 1
 2237              		.loc 1 131 0
 2238 05a0 60309FE5 		ldr	r3, .L44
 2239 05a4 5C209FE5 		ldr	r2, .L44
 2240 05a8 001092E5 		ldr	r1, [r2, #0]
 2241 05ac 10201BE5 		ldr	r2, [fp, #-16]
 2242 05b0 012082E2 		add	r2, r2, #1
 2243 05b4 0100A0E3 		mov	r0, #1
 2244 05b8 1022A0E1 		mov	r2, r0, asl r2
 2245 05bc 022081E1 		orr	r2, r1, r2
 2246 05c0 002083E5 		str	r2, [r3, #0]
 132:../gpio.c     **** 			rEXTINT |= 1 << (pos + 2);	 	// 1
 2247              		.loc 1 132 0
 2248 05c4 3C309FE5 		ldr	r3, .L44
 2249 05c8 38209FE5 		ldr	r2, .L44
 2250 05cc 001092E5 		ldr	r1, [r2, #0]
 2251 05d0 10201BE5 		ldr	r2, [fp, #-16]
 2252 05d4 022082E2 		add	r2, r2, #2
 2253 05d8 0100A0E3 		mov	r0, #1
 2254 05dc 1022A0E1 		mov	r2, r0, asl r2
 2255 05e0 022081E1 		orr	r2, r1, r2
 2256 05e4 002083E5 		str	r2, [r3, #0]
 133:../gpio.c     **** 			break;
 2257              		.loc 1 133 0
 2258 05e8 010000EA 		b	.L43
 2259              	.L36:
 134:../gpio.c     **** 		default:
 135:../gpio.c     **** 			return -1;
 2260              		.loc 1 135 0
 2261 05ec 0030E0E3 		mvn	r3, #0
 2262 05f0 000000EA 		b	.L35
 2263              	.L43:
 136:../gpio.c     **** 	}
 137:../gpio.c     **** 	return 0;
 2264              		.loc 1 137 0
 2265 05f4 0030A0E3 		mov	r3, #0
 2266              	.L35:
 138:../gpio.c     **** }
 2267              		.loc 1 138 0
 2268 05f8 0300A0E1 		mov	r0, r3
 2269 05fc 0CD04BE2 		sub	sp, fp, #12
 2270 0600 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2271 0604 1EFF2FE1 		bx	lr
 2272              	.L45:
 2273              		.align	2
 2274              	.L44:
 2275 0608 5000D201 		.word	30539856
 2276              		.cfi_endproc
 2277              	.LFE3:
 2279              		.align	2
 2280              		.global	portG_write
 2282              	portG_write:
 2283              	.LFB4:
 139:../gpio.c     **** 
 140:../gpio.c     **** int portG_write(int pin, enum digital val)
 141:../gpio.c     **** {
 2284              		.loc 1 141 0
 2285              		.cfi_startproc
 2286              		@ Function supports interworking.
 2287              		@ args = 0, pretend = 0, frame = 16
 2288              		@ frame_needed = 1, uses_anonymous_args = 0
 2289 060c 0DC0A0E1 		mov	ip, sp
 2290              	.LCFI8:
 2291              		.cfi_def_cfa_register 12
 2292 0610 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2293 0614 04B04CE2 		sub	fp, ip, #4
 2294              		.cfi_offset 14, -8
 2295              		.cfi_offset 13, -12
 2296              		.cfi_offset 11, -16
 2297              	.LCFI9:
 2298              		.cfi_def_cfa 11, 4
 2299 0618 10D04DE2 		sub	sp, sp, #16
 2300 061c 18000BE5 		str	r0, [fp, #-24]
 2301 0620 0130A0E1 		mov	r3, r1
 2302 0624 19304BE5 		strb	r3, [fp, #-25]
 142:../gpio.c     **** 	int pos = pin*2;
 2303              		.loc 1 142 0
 2304 0628 18301BE5 		ldr	r3, [fp, #-24]
 2305 062c 8330A0E1 		mov	r3, r3, asl #1
 2306 0630 10300BE5 		str	r3, [fp, #-16]
 143:../gpio.c     **** 
 144:../gpio.c     **** 		if (pin < 0 || pin > 7)
 2307              		.loc 1 144 0
 2308 0634 18301BE5 		ldr	r3, [fp, #-24]
 2309 0638 000053E3 		cmp	r3, #0
 2310 063c 020000BA 		blt	.L47
 2311              		.loc 1 144 0 is_stmt 0 discriminator 1
 2312 0640 18301BE5 		ldr	r3, [fp, #-24]
 2313 0644 070053E3 		cmp	r3, #7
 2314 0648 010000DA 		ble	.L48
 2315              	.L47:
 145:../gpio.c     **** 			return -1; // indica error
 2316              		.loc 1 145 0 is_stmt 1
 2317 064c 0030E0E3 		mvn	r3, #0
 2318 0650 270000EA 		b	.L49
 2319              	.L48:
 146:../gpio.c     **** 
 147:../gpio.c     **** 		if (val < 0 || val > 1)
 2320              		.loc 1 147 0
 2321 0654 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 2322 0658 010053E3 		cmp	r3, #1
 2323 065c 0100009A 		bls	.L50
 148:../gpio.c     **** 			return -1; // indica error
 2324              		.loc 1 148 0
 2325 0660 0030E0E3 		mvn	r3, #0
 2326 0664 220000EA 		b	.L49
 2327              	.L50:
 149:../gpio.c     **** 
 150:../gpio.c     **** 		if ((rPCONG & (0x3 << pos)) != (0x1 << pos))
 2328              		.loc 1 150 0
 2329 0668 94309FE5 		ldr	r3, .L54
 2330 066c 002093E5 		ldr	r2, [r3, #0]
 2331 0670 0310A0E3 		mov	r1, #3
 2332 0674 10301BE5 		ldr	r3, [fp, #-16]
 2333 0678 1133A0E1 		mov	r3, r1, asl r3
 2334 067c 032002E0 		and	r2, r2, r3
 2335 0680 0110A0E3 		mov	r1, #1
 2336 0684 10301BE5 		ldr	r3, [fp, #-16]
 2337 0688 1133A0E1 		mov	r3, r1, asl r3
 2338 068c 030052E1 		cmp	r2, r3
 2339 0690 0100000A 		beq	.L51
 151:../gpio.c     **** 			return -1; // indica error
 2340              		.loc 1 151 0
 2341 0694 0030E0E3 		mvn	r3, #0
 2342 0698 150000EA 		b	.L49
 2343              	.L51:
 152:../gpio.c     **** 
 153:../gpio.c     **** 		if (val)
 2344              		.loc 1 153 0
 2345 069c 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 2346 06a0 000053E3 		cmp	r3, #0
 2347 06a4 0800000A 		beq	.L52
 154:../gpio.c     **** 			// COMPLETAR: poner en rPDATG el bit indicado por pin a 1
 155:../gpio.c     **** 			rPDATG |= 1 << pin;
 2348              		.loc 1 155 0
 2349 06a8 58309FE5 		ldr	r3, .L54+4
 2350 06ac 54209FE5 		ldr	r2, .L54+4
 2351 06b0 001092E5 		ldr	r1, [r2, #0]
 2352 06b4 0100A0E3 		mov	r0, #1
 2353 06b8 18201BE5 		ldr	r2, [fp, #-24]
 2354 06bc 1022A0E1 		mov	r2, r0, asl r2
 2355 06c0 022081E1 		orr	r2, r1, r2
 2356 06c4 002083E5 		str	r2, [r3, #0]
 2357 06c8 080000EA 		b	.L53
 2358              	.L52:
 156:../gpio.c     **** 		else
 157:../gpio.c     **** 			// COMPLETAR: poner en rPDATG el bit indicado por pin a 0
 158:../gpio.c     **** 			rPDATG &= ~(1 << pin);
 2359              		.loc 1 158 0
 2360 06cc 34309FE5 		ldr	r3, .L54+4
 2361 06d0 30209FE5 		ldr	r2, .L54+4
 2362 06d4 001092E5 		ldr	r1, [r2, #0]
 2363 06d8 0100A0E3 		mov	r0, #1
 2364 06dc 18201BE5 		ldr	r2, [fp, #-24]
 2365 06e0 1022A0E1 		mov	r2, r0, asl r2
 2366 06e4 0220E0E1 		mvn	r2, r2
 2367 06e8 022001E0 		and	r2, r1, r2
 2368 06ec 002083E5 		str	r2, [r3, #0]
 2369              	.L53:
 159:../gpio.c     **** 
 160:../gpio.c     **** 		return 0;
 2370              		.loc 1 160 0
 2371 06f0 0030A0E3 		mov	r3, #0
 2372              	.L49:
 161:../gpio.c     **** }
 2373              		.loc 1 161 0
 2374 06f4 0300A0E1 		mov	r0, r3
 2375 06f8 0CD04BE2 		sub	sp, fp, #12
 2376 06fc 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2377 0700 1EFF2FE1 		bx	lr
 2378              	.L55:
 2379              		.align	2
 2380              	.L54:
 2381 0704 4000D201 		.word	30539840
 2382 0708 4400D201 		.word	30539844
 2383              		.cfi_endproc
 2384              	.LFE4:
 2386              		.align	2
 2387              		.global	portG_read
 2389              	portG_read:
 2390              	.LFB5:
 162:../gpio.c     **** 
 163:../gpio.c     **** int portG_read(int pin, enum digital* val)
 164:../gpio.c     **** {
 2391              		.loc 1 164 0
 2392              		.cfi_startproc
 2393              		@ Function supports interworking.
 2394              		@ args = 0, pretend = 0, frame = 16
 2395              		@ frame_needed = 1, uses_anonymous_args = 0
 2396 070c 0DC0A0E1 		mov	ip, sp
 2397              	.LCFI10:
 2398              		.cfi_def_cfa_register 12
 2399 0710 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2400 0714 04B04CE2 		sub	fp, ip, #4
 2401              		.cfi_offset 14, -8
 2402              		.cfi_offset 13, -12
 2403              		.cfi_offset 11, -16
 2404              	.LCFI11:
 2405              		.cfi_def_cfa 11, 4
 2406 0718 10D04DE2 		sub	sp, sp, #16
 2407 071c 18000BE5 		str	r0, [fp, #-24]
 2408 0720 1C100BE5 		str	r1, [fp, #-28]
 165:../gpio.c     **** 	int pos = pin*2;
 2409              		.loc 1 165 0
 2410 0724 18301BE5 		ldr	r3, [fp, #-24]
 2411 0728 8330A0E1 		mov	r3, r3, asl #1
 2412 072c 10300BE5 		str	r3, [fp, #-16]
 166:../gpio.c     **** 
 167:../gpio.c     **** 	if (pin < 0 || pin > 7)
 2413              		.loc 1 167 0
 2414 0730 18301BE5 		ldr	r3, [fp, #-24]
 2415 0734 000053E3 		cmp	r3, #0
 2416 0738 020000BA 		blt	.L57
 2417              		.loc 1 167 0 is_stmt 0 discriminator 1
 2418 073c 18301BE5 		ldr	r3, [fp, #-24]
 2419 0740 070053E3 		cmp	r3, #7
 2420 0744 010000DA 		ble	.L58
 2421              	.L57:
 168:../gpio.c     **** 		return -1; // indica error
 2422              		.loc 1 168 0 is_stmt 1
 2423 0748 0030E0E3 		mvn	r3, #0
 2424 074c 190000EA 		b	.L59
 2425              	.L58:
 169:../gpio.c     **** 
 170:../gpio.c     **** 	if (rPCONG & (0x3 << pos))
 2426              		.loc 1 170 0
 2427 0750 70309FE5 		ldr	r3, .L63
 2428 0754 002093E5 		ldr	r2, [r3, #0]
 2429 0758 0310A0E3 		mov	r1, #3
 2430 075c 10301BE5 		ldr	r3, [fp, #-16]
 2431 0760 1133A0E1 		mov	r3, r1, asl r3
 2432 0764 033002E0 		and	r3, r2, r3
 2433 0768 000053E3 		cmp	r3, #0
 2434 076c 0100000A 		beq	.L60
 171:../gpio.c     **** 		return -1; // indica error
 2435              		.loc 1 171 0
 2436 0770 0030E0E3 		mvn	r3, #0
 2437 0774 0F0000EA 		b	.L59
 2438              	.L60:
 172:../gpio.c     **** 
 173:../gpio.c     **** 	/*COMPLETAR: true si est√° a 1 en rPDATG el pin indicado por el par√°metro pin*/
 174:../gpio.c     **** 	if (rPDATG & (1 << pin))
 2439              		.loc 1 174 0
 2440 0778 4C309FE5 		ldr	r3, .L63+4
 2441 077c 002093E5 		ldr	r2, [r3, #0]
 2442 0780 0110A0E3 		mov	r1, #1
 2443 0784 18301BE5 		ldr	r3, [fp, #-24]
 2444 0788 1133A0E1 		mov	r3, r1, asl r3
 2445 078c 033002E0 		and	r3, r2, r3
 2446 0790 000053E3 		cmp	r3, #0
 2447 0794 0300000A 		beq	.L61
 175:../gpio.c     **** 		*val = HIGH;
 2448              		.loc 1 175 0
 2449 0798 1C301BE5 		ldr	r3, [fp, #-28]
 2450 079c 0120A0E3 		mov	r2, #1
 2451 07a0 0020C3E5 		strb	r2, [r3, #0]
 2452 07a4 020000EA 		b	.L62
 2453              	.L61:
 176:../gpio.c     **** 	else
 177:../gpio.c     **** 		*val = LOW;
 2454              		.loc 1 177 0
 2455 07a8 1C301BE5 		ldr	r3, [fp, #-28]
 2456 07ac 0020A0E3 		mov	r2, #0
 2457 07b0 0020C3E5 		strb	r2, [r3, #0]
 2458              	.L62:
 178:../gpio.c     **** 
 179:../gpio.c     **** 	return 0;
 2459              		.loc 1 179 0
 2460 07b4 0030A0E3 		mov	r3, #0
 2461              	.L59:
 180:../gpio.c     **** }
 2462              		.loc 1 180 0
 2463 07b8 0300A0E1 		mov	r0, r3
 2464 07bc 0CD04BE2 		sub	sp, fp, #12
 2465 07c0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2466 07c4 1EFF2FE1 		bx	lr
 2467              	.L64:
 2468              		.align	2
 2469              	.L63:
 2470 07c8 4000D201 		.word	30539840
 2471 07cc 4400D201 		.word	30539844
 2472              		.cfi_endproc
 2473              	.LFE5:
 2475              		.align	2
 2476              		.global	portG_conf_pup
 2478              	portG_conf_pup:
 2479              	.LFB6:
 181:../gpio.c     **** 
 182:../gpio.c     **** int portG_conf_pup(int pin, enum enable st)
 183:../gpio.c     **** {
 2480              		.loc 1 183 0
 2481              		.cfi_startproc
 2482              		@ Function supports interworking.
 2483              		@ args = 0, pretend = 0, frame = 8
 2484              		@ frame_needed = 1, uses_anonymous_args = 0
 2485 07d0 0DC0A0E1 		mov	ip, sp
 2486              	.LCFI12:
 2487              		.cfi_def_cfa_register 12
 2488 07d4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2489 07d8 04B04CE2 		sub	fp, ip, #4
 2490              		.cfi_offset 14, -8
 2491              		.cfi_offset 13, -12
 2492              		.cfi_offset 11, -16
 2493              	.LCFI13:
 2494              		.cfi_def_cfa 11, 4
 2495 07dc 08D04DE2 		sub	sp, sp, #8
 2496 07e0 10000BE5 		str	r0, [fp, #-16]
 2497 07e4 0130A0E1 		mov	r3, r1
 2498 07e8 11304BE5 		strb	r3, [fp, #-17]
 184:../gpio.c     **** 	if (pin < 0 || pin > 7)
 2499              		.loc 1 184 0
 2500 07ec 10301BE5 		ldr	r3, [fp, #-16]
 2501 07f0 000053E3 		cmp	r3, #0
 2502 07f4 020000BA 		blt	.L66
 2503              		.loc 1 184 0 is_stmt 0 discriminator 1
 2504 07f8 10301BE5 		ldr	r3, [fp, #-16]
 2505 07fc 070053E3 		cmp	r3, #7
 2506 0800 010000DA 		ble	.L67
 2507              	.L66:
 185:../gpio.c     **** 		return -1; // indica error
 2508              		.loc 1 185 0 is_stmt 1
 2509 0804 0030E0E3 		mvn	r3, #0
 2510 0808 1D0000EA 		b	.L68
 2511              	.L67:
 186:../gpio.c     **** 
 187:../gpio.c     **** 	if (st != ENABLE && st != DISABLE)
 2512              		.loc 1 187 0
 2513 080c 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2514 0810 010053E3 		cmp	r3, #1
 2515 0814 0400000A 		beq	.L69
 2516              		.loc 1 187 0 is_stmt 0 discriminator 1
 2517 0818 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2518 081c 000053E3 		cmp	r3, #0
 2519 0820 0100000A 		beq	.L69
 188:../gpio.c     **** 		return -1; // indica error
 2520              		.loc 1 188 0 is_stmt 1
 2521 0824 0030E0E3 		mvn	r3, #0
 2522 0828 150000EA 		b	.L68
 2523              	.L69:
 189:../gpio.c     **** 
 190:../gpio.c     **** 	if (st == ENABLE)
 2524              		.loc 1 190 0
 2525 082c 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2526 0830 010053E3 		cmp	r3, #1
 2527 0834 0900001A 		bne	.L70
 191:../gpio.c     **** 		// COMPLETAR: poner el pin de rPUPG indicado por el parametro pin al valor adecuado,
 192:../gpio.c     **** 		// para activar la resistencia de pull-up
 193:../gpio.c     **** 		rPUPG &= ~(1 << pin);
 2528              		.loc 1 193 0
 2529 0838 54309FE5 		ldr	r3, .L72
 2530 083c 50209FE5 		ldr	r2, .L72
 2531 0840 001092E5 		ldr	r1, [r2, #0]
 2532 0844 0100A0E3 		mov	r0, #1
 2533 0848 10201BE5 		ldr	r2, [fp, #-16]
 2534 084c 1022A0E1 		mov	r2, r0, asl r2
 2535 0850 0220E0E1 		mvn	r2, r2
 2536 0854 022001E0 		and	r2, r1, r2
 2537 0858 002083E5 		str	r2, [r3, #0]
 2538 085c 070000EA 		b	.L71
 2539              	.L70:
 194:../gpio.c     **** 	else
 195:../gpio.c     **** 		// COMPLETAR: poner el pin de rPUPG indicado por el parametro pin al valor adecuado,
 196:../gpio.c     **** 		// para desactivar la resistencia de pull-up
 197:../gpio.c     **** 		rPUPG |= 1 << pin;
 2540              		.loc 1 197 0
 2541 0860 2C309FE5 		ldr	r3, .L72
 2542 0864 28209FE5 		ldr	r2, .L72
 2543 0868 001092E5 		ldr	r1, [r2, #0]
 2544 086c 0100A0E3 		mov	r0, #1
 2545 0870 10201BE5 		ldr	r2, [fp, #-16]
 2546 0874 1022A0E1 		mov	r2, r0, asl r2
 2547 0878 022081E1 		orr	r2, r1, r2
 2548 087c 002083E5 		str	r2, [r3, #0]
 2549              	.L71:
 198:../gpio.c     **** 
 199:../gpio.c     **** 	return 0;
 2550              		.loc 1 199 0
 2551 0880 0030A0E3 		mov	r3, #0
 2552              	.L68:
 200:../gpio.c     **** }
 2553              		.loc 1 200 0
 2554 0884 0300A0E1 		mov	r0, r3
 2555 0888 0CD04BE2 		sub	sp, fp, #12
 2556 088c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2557 0890 1EFF2FE1 		bx	lr
 2558              	.L73:
 2559              		.align	2
 2560              	.L72:
 2561 0894 4800D201 		.word	30539848
 2562              		.cfi_endproc
 2563              	.LFE6:
 2565              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 gpio.c
C:\Users\Pedro\AppData\Local\Temp\ccohH5gq.s:1698   .text:00000000 $a
C:\Users\Pedro\AppData\Local\Temp\ccohH5gq.s:1701   .text:00000000 portB_conf
C:\Users\Pedro\AppData\Local\Temp\ccohH5gq.s:1784   .text:000000c4 $d
C:\Users\Pedro\AppData\Local\Temp\ccohH5gq.s:1788   .text:000000c8 $a
C:\Users\Pedro\AppData\Local\Temp\ccohH5gq.s:1791   .text:000000c8 portB_write
C:\Users\Pedro\AppData\Local\Temp\ccohH5gq.s:1870   .text:00000180 $d
C:\Users\Pedro\AppData\Local\Temp\ccohH5gq.s:1874   .text:00000184 $a
C:\Users\Pedro\AppData\Local\Temp\ccohH5gq.s:1877   .text:00000184 portG_conf
C:\Users\Pedro\AppData\Local\Temp\ccohH5gq.s:1921   .text:000001dc $d
C:\Users\Pedro\AppData\Local\Temp\ccohH5gq.s:1927   .text:000001ec $a
C:\Users\Pedro\AppData\Local\Temp\ccohH5gq.s:2033   .text:00000338 $d
C:\Users\Pedro\AppData\Local\Temp\ccohH5gq.s:2037   .text:0000033c $a
C:\Users\Pedro\AppData\Local\Temp\ccohH5gq.s:2040   .text:0000033c portG_eint_trig
C:\Users\Pedro\AppData\Local\Temp\ccohH5gq.s:2084   .text:00000394 $d
C:\Users\Pedro\AppData\Local\Temp\ccohH5gq.s:2091   .text:000003a8 $a
C:\Users\Pedro\AppData\Local\Temp\ccohH5gq.s:2275   .text:00000608 $d
C:\Users\Pedro\AppData\Local\Temp\ccohH5gq.s:2279   .text:0000060c $a
C:\Users\Pedro\AppData\Local\Temp\ccohH5gq.s:2282   .text:0000060c portG_write
C:\Users\Pedro\AppData\Local\Temp\ccohH5gq.s:2381   .text:00000704 $d
C:\Users\Pedro\AppData\Local\Temp\ccohH5gq.s:2386   .text:0000070c $a
C:\Users\Pedro\AppData\Local\Temp\ccohH5gq.s:2389   .text:0000070c portG_read
C:\Users\Pedro\AppData\Local\Temp\ccohH5gq.s:2470   .text:000007c8 $d
C:\Users\Pedro\AppData\Local\Temp\ccohH5gq.s:2475   .text:000007d0 $a
C:\Users\Pedro\AppData\Local\Temp\ccohH5gq.s:2478   .text:000007d0 portG_conf_pup
C:\Users\Pedro\AppData\Local\Temp\ccohH5gq.s:2561   .text:00000894 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS

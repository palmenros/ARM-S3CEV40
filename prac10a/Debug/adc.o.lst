   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"adc.c"
  21              	.Ltext0:
  22              		.file 1 "../adc.c"
 1834              	state:
 1835 0000 00       		.space	1
 1836              		.text
 1837              		.align	2
 1838              		.global	isr_ADC_dummy
 1840              	isr_ADC_dummy:
 1841              	.LFB0:
   1:../adc.c      **** #include "intcontroller.h"
   2:../adc.c      **** #include "44b.h"
   3:../adc.c      **** #include "adc.h"
   4:../adc.c      **** #include "utils.h"
   5:../adc.c      **** 
   6:../adc.c      **** static uint8 state;
   7:../adc.c      **** 
   8:../adc.c      **** void isr_ADC_dummy( void ) __attribute__ ((interrupt ("IRQ")));
   9:../adc.c      **** 
  10:../adc.c      **** void isr_ADC_dummy(void)
  11:../adc.c      **** {
 1842              		.loc 1 11 0
 1843              		.cfi_startproc
 1844              		@ Interrupt Service Routine.
 1845              		@ args = 0, pretend = 0, frame = 0
 1846              		@ frame_needed = 1, uses_anonymous_args = 0
 1847 0000 04C02DE5 		str	ip, [sp, #-4]!
 1848 0004 0DC0A0E1 		mov	ip, sp
 1849              	.LCFI0:
 1850              		.cfi_def_cfa_register 12
 1851 0008 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
 1852 000c 04B04CE2 		sub	fp, ip, #4
 1853              		.cfi_offset 14, -8
 1854              		.cfi_offset 13, -12
 1855              		.cfi_offset 11, -16
 1856              		.cfi_offset 3, -20
 1857              		.cfi_offset 2, -24
 1858              		.cfi_offset 1, -28
 1859              		.cfi_offset 0, -32
 1860              	.LCFI1:
 1861              		.cfi_def_cfa 11, 4
  12:../adc.c      **** 	ic_cleanflag(INT_ADC);
 1862              		.loc 1 12 0
 1863 0010 0000A0E3 		mov	r0, #0
 1864 0014 FEFFFFEB 		bl	ic_cleanflag
  13:../adc.c      **** }
 1865              		.loc 1 13 0
 1866 0018 1CD04BE2 		sub	sp, fp, #28
 1867 001c 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 1868 0020 04C09DE4 		ldmfd	sp!, {ip}
 1869 0024 04F05EE2 		subs	pc, lr, #4
 1870              		.cfi_endproc
 1871              	.LFE0:
 1873              		.align	2
 1874              		.global	adc_init
 1876              	adc_init:
 1877              	.LFB1:
  14:../adc.c      **** 
  15:../adc.c      **** void adc_init( void )
  16:../adc.c      **** {
 1878              		.loc 1 16 0
 1879              		.cfi_startproc
 1880              		@ Function supports interworking.
 1881              		@ args = 0, pretend = 0, frame = 0
 1882              		@ frame_needed = 1, uses_anonymous_args = 0
 1883 0028 0DC0A0E1 		mov	ip, sp
 1884              	.LCFI2:
 1885              		.cfi_def_cfa_register 12
 1886 002c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1887 0030 04B04CE2 		sub	fp, ip, #4
 1888              		.cfi_offset 14, -8
 1889              		.cfi_offset 13, -12
 1890              		.cfi_offset 11, -16
 1891              	.LCFI3:
 1892              		.cfi_def_cfa 11, 4
  17:../adc.c      **** 	//Tasa de conversión: máxima (100 KSPS, tiempo de conversión 10 us)
  18:../adc.c      **** 	//100KHz = 64 MHz / 2(n+1)×16 => n = 19
  19:../adc.c      **** 	rADCPSR = 19;
 1893              		.loc 1 19 0
 1894 0034 14309FE5 		ldr	r3, .L3
 1895 0038 1320A0E3 		mov	r2, #19
 1896 003c 002083E5 		str	r2, [r3, #0]
  20:../adc.c      ****     adc_off();
 1897              		.loc 1 20 0
 1898 0040 FEFFFFEB 		bl	adc_off
  21:../adc.c      **** }
 1899              		.loc 1 21 0
 1900 0044 0CD04BE2 		sub	sp, fp, #12
 1901 0048 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1902 004c 1EFF2FE1 		bx	lr
 1903              	.L4:
 1904              		.align	2
 1905              	.L3:
 1906 0050 0400D401 		.word	30670852
 1907              		.cfi_endproc
 1908              	.LFE1:
 1910              		.align	2
 1911              		.global	adc_on
 1913              	adc_on:
 1914              	.LFB2:
  22:../adc.c      **** 
  23:../adc.c      **** void adc_on( void )
  24:../adc.c      **** {
 1915              		.loc 1 24 0
 1916              		.cfi_startproc
 1917              		@ Function supports interworking.
 1918              		@ args = 0, pretend = 0, frame = 0
 1919              		@ frame_needed = 1, uses_anonymous_args = 0
 1920 0054 0DC0A0E1 		mov	ip, sp
 1921              	.LCFI4:
 1922              		.cfi_def_cfa_register 12
 1923 0058 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1924 005c 04B04CE2 		sub	fp, ip, #4
 1925              		.cfi_offset 14, -8
 1926              		.cfi_offset 13, -12
 1927              		.cfi_offset 11, -16
 1928              	.LCFI5:
 1929              		.cfi_def_cfa 11, 4
  25:../adc.c      **** 	//	ADCCON[5] = 0 Normal mode
  26:../adc.c      **** 	rADCCON &= ~(1 << 5);
 1930              		.loc 1 26 0
 1931 0060 7537A0E3 		mov	r3, #30670848
 1932 0064 7527A0E3 		mov	r2, #30670848
 1933 0068 002092E5 		ldr	r2, [r2, #0]
 1934 006c 2020C2E3 		bic	r2, r2, #32
 1935 0070 002083E5 		str	r2, [r3, #0]
  27:../adc.c      **** 
  28:../adc.c      **** 	//Esperar 10 ms antes de arrancar la conversión
  29:../adc.c      **** 	Delay(10);
 1936              		.loc 1 29 0
 1937 0074 0A00A0E3 		mov	r0, #10
 1938 0078 FEFFFFEB 		bl	Delay
  30:../adc.c      ****     state = ON;
 1939              		.loc 1 30 0
 1940 007c 10309FE5 		ldr	r3, .L6
 1941 0080 0120A0E3 		mov	r2, #1
 1942 0084 0020C3E5 		strb	r2, [r3, #0]
  31:../adc.c      **** }
 1943              		.loc 1 31 0
 1944 0088 0CD04BE2 		sub	sp, fp, #12
 1945 008c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1946 0090 1EFF2FE1 		bx	lr
 1947              	.L7:
 1948              		.align	2
 1949              	.L6:
 1950 0094 00000000 		.word	state
 1951              		.cfi_endproc
 1952              	.LFE2:
 1954              		.align	2
 1955              		.global	adc_off
 1957              	adc_off:
 1958              	.LFB3:
  32:../adc.c      **** 
  33:../adc.c      **** void adc_off( void )
  34:../adc.c      **** {
 1959              		.loc 1 34 0
 1960              		.cfi_startproc
 1961              		@ Function supports interworking.
 1962              		@ args = 0, pretend = 0, frame = 0
 1963              		@ frame_needed = 1, uses_anonymous_args = 0
 1964 0098 0DC0A0E1 		mov	ip, sp
 1965              	.LCFI6:
 1966              		.cfi_def_cfa_register 12
 1967 009c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1968 00a0 04B04CE2 		sub	fp, ip, #4
 1969              		.cfi_offset 14, -8
 1970              		.cfi_offset 13, -12
 1971              		.cfi_offset 11, -16
 1972              	.LCFI7:
 1973              		.cfi_def_cfa 11, 4
  35:../adc.c      **** 	//ADCCON[5] = 1  Sleep mode
  36:../adc.c      **** 	rADCCON |= 1 << 5;
 1974              		.loc 1 36 0
 1975 00a4 7537A0E3 		mov	r3, #30670848
 1976 00a8 7527A0E3 		mov	r2, #30670848
 1977 00ac 002092E5 		ldr	r2, [r2, #0]
 1978 00b0 202082E3 		orr	r2, r2, #32
 1979 00b4 002083E5 		str	r2, [r3, #0]
  37:../adc.c      **** 	state = OFF;
 1980              		.loc 1 37 0
 1981 00b8 10309FE5 		ldr	r3, .L9
 1982 00bc 0020A0E3 		mov	r2, #0
 1983 00c0 0020C3E5 		strb	r2, [r3, #0]
  38:../adc.c      **** }
 1984              		.loc 1 38 0
 1985 00c4 0CD04BE2 		sub	sp, fp, #12
 1986 00c8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1987 00cc 1EFF2FE1 		bx	lr
 1988              	.L10:
 1989              		.align	2
 1990              	.L9:
 1991 00d0 00000000 		.word	state
 1992              		.cfi_endproc
 1993              	.LFE3:
 1995              		.align	2
 1996              		.global	adc_status
 1998              	adc_status:
 1999              	.LFB4:
  39:../adc.c      **** 
  40:../adc.c      **** uint8 adc_status( void )
  41:../adc.c      **** {
 2000              		.loc 1 41 0
 2001              		.cfi_startproc
 2002              		@ Function supports interworking.
 2003              		@ args = 0, pretend = 0, frame = 0
 2004              		@ frame_needed = 1, uses_anonymous_args = 0
 2005 00d4 0DC0A0E1 		mov	ip, sp
 2006              	.LCFI8:
 2007              		.cfi_def_cfa_register 12
 2008 00d8 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2009 00dc 04B04CE2 		sub	fp, ip, #4
 2010              		.cfi_offset 14, -8
 2011              		.cfi_offset 13, -12
 2012              		.cfi_offset 11, -16
 2013              	.LCFI9:
 2014              		.cfi_def_cfa 11, 4
  42:../adc.c      ****     return state;
 2015              		.loc 1 42 0
 2016 00e0 10309FE5 		ldr	r3, .L12
 2017 00e4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  43:../adc.c      **** }
 2018              		.loc 1 43 0
 2019 00e8 0300A0E1 		mov	r0, r3
 2020 00ec 0CD04BE2 		sub	sp, fp, #12
 2021 00f0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2022 00f4 1EFF2FE1 		bx	lr
 2023              	.L13:
 2024              		.align	2
 2025              	.L12:
 2026 00f8 00000000 		.word	state
 2027              		.cfi_endproc
 2028              	.LFE4:
 2030              		.align	2
 2031              		.global	adc_getSample
 2033              	adc_getSample:
 2034              	.LFB5:
  44:../adc.c      **** 
  45:../adc.c      **** uint16 adc_getSample( enum ADC_channel_t ch )
  46:../adc.c      **** {
 2035              		.loc 1 46 0
 2036              		.cfi_startproc
 2037              		@ Function supports interworking.
 2038              		@ args = 0, pretend = 0, frame = 16
 2039              		@ frame_needed = 1, uses_anonymous_args = 0
 2040 00fc 0DC0A0E1 		mov	ip, sp
 2041              	.LCFI10:
 2042              		.cfi_def_cfa_register 12
 2043 0100 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2044 0104 04B04CE2 		sub	fp, ip, #4
 2045              		.cfi_offset 14, -8
 2046              		.cfi_offset 13, -12
 2047              		.cfi_offset 11, -16
 2048              	.LCFI11:
 2049              		.cfi_def_cfa 11, 4
 2050 0108 10D04DE2 		sub	sp, sp, #16
 2051 010c 0030A0E1 		mov	r3, r0
 2052 0110 15304BE5 		strb	r3, [fp, #-21]
  47:../adc.c      ****     uint32 sample;
  48:../adc.c      ****     uint8 i;
  49:../adc.c      **** 
  50:../adc.c      ****     //Seleccionar el canal
  51:../adc.c      ****     rADCCON &= ~(0b111 << 2);
 2053              		.loc 1 51 0
 2054 0114 7537A0E3 		mov	r3, #30670848
 2055 0118 7527A0E3 		mov	r2, #30670848
 2056 011c 002092E5 		ldr	r2, [r2, #0]
 2057 0120 1C20C2E3 		bic	r2, r2, #28
 2058 0124 002083E5 		str	r2, [r3, #0]
  52:../adc.c      ****     rADCCON |= ch << 2;
 2059              		.loc 1 52 0
 2060 0128 7537A0E3 		mov	r3, #30670848
 2061 012c 7527A0E3 		mov	r2, #30670848
 2062 0130 001092E5 		ldr	r1, [r2, #0]
 2063 0134 15205BE5 		ldrb	r2, [fp, #-21]	@ zero_extendqisi2
 2064 0138 0221A0E1 		mov	r2, r2, asl #2
 2065 013c 022081E1 		orr	r2, r1, r2
 2066 0140 002083E5 		str	r2, [r3, #0]
  53:../adc.c      **** 
  54:../adc.c      ****     Delay(10);
 2067              		.loc 1 54 0
 2068 0144 0A00A0E3 		mov	r0, #10
 2069 0148 FEFFFFEB 		bl	Delay
  55:../adc.c      **** 
  56:../adc.c      ****     // Hacer la media de 5 samples para estabilizar
  57:../adc.c      ****     for( i=0, sample=0; i<5; i++ )
 2070              		.loc 1 57 0
 2071 014c 0030A0E3 		mov	r3, #0
 2072 0150 11304BE5 		strb	r3, [fp, #-17]
 2073 0154 0030A0E3 		mov	r3, #0
 2074 0158 10300BE5 		str	r3, [fp, #-16]
 2075 015c 200000EA 		b	.L15
 2076              	.L18:
  58:../adc.c      ****     {
  59:../adc.c      ****     	//ADCCON[1] = 0 deshabilita arranque por lectura
  60:../adc.c      ****     	//ADCCON[0] = 1 arranca manualmente la conversión
  61:../adc.c      **** 
  62:../adc.c      ****     	rADCCON &= ~2;
 2077              		.loc 1 62 0
 2078 0160 7537A0E3 		mov	r3, #30670848
 2079 0164 7527A0E3 		mov	r2, #30670848
 2080 0168 002092E5 		ldr	r2, [r2, #0]
 2081 016c 0220C2E3 		bic	r2, r2, #2
 2082 0170 002083E5 		str	r2, [r3, #0]
  63:../adc.c      ****         rADCCON |= 1;
 2083              		.loc 1 63 0
 2084 0174 7537A0E3 		mov	r3, #30670848
 2085 0178 7527A0E3 		mov	r2, #30670848
 2086 017c 002092E5 		ldr	r2, [r2, #0]
 2087 0180 012082E3 		orr	r2, r2, #1
 2088 0184 002083E5 		str	r2, [r3, #0]
  64:../adc.c      **** 
  65:../adc.c      ****     	//Espera hasta que la conversion comience (mientras ADCCON[0] == 1)
  66:../adc.c      ****         while( rADCCON & 1 );
 2089              		.loc 1 66 0
 2090 0188 0000A0E1 		mov	r0, r0	@ nop
 2091              	.L16:
 2092              		.loc 1 66 0 is_stmt 0 discriminator 1
 2093 018c 7537A0E3 		mov	r3, #30670848
 2094 0190 003093E5 		ldr	r3, [r3, #0]
 2095 0194 013003E2 		and	r3, r3, #1
 2096 0198 FF3003E2 		and	r3, r3, #255
 2097 019c 000053E3 		cmp	r3, #0
 2098 01a0 F9FFFF1A 		bne	.L16
  67:../adc.c      **** 
  68:../adc.c      ****     	//Espera hasta que la conversion finalice (mientras ADCCON[6] == 0)
  69:../adc.c      ****         while( !(rADCCON & (1 << 6)) );
 2099              		.loc 1 69 0 is_stmt 1
 2100 01a4 0000A0E1 		mov	r0, r0	@ nop
 2101              	.L17:
 2102              		.loc 1 69 0 is_stmt 0 discriminator 1
 2103 01a8 7537A0E3 		mov	r3, #30670848
 2104 01ac 003093E5 		ldr	r3, [r3, #0]
 2105 01b0 403003E2 		and	r3, r3, #64
 2106 01b4 000053E3 		cmp	r3, #0
 2107 01b8 FAFFFF0A 		beq	.L17
  70:../adc.c      **** 
  71:../adc.c      ****         sample += rADCDAT & 0x3ff;
 2108              		.loc 1 71 0 is_stmt 1
 2109 01bc 54309FE5 		ldr	r3, .L19
 2110 01c0 003093E5 		ldr	r3, [r3, #0]
 2111 01c4 033BA0E1 		mov	r3, r3, asl #22
 2112 01c8 233BA0E1 		mov	r3, r3, lsr #22
 2113 01cc 10201BE5 		ldr	r2, [fp, #-16]
 2114 01d0 033082E0 		add	r3, r2, r3
 2115 01d4 10300BE5 		str	r3, [fp, #-16]
  57:../adc.c      ****     for( i=0, sample=0; i<5; i++ )
 2116              		.loc 1 57 0
 2117 01d8 11305BE5 		ldrb	r3, [fp, #-17]
 2118 01dc 013083E2 		add	r3, r3, #1
 2119 01e0 11304BE5 		strb	r3, [fp, #-17]
 2120              	.L15:
  57:../adc.c      ****     for( i=0, sample=0; i<5; i++ )
 2121              		.loc 1 57 0 is_stmt 0 discriminator 1
 2122 01e4 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2123 01e8 040053E3 		cmp	r3, #4
 2124 01ec DBFFFF9A 		bls	.L18
  72:../adc.c      ****     }
  73:../adc.c      ****     return sample / 5;
 2125              		.loc 1 73 0 is_stmt 1
 2126 01f0 10201BE5 		ldr	r2, [fp, #-16]
 2127 01f4 20309FE5 		ldr	r3, .L19+4
 2128 01f8 921383E0 		umull	r1, r3, r2, r3
 2129 01fc 2331A0E1 		mov	r3, r3, lsr #2
 2130 0200 0338A0E1 		mov	r3, r3, asl #16
 2131 0204 2338A0E1 		mov	r3, r3, lsr #16
  74:../adc.c      **** }
 2132              		.loc 1 74 0
 2133 0208 0300A0E1 		mov	r0, r3
 2134 020c 0CD04BE2 		sub	sp, fp, #12
 2135 0210 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2136 0214 1EFF2FE1 		bx	lr
 2137              	.L20:
 2138              		.align	2
 2139              	.L19:
 2140 0218 0800D401 		.word	30670856
 2141 021c CDCCCCCC 		.word	-858993459
 2142              		.cfi_endproc
 2143              	.LFE5:
 2145              		.align	2
 2146              		.global	adc_open
 2148              	adc_open:
 2149              	.LFB6:
  75:../adc.c      **** 
  76:../adc.c      **** void adc_open( void (*isr)(void) )
  77:../adc.c      **** {
 2150              		.loc 1 77 0
 2151              		.cfi_startproc
 2152              		@ Function supports interworking.
 2153              		@ args = 0, pretend = 0, frame = 8
 2154              		@ frame_needed = 1, uses_anonymous_args = 0
 2155 0220 0DC0A0E1 		mov	ip, sp
 2156              	.LCFI12:
 2157              		.cfi_def_cfa_register 12
 2158 0224 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2159 0228 04B04CE2 		sub	fp, ip, #4
 2160              		.cfi_offset 14, -8
 2161              		.cfi_offset 13, -12
 2162              		.cfi_offset 11, -16
 2163              	.LCFI13:
 2164              		.cfi_def_cfa 11, 4
 2165 022c 08D04DE2 		sub	sp, sp, #8
 2166 0230 10000BE5 		str	r0, [fp, #-16]
  78:../adc.c      **** 	pISR_ADC = (unsigned) isr;
 2167              		.loc 1 78 0
 2168 0234 18309FE5 		ldr	r3, .L22
 2169 0238 10201BE5 		ldr	r2, [fp, #-16]
 2170 023c 002083E5 		str	r2, [r3, #0]
  79:../adc.c      ****     ic_enable(INT_ADC);
 2171              		.loc 1 79 0
 2172 0240 0000A0E3 		mov	r0, #0
 2173 0244 FEFFFFEB 		bl	ic_enable
  80:../adc.c      **** }
 2174              		.loc 1 80 0
 2175 0248 0CD04BE2 		sub	sp, fp, #12
 2176 024c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2177 0250 1EFF2FE1 		bx	lr
 2178              	.L23:
 2179              		.align	2
 2180              	.L22:
 2181 0254 20FF7F0C 		.word	209714976
 2182              		.cfi_endproc
 2183              	.LFE6:
 2185              		.align	2
 2186              		.global	adc_close
 2188              	adc_close:
 2189              	.LFB7:
  81:../adc.c      **** 
  82:../adc.c      **** void adc_close( void )
  83:../adc.c      **** {
 2190              		.loc 1 83 0
 2191              		.cfi_startproc
 2192              		@ Function supports interworking.
 2193              		@ args = 0, pretend = 0, frame = 0
 2194              		@ frame_needed = 1, uses_anonymous_args = 0
 2195 0258 0DC0A0E1 		mov	ip, sp
 2196              	.LCFI14:
 2197              		.cfi_def_cfa_register 12
 2198 025c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2199 0260 04B04CE2 		sub	fp, ip, #4
 2200              		.cfi_offset 14, -8
 2201              		.cfi_offset 13, -12
 2202              		.cfi_offset 11, -16
 2203              	.LCFI15:
 2204              		.cfi_def_cfa 11, 4
  84:../adc.c      ****     ic_disable(INT_ADC);
 2205              		.loc 1 84 0
 2206 0264 0000A0E3 		mov	r0, #0
 2207 0268 FEFFFFEB 		bl	ic_disable
  85:../adc.c      ****     pISR_ADC = (unsigned) isr_ADC_dummy;
 2208              		.loc 1 85 0
 2209 026c 10309FE5 		ldr	r3, .L25
 2210 0270 10209FE5 		ldr	r2, .L25+4
 2211 0274 002083E5 		str	r2, [r3, #0]
  86:../adc.c      **** }
 2212              		.loc 1 86 0
 2213 0278 0CD04BE2 		sub	sp, fp, #12
 2214 027c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2215 0280 1EFF2FE1 		bx	lr
 2216              	.L26:
 2217              		.align	2
 2218              	.L25:
 2219 0284 20FF7F0C 		.word	209714976
 2220 0288 00000000 		.word	isr_ADC_dummy
 2221              		.cfi_endproc
 2222              	.LFE7:
 2224              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 adc.c
C:\Users\Pedro\AppData\Local\Temp\ccyxXBOf.s:1834   .bss:00000000 state
C:\Users\Pedro\AppData\Local\Temp\ccyxXBOf.s:1835   .bss:00000000 $d
C:\Users\Pedro\AppData\Local\Temp\ccyxXBOf.s:1837   .text:00000000 $a
C:\Users\Pedro\AppData\Local\Temp\ccyxXBOf.s:1840   .text:00000000 isr_ADC_dummy
C:\Users\Pedro\AppData\Local\Temp\ccyxXBOf.s:1876   .text:00000028 adc_init
C:\Users\Pedro\AppData\Local\Temp\ccyxXBOf.s:1957   .text:00000098 adc_off
C:\Users\Pedro\AppData\Local\Temp\ccyxXBOf.s:1906   .text:00000050 $d
C:\Users\Pedro\AppData\Local\Temp\ccyxXBOf.s:1910   .text:00000054 $a
C:\Users\Pedro\AppData\Local\Temp\ccyxXBOf.s:1913   .text:00000054 adc_on
C:\Users\Pedro\AppData\Local\Temp\ccyxXBOf.s:1950   .text:00000094 $d
C:\Users\Pedro\AppData\Local\Temp\ccyxXBOf.s:1954   .text:00000098 $a
C:\Users\Pedro\AppData\Local\Temp\ccyxXBOf.s:1991   .text:000000d0 $d
C:\Users\Pedro\AppData\Local\Temp\ccyxXBOf.s:1995   .text:000000d4 $a
C:\Users\Pedro\AppData\Local\Temp\ccyxXBOf.s:1998   .text:000000d4 adc_status
C:\Users\Pedro\AppData\Local\Temp\ccyxXBOf.s:2026   .text:000000f8 $d
C:\Users\Pedro\AppData\Local\Temp\ccyxXBOf.s:2030   .text:000000fc $a
C:\Users\Pedro\AppData\Local\Temp\ccyxXBOf.s:2033   .text:000000fc adc_getSample
C:\Users\Pedro\AppData\Local\Temp\ccyxXBOf.s:2140   .text:00000218 $d
C:\Users\Pedro\AppData\Local\Temp\ccyxXBOf.s:2145   .text:00000220 $a
C:\Users\Pedro\AppData\Local\Temp\ccyxXBOf.s:2148   .text:00000220 adc_open
C:\Users\Pedro\AppData\Local\Temp\ccyxXBOf.s:2181   .text:00000254 $d
C:\Users\Pedro\AppData\Local\Temp\ccyxXBOf.s:2185   .text:00000258 $a
C:\Users\Pedro\AppData\Local\Temp\ccyxXBOf.s:2188   .text:00000258 adc_close
C:\Users\Pedro\AppData\Local\Temp\ccyxXBOf.s:2219   .text:00000284 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
ic_cleanflag
Delay
ic_enable
ic_disable

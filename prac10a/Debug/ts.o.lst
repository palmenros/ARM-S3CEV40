   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"ts.c"
  21              	.Ltext0:
  22              		.file 1 "../ts.c"
 1919              		.align	1
 1920              	Vxmin:
 1921 0000 0000     		.space	2
 1922              		.align	1
 1923              	Vxmax:
 1924 0002 0000     		.space	2
 1925              		.align	1
 1926              	Vymin:
 1927 0004 0000     		.space	2
 1928              		.align	1
 1929              	Vymax:
 1930 0006 0000     		.space	2
 1931              	state:
 1932 0008 00       		.space	1
 1933 0009 00       		.text
 1934              		.align	2
 1935              		.global	isr_TS_dummy
 1937              	isr_TS_dummy:
 1938              	.LFB0:
   1:../ts.c       **** #include "44b.h"
   2:../ts.c       **** #include "adc.h"
   3:../ts.c       **** #include "lcd.h"
   4:../ts.c       **** #include "gpio.h"
   5:../ts.c       **** #include "utils.h"
   6:../ts.c       **** #include "ts.h"
   7:../ts.c       **** #include "intcontroller.h"
   8:../ts.c       **** #include "uart.h"
   9:../ts.c       **** 
  10:../ts.c       **** #define PX_ERROR    (5)
  11:../ts.c       **** #define TS_DOWN_DELAY 100
  12:../ts.c       **** #define TS_UP_DELAY 200
  13:../ts.c       **** 
  14:../ts.c       **** 
  15:../ts.c       **** static uint16 Vxmin = 0;
  16:../ts.c       **** static uint16 Vxmax = 0;
  17:../ts.c       **** static uint16 Vymin = 0;
  18:../ts.c       **** static uint16 Vymax = 0;
  19:../ts.c       **** 
  20:../ts.c       **** static uint8 state;
  21:../ts.c       **** 
  22:../ts.c       **** extern void isr_TS_dummy( void ) __attribute__ ((interrupt ("IRQ")));
  23:../ts.c       **** 
  24:../ts.c       **** void isr_TS_dummy( void )
  25:../ts.c       **** {
 1939              		.loc 1 25 0
 1940              		.cfi_startproc
 1941              		@ Interrupt Service Routine.
 1942              		@ args = 0, pretend = 0, frame = 0
 1943              		@ frame_needed = 1, uses_anonymous_args = 0
 1944 0000 04C02DE5 		str	ip, [sp, #-4]!
 1945 0004 0DC0A0E1 		mov	ip, sp
 1946              	.LCFI0:
 1947              		.cfi_def_cfa_register 12
 1948 0008 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
 1949 000c 04B04CE2 		sub	fp, ip, #4
 1950              		.cfi_offset 14, -8
 1951              		.cfi_offset 13, -12
 1952              		.cfi_offset 11, -16
 1953              		.cfi_offset 3, -20
 1954              		.cfi_offset 2, -24
 1955              		.cfi_offset 1, -28
 1956              		.cfi_offset 0, -32
 1957              	.LCFI1:
 1958              		.cfi_def_cfa 11, 4
  26:../ts.c       **** 	ic_cleanflag(INT_EINT2);
 1959              		.loc 1 26 0
 1960 0010 1700A0E3 		mov	r0, #23
 1961 0014 FEFFFFEB 		bl	ic_cleanflag
  27:../ts.c       **** }
 1962              		.loc 1 27 0
 1963 0018 1CD04BE2 		sub	sp, fp, #28
 1964 001c 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 1965 0020 04C09DE4 		ldmfd	sp!, {ip}
 1966 0024 04F05EE2 		subs	pc, lr, #4
 1967              		.cfi_endproc
 1968              	.LFE0:
 1970              		.align	2
 1971              		.global	ts_init
 1973              	ts_init:
 1974              	.LFB1:
  28:../ts.c       **** 
  29:../ts.c       **** static void ts_scan( uint16 *Vx, uint16 *Vy );
  30:../ts.c       **** static void ts_calibrate( void );
  31:../ts.c       **** static void ts_sample2coord( uint16 Vx, uint16 Vy, uint16 *x, uint16 *y );
  32:../ts.c       **** 
  33:../ts.c       **** void ts_init( void )
  34:../ts.c       **** {
 1975              		.loc 1 34 0
 1976              		.cfi_startproc
 1977              		@ Function supports interworking.
 1978              		@ args = 0, pretend = 0, frame = 0
 1979              		@ frame_needed = 1, uses_anonymous_args = 0
 1980 0028 0DC0A0E1 		mov	ip, sp
 1981              	.LCFI2:
 1982              		.cfi_def_cfa_register 12
 1983 002c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1984 0030 04B04CE2 		sub	fp, ip, #4
 1985              		.cfi_offset 14, -8
 1986              		.cfi_offset 13, -12
 1987              		.cfi_offset 11, -16
 1988              	.LCFI3:
 1989              		.cfi_def_cfa 11, 4
  35:../ts.c       ****     lcd_init();
 1990              		.loc 1 35 0
 1991 0034 FEFFFFEB 		bl	lcd_init
  36:../ts.c       ****     adc_init();
 1992              		.loc 1 36 0
 1993 0038 FEFFFFEB 		bl	adc_init
  37:../ts.c       **** 
  38:../ts.c       ****     //Conf PE[7..4] as Output
  39:../ts.c       ****     rPCONE &= ~(0xff << 8);
 1994              		.loc 1 39 0
 1995 003c 70309FE5 		ldr	r3, .L3
 1996 0040 6C209FE5 		ldr	r2, .L3
 1997 0044 002092E5 		ldr	r2, [r2, #0]
 1998 0048 FF2CC2E3 		bic	r2, r2, #65280
 1999 004c 002083E5 		str	r2, [r3, #0]
  40:../ts.c       ****     rPCONE |= 0b01010101 << 8;
 2000              		.loc 1 40 0
 2001 0050 5C309FE5 		ldr	r3, .L3
 2002 0054 58209FE5 		ldr	r2, .L3
 2003 0058 002092E5 		ldr	r2, [r2, #0]
 2004 005c 552C82E3 		orr	r2, r2, #21760
 2005 0060 002083E5 		str	r2, [r3, #0]
  41:../ts.c       **** 
  42:../ts.c       ****     //Conecta Y‐ con GND dejando el resto de terminales abiertos
  43:../ts.c       ****     //PE[7..4] = 1011
  44:../ts.c       ****     rPDATE &= ~(0xf << 4);
 2006              		.loc 1 44 0
 2007 0064 4C309FE5 		ldr	r3, .L3+4
 2008 0068 48209FE5 		ldr	r2, .L3+4
 2009 006c 002092E5 		ldr	r2, [r2, #0]
 2010 0070 F020C2E3 		bic	r2, r2, #240
 2011 0074 002083E5 		str	r2, [r3, #0]
  45:../ts.c       ****     rPDATE |= 0b1011 << 4;
 2012              		.loc 1 45 0
 2013 0078 38309FE5 		ldr	r3, .L3+4
 2014 007c 34209FE5 		ldr	r2, .L3+4
 2015 0080 002092E5 		ldr	r2, [r2, #0]
 2016 0084 B02082E3 		orr	r2, r2, #176
 2017 0088 002083E5 		str	r2, [r3, #0]
  46:../ts.c       **** 
  47:../ts.c       ****     Delay( 1 );
 2018              		.loc 1 47 0
 2019 008c 0100A0E3 		mov	r0, #1
 2020 0090 FEFFFFEB 		bl	Delay
  48:../ts.c       ****     portG_conf(2, INPUT);
 2021              		.loc 1 48 0
 2022 0094 0200A0E3 		mov	r0, #2
 2023 0098 0010A0E3 		mov	r1, #0
 2024 009c FEFFFFEB 		bl	portG_conf
  49:../ts.c       ****     //portG_conf_pup(2, ENABLE);
  50:../ts.c       **** 
  51:../ts.c       ****     ts_on();
 2025              		.loc 1 51 0
 2026 00a0 FEFFFFEB 		bl	ts_on
  52:../ts.c       ****     ts_calibrate();
 2027              		.loc 1 52 0
 2028 00a4 330000EB 		bl	ts_calibrate
  53:../ts.c       **** }
 2029              		.loc 1 53 0
 2030 00a8 0CD04BE2 		sub	sp, fp, #12
 2031 00ac 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2032 00b0 1EFF2FE1 		bx	lr
 2033              	.L4:
 2034              		.align	2
 2035              	.L3:
 2036 00b4 2800D201 		.word	30539816
 2037 00b8 2C00D201 		.word	30539820
 2038              		.cfi_endproc
 2039              	.LFE1:
 2041              		.align	2
 2042              		.global	ts_on
 2044              	ts_on:
 2045              	.LFB2:
  54:../ts.c       **** 
  55:../ts.c       **** void ts_on( void )
  56:../ts.c       **** {
 2046              		.loc 1 56 0
 2047              		.cfi_startproc
 2048              		@ Function supports interworking.
 2049              		@ args = 0, pretend = 0, frame = 0
 2050              		@ frame_needed = 1, uses_anonymous_args = 0
 2051 00bc 0DC0A0E1 		mov	ip, sp
 2052              	.LCFI4:
 2053              		.cfi_def_cfa_register 12
 2054 00c0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2055 00c4 04B04CE2 		sub	fp, ip, #4
 2056              		.cfi_offset 14, -8
 2057              		.cfi_offset 13, -12
 2058              		.cfi_offset 11, -16
 2059              	.LCFI5:
 2060              		.cfi_def_cfa 11, 4
  57:../ts.c       ****     adc_on();
 2061              		.loc 1 57 0
 2062 00c8 FEFFFFEB 		bl	adc_on
  58:../ts.c       ****     state = ON;
 2063              		.loc 1 58 0
 2064 00cc 10309FE5 		ldr	r3, .L6
 2065 00d0 0120A0E3 		mov	r2, #1
 2066 00d4 0020C3E5 		strb	r2, [r3, #0]
  59:../ts.c       **** }
 2067              		.loc 1 59 0
 2068 00d8 0CD04BE2 		sub	sp, fp, #12
 2069 00dc 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2070 00e0 1EFF2FE1 		bx	lr
 2071              	.L7:
 2072              		.align	2
 2073              	.L6:
 2074 00e4 08000000 		.word	state
 2075              		.cfi_endproc
 2076              	.LFE2:
 2078              		.align	2
 2079              		.global	ts_off
 2081              	ts_off:
 2082              	.LFB3:
  60:../ts.c       **** 
  61:../ts.c       **** void ts_off( void )
  62:../ts.c       **** {
 2083              		.loc 1 62 0
 2084              		.cfi_startproc
 2085              		@ Function supports interworking.
 2086              		@ args = 0, pretend = 0, frame = 0
 2087              		@ frame_needed = 1, uses_anonymous_args = 0
 2088 00e8 0DC0A0E1 		mov	ip, sp
 2089              	.LCFI6:
 2090              		.cfi_def_cfa_register 12
 2091 00ec 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2092 00f0 04B04CE2 		sub	fp, ip, #4
 2093              		.cfi_offset 14, -8
 2094              		.cfi_offset 13, -12
 2095              		.cfi_offset 11, -16
 2096              	.LCFI7:
 2097              		.cfi_def_cfa 11, 4
  63:../ts.c       ****     adc_off();
 2098              		.loc 1 63 0
 2099 00f4 FEFFFFEB 		bl	adc_off
  64:../ts.c       ****     state = OFF;
 2100              		.loc 1 64 0
 2101 00f8 10309FE5 		ldr	r3, .L9
 2102 00fc 0020A0E3 		mov	r2, #0
 2103 0100 0020C3E5 		strb	r2, [r3, #0]
  65:../ts.c       **** }
 2104              		.loc 1 65 0
 2105 0104 0CD04BE2 		sub	sp, fp, #12
 2106 0108 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2107 010c 1EFF2FE1 		bx	lr
 2108              	.L10:
 2109              		.align	2
 2110              	.L9:
 2111 0110 08000000 		.word	state
 2112              		.cfi_endproc
 2113              	.LFE3:
 2115              		.align	2
 2116              		.global	ts_status
 2118              	ts_status:
 2119              	.LFB4:
  66:../ts.c       **** 
  67:../ts.c       **** uint8 ts_status( void )
  68:../ts.c       **** {
 2120              		.loc 1 68 0
 2121              		.cfi_startproc
 2122              		@ Function supports interworking.
 2123              		@ args = 0, pretend = 0, frame = 0
 2124              		@ frame_needed = 1, uses_anonymous_args = 0
 2125 0114 0DC0A0E1 		mov	ip, sp
 2126              	.LCFI8:
 2127              		.cfi_def_cfa_register 12
 2128 0118 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2129 011c 04B04CE2 		sub	fp, ip, #4
 2130              		.cfi_offset 14, -8
 2131              		.cfi_offset 13, -12
 2132              		.cfi_offset 11, -16
 2133              	.LCFI9:
 2134              		.cfi_def_cfa 11, 4
  69:../ts.c       **** 	return state;
 2135              		.loc 1 69 0
 2136 0120 10309FE5 		ldr	r3, .L12
 2137 0124 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  70:../ts.c       **** }
 2138              		.loc 1 70 0
 2139 0128 0300A0E1 		mov	r0, r3
 2140 012c 0CD04BE2 		sub	sp, fp, #12
 2141 0130 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2142 0134 1EFF2FE1 		bx	lr
 2143              	.L13:
 2144              		.align	2
 2145              	.L12:
 2146 0138 08000000 		.word	state
 2147              		.cfi_endproc
 2148              	.LFE4:
 2150              		.align	2
 2151              		.global	ts_pressed
 2153              	ts_pressed:
 2154              	.LFB5:
  71:../ts.c       **** 
  72:../ts.c       **** uint8 ts_pressed( void )
  73:../ts.c       **** {
 2155              		.loc 1 73 0
 2156              		.cfi_startproc
 2157              		@ Function supports interworking.
 2158              		@ args = 0, pretend = 0, frame = 0
 2159              		@ frame_needed = 1, uses_anonymous_args = 0
 2160 013c 0DC0A0E1 		mov	ip, sp
 2161              	.LCFI10:
 2162              		.cfi_def_cfa_register 12
 2163 0140 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2164 0144 04B04CE2 		sub	fp, ip, #4
 2165              		.cfi_offset 14, -8
 2166              		.cfi_offset 13, -12
 2167              		.cfi_offset 11, -16
 2168              	.LCFI11:
 2169              		.cfi_def_cfa 11, 4
  74:../ts.c       ****     return !(rPDATG & (1 << 2));
 2170              		.loc 1 74 0
 2171 0148 24309FE5 		ldr	r3, .L15
 2172 014c 003093E5 		ldr	r3, [r3, #0]
 2173 0150 043003E2 		and	r3, r3, #4
 2174 0154 000053E3 		cmp	r3, #0
 2175 0158 0030A013 		movne	r3, #0
 2176 015c 0130A003 		moveq	r3, #1
 2177 0160 FF3003E2 		and	r3, r3, #255
  75:../ts.c       **** }
 2178              		.loc 1 75 0
 2179 0164 0300A0E1 		mov	r0, r3
 2180 0168 0CD04BE2 		sub	sp, fp, #12
 2181 016c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2182 0170 1EFF2FE1 		bx	lr
 2183              	.L16:
 2184              		.align	2
 2185              	.L15:
 2186 0174 4400D201 		.word	30539844
 2187              		.cfi_endproc
 2188              	.LFE5:
 2190              		.section	.rodata
 2191              		.align	2
 2192              	.LC0:
 2193 0000 43616C69 		.ascii	"Calibracion pantalla tactil: \012\000"
 2193      62726163 
 2193      696F6E20 
 2193      70616E74 
 2193      616C6C61 
 2194 001f 00       		.align	2
 2195              	.LC1:
 2196 0020 50756C73 		.ascii	"Pulse el punto en la esquina superior izquierda...\000"
 2196      6520656C 
 2196      2070756E 
 2196      746F2065 
 2196      6E206C61 
 2197 0053 00       		.align	2
 2198              	.LC2:
 2199 0054 204F6B0A 		.ascii	" Ok\012\000"
 2199      00
 2200 0059 000000   		.align	2
 2201              	.LC3:
 2202 005c 50756C73 		.ascii	"Pulse el punto en la esquina inferior derecha...\000"
 2202      6520656C 
 2202      2070756E 
 2202      746F2065 
 2202      6E206C61 
 2203 008d 000000   		.align	2
 2204              	.LC4:
 2205 0090 50756C73 		.ascii	"Pulse el punto en el centro...\000"
 2205      6520656C 
 2205      2070756E 
 2205      746F2065 
 2205      6E20656C 
 2206 00af 00       		.align	2
 2207              	.LC5:
 2208 00b0 583A2000 		.ascii	"X: \000"
 2209              		.align	2
 2210              	.LC6:
 2211 00b4 2C20593A 		.ascii	", Y: \000"
 2211      2000
 2212 00ba 0000     		.align	2
 2213              	.LC7:
 2214 00bc 0A00     		.ascii	"\012\000"
 2215 00be 0000     		.align	2
 2216              	.LC8:
 2217 00c0 43616C69 		.ascii	"Calibracion completada\012\000"
 2217      62726163 
 2217      696F6E20 
 2217      636F6D70 
 2217      6C657461 
 2218              		.text
 2219              		.align	2
 2221              	ts_calibrate:
 2222              	.LFB6:
  76:../ts.c       **** 
  77:../ts.c       **** static void ts_calibrate( void )
  78:../ts.c       **** {
 2223              		.loc 1 78 0
 2224              		.cfi_startproc
 2225              		@ Function supports interworking.
 2226              		@ args = 0, pretend = 0, frame = 8
 2227              		@ frame_needed = 1, uses_anonymous_args = 0
 2228 0178 0DC0A0E1 		mov	ip, sp
 2229              	.LCFI12:
 2230              		.cfi_def_cfa_register 12
 2231 017c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2232 0180 04B04CE2 		sub	fp, ip, #4
 2233              		.cfi_offset 14, -8
 2234              		.cfi_offset 13, -12
 2235              		.cfi_offset 11, -16
 2236              	.LCFI13:
 2237              		.cfi_def_cfa 11, 4
 2238 0184 10D04DE2 		sub	sp, sp, #16
  79:../ts.c       ****     uint16 x, y;
  80:../ts.c       **** 
  81:../ts.c       **** 	uart0_puts("Calibracion pantalla tactil: \n");
 2239              		.loc 1 81 0
 2240 0188 D4019FE5 		ldr	r0, .L23
 2241 018c FEFFFFEB 		bl	uart0_puts
  82:../ts.c       ****     lcd_on();
 2242              		.loc 1 82 0
 2243 0190 FEFFFFEB 		bl	lcd_on
 2244              	.L22:
  83:../ts.c       ****     do {
  84:../ts.c       **** 
  85:../ts.c       ****     	lcd_clear_color(BLACK);
 2245              		.loc 1 85 0
 2246 0194 0F00A0E3 		mov	r0, #15
 2247 0198 FEFFFFEB 		bl	lcd_clear_color
  86:../ts.c       ****     	lcd_draw_box(0, 0, 0 + PX_ERROR, 0 + PX_ERROR, WHITE, 3);
 2248              		.loc 1 86 0
 2249 019c 0030A0E3 		mov	r3, #0
 2250 01a0 00308DE5 		str	r3, [sp, #0]
 2251 01a4 0330A0E3 		mov	r3, #3
 2252 01a8 04308DE5 		str	r3, [sp, #4]
 2253 01ac 0000A0E3 		mov	r0, #0
 2254 01b0 0010A0E3 		mov	r1, #0
 2255 01b4 0520A0E3 		mov	r2, #5
 2256 01b8 0530A0E3 		mov	r3, #5
 2257 01bc FEFFFFEB 		bl	lcd_draw_box
  87:../ts.c       ****     	uart0_puts("Pulse el punto en la esquina superior izquierda...");
 2258              		.loc 1 87 0
 2259 01c0 A0019FE5 		ldr	r0, .L23+4
 2260 01c4 FEFFFFEB 		bl	uart0_puts
  88:../ts.c       **** 
  89:../ts.c       ****     	while(rPDATG & (1 << 2));
 2261              		.loc 1 89 0
 2262 01c8 0000A0E1 		mov	r0, r0	@ nop
 2263              	.L18:
 2264              		.loc 1 89 0 is_stmt 0 discriminator 1
 2265 01cc 98319FE5 		ldr	r3, .L23+8
 2266 01d0 003093E5 		ldr	r3, [r3, #0]
 2267 01d4 043003E2 		and	r3, r3, #4
 2268 01d8 000053E3 		cmp	r3, #0
 2269 01dc FAFFFF1A 		bne	.L18
  90:../ts.c       ****         Delay( TS_DOWN_DELAY );
 2270              		.loc 1 90 0 is_stmt 1
 2271 01e0 6400A0E3 		mov	r0, #100
 2272 01e4 FEFFFFEB 		bl	Delay
  91:../ts.c       ****         ts_scan( &Vxmin, &Vymax );
 2273              		.loc 1 91 0
 2274 01e8 80019FE5 		ldr	r0, .L23+12
 2275 01ec 80119FE5 		ldr	r1, .L23+16
 2276 01f0 910000EB 		bl	ts_scan
  92:../ts.c       ****     	while(!(rPDATG & (1 << 2)));
 2277              		.loc 1 92 0
 2278 01f4 0000A0E1 		mov	r0, r0	@ nop
 2279              	.L19:
 2280              		.loc 1 92 0 is_stmt 0 discriminator 1
 2281 01f8 6C319FE5 		ldr	r3, .L23+8
 2282 01fc 003093E5 		ldr	r3, [r3, #0]
 2283 0200 043003E2 		and	r3, r3, #4
 2284 0204 000053E3 		cmp	r3, #0
 2285 0208 FAFFFF0A 		beq	.L19
  93:../ts.c       ****         Delay( TS_UP_DELAY );
 2286              		.loc 1 93 0 is_stmt 1
 2287 020c C800A0E3 		mov	r0, #200
 2288 0210 FEFFFFEB 		bl	Delay
  94:../ts.c       **** 
  95:../ts.c       ****     	uart0_puts(" Ok\n");
 2289              		.loc 1 95 0
 2290 0214 5C019FE5 		ldr	r0, .L23+20
 2291 0218 FEFFFFEB 		bl	uart0_puts
  96:../ts.c       **** 
  97:../ts.c       ****     	lcd_clear_color(BLACK);
 2292              		.loc 1 97 0
 2293 021c 0F00A0E3 		mov	r0, #15
 2294 0220 FEFFFFEB 		bl	lcd_clear_color
  98:../ts.c       ****     	lcd_draw_box(LCD_WIDTH - 1 - PX_ERROR, LCD_HEIGHT - 1 - PX_ERROR, LCD_WIDTH - 1, LCD_HEIGHT - 
 2295              		.loc 1 98 0
 2296 0224 0030A0E3 		mov	r3, #0
 2297 0228 00308DE5 		str	r3, [sp, #0]
 2298 022c 0330A0E3 		mov	r3, #3
 2299 0230 04308DE5 		str	r3, [sp, #4]
 2300 0234 40019FE5 		ldr	r0, .L23+24
 2301 0238 EA10A0E3 		mov	r1, #234
 2302 023c 3C219FE5 		ldr	r2, .L23+28
 2303 0240 EF30A0E3 		mov	r3, #239
 2304 0244 FEFFFFEB 		bl	lcd_draw_box
  99:../ts.c       ****     	uart0_puts("Pulse el punto en la esquina inferior derecha...");
 2305              		.loc 1 99 0
 2306 0248 34019FE5 		ldr	r0, .L23+32
 2307 024c FEFFFFEB 		bl	uart0_puts
 100:../ts.c       **** 
 101:../ts.c       ****     	while(rPDATG & (1 << 2));
 2308              		.loc 1 101 0
 2309 0250 0000A0E1 		mov	r0, r0	@ nop
 2310              	.L20:
 2311              		.loc 1 101 0 is_stmt 0 discriminator 1
 2312 0254 10319FE5 		ldr	r3, .L23+8
 2313 0258 003093E5 		ldr	r3, [r3, #0]
 2314 025c 043003E2 		and	r3, r3, #4
 2315 0260 000053E3 		cmp	r3, #0
 2316 0264 FAFFFF1A 		bne	.L20
 102:../ts.c       ****         Delay( TS_DOWN_DELAY );
 2317              		.loc 1 102 0 is_stmt 1
 2318 0268 6400A0E3 		mov	r0, #100
 2319 026c FEFFFFEB 		bl	Delay
 103:../ts.c       ****         ts_scan( &Vxmax, &Vymin );
 2320              		.loc 1 103 0
 2321 0270 10019FE5 		ldr	r0, .L23+36
 2322 0274 10119FE5 		ldr	r1, .L23+40
 2323 0278 6F0000EB 		bl	ts_scan
 104:../ts.c       ****     	while(!(rPDATG & (1 << 2)));
 2324              		.loc 1 104 0
 2325 027c 0000A0E1 		mov	r0, r0	@ nop
 2326              	.L21:
 2327              		.loc 1 104 0 is_stmt 0 discriminator 1
 2328 0280 E4309FE5 		ldr	r3, .L23+8
 2329 0284 003093E5 		ldr	r3, [r3, #0]
 2330 0288 043003E2 		and	r3, r3, #4
 2331 028c 000053E3 		cmp	r3, #0
 2332 0290 FAFFFF0A 		beq	.L21
 105:../ts.c       ****         Delay( TS_UP_DELAY );
 2333              		.loc 1 105 0 is_stmt 1
 2334 0294 C800A0E3 		mov	r0, #200
 2335 0298 FEFFFFEB 		bl	Delay
 106:../ts.c       **** 
 107:../ts.c       ****         uart0_puts(" Ok\n");
 2336              		.loc 1 107 0
 2337 029c D4009FE5 		ldr	r0, .L23+20
 2338 02a0 FEFFFFEB 		bl	uart0_puts
 108:../ts.c       **** 
 109:../ts.c       ****     	lcd_clear_color(BLACK);
 2339              		.loc 1 109 0
 2340 02a4 0F00A0E3 		mov	r0, #15
 2341 02a8 FEFFFFEB 		bl	lcd_clear_color
 110:../ts.c       ****     	lcd_draw_box(LCD_WIDTH/2 - PX_ERROR / 2, LCD_HEIGHT/2 - PX_ERROR / 2, LCD_WIDTH/2 + PX_ERROR /
 2342              		.loc 1 110 0
 2343 02ac 0030A0E3 		mov	r3, #0
 2344 02b0 00308DE5 		str	r3, [sp, #0]
 2345 02b4 0330A0E3 		mov	r3, #3
 2346 02b8 04308DE5 		str	r3, [sp, #4]
 2347 02bc 9E00A0E3 		mov	r0, #158
 2348 02c0 7610A0E3 		mov	r1, #118
 2349 02c4 A220A0E3 		mov	r2, #162
 2350 02c8 7A30A0E3 		mov	r3, #122
 2351 02cc FEFFFFEB 		bl	lcd_draw_box
 111:../ts.c       **** 
 112:../ts.c       ****     	uart0_puts("Pulse el punto en el centro...");
 2352              		.loc 1 112 0
 2353 02d0 B8009FE5 		ldr	r0, .L23+44
 2354 02d4 FEFFFFEB 		bl	uart0_puts
 113:../ts.c       **** 
 114:../ts.c       ****         ts_getpos( &x, &y );
 2355              		.loc 1 114 0
 2356 02d8 0E204BE2 		sub	r2, fp, #14
 2357 02dc 10304BE2 		sub	r3, fp, #16
 2358 02e0 0200A0E1 		mov	r0, r2
 2359 02e4 0310A0E1 		mov	r1, r3
 2360 02e8 FEFFFFEB 		bl	ts_getpos
 115:../ts.c       **** 
 116:../ts.c       ****     	uart0_puts("X: ");
 2361              		.loc 1 116 0
 2362 02ec A0009FE5 		ldr	r0, .L23+48
 2363 02f0 FEFFFFEB 		bl	uart0_puts
 117:../ts.c       ****     	uart0_putint(x);
 2364              		.loc 1 117 0
 2365 02f4 BE305BE1 		ldrh	r3, [fp, #-14]
 2366 02f8 0300A0E1 		mov	r0, r3
 2367 02fc FEFFFFEB 		bl	uart0_putint
 118:../ts.c       ****     	uart0_puts(", Y: ");
 2368              		.loc 1 118 0
 2369 0300 90009FE5 		ldr	r0, .L23+52
 2370 0304 FEFFFFEB 		bl	uart0_puts
 119:../ts.c       ****     	uart0_putint(y);
 2371              		.loc 1 119 0
 2372 0308 B0315BE1 		ldrh	r3, [fp, #-16]
 2373 030c 0300A0E1 		mov	r0, r3
 2374 0310 FEFFFFEB 		bl	uart0_putint
 120:../ts.c       ****     	uart0_puts("\n");
 2375              		.loc 1 120 0
 2376 0314 80009FE5 		ldr	r0, .L23+56
 2377 0318 FEFFFFEB 		bl	uart0_puts
 121:../ts.c       **** 
 122:../ts.c       ****     } while( (x > LCD_WIDTH/2+PX_ERROR) || (x < LCD_WIDTH/2-PX_ERROR) || (y > LCD_HEIGHT/2+PX_ERROR
 2378              		.loc 1 122 0
 2379 031c BE305BE1 		ldrh	r3, [fp, #-14]
 2380 0320 A50053E3 		cmp	r3, #165
 2381 0324 9AFFFF8A 		bhi	.L22
 2382              		.loc 1 122 0 is_stmt 0 discriminator 1
 2383 0328 BE305BE1 		ldrh	r3, [fp, #-14]
 2384 032c 9A0053E3 		cmp	r3, #154
 2385 0330 97FFFF9A 		bls	.L22
 2386 0334 B0315BE1 		ldrh	r3, [fp, #-16]
 2387 0338 7D0053E3 		cmp	r3, #125
 2388 033c 94FFFF8A 		bhi	.L22
 2389 0340 B0315BE1 		ldrh	r3, [fp, #-16]
 2390 0344 720053E3 		cmp	r3, #114
 2391 0348 91FFFF9A 		bls	.L22
 123:../ts.c       **** 
 124:../ts.c       ****     uart0_puts("Calibracion completada\n");
 2392              		.loc 1 124 0 is_stmt 1
 2393 034c 4C009FE5 		ldr	r0, .L23+60
 2394 0350 FEFFFFEB 		bl	uart0_puts
 125:../ts.c       ****     lcd_clear();
 2395              		.loc 1 125 0
 2396 0354 FEFFFFEB 		bl	lcd_clear
 126:../ts.c       **** }
 2397              		.loc 1 126 0
 2398 0358 0CD04BE2 		sub	sp, fp, #12
 2399 035c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2400 0360 1EFF2FE1 		bx	lr
 2401              	.L24:
 2402              		.align	2
 2403              	.L23:
 2404 0364 00000000 		.word	.LC0
 2405 0368 20000000 		.word	.LC1
 2406 036c 4400D201 		.word	30539844
 2407 0370 00000000 		.word	Vxmin
 2408 0374 06000000 		.word	Vymax
 2409 0378 54000000 		.word	.LC2
 2410 037c 3A010000 		.word	314
 2411 0380 3F010000 		.word	319
 2412 0384 5C000000 		.word	.LC3
 2413 0388 02000000 		.word	Vxmax
 2414 038c 04000000 		.word	Vymin
 2415 0390 90000000 		.word	.LC4
 2416 0394 B0000000 		.word	.LC5
 2417 0398 B4000000 		.word	.LC6
 2418 039c BC000000 		.word	.LC7
 2419 03a0 C0000000 		.word	.LC8
 2420              		.cfi_endproc
 2421              	.LFE6:
 2423              		.align	2
 2424              		.global	ts_getpos
 2426              	ts_getpos:
 2427              	.LFB7:
 127:../ts.c       **** 
 128:../ts.c       **** void ts_getpos( uint16 *x, uint16 *y )
 129:../ts.c       **** {
 2428              		.loc 1 129 0
 2429              		.cfi_startproc
 2430              		@ Function supports interworking.
 2431              		@ args = 0, pretend = 0, frame = 16
 2432              		@ frame_needed = 1, uses_anonymous_args = 0
 2433 03a4 0DC0A0E1 		mov	ip, sp
 2434              	.LCFI14:
 2435              		.cfi_def_cfa_register 12
 2436 03a8 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2437 03ac 04B04CE2 		sub	fp, ip, #4
 2438              		.cfi_offset 14, -8
 2439              		.cfi_offset 13, -12
 2440              		.cfi_offset 11, -16
 2441              	.LCFI15:
 2442              		.cfi_def_cfa 11, 4
 2443 03b0 10D04DE2 		sub	sp, sp, #16
 2444 03b4 18000BE5 		str	r0, [fp, #-24]
 2445 03b8 1C100BE5 		str	r1, [fp, #-28]
 130:../ts.c       **** 	uint16 Vx, Vy;
 131:../ts.c       **** 
 132:../ts.c       **** 	//Esperar a que PG[2]=0
 133:../ts.c       **** 	while(rPDATG & (1 << 2));
 2446              		.loc 1 133 0
 2447 03bc 0000A0E1 		mov	r0, r0	@ nop
 2448              	.L26:
 2449              		.loc 1 133 0 is_stmt 0 discriminator 1
 2450 03c0 70309FE5 		ldr	r3, .L28
 2451 03c4 003093E5 		ldr	r3, [r3, #0]
 2452 03c8 043003E2 		and	r3, r3, #4
 2453 03cc 000053E3 		cmp	r3, #0
 2454 03d0 FAFFFF1A 		bne	.L26
 134:../ts.c       **** 
 135:../ts.c       **** 	//Esperar TS_DOWN_DELAY
 136:../ts.c       **** 	Delay(TS_DOWN_DELAY);
 2455              		.loc 1 136 0 is_stmt 1
 2456 03d4 6400A0E3 		mov	r0, #100
 2457 03d8 FEFFFFEB 		bl	Delay
 137:../ts.c       **** 
 138:../ts.c       **** 	ts_scan(&Vx, &Vy);
 2458              		.loc 1 138 0
 2459 03dc 0E204BE2 		sub	r2, fp, #14
 2460 03e0 10304BE2 		sub	r3, fp, #16
 2461 03e4 0200A0E1 		mov	r0, r2
 2462 03e8 0310A0E1 		mov	r1, r3
 2463 03ec 120000EB 		bl	ts_scan
 139:../ts.c       **** 	ts_sample2coord(Vx, Vy, x, y);
 2464              		.loc 1 139 0
 2465 03f0 BE205BE1 		ldrh	r2, [fp, #-14]
 2466 03f4 B0315BE1 		ldrh	r3, [fp, #-16]
 2467 03f8 0200A0E1 		mov	r0, r2
 2468 03fc 0310A0E1 		mov	r1, r3
 2469 0400 18201BE5 		ldr	r2, [fp, #-24]
 2470 0404 1C301BE5 		ldr	r3, [fp, #-28]
 2471 0408 410000EB 		bl	ts_sample2coord
 140:../ts.c       **** 
 141:../ts.c       **** 	//Esperar a que PG[2]=1
 142:../ts.c       **** 	while(!(rPDATG & (1 << 2)));
 2472              		.loc 1 142 0
 2473 040c 0000A0E1 		mov	r0, r0	@ nop
 2474              	.L27:
 2475              		.loc 1 142 0 is_stmt 0 discriminator 1
 2476 0410 20309FE5 		ldr	r3, .L28
 2477 0414 003093E5 		ldr	r3, [r3, #0]
 2478 0418 043003E2 		and	r3, r3, #4
 2479 041c 000053E3 		cmp	r3, #0
 2480 0420 FAFFFF0A 		beq	.L27
 143:../ts.c       **** 
 144:../ts.c       **** 	//Esperar TS_UP_DELAY
 145:../ts.c       **** 	Delay(TS_UP_DELAY);
 2481              		.loc 1 145 0 is_stmt 1
 2482 0424 C800A0E3 		mov	r0, #200
 2483 0428 FEFFFFEB 		bl	Delay
 146:../ts.c       **** }
 2484              		.loc 1 146 0
 2485 042c 0CD04BE2 		sub	sp, fp, #12
 2486 0430 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2487 0434 1EFF2FE1 		bx	lr
 2488              	.L29:
 2489              		.align	2
 2490              	.L28:
 2491 0438 4400D201 		.word	30539844
 2492              		.cfi_endproc
 2493              	.LFE7:
 2495              		.align	2
 2497              	ts_scan:
 2498              	.LFB8:
 147:../ts.c       **** 
 148:../ts.c       **** static void ts_scan( uint16 *Vx, uint16 *Vy )
 149:../ts.c       **** {
 2499              		.loc 1 149 0
 2500              		.cfi_startproc
 2501              		@ Function supports interworking.
 2502              		@ args = 0, pretend = 0, frame = 8
 2503              		@ frame_needed = 1, uses_anonymous_args = 0
 2504 043c 0DC0A0E1 		mov	ip, sp
 2505              	.LCFI16:
 2506              		.cfi_def_cfa_register 12
 2507 0440 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2508 0444 04B04CE2 		sub	fp, ip, #4
 2509              		.cfi_offset 14, -8
 2510              		.cfi_offset 13, -12
 2511              		.cfi_offset 11, -16
 2512              	.LCFI17:
 2513              		.cfi_def_cfa 11, 4
 2514 0448 08D04DE2 		sub	sp, sp, #8
 2515 044c 10000BE5 		str	r0, [fp, #-16]
 2516 0450 14100BE5 		str	r1, [fp, #-20]
 150:../ts.c       **** 	//PE[7..4] = (0,1,1,0)
 151:../ts.c       ****     rPDATE &= ~(0xf << 4);
 2517              		.loc 1 151 0
 2518 0454 B4309FE5 		ldr	r3, .L31
 2519 0458 B0209FE5 		ldr	r2, .L31
 2520 045c 002092E5 		ldr	r2, [r2, #0]
 2521 0460 F020C2E3 		bic	r2, r2, #240
 2522 0464 002083E5 		str	r2, [r3, #0]
 152:../ts.c       ****     rPDATE |= 0b0110 << 4;
 2523              		.loc 1 152 0
 2524 0468 A0309FE5 		ldr	r3, .L31
 2525 046c 9C209FE5 		ldr	r2, .L31
 2526 0470 002092E5 		ldr	r2, [r2, #0]
 2527 0474 602082E3 		orr	r2, r2, #96
 2528 0478 002083E5 		str	r2, [r3, #0]
 153:../ts.c       **** 
 154:../ts.c       ****     //leer Vx por canal AIN1
 155:../ts.c       **** 
 156:../ts.c       ****     *Vx = adc_getSample( ADC_AIN1 );
 2529              		.loc 1 156 0
 2530 047c 0100A0E3 		mov	r0, #1
 2531 0480 FEFFFFEB 		bl	adc_getSample
 2532 0484 0030A0E1 		mov	r3, r0
 2533 0488 0320A0E1 		mov	r2, r3
 2534 048c 10301BE5 		ldr	r3, [fp, #-16]
 2535 0490 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 157:../ts.c       **** 
 158:../ts.c       **** 	//PE[7..4] = (1,0,0,1)
 159:../ts.c       ****     rPDATE &= ~(0xf << 4);
 2536              		.loc 1 159 0
 2537 0494 74309FE5 		ldr	r3, .L31
 2538 0498 70209FE5 		ldr	r2, .L31
 2539 049c 002092E5 		ldr	r2, [r2, #0]
 2540 04a0 F020C2E3 		bic	r2, r2, #240
 2541 04a4 002083E5 		str	r2, [r3, #0]
 160:../ts.c       ****     rPDATE |= 0b1001 << 4;
 2542              		.loc 1 160 0
 2543 04a8 60309FE5 		ldr	r3, .L31
 2544 04ac 5C209FE5 		ldr	r2, .L31
 2545 04b0 002092E5 		ldr	r2, [r2, #0]
 2546 04b4 902082E3 		orr	r2, r2, #144
 2547 04b8 002083E5 		str	r2, [r3, #0]
 161:../ts.c       **** 
 162:../ts.c       ****     //leer Vy por canal AIN0
 163:../ts.c       **** 
 164:../ts.c       ****     *Vy = adc_getSample( ADC_AIN0 );
 2548              		.loc 1 164 0
 2549 04bc 0000A0E3 		mov	r0, #0
 2550 04c0 FEFFFFEB 		bl	adc_getSample
 2551 04c4 0030A0E1 		mov	r3, r0
 2552 04c8 0320A0E1 		mov	r2, r3
 2553 04cc 14301BE5 		ldr	r3, [fp, #-20]
 2554 04d0 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 165:../ts.c       **** 
 166:../ts.c       **** 	//PE[7..4] = (1,0,1,1)
 167:../ts.c       ****     rPDATE &= ~(0xf << 4);
 2555              		.loc 1 167 0
 2556 04d4 34309FE5 		ldr	r3, .L31
 2557 04d8 30209FE5 		ldr	r2, .L31
 2558 04dc 002092E5 		ldr	r2, [r2, #0]
 2559 04e0 F020C2E3 		bic	r2, r2, #240
 2560 04e4 002083E5 		str	r2, [r3, #0]
 168:../ts.c       ****     rPDATE |= 0b1011 << 4;
 2561              		.loc 1 168 0
 2562 04e8 20309FE5 		ldr	r3, .L31
 2563 04ec 1C209FE5 		ldr	r2, .L31
 2564 04f0 002092E5 		ldr	r2, [r2, #0]
 2565 04f4 B02082E3 		orr	r2, r2, #176
 2566 04f8 002083E5 		str	r2, [r3, #0]
 169:../ts.c       **** 
 170:../ts.c       ****     Delay(1);
 2567              		.loc 1 170 0
 2568 04fc 0100A0E3 		mov	r0, #1
 2569 0500 FEFFFFEB 		bl	Delay
 171:../ts.c       **** }
 2570              		.loc 1 171 0
 2571 0504 0CD04BE2 		sub	sp, fp, #12
 2572 0508 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2573 050c 1EFF2FE1 		bx	lr
 2574              	.L32:
 2575              		.align	2
 2576              	.L31:
 2577 0510 2C00D201 		.word	30539820
 2578              		.cfi_endproc
 2579              	.LFE8:
 2581              		.global	__aeabi_idiv
 2582              		.align	2
 2584              	ts_sample2coord:
 2585              	.LFB9:
 172:../ts.c       **** 
 173:../ts.c       **** static void ts_sample2coord( uint16 Vx, uint16 Vy, uint16 *x, uint16 *y )
 174:../ts.c       **** {
 2586              		.loc 1 174 0
 2587              		.cfi_startproc
 2588              		@ Function supports interworking.
 2589              		@ args = 0, pretend = 0, frame = 16
 2590              		@ frame_needed = 1, uses_anonymous_args = 0
 2591 0514 0DC0A0E1 		mov	ip, sp
 2592              	.LCFI18:
 2593              		.cfi_def_cfa_register 12
 2594 0518 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2595 051c 04B04CE2 		sub	fp, ip, #4
 2596              		.cfi_offset 14, -8
 2597              		.cfi_offset 13, -12
 2598              		.cfi_offset 11, -16
 2599              	.LCFI19:
 2600              		.cfi_def_cfa 11, 4
 2601 0520 10D04DE2 		sub	sp, sp, #16
 2602 0524 14200BE5 		str	r2, [fp, #-20]
 2603 0528 18300BE5 		str	r3, [fp, #-24]
 2604 052c BE004BE1 		strh	r0, [fp, #-14]	@ movhi
 2605 0530 B0114BE1 		strh	r1, [fp, #-16]	@ movhi
 175:../ts.c       **** 	//Interpolate Vx
 176:../ts.c       ****     if( Vx < Vxmin )
 2606              		.loc 1 176 0
 2607 0534 68319FE5 		ldr	r3, .L40
 2608 0538 B030D3E1 		ldrh	r3, [r3, #0]
 2609 053c BE205BE1 		ldrh	r2, [fp, #-14]
 2610 0540 030052E1 		cmp	r2, r3
 2611 0544 0300002A 		bcs	.L34
 177:../ts.c       ****         *x = 0;
 2612              		.loc 1 177 0
 2613 0548 14301BE5 		ldr	r3, [fp, #-20]
 2614 054c 0020A0E3 		mov	r2, #0
 2615 0550 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 2616 0554 1F0000EA 		b	.L35
 2617              	.L34:
 178:../ts.c       ****     else if( Vx > Vxmax )
 2618              		.loc 1 178 0
 2619 0558 48319FE5 		ldr	r3, .L40+4
 2620 055c B030D3E1 		ldrh	r3, [r3, #0]
 2621 0560 BE205BE1 		ldrh	r2, [fp, #-14]
 2622 0564 030052E1 		cmp	r2, r3
 2623 0568 0300009A 		bls	.L36
 179:../ts.c       ****         *x = LCD_WIDTH-1;
 2624              		.loc 1 179 0
 2625 056c 14301BE5 		ldr	r3, [fp, #-20]
 2626 0570 34219FE5 		ldr	r2, .L40+8
 2627 0574 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 2628 0578 160000EA 		b	.L35
 2629              	.L36:
 180:../ts.c       ****     else
 181:../ts.c       ****         *x = LCD_WIDTH*(Vx-Vxmin) / (Vxmax-Vxmin);
 2630              		.loc 1 181 0
 2631 057c BE205BE1 		ldrh	r2, [fp, #-14]
 2632 0580 1C319FE5 		ldr	r3, .L40
 2633 0584 B030D3E1 		ldrh	r3, [r3, #0]
 2634 0588 022063E0 		rsb	r2, r3, r2
 2635 058c 0230A0E1 		mov	r3, r2
 2636 0590 0331A0E1 		mov	r3, r3, asl #2
 2637 0594 023083E0 		add	r3, r3, r2
 2638 0598 0333A0E1 		mov	r3, r3, asl #6
 2639 059c 0320A0E1 		mov	r2, r3
 2640 05a0 00319FE5 		ldr	r3, .L40+4
 2641 05a4 B030D3E1 		ldrh	r3, [r3, #0]
 2642 05a8 0310A0E1 		mov	r1, r3
 2643 05ac F0309FE5 		ldr	r3, .L40
 2644 05b0 B030D3E1 		ldrh	r3, [r3, #0]
 2645 05b4 013063E0 		rsb	r3, r3, r1
 2646 05b8 0200A0E1 		mov	r0, r2
 2647 05bc 0310A0E1 		mov	r1, r3
 2648 05c0 FEFFFFEB 		bl	__aeabi_idiv
 2649 05c4 0030A0E1 		mov	r3, r0
 2650 05c8 0338A0E1 		mov	r3, r3, asl #16
 2651 05cc 2328A0E1 		mov	r2, r3, lsr #16
 2652 05d0 14301BE5 		ldr	r3, [fp, #-20]
 2653 05d4 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 2654              	.L35:
 182:../ts.c       **** 
 183:../ts.c       ****     //Interpolate Vy
 184:../ts.c       ****     if( Vy < Vymin )
 2655              		.loc 1 184 0
 2656 05d8 D0309FE5 		ldr	r3, .L40+12
 2657 05dc B030D3E1 		ldrh	r3, [r3, #0]
 2658 05e0 B0215BE1 		ldrh	r2, [fp, #-16]
 2659 05e4 030052E1 		cmp	r2, r3
 2660 05e8 0300002A 		bcs	.L37
 185:../ts.c       ****         *y = 0;
 2661              		.loc 1 185 0
 2662 05ec 18301BE5 		ldr	r3, [fp, #-24]
 2663 05f0 0020A0E3 		mov	r2, #0
 2664 05f4 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 2665 05f8 1F0000EA 		b	.L38
 2666              	.L37:
 186:../ts.c       ****     else if( Vy > Vymax )
 2667              		.loc 1 186 0
 2668 05fc B0309FE5 		ldr	r3, .L40+16
 2669 0600 B030D3E1 		ldrh	r3, [r3, #0]
 2670 0604 B0215BE1 		ldrh	r2, [fp, #-16]
 2671 0608 030052E1 		cmp	r2, r3
 2672 060c 0300009A 		bls	.L39
 187:../ts.c       ****         *y = LCD_HEIGHT-1;
 2673              		.loc 1 187 0
 2674 0610 18301BE5 		ldr	r3, [fp, #-24]
 2675 0614 EF20A0E3 		mov	r2, #239
 2676 0618 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 2677 061c 160000EA 		b	.L38
 2678              	.L39:
 188:../ts.c       ****     else
 189:../ts.c       ****         *y = LCD_HEIGHT*(Vy-Vymin) / (Vymax-Vymin);
 2679              		.loc 1 189 0
 2680 0620 B0215BE1 		ldrh	r2, [fp, #-16]
 2681 0624 84309FE5 		ldr	r3, .L40+12
 2682 0628 B030D3E1 		ldrh	r3, [r3, #0]
 2683 062c 022063E0 		rsb	r2, r3, r2
 2684 0630 0230A0E1 		mov	r3, r2
 2685 0634 0332A0E1 		mov	r3, r3, asl #4
 2686 0638 033062E0 		rsb	r3, r2, r3
 2687 063c 0332A0E1 		mov	r3, r3, asl #4
 2688 0640 0320A0E1 		mov	r2, r3
 2689 0644 68309FE5 		ldr	r3, .L40+16
 2690 0648 B030D3E1 		ldrh	r3, [r3, #0]
 2691 064c 0310A0E1 		mov	r1, r3
 2692 0650 58309FE5 		ldr	r3, .L40+12
 2693 0654 B030D3E1 		ldrh	r3, [r3, #0]
 2694 0658 013063E0 		rsb	r3, r3, r1
 2695 065c 0200A0E1 		mov	r0, r2
 2696 0660 0310A0E1 		mov	r1, r3
 2697 0664 FEFFFFEB 		bl	__aeabi_idiv
 2698 0668 0030A0E1 		mov	r3, r0
 2699 066c 0338A0E1 		mov	r3, r3, asl #16
 2700 0670 2328A0E1 		mov	r2, r3, lsr #16
 2701 0674 18301BE5 		ldr	r3, [fp, #-24]
 2702 0678 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 2703              	.L38:
 190:../ts.c       **** 
 191:../ts.c       ****     //Vy crece cuando y decrece
 192:../ts.c       ****     *y = LCD_HEIGHT - *y;
 2704              		.loc 1 192 0
 2705 067c 18301BE5 		ldr	r3, [fp, #-24]
 2706 0680 B030D3E1 		ldrh	r3, [r3, #0]
 2707 0684 F03063E2 		rsb	r3, r3, #240
 2708 0688 0338A0E1 		mov	r3, r3, asl #16
 2709 068c 2328A0E1 		mov	r2, r3, lsr #16
 2710 0690 18301BE5 		ldr	r3, [fp, #-24]
 2711 0694 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 193:../ts.c       **** }
 2712              		.loc 1 193 0
 2713 0698 0CD04BE2 		sub	sp, fp, #12
 2714 069c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2715 06a0 1EFF2FE1 		bx	lr
 2716              	.L41:
 2717              		.align	2
 2718              	.L40:
 2719 06a4 00000000 		.word	Vxmin
 2720 06a8 02000000 		.word	Vxmax
 2721 06ac 3F010000 		.word	319
 2722 06b0 04000000 		.word	Vymin
 2723 06b4 06000000 		.word	Vymax
 2724              		.cfi_endproc
 2725              	.LFE9:
 2727              		.align	2
 2728              		.global	ts_open
 2730              	ts_open:
 2731              	.LFB10:
 194:../ts.c       **** 
 195:../ts.c       **** void ts_open( void (*isr)(void) )
 196:../ts.c       **** {
 2732              		.loc 1 196 0
 2733              		.cfi_startproc
 2734              		@ Function supports interworking.
 2735              		@ args = 0, pretend = 0, frame = 8
 2736              		@ frame_needed = 1, uses_anonymous_args = 0
 2737 06b8 0DC0A0E1 		mov	ip, sp
 2738              	.LCFI20:
 2739              		.cfi_def_cfa_register 12
 2740 06bc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2741 06c0 04B04CE2 		sub	fp, ip, #4
 2742              		.cfi_offset 14, -8
 2743              		.cfi_offset 13, -12
 2744              		.cfi_offset 11, -16
 2745              	.LCFI21:
 2746              		.cfi_def_cfa 11, 4
 2747 06c4 08D04DE2 		sub	sp, sp, #8
 2748 06c8 10000BE5 		str	r0, [fp, #-16]
 197:../ts.c       **** 	pISR_EINT2 = (unsigned) isr;
 2749              		.loc 1 197 0
 2750 06cc 20309FE5 		ldr	r3, .L43
 2751 06d0 10201BE5 		ldr	r2, [fp, #-16]
 2752 06d4 002083E5 		str	r2, [r3, #0]
 198:../ts.c       **** 	ic_cleanflag(INT_EINT2);
 2753              		.loc 1 198 0
 2754 06d8 1700A0E3 		mov	r0, #23
 2755 06dc FEFFFFEB 		bl	ic_cleanflag
 199:../ts.c       **** 	ic_enable(INT_EINT2);
 2756              		.loc 1 199 0
 2757 06e0 1700A0E3 		mov	r0, #23
 2758 06e4 FEFFFFEB 		bl	ic_enable
 200:../ts.c       **** }
 2759              		.loc 1 200 0
 2760 06e8 0CD04BE2 		sub	sp, fp, #12
 2761 06ec 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2762 06f0 1EFF2FE1 		bx	lr
 2763              	.L44:
 2764              		.align	2
 2765              	.L43:
 2766 06f4 7CFF7F0C 		.word	209715068
 2767              		.cfi_endproc
 2768              	.LFE10:
 2770              		.align	2
 2771              		.global	ts_close
 2773              	ts_close:
 2774              	.LFB11:
 201:../ts.c       **** 
 202:../ts.c       **** void ts_close( void )
 203:../ts.c       **** {
 2775              		.loc 1 203 0
 2776              		.cfi_startproc
 2777              		@ Function supports interworking.
 2778              		@ args = 0, pretend = 0, frame = 0
 2779              		@ frame_needed = 1, uses_anonymous_args = 0
 2780 06f8 0DC0A0E1 		mov	ip, sp
 2781              	.LCFI22:
 2782              		.cfi_def_cfa_register 12
 2783 06fc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2784 0700 04B04CE2 		sub	fp, ip, #4
 2785              		.cfi_offset 14, -8
 2786              		.cfi_offset 13, -12
 2787              		.cfi_offset 11, -16
 2788              	.LCFI23:
 2789              		.cfi_def_cfa 11, 4
 204:../ts.c       ****     ic_disable(INT_EINT2);
 2790              		.loc 1 204 0
 2791 0704 1700A0E3 		mov	r0, #23
 2792 0708 FEFFFFEB 		bl	ic_disable
 205:../ts.c       ****     pISR_EINT2 = (unsigned) isr_TS_dummy;
 2793              		.loc 1 205 0
 2794 070c 10309FE5 		ldr	r3, .L46
 2795 0710 10209FE5 		ldr	r2, .L46+4
 2796 0714 002083E5 		str	r2, [r3, #0]
 206:../ts.c       **** }
 2797              		.loc 1 206 0
 2798 0718 0CD04BE2 		sub	sp, fp, #12
 2799 071c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2800 0720 1EFF2FE1 		bx	lr
 2801              	.L47:
 2802              		.align	2
 2803              	.L46:
 2804 0724 7CFF7F0C 		.word	209715068
 2805 0728 00000000 		.word	isr_TS_dummy
 2806              		.cfi_endproc
 2807              	.LFE11:
 2809              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 ts.c
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:1919   .bss:00000000 $d
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:1920   .bss:00000000 Vxmin
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:1923   .bss:00000002 Vxmax
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:1926   .bss:00000004 Vymin
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:1929   .bss:00000006 Vymax
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:1931   .bss:00000008 state
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:1934   .text:00000000 $a
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:1937   .text:00000000 isr_TS_dummy
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:1973   .text:00000028 ts_init
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:2044   .text:000000bc ts_on
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:2221   .text:00000178 ts_calibrate
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:2036   .text:000000b4 $d
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:2041   .text:000000bc $a
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:2074   .text:000000e4 $d
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:2078   .text:000000e8 $a
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:2081   .text:000000e8 ts_off
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:2111   .text:00000110 $d
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:2115   .text:00000114 $a
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:2118   .text:00000114 ts_status
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:2146   .text:00000138 $d
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:2150   .text:0000013c $a
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:2153   .text:0000013c ts_pressed
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:2186   .text:00000174 $d
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:2191   .rodata:00000000 $d
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:2219   .text:00000178 $a
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:2497   .text:0000043c ts_scan
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:2426   .text:000003a4 ts_getpos
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:2404   .text:00000364 $d
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:2423   .text:000003a4 $a
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:2584   .text:00000514 ts_sample2coord
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:2491   .text:00000438 $d
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:2495   .text:0000043c $a
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:2577   .text:00000510 $d
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:2582   .text:00000514 $a
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:2719   .text:000006a4 $d
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:2727   .text:000006b8 $a
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:2730   .text:000006b8 ts_open
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:2766   .text:000006f4 $d
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:2770   .text:000006f8 $a
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:2773   .text:000006f8 ts_close
C:\Users\Pedro\AppData\Local\Temp\ccGAXFBY.s:2804   .text:00000724 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
ic_cleanflag
lcd_init
adc_init
Delay
portG_conf
adc_on
adc_off
uart0_puts
lcd_on
lcd_clear_color
lcd_draw_box
uart0_putint
lcd_clear
adc_getSample
__aeabi_idiv
ic_enable
ic_disable

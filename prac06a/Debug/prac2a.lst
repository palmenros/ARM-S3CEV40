
prac2a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001168  0c100000  0c100000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .bss          0000961c  0c101168  0c101168  00009168  2**2
                  ALLOC
  2 .text         0000409c  0c10a784  0c10a784  0000a784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .debug_abbrev 000009c0  00000000  00000000  0000e820  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001cfd  00000000  00000000  0000f1e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000d62  00000000  00000000  00010edd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_macinfo 0003ec3d  00000000  00000000  00011c3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00000dec  00000000  00000000  0005087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000005e6  00000000  00000000  00051668  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubtypes 000002ae  00000000  00000000  00051c4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000001a0  00000000  00000000  00051f00  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000007bb  00000000  00000000  000520a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      0000002a  00000000  00000000  0005285b  2**0
                  CONTENTS, READONLY
 13 .ARM.attributes 00000030  00000000  00000000  00052885  2**0
                  CONTENTS, READONLY
 14 .debug_frame  00000b58  00000000  00000000  000528b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0c10a784 <D8Led_init>:
	 							 DIGIT_4, DIGIT_5, DIGIT_6, DIGIT_7, 
								 DIGIT_8, DIGIT_9, DIGIT_A, DIGIT_B,
								 DIGIT_C, DIGIT_D, DIGIT_E, DIGIT_F };
			  					  
void D8Led_init(void)
{
 c10a784:	e1a0c00d 	mov	ip, sp
 c10a788:	e92dd800 	push	{fp, ip, lr, pc}
 c10a78c:	e24cb004 	sub	fp, ip, #4
    LED8ADDR = ~0 ;
 c10a790:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10a794:	e3e02000 	mvn	r2, #0
 c10a798:	e5c32000 	strb	r2, [r3]
}
 c10a79c:	e24bd00c 	sub	sp, fp, #12
 c10a7a0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10a7a4:	e12fff1e 	bx	lr

0c10a7a8 <D8Led_segment>:

void D8Led_segment(int value)
{
 c10a7a8:	e1a0c00d 	mov	ip, sp
 c10a7ac:	e92dd800 	push	{fp, ip, lr, pc}
 c10a7b0:	e24cb004 	sub	fp, ip, #4
 c10a7b4:	e24dd008 	sub	sp, sp, #8
 c10a7b8:	e50b0010 	str	r0, [fp, #-16]
	if( (value >= 0) && (value < 8) )
 c10a7bc:	e51b3010 	ldr	r3, [fp, #-16]
 c10a7c0:	e3530000 	cmp	r3, #0
 c10a7c4:	ba00000a 	blt	c10a7f4 <D8Led_segment+0x4c>
 c10a7c8:	e51b3010 	ldr	r3, [fp, #-16]
 c10a7cc:	e3530007 	cmp	r3, #7
 c10a7d0:	ca000007 	bgt	c10a7f4 <D8Led_segment+0x4c>
		// COMPLETAR: debemos escribir en el display (LED8ADDR) el valor
		// correcto para que se ilumine el segmento que está en la posición
		// value del array Segmentes. Hay que tener en cuente que el display
		// usa lógica invertida (0 enciende, 1 apaga).
		LED8ADDR = ~Segments[value];
 c10a7d4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10a7d8:	e59f2020 	ldr	r2, [pc, #32]	; c10a800 <D8Led_segment+0x58>
 c10a7dc:	e51b1010 	ldr	r1, [fp, #-16]
 c10a7e0:	e7922101 	ldr	r2, [r2, r1, lsl #2]
 c10a7e4:	e20220ff 	and	r2, r2, #255	; 0xff
 c10a7e8:	e1e02002 	mvn	r2, r2
 c10a7ec:	e20220ff 	and	r2, r2, #255	; 0xff
 c10a7f0:	e5c32000 	strb	r2, [r3]
}
 c10a7f4:	e24bd00c 	sub	sp, fp, #12
 c10a7f8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10a7fc:	e12fff1e 	bx	lr
 c10a800:	0c100000 	.word	0x0c100000

0c10a804 <D8Led_digit>:

void D8Led_digit(int value)
{
 c10a804:	e1a0c00d 	mov	ip, sp
 c10a808:	e92dd800 	push	{fp, ip, lr, pc}
 c10a80c:	e24cb004 	sub	fp, ip, #4
 c10a810:	e24dd008 	sub	sp, sp, #8
 c10a814:	e50b0010 	str	r0, [fp, #-16]
	if( (value >= 0) && (value < 16) )
 c10a818:	e51b3010 	ldr	r3, [fp, #-16]
 c10a81c:	e3530000 	cmp	r3, #0
 c10a820:	ba00000a 	blt	c10a850 <D8Led_digit+0x4c>
 c10a824:	e51b3010 	ldr	r3, [fp, #-16]
 c10a828:	e353000f 	cmp	r3, #15
 c10a82c:	ca000007 	bgt	c10a850 <D8Led_digit+0x4c>
		// COMPLETAR: debemos escribir en el display (LED8ADDR) el valor
		// correcto para que se ilumine el dígito que está en la posición
		// value del array Digits. Hay que tener en cuente que el display
		// usa lógica invertida (0 enciende, 1 apaga).
		LED8ADDR = ~Digits[value];
 c10a830:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10a834:	e59f2020 	ldr	r2, [pc, #32]	; c10a85c <D8Led_digit+0x58>
 c10a838:	e51b1010 	ldr	r1, [fp, #-16]
 c10a83c:	e7922101 	ldr	r2, [r2, r1, lsl #2]
 c10a840:	e20220ff 	and	r2, r2, #255	; 0xff
 c10a844:	e1e02002 	mvn	r2, r2
 c10a848:	e20220ff 	and	r2, r2, #255	; 0xff
 c10a84c:	e5c32000 	strb	r2, [r3]
}
 c10a850:	e24bd00c 	sub	sp, fp, #12
 c10a854:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10a858:	e12fff1e 	bx	lr
 c10a85c:	0c100020 	.word	0x0c100020

0c10a860 <read_button>:
#include "button.h"
#include "leds.h"
#include "gpio.h"

unsigned int read_button(void)
{
 c10a860:	e1a0c00d 	mov	ip, sp
 c10a864:	e92dd800 	push	{fp, ip, lr, pc}
 c10a868:	e24cb004 	sub	fp, ip, #4
 c10a86c:	e24dd008 	sub	sp, sp, #8
	unsigned int buttons = 0;
 c10a870:	e3a03000 	mov	r3, #0
 c10a874:	e50b3010 	str	r3, [fp, #-16]
	//pines 6 y 7 del puerto G (portG_read) debemos devolver un valor (buttons)
	//en el que el bit 0 (el menos significativo) representa el estado del botÃ³n
	//del pin 6 y el bit 1 representa el estado del botÃ³n del pin 7 (a 1 si
	//estÃ¡n pulsados a 0 si no lo estÃ¡n).

	portG_read(6, &val);
 c10a878:	e24b3011 	sub	r3, fp, #17
 c10a87c:	e3a00006 	mov	r0, #6
 c10a880:	e1a01003 	mov	r1, r3
 c10a884:	eb0001d7 	bl	c10afe8 <portG_read>
	if(!val)
 c10a888:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10a88c:	e3530000 	cmp	r3, #0
 c10a890:	1a000002 	bne	c10a8a0 <read_button+0x40>
		buttons |= BUT1;
 c10a894:	e51b3010 	ldr	r3, [fp, #-16]
 c10a898:	e3833001 	orr	r3, r3, #1
 c10a89c:	e50b3010 	str	r3, [fp, #-16]

	portG_read(7, &val);
 c10a8a0:	e24b3011 	sub	r3, fp, #17
 c10a8a4:	e3a00007 	mov	r0, #7
 c10a8a8:	e1a01003 	mov	r1, r3
 c10a8ac:	eb0001cd 	bl	c10afe8 <portG_read>
	if(!val)
 c10a8b0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10a8b4:	e3530000 	cmp	r3, #0
 c10a8b8:	1a000002 	bne	c10a8c8 <read_button+0x68>
		buttons |= BUT2;
 c10a8bc:	e51b3010 	ldr	r3, [fp, #-16]
 c10a8c0:	e3833002 	orr	r3, r3, #2
 c10a8c4:	e50b3010 	str	r3, [fp, #-16]

	return buttons;
 c10a8c8:	e51b3010 	ldr	r3, [fp, #-16]
}
 c10a8cc:	e1a00003 	mov	r0, r3
 c10a8d0:	e24bd00c 	sub	sp, fp, #12
 c10a8d4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10a8d8:	e12fff1e 	bx	lr

0c10a8dc <portB_conf>:
#include "gpio.h"

/* Port B interface implementation */

int portB_conf(int pin, enum port_mode mode)
{
 c10a8dc:	e1a0c00d 	mov	ip, sp
 c10a8e0:	e92dd800 	push	{fp, ip, lr, pc}
 c10a8e4:	e24cb004 	sub	fp, ip, #4
 c10a8e8:	e24dd010 	sub	sp, sp, #16
 c10a8ec:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c10a8f0:	e1a03001 	mov	r3, r1
 c10a8f4:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
	int ret = 0;
 c10a8f8:	e3a03000 	mov	r3, #0
 c10a8fc:	e50b3010 	str	r3, [fp, #-16]
	if (pin < 0 || pin > 10)
 c10a900:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10a904:	e3530000 	cmp	r3, #0
 c10a908:	ba000002 	blt	c10a918 <portB_conf+0x3c>
 c10a90c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10a910:	e353000a 	cmp	r3, #10
 c10a914:	da000001 	ble	c10a920 <portB_conf+0x44>
		return -1; // indica error
 c10a918:	e3e03000 	mvn	r3, #0
 c10a91c:	ea00001b 	b	c10a990 <portB_conf+0xb4>

	if (mode == SIGOUT)
 c10a920:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c10a924:	e3530002 	cmp	r3, #2
 c10a928:	1a000008 	bne	c10a950 <portB_conf+0x74>
		// COMPLETAR: poner en rPCONB el bit indicado por pin a 1 para que por
		// dicho pin en el puerto B salga la seÃ±al correspondiente del
		// controlador de memoria
		rPCONB |= 1 << pin;
 c10a92c:	e59f306c 	ldr	r3, [pc, #108]	; c10a9a0 <portB_conf+0xc4>
 c10a930:	e59f2068 	ldr	r2, [pc, #104]	; c10a9a0 <portB_conf+0xc4>
 c10a934:	e5921000 	ldr	r1, [r2]
 c10a938:	e3a00001 	mov	r0, #1
 c10a93c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c10a940:	e1a02210 	lsl	r2, r0, r2
 c10a944:	e1812002 	orr	r2, r1, r2
 c10a948:	e5832000 	str	r2, [r3]
 c10a94c:	ea00000e 	b	c10a98c <portB_conf+0xb0>
	else if (mode == OUTPUT)
 c10a950:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c10a954:	e3530001 	cmp	r3, #1
 c10a958:	1a000009 	bne	c10a984 <portB_conf+0xa8>
		// COMPLETAR: poner en rPCONB el bit indicado por pin a 0 para que dicho
		// pin sea un pin de salida
		rPCONB &= ~(1 << pin);
 c10a95c:	e59f303c 	ldr	r3, [pc, #60]	; c10a9a0 <portB_conf+0xc4>
 c10a960:	e59f2038 	ldr	r2, [pc, #56]	; c10a9a0 <portB_conf+0xc4>
 c10a964:	e5921000 	ldr	r1, [r2]
 c10a968:	e3a00001 	mov	r0, #1
 c10a96c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c10a970:	e1a02210 	lsl	r2, r0, r2
 c10a974:	e1e02002 	mvn	r2, r2
 c10a978:	e0012002 	and	r2, r1, r2
 c10a97c:	e5832000 	str	r2, [r3]
 c10a980:	ea000001 	b	c10a98c <portB_conf+0xb0>
	else
		ret = -1; // indica error
 c10a984:	e3e03000 	mvn	r3, #0
 c10a988:	e50b3010 	str	r3, [fp, #-16]

	return ret;
 c10a98c:	e51b3010 	ldr	r3, [fp, #-16]
}
 c10a990:	e1a00003 	mov	r0, r3
 c10a994:	e24bd00c 	sub	sp, fp, #12
 c10a998:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10a99c:	e12fff1e 	bx	lr
 c10a9a0:	01d20008 	.word	0x01d20008

0c10a9a4 <portB_write>:

int portB_write(int pin, enum digital val)
{
 c10a9a4:	e1a0c00d 	mov	ip, sp
 c10a9a8:	e92dd800 	push	{fp, ip, lr, pc}
 c10a9ac:	e24cb004 	sub	fp, ip, #4
 c10a9b0:	e24dd008 	sub	sp, sp, #8
 c10a9b4:	e50b0010 	str	r0, [fp, #-16]
 c10a9b8:	e1a03001 	mov	r3, r1
 c10a9bc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	if (pin < 0 || pin > 10)
 c10a9c0:	e51b3010 	ldr	r3, [fp, #-16]
 c10a9c4:	e3530000 	cmp	r3, #0
 c10a9c8:	ba000002 	blt	c10a9d8 <portB_write+0x34>
 c10a9cc:	e51b3010 	ldr	r3, [fp, #-16]
 c10a9d0:	e353000a 	cmp	r3, #10
 c10a9d4:	da000001 	ble	c10a9e0 <portB_write+0x3c>
		return -1; // indica error
 c10a9d8:	e3e03000 	mvn	r3, #0
 c10a9dc:	ea00001a 	b	c10aa4c <portB_write+0xa8>

	if (val < 0 || val > 1)
 c10a9e0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10a9e4:	e3530001 	cmp	r3, #1
 c10a9e8:	9a000001 	bls	c10a9f4 <portB_write+0x50>
		return -1; // indica error
 c10a9ec:	e3e03000 	mvn	r3, #0
 c10a9f0:	ea000015 	b	c10aa4c <portB_write+0xa8>

	if (val)
 c10a9f4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10a9f8:	e3530000 	cmp	r3, #0
 c10a9fc:	0a000008 	beq	c10aa24 <portB_write+0x80>
		// COMPLETAR: poner en rPDATB el bit indicado por pin a 1
		rPDATB |= 1 << pin;
 c10aa00:	e59f3054 	ldr	r3, [pc, #84]	; c10aa5c <portB_write+0xb8>
 c10aa04:	e59f2050 	ldr	r2, [pc, #80]	; c10aa5c <portB_write+0xb8>
 c10aa08:	e5921000 	ldr	r1, [r2]
 c10aa0c:	e3a00001 	mov	r0, #1
 c10aa10:	e51b2010 	ldr	r2, [fp, #-16]
 c10aa14:	e1a02210 	lsl	r2, r0, r2
 c10aa18:	e1812002 	orr	r2, r1, r2
 c10aa1c:	e5832000 	str	r2, [r3]
 c10aa20:	ea000008 	b	c10aa48 <portB_write+0xa4>
	else
		// COMPLETAR: poner en rPDATB el bit indicado por pin a 0
		rPDATB &= ~(1 << pin);
 c10aa24:	e59f3030 	ldr	r3, [pc, #48]	; c10aa5c <portB_write+0xb8>
 c10aa28:	e59f202c 	ldr	r2, [pc, #44]	; c10aa5c <portB_write+0xb8>
 c10aa2c:	e5921000 	ldr	r1, [r2]
 c10aa30:	e3a00001 	mov	r0, #1
 c10aa34:	e51b2010 	ldr	r2, [fp, #-16]
 c10aa38:	e1a02210 	lsl	r2, r0, r2
 c10aa3c:	e1e02002 	mvn	r2, r2
 c10aa40:	e0012002 	and	r2, r1, r2
 c10aa44:	e5832000 	str	r2, [r3]

	return 0;
 c10aa48:	e3a03000 	mov	r3, #0
}
 c10aa4c:	e1a00003 	mov	r0, r3
 c10aa50:	e24bd00c 	sub	sp, fp, #12
 c10aa54:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10aa58:	e12fff1e 	bx	lr
 c10aa5c:	01d2000c 	.word	0x01d2000c

0c10aa60 <portG_conf>:

/* Port G interface implementation */

int portG_conf(int pin, enum port_mode mode)
{
 c10aa60:	e1a0c00d 	mov	ip, sp
 c10aa64:	e92dd800 	push	{fp, ip, lr, pc}
 c10aa68:	e24cb004 	sub	fp, ip, #4
 c10aa6c:	e24dd010 	sub	sp, sp, #16
 c10aa70:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c10aa74:	e1a03001 	mov	r3, r1
 c10aa78:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
	int pos  = pin*2;
 c10aa7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10aa80:	e1a03083 	lsl	r3, r3, #1
 c10aa84:	e50b3010 	str	r3, [fp, #-16]

	if (pin < 0 || pin > 7)
 c10aa88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10aa8c:	e3530000 	cmp	r3, #0
 c10aa90:	ba000002 	blt	c10aaa0 <portG_conf+0x40>
 c10aa94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10aa98:	e3530007 	cmp	r3, #7
 c10aa9c:	da000001 	ble	c10aaa8 <portG_conf+0x48>
		return -1; // indica error
 c10aaa0:	e3e03000 	mvn	r3, #0
 c10aaa4:	ea000056 	b	c10ac04 <portG_conf+0x1a4>

	switch (mode) {
 c10aaa8:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c10aaac:	e3530003 	cmp	r3, #3
 c10aab0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 c10aab4:	ea00004f 	b	c10abf8 <portG_conf+0x198>
 c10aab8:	0c10aac8 	.word	0x0c10aac8
 c10aabc:	0c10ab18 	.word	0x0c10ab18
 c10aac0:	0c10ab64 	.word	0x0c10ab64
 c10aac4:	0c10abb0 	.word	0x0c10abb0
		case INPUT:
			// COMPLETAR: poner en rPCONG 00 a partir de la posiciÃ³n pos para
			// configurar como pin de entrada el pin indicado por el parÃ¡metro pin
			rPCONG &= ~(1 << pos);  	 // 0
 c10aac8:	e59f3144 	ldr	r3, [pc, #324]	; c10ac14 <portG_conf+0x1b4>
 c10aacc:	e59f2140 	ldr	r2, [pc, #320]	; c10ac14 <portG_conf+0x1b4>
 c10aad0:	e5921000 	ldr	r1, [r2]
 c10aad4:	e3a00001 	mov	r0, #1
 c10aad8:	e51b2010 	ldr	r2, [fp, #-16]
 c10aadc:	e1a02210 	lsl	r2, r0, r2
 c10aae0:	e1e02002 	mvn	r2, r2
 c10aae4:	e0012002 	and	r2, r1, r2
 c10aae8:	e5832000 	str	r2, [r3]
			rPCONG &= ~(1 << (pos + 1)); // 0
 c10aaec:	e59f3120 	ldr	r3, [pc, #288]	; c10ac14 <portG_conf+0x1b4>
 c10aaf0:	e59f211c 	ldr	r2, [pc, #284]	; c10ac14 <portG_conf+0x1b4>
 c10aaf4:	e5921000 	ldr	r1, [r2]
 c10aaf8:	e51b2010 	ldr	r2, [fp, #-16]
 c10aafc:	e2822001 	add	r2, r2, #1
 c10ab00:	e3a00001 	mov	r0, #1
 c10ab04:	e1a02210 	lsl	r2, r0, r2
 c10ab08:	e1e02002 	mvn	r2, r2
 c10ab0c:	e0012002 	and	r2, r1, r2
 c10ab10:	e5832000 	str	r2, [r3]
			break;
 c10ab14:	ea000039 	b	c10ac00 <portG_conf+0x1a0>
		case OUTPUT:
			// COMPLETAR: poner en rPCONG 01 a partir de la posiciÃ³n pos para
			// configurar como pin de salida el pin indicado por el parÃ¡metro pin
			rPCONG |= 1 << pos;			 // 1
 c10ab18:	e59f30f4 	ldr	r3, [pc, #244]	; c10ac14 <portG_conf+0x1b4>
 c10ab1c:	e59f20f0 	ldr	r2, [pc, #240]	; c10ac14 <portG_conf+0x1b4>
 c10ab20:	e5921000 	ldr	r1, [r2]
 c10ab24:	e3a00001 	mov	r0, #1
 c10ab28:	e51b2010 	ldr	r2, [fp, #-16]
 c10ab2c:	e1a02210 	lsl	r2, r0, r2
 c10ab30:	e1812002 	orr	r2, r1, r2
 c10ab34:	e5832000 	str	r2, [r3]
			rPCONG &= ~(1 << (pos + 1)); // 0
 c10ab38:	e59f30d4 	ldr	r3, [pc, #212]	; c10ac14 <portG_conf+0x1b4>
 c10ab3c:	e59f20d0 	ldr	r2, [pc, #208]	; c10ac14 <portG_conf+0x1b4>
 c10ab40:	e5921000 	ldr	r1, [r2]
 c10ab44:	e51b2010 	ldr	r2, [fp, #-16]
 c10ab48:	e2822001 	add	r2, r2, #1
 c10ab4c:	e3a00001 	mov	r0, #1
 c10ab50:	e1a02210 	lsl	r2, r0, r2
 c10ab54:	e1e02002 	mvn	r2, r2
 c10ab58:	e0012002 	and	r2, r1, r2
 c10ab5c:	e5832000 	str	r2, [r3]
			break;
 c10ab60:	ea000026 	b	c10ac00 <portG_conf+0x1a0>
		case SIGOUT:
			// COMPLETAR: poner en rPCONG 10 a partir de la posiciÃ³n pos para
			// que salga la seÃ±al interna correspondiente por el pin indicado
			// por el parÃ¡metro pin
			rPCONG &= ~(1 << pos); 		// 0
 c10ab64:	e59f30a8 	ldr	r3, [pc, #168]	; c10ac14 <portG_conf+0x1b4>
 c10ab68:	e59f20a4 	ldr	r2, [pc, #164]	; c10ac14 <portG_conf+0x1b4>
 c10ab6c:	e5921000 	ldr	r1, [r2]
 c10ab70:	e3a00001 	mov	r0, #1
 c10ab74:	e51b2010 	ldr	r2, [fp, #-16]
 c10ab78:	e1a02210 	lsl	r2, r0, r2
 c10ab7c:	e1e02002 	mvn	r2, r2
 c10ab80:	e0012002 	and	r2, r1, r2
 c10ab84:	e5832000 	str	r2, [r3]
			rPCONG |= 1 << (pos + 1);	// 1
 c10ab88:	e59f3084 	ldr	r3, [pc, #132]	; c10ac14 <portG_conf+0x1b4>
 c10ab8c:	e59f2080 	ldr	r2, [pc, #128]	; c10ac14 <portG_conf+0x1b4>
 c10ab90:	e5921000 	ldr	r1, [r2]
 c10ab94:	e51b2010 	ldr	r2, [fp, #-16]
 c10ab98:	e2822001 	add	r2, r2, #1
 c10ab9c:	e3a00001 	mov	r0, #1
 c10aba0:	e1a02210 	lsl	r2, r0, r2
 c10aba4:	e1812002 	orr	r2, r1, r2
 c10aba8:	e5832000 	str	r2, [r3]
			break;
 c10abac:	ea000013 	b	c10ac00 <portG_conf+0x1a0>
		case EINT:
			// COMPLETAR: poner en rPCONG 11 a partir de la posiciÃ³n pos para
			// habilitar la generaciÃ³n de interrupciones externas por el pin
			// indicado por el parÃ¡metro pin
			rPCONG |= 1 << pos;			// 1
 c10abb0:	e59f305c 	ldr	r3, [pc, #92]	; c10ac14 <portG_conf+0x1b4>
 c10abb4:	e59f2058 	ldr	r2, [pc, #88]	; c10ac14 <portG_conf+0x1b4>
 c10abb8:	e5921000 	ldr	r1, [r2]
 c10abbc:	e3a00001 	mov	r0, #1
 c10abc0:	e51b2010 	ldr	r2, [fp, #-16]
 c10abc4:	e1a02210 	lsl	r2, r0, r2
 c10abc8:	e1812002 	orr	r2, r1, r2
 c10abcc:	e5832000 	str	r2, [r3]
			rPCONG |= 1 << (pos + 1);	// 1
 c10abd0:	e59f303c 	ldr	r3, [pc, #60]	; c10ac14 <portG_conf+0x1b4>
 c10abd4:	e59f2038 	ldr	r2, [pc, #56]	; c10ac14 <portG_conf+0x1b4>
 c10abd8:	e5921000 	ldr	r1, [r2]
 c10abdc:	e51b2010 	ldr	r2, [fp, #-16]
 c10abe0:	e2822001 	add	r2, r2, #1
 c10abe4:	e3a00001 	mov	r0, #1
 c10abe8:	e1a02210 	lsl	r2, r0, r2
 c10abec:	e1812002 	orr	r2, r1, r2
 c10abf0:	e5832000 	str	r2, [r3]
			break;
 c10abf4:	ea000001 	b	c10ac00 <portG_conf+0x1a0>
		default:
			return -1;
 c10abf8:	e3e03000 	mvn	r3, #0
 c10abfc:	ea000000 	b	c10ac04 <portG_conf+0x1a4>
	}

	return 0;
 c10ac00:	e3a03000 	mov	r3, #0
}
 c10ac04:	e1a00003 	mov	r0, r3
 c10ac08:	e24bd00c 	sub	sp, fp, #12
 c10ac0c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10ac10:	e12fff1e 	bx	lr
 c10ac14:	01d20040 	.word	0x01d20040

0c10ac18 <portG_eint_trig>:

int portG_eint_trig(int pin, enum trigger trig)
{
 c10ac18:	e1a0c00d 	mov	ip, sp
 c10ac1c:	e92dd800 	push	{fp, ip, lr, pc}
 c10ac20:	e24cb004 	sub	fp, ip, #4
 c10ac24:	e24dd010 	sub	sp, sp, #16
 c10ac28:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c10ac2c:	e1a03001 	mov	r3, r1
 c10ac30:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
	int pos = pin*4;
 c10ac34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10ac38:	e1a03103 	lsl	r3, r3, #2
 c10ac3c:	e50b3010 	str	r3, [fp, #-16]

	if (pin < 0 || pin > 7)
 c10ac40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10ac44:	e3530000 	cmp	r3, #0
 c10ac48:	ba000002 	blt	c10ac58 <portG_eint_trig+0x40>
 c10ac4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10ac50:	e3530007 	cmp	r3, #7
 c10ac54:	da000001 	ble	c10ac60 <portG_eint_trig+0x48>
		return -1;
 c10ac58:	e3e03000 	mvn	r3, #0
 c10ac5c:	ea00009c 	b	c10aed4 <portG_eint_trig+0x2bc>

switch (trig) {
 c10ac60:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c10ac64:	e3530004 	cmp	r3, #4
 c10ac68:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 c10ac6c:	ea000095 	b	c10aec8 <portG_eint_trig+0x2b0>
 c10ac70:	0c10ac84 	.word	0x0c10ac84
 c10ac74:	0c10acfc 	.word	0x0c10acfc
 c10ac78:	0c10ad70 	.word	0x0c10ad70
 c10ac7c:	0c10ade4 	.word	0x0c10ade4
 c10ac80:	0c10ae58 	.word	0x0c10ae58
		case LLOW:
			// COMPLETAR: poner en rEXTINT a partir de la posiciÃ³n pos tres bits
			// a 000, para configurar interrupciones externas por nivel bajo
			rEXTINT &= ~(1 << pos);	 		// 0
 c10ac84:	e59f3258 	ldr	r3, [pc, #600]	; c10aee4 <portG_eint_trig+0x2cc>
 c10ac88:	e59f2254 	ldr	r2, [pc, #596]	; c10aee4 <portG_eint_trig+0x2cc>
 c10ac8c:	e5921000 	ldr	r1, [r2]
 c10ac90:	e3a00001 	mov	r0, #1
 c10ac94:	e51b2010 	ldr	r2, [fp, #-16]
 c10ac98:	e1a02210 	lsl	r2, r0, r2
 c10ac9c:	e1e02002 	mvn	r2, r2
 c10aca0:	e0012002 	and	r2, r1, r2
 c10aca4:	e5832000 	str	r2, [r3]
			rEXTINT &= ~(1 << (pos + 1));	// 0
 c10aca8:	e59f3234 	ldr	r3, [pc, #564]	; c10aee4 <portG_eint_trig+0x2cc>
 c10acac:	e59f2230 	ldr	r2, [pc, #560]	; c10aee4 <portG_eint_trig+0x2cc>
 c10acb0:	e5921000 	ldr	r1, [r2]
 c10acb4:	e51b2010 	ldr	r2, [fp, #-16]
 c10acb8:	e2822001 	add	r2, r2, #1
 c10acbc:	e3a00001 	mov	r0, #1
 c10acc0:	e1a02210 	lsl	r2, r0, r2
 c10acc4:	e1e02002 	mvn	r2, r2
 c10acc8:	e0012002 	and	r2, r1, r2
 c10accc:	e5832000 	str	r2, [r3]
			rEXTINT &= ~(1 << (pos + 2));	// 0
 c10acd0:	e59f320c 	ldr	r3, [pc, #524]	; c10aee4 <portG_eint_trig+0x2cc>
 c10acd4:	e59f2208 	ldr	r2, [pc, #520]	; c10aee4 <portG_eint_trig+0x2cc>
 c10acd8:	e5921000 	ldr	r1, [r2]
 c10acdc:	e51b2010 	ldr	r2, [fp, #-16]
 c10ace0:	e2822002 	add	r2, r2, #2
 c10ace4:	e3a00001 	mov	r0, #1
 c10ace8:	e1a02210 	lsl	r2, r0, r2
 c10acec:	e1e02002 	mvn	r2, r2
 c10acf0:	e0012002 	and	r2, r1, r2
 c10acf4:	e5832000 	str	r2, [r3]
			break;
 c10acf8:	ea000074 	b	c10aed0 <portG_eint_trig+0x2b8>
		case LHIGH:
			// COMPLETAR: poner en rEXTINT a partir de la posiciÃ³n pos tres bits
			// a 001, para configurar interrupciones externas por nivel alto
			rEXTINT |= 1 << pos;	 		// 1
 c10acfc:	e59f31e0 	ldr	r3, [pc, #480]	; c10aee4 <portG_eint_trig+0x2cc>
 c10ad00:	e59f21dc 	ldr	r2, [pc, #476]	; c10aee4 <portG_eint_trig+0x2cc>
 c10ad04:	e5921000 	ldr	r1, [r2]
 c10ad08:	e3a00001 	mov	r0, #1
 c10ad0c:	e51b2010 	ldr	r2, [fp, #-16]
 c10ad10:	e1a02210 	lsl	r2, r0, r2
 c10ad14:	e1812002 	orr	r2, r1, r2
 c10ad18:	e5832000 	str	r2, [r3]
			rEXTINT &= ~(1 << (pos + 1));	// 0
 c10ad1c:	e59f31c0 	ldr	r3, [pc, #448]	; c10aee4 <portG_eint_trig+0x2cc>
 c10ad20:	e59f21bc 	ldr	r2, [pc, #444]	; c10aee4 <portG_eint_trig+0x2cc>
 c10ad24:	e5921000 	ldr	r1, [r2]
 c10ad28:	e51b2010 	ldr	r2, [fp, #-16]
 c10ad2c:	e2822001 	add	r2, r2, #1
 c10ad30:	e3a00001 	mov	r0, #1
 c10ad34:	e1a02210 	lsl	r2, r0, r2
 c10ad38:	e1e02002 	mvn	r2, r2
 c10ad3c:	e0012002 	and	r2, r1, r2
 c10ad40:	e5832000 	str	r2, [r3]
			rEXTINT &= ~(1 << (pos + 2));	// 0
 c10ad44:	e59f3198 	ldr	r3, [pc, #408]	; c10aee4 <portG_eint_trig+0x2cc>
 c10ad48:	e59f2194 	ldr	r2, [pc, #404]	; c10aee4 <portG_eint_trig+0x2cc>
 c10ad4c:	e5921000 	ldr	r1, [r2]
 c10ad50:	e51b2010 	ldr	r2, [fp, #-16]
 c10ad54:	e2822002 	add	r2, r2, #2
 c10ad58:	e3a00001 	mov	r0, #1
 c10ad5c:	e1a02210 	lsl	r2, r0, r2
 c10ad60:	e1e02002 	mvn	r2, r2
 c10ad64:	e0012002 	and	r2, r1, r2
 c10ad68:	e5832000 	str	r2, [r3]
			break;
 c10ad6c:	ea000057 	b	c10aed0 <portG_eint_trig+0x2b8>
		case FALLING:
			// COMPLETAR: poner en rEXTINT a partir de la posiciÃ³n pos tres bits
			// a 010, para configurar interrupciones externas por flanco de
			// bajada
			rEXTINT &= ~(1 << pos);	 		// 0
 c10ad70:	e59f316c 	ldr	r3, [pc, #364]	; c10aee4 <portG_eint_trig+0x2cc>
 c10ad74:	e59f2168 	ldr	r2, [pc, #360]	; c10aee4 <portG_eint_trig+0x2cc>
 c10ad78:	e5921000 	ldr	r1, [r2]
 c10ad7c:	e3a00001 	mov	r0, #1
 c10ad80:	e51b2010 	ldr	r2, [fp, #-16]
 c10ad84:	e1a02210 	lsl	r2, r0, r2
 c10ad88:	e1e02002 	mvn	r2, r2
 c10ad8c:	e0012002 	and	r2, r1, r2
 c10ad90:	e5832000 	str	r2, [r3]
			rEXTINT |= 1 << (pos + 1);	 	// 1
 c10ad94:	e59f3148 	ldr	r3, [pc, #328]	; c10aee4 <portG_eint_trig+0x2cc>
 c10ad98:	e59f2144 	ldr	r2, [pc, #324]	; c10aee4 <portG_eint_trig+0x2cc>
 c10ad9c:	e5921000 	ldr	r1, [r2]
 c10ada0:	e51b2010 	ldr	r2, [fp, #-16]
 c10ada4:	e2822001 	add	r2, r2, #1
 c10ada8:	e3a00001 	mov	r0, #1
 c10adac:	e1a02210 	lsl	r2, r0, r2
 c10adb0:	e1812002 	orr	r2, r1, r2
 c10adb4:	e5832000 	str	r2, [r3]
			rEXTINT &= ~(1 << (pos + 2));	// 0
 c10adb8:	e59f3124 	ldr	r3, [pc, #292]	; c10aee4 <portG_eint_trig+0x2cc>
 c10adbc:	e59f2120 	ldr	r2, [pc, #288]	; c10aee4 <portG_eint_trig+0x2cc>
 c10adc0:	e5921000 	ldr	r1, [r2]
 c10adc4:	e51b2010 	ldr	r2, [fp, #-16]
 c10adc8:	e2822002 	add	r2, r2, #2
 c10adcc:	e3a00001 	mov	r0, #1
 c10add0:	e1a02210 	lsl	r2, r0, r2
 c10add4:	e1e02002 	mvn	r2, r2
 c10add8:	e0012002 	and	r2, r1, r2
 c10addc:	e5832000 	str	r2, [r3]
			break;
 c10ade0:	ea00003a 	b	c10aed0 <portG_eint_trig+0x2b8>
		case RISING:
			// COMPLETAR: poner en rEXTINT a partir de la posiciÃ³n pos tres bits
			// a 100, para configurar interrupciones externas por flanco de
			// subida
			rEXTINT &= ~(1 << pos);	 		// 0
 c10ade4:	e59f30f8 	ldr	r3, [pc, #248]	; c10aee4 <portG_eint_trig+0x2cc>
 c10ade8:	e59f20f4 	ldr	r2, [pc, #244]	; c10aee4 <portG_eint_trig+0x2cc>
 c10adec:	e5921000 	ldr	r1, [r2]
 c10adf0:	e3a00001 	mov	r0, #1
 c10adf4:	e51b2010 	ldr	r2, [fp, #-16]
 c10adf8:	e1a02210 	lsl	r2, r0, r2
 c10adfc:	e1e02002 	mvn	r2, r2
 c10ae00:	e0012002 	and	r2, r1, r2
 c10ae04:	e5832000 	str	r2, [r3]
			rEXTINT &= ~(1 << (pos + 1));	// 0
 c10ae08:	e59f30d4 	ldr	r3, [pc, #212]	; c10aee4 <portG_eint_trig+0x2cc>
 c10ae0c:	e59f20d0 	ldr	r2, [pc, #208]	; c10aee4 <portG_eint_trig+0x2cc>
 c10ae10:	e5921000 	ldr	r1, [r2]
 c10ae14:	e51b2010 	ldr	r2, [fp, #-16]
 c10ae18:	e2822001 	add	r2, r2, #1
 c10ae1c:	e3a00001 	mov	r0, #1
 c10ae20:	e1a02210 	lsl	r2, r0, r2
 c10ae24:	e1e02002 	mvn	r2, r2
 c10ae28:	e0012002 	and	r2, r1, r2
 c10ae2c:	e5832000 	str	r2, [r3]
			rEXTINT |= 1 << (pos + 2);	 	// 1
 c10ae30:	e59f30ac 	ldr	r3, [pc, #172]	; c10aee4 <portG_eint_trig+0x2cc>
 c10ae34:	e59f20a8 	ldr	r2, [pc, #168]	; c10aee4 <portG_eint_trig+0x2cc>
 c10ae38:	e5921000 	ldr	r1, [r2]
 c10ae3c:	e51b2010 	ldr	r2, [fp, #-16]
 c10ae40:	e2822002 	add	r2, r2, #2
 c10ae44:	e3a00001 	mov	r0, #1
 c10ae48:	e1a02210 	lsl	r2, r0, r2
 c10ae4c:	e1812002 	orr	r2, r1, r2
 c10ae50:	e5832000 	str	r2, [r3]
			break;
 c10ae54:	ea00001d 	b	c10aed0 <portG_eint_trig+0x2b8>
		case EDGE:
			// COMPLETAR: poner en rEXTINT a partir de la posiciÃ³n pos tres bits
			// a 110, para configurar interrupciones externas por cualquier
			// flanco
			rEXTINT &= ~(1 << pos);	 		// 0
 c10ae58:	e59f3084 	ldr	r3, [pc, #132]	; c10aee4 <portG_eint_trig+0x2cc>
 c10ae5c:	e59f2080 	ldr	r2, [pc, #128]	; c10aee4 <portG_eint_trig+0x2cc>
 c10ae60:	e5921000 	ldr	r1, [r2]
 c10ae64:	e3a00001 	mov	r0, #1
 c10ae68:	e51b2010 	ldr	r2, [fp, #-16]
 c10ae6c:	e1a02210 	lsl	r2, r0, r2
 c10ae70:	e1e02002 	mvn	r2, r2
 c10ae74:	e0012002 	and	r2, r1, r2
 c10ae78:	e5832000 	str	r2, [r3]
			rEXTINT |= 1 << (pos + 1);	 	// 1
 c10ae7c:	e59f3060 	ldr	r3, [pc, #96]	; c10aee4 <portG_eint_trig+0x2cc>
 c10ae80:	e59f205c 	ldr	r2, [pc, #92]	; c10aee4 <portG_eint_trig+0x2cc>
 c10ae84:	e5921000 	ldr	r1, [r2]
 c10ae88:	e51b2010 	ldr	r2, [fp, #-16]
 c10ae8c:	e2822001 	add	r2, r2, #1
 c10ae90:	e3a00001 	mov	r0, #1
 c10ae94:	e1a02210 	lsl	r2, r0, r2
 c10ae98:	e1812002 	orr	r2, r1, r2
 c10ae9c:	e5832000 	str	r2, [r3]
			rEXTINT |= 1 << (pos + 2);	 	// 1
 c10aea0:	e59f303c 	ldr	r3, [pc, #60]	; c10aee4 <portG_eint_trig+0x2cc>
 c10aea4:	e59f2038 	ldr	r2, [pc, #56]	; c10aee4 <portG_eint_trig+0x2cc>
 c10aea8:	e5921000 	ldr	r1, [r2]
 c10aeac:	e51b2010 	ldr	r2, [fp, #-16]
 c10aeb0:	e2822002 	add	r2, r2, #2
 c10aeb4:	e3a00001 	mov	r0, #1
 c10aeb8:	e1a02210 	lsl	r2, r0, r2
 c10aebc:	e1812002 	orr	r2, r1, r2
 c10aec0:	e5832000 	str	r2, [r3]
			break;
 c10aec4:	ea000001 	b	c10aed0 <portG_eint_trig+0x2b8>
		default:
			return -1;
 c10aec8:	e3e03000 	mvn	r3, #0
 c10aecc:	ea000000 	b	c10aed4 <portG_eint_trig+0x2bc>
	}
	return 0;
 c10aed0:	e3a03000 	mov	r3, #0
}
 c10aed4:	e1a00003 	mov	r0, r3
 c10aed8:	e24bd00c 	sub	sp, fp, #12
 c10aedc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10aee0:	e12fff1e 	bx	lr
 c10aee4:	01d20050 	.word	0x01d20050

0c10aee8 <portG_write>:

int portG_write(int pin, enum digital val)
{
 c10aee8:	e1a0c00d 	mov	ip, sp
 c10aeec:	e92dd800 	push	{fp, ip, lr, pc}
 c10aef0:	e24cb004 	sub	fp, ip, #4
 c10aef4:	e24dd010 	sub	sp, sp, #16
 c10aef8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c10aefc:	e1a03001 	mov	r3, r1
 c10af00:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
	int pos = pin*2;
 c10af04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10af08:	e1a03083 	lsl	r3, r3, #1
 c10af0c:	e50b3010 	str	r3, [fp, #-16]

		if (pin < 0 || pin > 7)
 c10af10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10af14:	e3530000 	cmp	r3, #0
 c10af18:	ba000002 	blt	c10af28 <portG_write+0x40>
 c10af1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10af20:	e3530007 	cmp	r3, #7
 c10af24:	da000001 	ble	c10af30 <portG_write+0x48>
			return -1; // indica error
 c10af28:	e3e03000 	mvn	r3, #0
 c10af2c:	ea000027 	b	c10afd0 <portG_write+0xe8>

		if (val < 0 || val > 1)
 c10af30:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c10af34:	e3530001 	cmp	r3, #1
 c10af38:	9a000001 	bls	c10af44 <portG_write+0x5c>
			return -1; // indica error
 c10af3c:	e3e03000 	mvn	r3, #0
 c10af40:	ea000022 	b	c10afd0 <portG_write+0xe8>

		if ((rPCONG & (0x3 << pos)) != (0x1 << pos))
 c10af44:	e59f3094 	ldr	r3, [pc, #148]	; c10afe0 <portG_write+0xf8>
 c10af48:	e5932000 	ldr	r2, [r3]
 c10af4c:	e3a01003 	mov	r1, #3
 c10af50:	e51b3010 	ldr	r3, [fp, #-16]
 c10af54:	e1a03311 	lsl	r3, r1, r3
 c10af58:	e0022003 	and	r2, r2, r3
 c10af5c:	e3a01001 	mov	r1, #1
 c10af60:	e51b3010 	ldr	r3, [fp, #-16]
 c10af64:	e1a03311 	lsl	r3, r1, r3
 c10af68:	e1520003 	cmp	r2, r3
 c10af6c:	0a000001 	beq	c10af78 <portG_write+0x90>
			return -1; // indica error
 c10af70:	e3e03000 	mvn	r3, #0
 c10af74:	ea000015 	b	c10afd0 <portG_write+0xe8>

		if (val)
 c10af78:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c10af7c:	e3530000 	cmp	r3, #0
 c10af80:	0a000008 	beq	c10afa8 <portG_write+0xc0>
			// COMPLETAR: poner en rPDATG el bit indicado por pin a 1
			rPDATG |= 1 << pin;
 c10af84:	e59f3058 	ldr	r3, [pc, #88]	; c10afe4 <portG_write+0xfc>
 c10af88:	e59f2054 	ldr	r2, [pc, #84]	; c10afe4 <portG_write+0xfc>
 c10af8c:	e5921000 	ldr	r1, [r2]
 c10af90:	e3a00001 	mov	r0, #1
 c10af94:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c10af98:	e1a02210 	lsl	r2, r0, r2
 c10af9c:	e1812002 	orr	r2, r1, r2
 c10afa0:	e5832000 	str	r2, [r3]
 c10afa4:	ea000008 	b	c10afcc <portG_write+0xe4>
		else
			// COMPLETAR: poner en rPDATG el bit indicado por pin a 0
			rPDATG &= ~(1 << pin);
 c10afa8:	e59f3034 	ldr	r3, [pc, #52]	; c10afe4 <portG_write+0xfc>
 c10afac:	e59f2030 	ldr	r2, [pc, #48]	; c10afe4 <portG_write+0xfc>
 c10afb0:	e5921000 	ldr	r1, [r2]
 c10afb4:	e3a00001 	mov	r0, #1
 c10afb8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c10afbc:	e1a02210 	lsl	r2, r0, r2
 c10afc0:	e1e02002 	mvn	r2, r2
 c10afc4:	e0012002 	and	r2, r1, r2
 c10afc8:	e5832000 	str	r2, [r3]

		return 0;
 c10afcc:	e3a03000 	mov	r3, #0
}
 c10afd0:	e1a00003 	mov	r0, r3
 c10afd4:	e24bd00c 	sub	sp, fp, #12
 c10afd8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10afdc:	e12fff1e 	bx	lr
 c10afe0:	01d20040 	.word	0x01d20040
 c10afe4:	01d20044 	.word	0x01d20044

0c10afe8 <portG_read>:

int portG_read(int pin, enum digital* val)
{
 c10afe8:	e1a0c00d 	mov	ip, sp
 c10afec:	e92dd800 	push	{fp, ip, lr, pc}
 c10aff0:	e24cb004 	sub	fp, ip, #4
 c10aff4:	e24dd010 	sub	sp, sp, #16
 c10aff8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c10affc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
	int pos = pin*2;
 c10b000:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10b004:	e1a03083 	lsl	r3, r3, #1
 c10b008:	e50b3010 	str	r3, [fp, #-16]

	if (pin < 0 || pin > 7)
 c10b00c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10b010:	e3530000 	cmp	r3, #0
 c10b014:	ba000002 	blt	c10b024 <portG_read+0x3c>
 c10b018:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10b01c:	e3530007 	cmp	r3, #7
 c10b020:	da000001 	ble	c10b02c <portG_read+0x44>
		return -1; // indica error
 c10b024:	e3e03000 	mvn	r3, #0
 c10b028:	ea000019 	b	c10b094 <portG_read+0xac>

	if (rPCONG & (0x3 << pos))
 c10b02c:	e59f3070 	ldr	r3, [pc, #112]	; c10b0a4 <portG_read+0xbc>
 c10b030:	e5932000 	ldr	r2, [r3]
 c10b034:	e3a01003 	mov	r1, #3
 c10b038:	e51b3010 	ldr	r3, [fp, #-16]
 c10b03c:	e1a03311 	lsl	r3, r1, r3
 c10b040:	e0023003 	and	r3, r2, r3
 c10b044:	e3530000 	cmp	r3, #0
 c10b048:	0a000001 	beq	c10b054 <portG_read+0x6c>
		return -1; // indica error
 c10b04c:	e3e03000 	mvn	r3, #0
 c10b050:	ea00000f 	b	c10b094 <portG_read+0xac>

	/*COMPLETAR: true si estÃ¡ a 1 en rPDATG el pin indicado por el parÃ¡metro pin*/
	if (rPDATG & (1 << pin))
 c10b054:	e59f304c 	ldr	r3, [pc, #76]	; c10b0a8 <portG_read+0xc0>
 c10b058:	e5932000 	ldr	r2, [r3]
 c10b05c:	e3a01001 	mov	r1, #1
 c10b060:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10b064:	e1a03311 	lsl	r3, r1, r3
 c10b068:	e0023003 	and	r3, r2, r3
 c10b06c:	e3530000 	cmp	r3, #0
 c10b070:	0a000003 	beq	c10b084 <portG_read+0x9c>
		*val = HIGH;
 c10b074:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c10b078:	e3a02001 	mov	r2, #1
 c10b07c:	e5c32000 	strb	r2, [r3]
 c10b080:	ea000002 	b	c10b090 <portG_read+0xa8>
	else
		*val = LOW;
 c10b084:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c10b088:	e3a02000 	mov	r2, #0
 c10b08c:	e5c32000 	strb	r2, [r3]

	return 0;
 c10b090:	e3a03000 	mov	r3, #0
}
 c10b094:	e1a00003 	mov	r0, r3
 c10b098:	e24bd00c 	sub	sp, fp, #12
 c10b09c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10b0a0:	e12fff1e 	bx	lr
 c10b0a4:	01d20040 	.word	0x01d20040
 c10b0a8:	01d20044 	.word	0x01d20044

0c10b0ac <portG_conf_pup>:

int portG_conf_pup(int pin, enum enable st)
{
 c10b0ac:	e1a0c00d 	mov	ip, sp
 c10b0b0:	e92dd800 	push	{fp, ip, lr, pc}
 c10b0b4:	e24cb004 	sub	fp, ip, #4
 c10b0b8:	e24dd008 	sub	sp, sp, #8
 c10b0bc:	e50b0010 	str	r0, [fp, #-16]
 c10b0c0:	e1a03001 	mov	r3, r1
 c10b0c4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	if (pin < 0 || pin > 7)
 c10b0c8:	e51b3010 	ldr	r3, [fp, #-16]
 c10b0cc:	e3530000 	cmp	r3, #0
 c10b0d0:	ba000002 	blt	c10b0e0 <portG_conf_pup+0x34>
 c10b0d4:	e51b3010 	ldr	r3, [fp, #-16]
 c10b0d8:	e3530007 	cmp	r3, #7
 c10b0dc:	da000001 	ble	c10b0e8 <portG_conf_pup+0x3c>
		return -1; // indica error
 c10b0e0:	e3e03000 	mvn	r3, #0
 c10b0e4:	ea00001d 	b	c10b160 <portG_conf_pup+0xb4>

	if (st != ENABLE && st != DISABLE)
 c10b0e8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10b0ec:	e3530001 	cmp	r3, #1
 c10b0f0:	0a000004 	beq	c10b108 <portG_conf_pup+0x5c>
 c10b0f4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10b0f8:	e3530000 	cmp	r3, #0
 c10b0fc:	0a000001 	beq	c10b108 <portG_conf_pup+0x5c>
		return -1; // indica error
 c10b100:	e3e03000 	mvn	r3, #0
 c10b104:	ea000015 	b	c10b160 <portG_conf_pup+0xb4>

	if (st == ENABLE)
 c10b108:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10b10c:	e3530001 	cmp	r3, #1
 c10b110:	1a000009 	bne	c10b13c <portG_conf_pup+0x90>
		// COMPLETAR: poner el pin de rPUPG indicado por el parametro pin al valor adecuado,
		// para activar la resistencia de pull-up
		rPUPG &= ~(1 << pin);
 c10b114:	e59f3054 	ldr	r3, [pc, #84]	; c10b170 <portG_conf_pup+0xc4>
 c10b118:	e59f2050 	ldr	r2, [pc, #80]	; c10b170 <portG_conf_pup+0xc4>
 c10b11c:	e5921000 	ldr	r1, [r2]
 c10b120:	e3a00001 	mov	r0, #1
 c10b124:	e51b2010 	ldr	r2, [fp, #-16]
 c10b128:	e1a02210 	lsl	r2, r0, r2
 c10b12c:	e1e02002 	mvn	r2, r2
 c10b130:	e0012002 	and	r2, r1, r2
 c10b134:	e5832000 	str	r2, [r3]
 c10b138:	ea000007 	b	c10b15c <portG_conf_pup+0xb0>
	else
		// COMPLETAR: poner el pin de rPUPG indicado por el parametro pin al valor adecuado,
		// para desactivar la resistencia de pull-up
		rPUPG |= 1 << pin;
 c10b13c:	e59f302c 	ldr	r3, [pc, #44]	; c10b170 <portG_conf_pup+0xc4>
 c10b140:	e59f2028 	ldr	r2, [pc, #40]	; c10b170 <portG_conf_pup+0xc4>
 c10b144:	e5921000 	ldr	r1, [r2]
 c10b148:	e3a00001 	mov	r0, #1
 c10b14c:	e51b2010 	ldr	r2, [fp, #-16]
 c10b150:	e1a02210 	lsl	r2, r0, r2
 c10b154:	e1812002 	orr	r2, r1, r2
 c10b158:	e5832000 	str	r2, [r3]

	return 0;
 c10b15c:	e3a03000 	mov	r3, #0
}
 c10b160:	e1a00003 	mov	r0, r3
 c10b164:	e24bd00c 	sub	sp, fp, #12
 c10b168:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10b16c:	e12fff1e 	bx	lr
 c10b170:	01d20048 	.word	0x01d20048

0c10b174 <start>:
	.equ rEXTINTPND, 0x1d20054

start:

	/* Pasa a modo supervisor */
    mrs	r0, cpsr
 c10b174:	e10f0000 	mrs	r0, CPSR
    bic	r0, r0, #MODEMASK
 c10b178:	e3c0001f 	bic	r0, r0, #31
    orr	r1, r0, #SVCMODE
 c10b17c:	e3801013 	orr	r1, r0, #19
    msr	cpsr_c, r1 
 c10b180:	e121f001 	msr	CPSR_c, r1

	/* InicializaciÃ³n de la secciÃ³n bss a 0, estÃ¡ndar C */
    ldr	    r3, =Image_ZI_Base
 c10b184:	e59f30b8 	ldr	r3, [pc, #184]	; c10b244 <InitStacks+0x48>
	ldr	    r1, =Image_ZI_Limit	/* Top of zero init segment */
 c10b188:	e59f10b8 	ldr	r1, [pc, #184]	; c10b248 <InitStacks+0x4c>
    mov	    r2, #0
 c10b18c:	e3a02000 	mov	r2, #0

0c10b190 <L0>:
L0:
    cmp	    r3, r1	    		/* Zero init */
 c10b190:	e1530001 	cmp	r3, r1
    strcc   r2, [r3], #4
 c10b194:	34832004 	strcc	r2, [r3], #4
    bcc	    L0
 c10b198:	3afffffc 	bcc	c10b190 <L0>
	/****************************************************/

	/* Desde modo SVC inicializa los SP de todos los modos de ejecuciï¿½n privilegiados */
    bl InitStacks
 c10b19c:	eb000016 	bl	c10b1fc <InitStacks>

	ldr r0, =rEXTINTPND
 c10b1a0:	e59f00a4 	ldr	r0, [pc, #164]	; c10b24c <InitStacks+0x50>
	ldr r1, =0xff
 c10b1a4:	e3a010ff 	mov	r1, #255	; 0xff
	str r1, [r0]
 c10b1a8:	e5801000 	str	r1, [r0]
	ldr r0, =rI_ISPC
 c10b1ac:	e59f009c 	ldr	r0, [pc, #156]	; c10b250 <InitStacks+0x54>
	ldr r1, =0x1fffffff
 c10b1b0:	e3e0120e 	mvn	r1, #-536870912	; 0xe0000000
	str r1, [r0]
 c10b1b4:	e5801000 	str	r1, [r0]
	ldr r0, =rF_ISPC
 c10b1b8:	e59f0094 	ldr	r0, [pc, #148]	; c10b254 <InitStacks+0x58>
	ldr r1, =0x1fffffff
 c10b1bc:	e3e0120e 	mvn	r1, #-536870912	; 0xe0000000
	str r1, [r0]
 c10b1c0:	e5801000 	str	r1, [r0]

	/* Enmascara interrupciones */
	ldr r0, =rINTMSK
 c10b1c4:	e59f008c 	ldr	r0, [pc, #140]	; c10b258 <InitStacks+0x5c>
	ldr r1, =0x1fffffff
 c10b1c8:	e3e0120e 	mvn	r1, #-536870912	; 0xe0000000
    str r1, [r0]
 c10b1cc:	e5801000 	str	r1, [r0]

	/* Habilita linea IRQ y FIQ del CPSR */
	mrs r0, cpsr
 c10b1d0:	e10f0000 	mrs	r0, CPSR
	bic r0, r0, #0xC0
 c10b1d4:	e3c000c0 	bic	r0, r0, #192	; 0xc0
	msr cpsr_c, r0
 c10b1d8:	e121f000 	msr	CPSR_c, r0
	
	/* Desde modo SVC cambia a modo USR e inicializa el SP_usr */
	mrs r0, cpsr
 c10b1dc:	e10f0000 	mrs	r0, CPSR
	bic r0, r0, #MODEMASK
 c10b1e0:	e3c0001f 	bic	r0, r0, #31
	orr r1, r0, #USRMODE  
 c10b1e4:	e3801010 	orr	r1, r0, #16
	msr cpsr_c, r1
 c10b1e8:	e121f001 	msr	CPSR_c, r1
	ldr sp, =USRSTACK
 c10b1ec:	e59fd068 	ldr	sp, [pc, #104]	; c10b25c <InitStacks+0x60>

    mov fp, #0
 c10b1f0:	e3a0b000 	mov	fp, #0

    bl main
 c10b1f4:	eb00063a 	bl	c10cae4 <main>

0c10b1f8 <End>:
End:
    B End
 c10b1f8:	eafffffe 	b	c10b1f8 <End>

0c10b1fc <InitStacks>:

InitStacks:
	mrs r0, cpsr
 c10b1fc:	e10f0000 	mrs	r0, CPSR
	bic r0, r0, #MODEMASK
 c10b200:	e3c0001f 	bic	r0, r0, #31

	orr r1, r0, #UNDMODE  /* desde modo SVC cambia a modo UND e inicializa el SP_und */
 c10b204:	e380101b 	orr	r1, r0, #27
	msr cpsr_c, r1    
 c10b208:	e121f001 	msr	CPSR_c, r1
	ldr sp, =UNDSTACK
 c10b20c:	e59fd04c 	ldr	sp, [pc, #76]	; c10b260 <InitStacks+0x64>

	orr r1, r0, #ABTMODE  /* desde modo UND cambia a modo ABT e inicializa el SP_abt */
 c10b210:	e3801017 	orr	r1, r0, #23
	msr cpsr_c, r1 
 c10b214:	e121f001 	msr	CPSR_c, r1
	ldr sp, =ABTSTACK
 c10b218:	e59fd044 	ldr	sp, [pc, #68]	; c10b264 <InitStacks+0x68>

	orr r1, r0, #IRQMODE  /* desde modo ABT cambia a modo IRQ e inicializa el SP_abt */
 c10b21c:	e3801012 	orr	r1, r0, #18
	msr cpsr_c, r1
 c10b220:	e121f001 	msr	CPSR_c, r1
	ldr sp, =IRQSTACK
 c10b224:	e59fd03c 	ldr	sp, [pc, #60]	; c10b268 <InitStacks+0x6c>

	orr r1, r0, #FIQMODE  /* desde modo IRQ cambia a modo FIQ e inicializa el SP_fiq */
 c10b228:	e3801011 	orr	r1, r0, #17
	msr cpsr_c, r1
 c10b22c:	e121f001 	msr	CPSR_c, r1
	ldr sp, =FIQSTACK
 c10b230:	e59fd034 	ldr	sp, [pc, #52]	; c10b26c <InitStacks+0x70>

	orr r1, r0, #SVCMODE  /* desde modo FIQ cambia a modo SVC e inicializa el SP_svc */
 c10b234:	e3801013 	orr	r1, r0, #19
	msr cpsr_c, r1
 c10b238:	e121f001 	msr	CPSR_c, r1
	ldr sp, =SVCSTACK
 c10b23c:	e59fd02c 	ldr	sp, [pc, #44]	; c10b270 <InitStacks+0x74>
	
    mov pc, lr
 c10b240:	e1a0f00e 	mov	pc, lr
 c10b244:	0c101168 	.word	0x0c101168
 c10b248:	0c10a784 	.word	0x0c10a784
 c10b24c:	01d20054 	.word	0x01d20054
 c10b250:	01e00024 	.word	0x01e00024
 c10b254:	01e0003c 	.word	0x01e0003c
 c10b258:	01e0000c 	.word	0x01e0000c
 c10b25c:	0c7ff000 	.word	0x0c7ff000
 c10b260:	0c7ff200 	.word	0x0c7ff200
 c10b264:	0c7ff300 	.word	0x0c7ff300
 c10b268:	0c7ff400 	.word	0x0c7ff400
 c10b26c:	0c7ff500 	.word	0x0c7ff500
 c10b270:	0c7ff100 	.word	0x0c7ff100

0c10b274 <ic_init>:
/*--- ficheros de cabecera ---*/
#include "44b.h"
#include "intcontroller.h"

void ic_init(void)
{
 c10b274:	e1a0c00d 	mov	ip, sp
 c10b278:	e92dd800 	push	{fp, ip, lr, pc}
 c10b27c:	e24cb004 	sub	fp, ip, #4
	 *    Lineas IRQ y FIQ no habilitadas
	 *    Linea IRQ en modo no vectorizado
	 *    Todo por la lÃ­nea IRQ
	 *    Todas las interrupciones enmascaradas
	 **/
	rINTMOD = 0x0; // Configura las lineas como de tipo IRQ
 c10b280:	e59f3028 	ldr	r3, [pc, #40]	; c10b2b0 <ic_init+0x3c>
 c10b284:	e3a02000 	mov	r2, #0
 c10b288:	e5832000 	str	r2, [r3]
	rINTCON = 0x7; // IRQ y FIQ enmascaradas, IRQ en modo no vectorizado
 c10b28c:	e3a0361e 	mov	r3, #31457280	; 0x1e00000
 c10b290:	e3a02007 	mov	r2, #7
 c10b294:	e5832000 	str	r2, [r3]
	rINTMSK = ~(0x0); // Enmascara todas las lineas
 c10b298:	e59f3014 	ldr	r3, [pc, #20]	; c10b2b4 <ic_init+0x40>
 c10b29c:	e3e02000 	mvn	r2, #0
 c10b2a0:	e5832000 	str	r2, [r3]
}
 c10b2a4:	e24bd00c 	sub	sp, fp, #12
 c10b2a8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10b2ac:	e12fff1e 	bx	lr
 c10b2b0:	01e00008 	.word	0x01e00008
 c10b2b4:	01e0000c 	.word	0x01e0000c

0c10b2b8 <ic_conf_irq>:

int ic_conf_irq(enum enable st, enum int_vec vec)
{
 c10b2b8:	e1a0c00d 	mov	ip, sp
 c10b2bc:	e92dd800 	push	{fp, ip, lr, pc}
 c10b2c0:	e24cb004 	sub	fp, ip, #4
 c10b2c4:	e24dd010 	sub	sp, sp, #16
 c10b2c8:	e1a02000 	mov	r2, r0
 c10b2cc:	e1a03001 	mov	r3, r1
 c10b2d0:	e54b2015 	strb	r2, [fp, #-21]	; 0xffffffeb
 c10b2d4:	e54b3016 	strb	r3, [fp, #-22]	; 0xffffffea
	int conf = rINTCON;
 c10b2d8:	e3a0361e 	mov	r3, #31457280	; 0x1e00000
 c10b2dc:	e5933000 	ldr	r3, [r3]
 c10b2e0:	e50b3010 	str	r3, [fp, #-16]

	if (st != ENABLE && st != DISABLE)
 c10b2e4:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10b2e8:	e3530001 	cmp	r3, #1
 c10b2ec:	0a000004 	beq	c10b304 <ic_conf_irq+0x4c>
 c10b2f0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10b2f4:	e3530000 	cmp	r3, #0
 c10b2f8:	0a000001 	beq	c10b304 <ic_conf_irq+0x4c>
		return -1;
 c10b2fc:	e3e03000 	mvn	r3, #0
 c10b300:	ea000017 	b	c10b364 <ic_conf_irq+0xac>

	if (vec == VEC)
 c10b304:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
 c10b308:	e3530000 	cmp	r3, #0
 c10b30c:	1a000003 	bne	c10b320 <ic_conf_irq+0x68>
		//COMPLETAR: poner la linea IRQ en modo vectorizado
		conf &= ~(1 << 2);
 c10b310:	e51b3010 	ldr	r3, [fp, #-16]
 c10b314:	e3c33004 	bic	r3, r3, #4
 c10b318:	e50b3010 	str	r3, [fp, #-16]
 c10b31c:	ea000002 	b	c10b32c <ic_conf_irq+0x74>
	else
		//COMPLETAR: poner la linea IRQ en modo no vectorizado
		conf |= 1 << 2;
 c10b320:	e51b3010 	ldr	r3, [fp, #-16]
 c10b324:	e3833004 	orr	r3, r3, #4
 c10b328:	e50b3010 	str	r3, [fp, #-16]

	if (st == ENABLE)
 c10b32c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10b330:	e3530001 	cmp	r3, #1
 c10b334:	1a000003 	bne	c10b348 <ic_conf_irq+0x90>
		//COMPLETAR: habilitar la linea IRQ
		conf &= ~(1 << 1);
 c10b338:	e51b3010 	ldr	r3, [fp, #-16]
 c10b33c:	e3c33002 	bic	r3, r3, #2
 c10b340:	e50b3010 	str	r3, [fp, #-16]
 c10b344:	ea000002 	b	c10b354 <ic_conf_irq+0x9c>
	else
		//COMPLETAR: deshabilitar la linea IRQ
		conf |= 1 << 1;
 c10b348:	e51b3010 	ldr	r3, [fp, #-16]
 c10b34c:	e3833002 	orr	r3, r3, #2
 c10b350:	e50b3010 	str	r3, [fp, #-16]

	rINTCON = conf;
 c10b354:	e3a0361e 	mov	r3, #31457280	; 0x1e00000
 c10b358:	e51b2010 	ldr	r2, [fp, #-16]
 c10b35c:	e5832000 	str	r2, [r3]
	return 0;
 c10b360:	e3a03000 	mov	r3, #0
}
 c10b364:	e1a00003 	mov	r0, r3
 c10b368:	e24bd00c 	sub	sp, fp, #12
 c10b36c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10b370:	e12fff1e 	bx	lr

0c10b374 <ic_conf_fiq>:

int ic_conf_fiq(enum enable st)
{
 c10b374:	e1a0c00d 	mov	ip, sp
 c10b378:	e92dd800 	push	{fp, ip, lr, pc}
 c10b37c:	e24cb004 	sub	fp, ip, #4
 c10b380:	e24dd010 	sub	sp, sp, #16
 c10b384:	e1a03000 	mov	r3, r0
 c10b388:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	int ret = 0;
 c10b38c:	e3a03000 	mov	r3, #0
 c10b390:	e50b3010 	str	r3, [fp, #-16]

	if (st == ENABLE)
 c10b394:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10b398:	e3530001 	cmp	r3, #1
 c10b39c:	1a000005 	bne	c10b3b8 <ic_conf_fiq+0x44>
		//COMPLETAR: habilitar la linea FIQ
		rINTCON &= ~(1 << 0);
 c10b3a0:	e3a0361e 	mov	r3, #31457280	; 0x1e00000
 c10b3a4:	e3a0261e 	mov	r2, #31457280	; 0x1e00000
 c10b3a8:	e5922000 	ldr	r2, [r2]
 c10b3ac:	e3c22001 	bic	r2, r2, #1
 c10b3b0:	e5832000 	str	r2, [r3]
 c10b3b4:	ea00000a 	b	c10b3e4 <ic_conf_fiq+0x70>
	else if (st == DISABLE)
 c10b3b8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10b3bc:	e3530000 	cmp	r3, #0
 c10b3c0:	1a000005 	bne	c10b3dc <ic_conf_fiq+0x68>
		//COMPLETAR: deshabilitar la linea FIQ
		rINTCON |= 1 << 0;
 c10b3c4:	e3a0361e 	mov	r3, #31457280	; 0x1e00000
 c10b3c8:	e3a0261e 	mov	r2, #31457280	; 0x1e00000
 c10b3cc:	e5922000 	ldr	r2, [r2]
 c10b3d0:	e3822001 	orr	r2, r2, #1
 c10b3d4:	e5832000 	str	r2, [r3]
 c10b3d8:	ea000001 	b	c10b3e4 <ic_conf_fiq+0x70>
	else
		ret = -1;
 c10b3dc:	e3e03000 	mvn	r3, #0
 c10b3e0:	e50b3010 	str	r3, [fp, #-16]

	return ret;
 c10b3e4:	e51b3010 	ldr	r3, [fp, #-16]
}
 c10b3e8:	e1a00003 	mov	r0, r3
 c10b3ec:	e24bd00c 	sub	sp, fp, #12
 c10b3f0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10b3f4:	e12fff1e 	bx	lr

0c10b3f8 <ic_conf_line>:

int ic_conf_line(enum int_line line, enum int_mode mode)
{
 c10b3f8:	e1a0c00d 	mov	ip, sp
 c10b3fc:	e92dd800 	push	{fp, ip, lr, pc}
 c10b400:	e24cb004 	sub	fp, ip, #4
 c10b404:	e24dd010 	sub	sp, sp, #16
 c10b408:	e1a02000 	mov	r2, r0
 c10b40c:	e1a03001 	mov	r3, r1
 c10b410:	e54b2015 	strb	r2, [fp, #-21]	; 0xffffffeb
 c10b414:	e54b3016 	strb	r3, [fp, #-22]	; 0xffffffea
	unsigned int bit = INT_BIT(line);
 c10b418:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10b41c:	e3a02001 	mov	r2, #1
 c10b420:	e1a03312 	lsl	r3, r2, r3
 c10b424:	e50b3010 	str	r3, [fp, #-16]

	if (line < 0 || line > 26)
 c10b428:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10b42c:	e353001a 	cmp	r3, #26
 c10b430:	9a000001 	bls	c10b43c <ic_conf_line+0x44>
		return -1;
 c10b434:	e3e03000 	mvn	r3, #0
 c10b438:	ea000019 	b	c10b4a4 <ic_conf_line+0xac>

	if (mode != IRQ && mode != FIQ)
 c10b43c:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
 c10b440:	e3530000 	cmp	r3, #0
 c10b444:	0a000004 	beq	c10b45c <ic_conf_line+0x64>
 c10b448:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
 c10b44c:	e3530001 	cmp	r3, #1
 c10b450:	0a000001 	beq	c10b45c <ic_conf_line+0x64>
		return -1;
 c10b454:	e3e03000 	mvn	r3, #0
 c10b458:	ea000011 	b	c10b4a4 <ic_conf_line+0xac>

	if (mode == IRQ)
 c10b45c:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
 c10b460:	e3530000 	cmp	r3, #0
 c10b464:	1a000007 	bne	c10b488 <ic_conf_line+0x90>
		//COMPLETAR: poner la linea line en modo IRQ
		rINTMOD &= ~bit;
 c10b468:	e59f3044 	ldr	r3, [pc, #68]	; c10b4b4 <ic_conf_line+0xbc>
 c10b46c:	e59f2040 	ldr	r2, [pc, #64]	; c10b4b4 <ic_conf_line+0xbc>
 c10b470:	e5921000 	ldr	r1, [r2]
 c10b474:	e51b2010 	ldr	r2, [fp, #-16]
 c10b478:	e1e02002 	mvn	r2, r2
 c10b47c:	e0012002 	and	r2, r1, r2
 c10b480:	e5832000 	str	r2, [r3]
 c10b484:	ea000005 	b	c10b4a0 <ic_conf_line+0xa8>
	else
		//COMPLETAR: poner la linea line en modo FIQ
		rINTMOD |= bit;
 c10b488:	e59f3024 	ldr	r3, [pc, #36]	; c10b4b4 <ic_conf_line+0xbc>
 c10b48c:	e59f2020 	ldr	r2, [pc, #32]	; c10b4b4 <ic_conf_line+0xbc>
 c10b490:	e5921000 	ldr	r1, [r2]
 c10b494:	e51b2010 	ldr	r2, [fp, #-16]
 c10b498:	e1812002 	orr	r2, r1, r2
 c10b49c:	e5832000 	str	r2, [r3]
	return 0;
 c10b4a0:	e3a03000 	mov	r3, #0
}
 c10b4a4:	e1a00003 	mov	r0, r3
 c10b4a8:	e24bd00c 	sub	sp, fp, #12
 c10b4ac:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10b4b0:	e12fff1e 	bx	lr
 c10b4b4:	01e00008 	.word	0x01e00008

0c10b4b8 <ic_enable>:

int ic_enable(enum int_line line)
{
 c10b4b8:	e1a0c00d 	mov	ip, sp
 c10b4bc:	e92dd800 	push	{fp, ip, lr, pc}
 c10b4c0:	e24cb004 	sub	fp, ip, #4
 c10b4c4:	e24dd008 	sub	sp, sp, #8
 c10b4c8:	e1a03000 	mov	r3, r0
 c10b4cc:	e54b300d 	strb	r3, [fp, #-13]
	if (line < 0 || line > 26)
 c10b4d0:	e55b300d 	ldrb	r3, [fp, #-13]
 c10b4d4:	e353001a 	cmp	r3, #26
 c10b4d8:	9a000001 	bls	c10b4e4 <ic_enable+0x2c>
		return -1;
 c10b4dc:	e3e03000 	mvn	r3, #0
 c10b4e0:	ea000009 	b	c10b50c <ic_enable+0x54>

	//COMPLETAR: habilitar las interrupciones por la linea line
	rINTMSK &= ~(1 << line);
 c10b4e4:	e59f3030 	ldr	r3, [pc, #48]	; c10b51c <ic_enable+0x64>
 c10b4e8:	e59f202c 	ldr	r2, [pc, #44]	; c10b51c <ic_enable+0x64>
 c10b4ec:	e5921000 	ldr	r1, [r2]
 c10b4f0:	e55b200d 	ldrb	r2, [fp, #-13]
 c10b4f4:	e3a00001 	mov	r0, #1
 c10b4f8:	e1a02210 	lsl	r2, r0, r2
 c10b4fc:	e1e02002 	mvn	r2, r2
 c10b500:	e0012002 	and	r2, r1, r2
 c10b504:	e5832000 	str	r2, [r3]
	return 0;
 c10b508:	e3a03000 	mov	r3, #0
}
 c10b50c:	e1a00003 	mov	r0, r3
 c10b510:	e24bd00c 	sub	sp, fp, #12
 c10b514:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10b518:	e12fff1e 	bx	lr
 c10b51c:	01e0000c 	.word	0x01e0000c

0c10b520 <ic_disable>:

int ic_disable(enum int_line line)
{
 c10b520:	e1a0c00d 	mov	ip, sp
 c10b524:	e92dd800 	push	{fp, ip, lr, pc}
 c10b528:	e24cb004 	sub	fp, ip, #4
 c10b52c:	e24dd008 	sub	sp, sp, #8
 c10b530:	e1a03000 	mov	r3, r0
 c10b534:	e54b300d 	strb	r3, [fp, #-13]
	if (line < 0 || line > 26)
 c10b538:	e55b300d 	ldrb	r3, [fp, #-13]
 c10b53c:	e353001a 	cmp	r3, #26
 c10b540:	9a000001 	bls	c10b54c <ic_disable+0x2c>
		return -1;
 c10b544:	e3e03000 	mvn	r3, #0
 c10b548:	ea000008 	b	c10b570 <ic_disable+0x50>

	//COMPLETAR: enmascarar las interrupciones por la linea line
	rINTMSK |= 1 << line;
 c10b54c:	e59f302c 	ldr	r3, [pc, #44]	; c10b580 <ic_disable+0x60>
 c10b550:	e59f2028 	ldr	r2, [pc, #40]	; c10b580 <ic_disable+0x60>
 c10b554:	e5921000 	ldr	r1, [r2]
 c10b558:	e55b200d 	ldrb	r2, [fp, #-13]
 c10b55c:	e3a00001 	mov	r0, #1
 c10b560:	e1a02210 	lsl	r2, r0, r2
 c10b564:	e1812002 	orr	r2, r1, r2
 c10b568:	e5832000 	str	r2, [r3]
	return 0;
 c10b56c:	e3a03000 	mov	r3, #0
}
 c10b570:	e1a00003 	mov	r0, r3
 c10b574:	e24bd00c 	sub	sp, fp, #12
 c10b578:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10b57c:	e12fff1e 	bx	lr
 c10b580:	01e0000c 	.word	0x01e0000c

0c10b584 <ic_cleanflag>:

int ic_cleanflag(enum int_line line)
{
 c10b584:	e1a0c00d 	mov	ip, sp
 c10b588:	e92dd800 	push	{fp, ip, lr, pc}
 c10b58c:	e24cb004 	sub	fp, ip, #4
 c10b590:	e24dd010 	sub	sp, sp, #16
 c10b594:	e1a03000 	mov	r3, r0
 c10b598:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	int bit;

	if (line < 0 || line > 26)
 c10b59c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10b5a0:	e353001a 	cmp	r3, #26
 c10b5a4:	9a000001 	bls	c10b5b0 <ic_cleanflag+0x2c>
		return -1;
 c10b5a8:	e3e03000 	mvn	r3, #0
 c10b5ac:	ea000017 	b	c10b610 <ic_cleanflag+0x8c>

	bit = INT_BIT(line);
 c10b5b0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10b5b4:	e3a02001 	mov	r2, #1
 c10b5b8:	e1a03312 	lsl	r3, r2, r3
 c10b5bc:	e50b3010 	str	r3, [fp, #-16]

	if (rINTMOD & bit)
 c10b5c0:	e59f3058 	ldr	r3, [pc, #88]	; c10b620 <ic_cleanflag+0x9c>
 c10b5c4:	e5932000 	ldr	r2, [r3]
 c10b5c8:	e51b3010 	ldr	r3, [fp, #-16]
 c10b5cc:	e0023003 	and	r3, r2, r3
 c10b5d0:	e3530000 	cmp	r3, #0
 c10b5d4:	0a000006 	beq	c10b5f4 <ic_cleanflag+0x70>
		//COMPLETAR: borrar el flag de interrupcion correspondiente a la linea line
		//con la linea configurada por FIQ
		rF_ISPC |= bit;
 c10b5d8:	e59f3044 	ldr	r3, [pc, #68]	; c10b624 <ic_cleanflag+0xa0>
 c10b5dc:	e59f2040 	ldr	r2, [pc, #64]	; c10b624 <ic_cleanflag+0xa0>
 c10b5e0:	e5921000 	ldr	r1, [r2]
 c10b5e4:	e51b2010 	ldr	r2, [fp, #-16]
 c10b5e8:	e1812002 	orr	r2, r1, r2
 c10b5ec:	e5832000 	str	r2, [r3]
 c10b5f0:	ea000005 	b	c10b60c <ic_cleanflag+0x88>
	else
		//COMPLETAR: borrar el flag de interrupcion correspondiente a la linea line
		//con la linea configurada por IRQ
		rI_ISPC |= bit;
 c10b5f4:	e59f302c 	ldr	r3, [pc, #44]	; c10b628 <ic_cleanflag+0xa4>
 c10b5f8:	e59f2028 	ldr	r2, [pc, #40]	; c10b628 <ic_cleanflag+0xa4>
 c10b5fc:	e5921000 	ldr	r1, [r2]
 c10b600:	e51b2010 	ldr	r2, [fp, #-16]
 c10b604:	e1812002 	orr	r2, r1, r2
 c10b608:	e5832000 	str	r2, [r3]
	return 0;
 c10b60c:	e3a03000 	mov	r3, #0
}
 c10b610:	e1a00003 	mov	r0, r3
 c10b614:	e24bd00c 	sub	sp, fp, #12
 c10b618:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10b61c:	e12fff1e 	bx	lr
 c10b620:	01e00008 	.word	0x01e00008
 c10b624:	01e0003c 	.word	0x01e0003c
 c10b628:	01e00024 	.word	0x01e00024

0c10b62c <kb_scan>:
/*--- Variables globales ---*/
volatile static unsigned char *keyboard_base = (unsigned char *)0x06000000;


int kb_scan(void)
{
 c10b62c:	e1a0c00d 	mov	ip, sp
 c10b630:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c10b634:	e24cb004 	sub	fp, ip, #4
 c10b638:	e24dd064 	sub	sp, sp, #100	; 0x64
	int value = -1;
 c10b63c:	e3e03000 	mvn	r3, #0
 c10b640:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
	int i;
	char temp;
	int lines[4]  = {0xfd, 0xfb, 0xf7, 0xef};
 c10b644:	e59f3178 	ldr	r3, [pc, #376]	; c10b7c4 <kb_scan+0x198>
 c10b648:	e24bc030 	sub	ip, fp, #48	; 0x30
 c10b64c:	e893000f 	ldm	r3, {r0, r1, r2, r3}
 c10b650:	e88c000f 	stm	ip, {r0, r1, r2, r3}
	int map[4][4] = {{0, 1, 2, 3},
 c10b654:	e59f316c 	ldr	r3, [pc, #364]	; c10b7c8 <kb_scan+0x19c>
 c10b658:	e24bc070 	sub	ip, fp, #112	; 0x70
 c10b65c:	e1a04003 	mov	r4, r3
 c10b660:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
 c10b664:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
 c10b668:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
 c10b66c:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
 c10b670:	e8b4000f 	ldm	r4!, {r0, r1, r2, r3}
 c10b674:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
 c10b678:	e894000f 	ldm	r4, {r0, r1, r2, r3}
 c10b67c:	e88c000f 	stm	ip, {r0, r1, r2, r3}
					{4, 5, 6, 7},
					{8, 9, 0xA, 0xB},
					{0xC, 0xD, 0xE, 0xF}};

	for (i = 0; (i < 4) && (value == -1); i++) {
 c10b680:	e3a03000 	mov	r3, #0
 c10b684:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c10b688:	ea000042 	b	c10b798 <kb_scan+0x16c>
		temp = *(keyboard_base+lines[i]);
 c10b68c:	e59f3138 	ldr	r3, [pc, #312]	; c10b7cc <kb_scan+0x1a0>
 c10b690:	e5932000 	ldr	r2, [r3]
 c10b694:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
 c10b698:	e3e0301b 	mvn	r3, #27
 c10b69c:	e1a01101 	lsl	r1, r1, #2
 c10b6a0:	e24b0014 	sub	r0, fp, #20
 c10b6a4:	e0801001 	add	r1, r0, r1
 c10b6a8:	e0813003 	add	r3, r1, r3
 c10b6ac:	e5933000 	ldr	r3, [r3]
 c10b6b0:	e0823003 	add	r3, r2, r3
 c10b6b4:	e5d33000 	ldrb	r3, [r3]
 c10b6b8:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3

		if(( temp & KEY_VALUE_MASK) != KEY_VALUE_MASK) {
 c10b6bc:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c10b6c0:	e203300f 	and	r3, r3, #15
 c10b6c4:	e353000f 	cmp	r3, #15
 c10b6c8:	0a00002f 	beq	c10b78c <kb_scan+0x160>
			//COMPLETAR: 
			//      si estÃ¡ el bit 1 a 0 la tecla es la map[i][3]
			//      si estÃ¡ el bit 2 a 0 la tecla es la map[i][2]
			//      si estÃ¡ el bit 3 a 0 la tecla es la map[i][1]
			//      si estÃ¡ el bit 4 a 0 la tecla es la map[i][0]
			if(!(temp & 1 << 0)) {
 c10b6cc:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c10b6d0:	e2033001 	and	r3, r3, #1
 c10b6d4:	e3530000 	cmp	r3, #0
 c10b6d8:	1a000007 	bne	c10b6fc <kb_scan+0xd0>
				return map[i][3];
 c10b6dc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c10b6e0:	e3e0304f 	mvn	r3, #79	; 0x4f
 c10b6e4:	e1a02202 	lsl	r2, r2, #4
 c10b6e8:	e24b1014 	sub	r1, fp, #20
 c10b6ec:	e0812002 	add	r2, r1, r2
 c10b6f0:	e0823003 	add	r3, r2, r3
 c10b6f4:	e5933000 	ldr	r3, [r3]
 c10b6f8:	ea00002d 	b	c10b7b4 <kb_scan+0x188>
			}

			if(!(temp & 1 << 1)) {
 c10b6fc:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c10b700:	e2033002 	and	r3, r3, #2
 c10b704:	e3530000 	cmp	r3, #0
 c10b708:	1a000007 	bne	c10b72c <kb_scan+0x100>
				return map[i][2];
 c10b70c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c10b710:	e3e03053 	mvn	r3, #83	; 0x53
 c10b714:	e1a02202 	lsl	r2, r2, #4
 c10b718:	e24b0014 	sub	r0, fp, #20
 c10b71c:	e0802002 	add	r2, r0, r2
 c10b720:	e0823003 	add	r3, r2, r3
 c10b724:	e5933000 	ldr	r3, [r3]
 c10b728:	ea000021 	b	c10b7b4 <kb_scan+0x188>
			}

			if(!(temp & 1 << 2)) {
 c10b72c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c10b730:	e2033004 	and	r3, r3, #4
 c10b734:	e3530000 	cmp	r3, #0
 c10b738:	1a000007 	bne	c10b75c <kb_scan+0x130>
				return map[i][1];
 c10b73c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c10b740:	e3e03057 	mvn	r3, #87	; 0x57
 c10b744:	e1a02202 	lsl	r2, r2, #4
 c10b748:	e24b1014 	sub	r1, fp, #20
 c10b74c:	e0812002 	add	r2, r1, r2
 c10b750:	e0823003 	add	r3, r2, r3
 c10b754:	e5933000 	ldr	r3, [r3]
 c10b758:	ea000015 	b	c10b7b4 <kb_scan+0x188>
			}

			if(!(temp & 1 << 3)) {
 c10b75c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
 c10b760:	e2033008 	and	r3, r3, #8
 c10b764:	e3530000 	cmp	r3, #0
 c10b768:	1a000007 	bne	c10b78c <kb_scan+0x160>
				return map[i][0];
 c10b76c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c10b770:	e3e0305b 	mvn	r3, #91	; 0x5b
 c10b774:	e1a02202 	lsl	r2, r2, #4
 c10b778:	e24b0014 	sub	r0, fp, #20
 c10b77c:	e0802002 	add	r2, r0, r2
 c10b780:	e0823003 	add	r3, r2, r3
 c10b784:	e5933000 	ldr	r3, [r3]
 c10b788:	ea000009 	b	c10b7b4 <kb_scan+0x188>
	int map[4][4] = {{0, 1, 2, 3},
					{4, 5, 6, 7},
					{8, 9, 0xA, 0xB},
					{0xC, 0xD, 0xE, 0xF}};

	for (i = 0; (i < 4) && (value == -1); i++) {
 c10b78c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10b790:	e2833001 	add	r3, r3, #1
 c10b794:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c10b798:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10b79c:	e3530003 	cmp	r3, #3
 c10b7a0:	ca000002 	bgt	c10b7b0 <kb_scan+0x184>
 c10b7a4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c10b7a8:	e3730001 	cmn	r3, #1
 c10b7ac:	0affffb6 	beq	c10b68c <kb_scan+0x60>
			}

	}
	}

	return value;
 c10b7b0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
}
 c10b7b4:	e1a00003 	mov	r0, r3
 c10b7b8:	e24bd010 	sub	sp, fp, #16
 c10b7bc:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c10b7c0:	e12fff1e 	bx	lr
 c10b7c4:	0c101068 	.word	0x0c101068
 c10b7c8:	0c101078 	.word	0x0c101078
 c10b7cc:	0c100060 	.word	0x0c100060

0c10b7d0 <lcd_init>:
static uint8 lcd_buffer[LCD_BUFFER_SIZE];

static uint8 state;

void lcd_init( void )
{
 c10b7d0:	e1a0c00d 	mov	ip, sp
 c10b7d4:	e92dd800 	push	{fp, ip, lr, pc}
 c10b7d8:	e24cb004 	sub	fp, ip, #4
	//Initialize dithering patterns to recommended patterns
	rDITHMODE = 0x12210;
 c10b7dc:	e59f30fc 	ldr	r3, [pc, #252]	; c10b8e0 <lcd_init+0x110>
 c10b7e0:	e59f20fc 	ldr	r2, [pc, #252]	; c10b8e4 <lcd_init+0x114>
 c10b7e4:	e5832000 	str	r2, [r3]
	rDP1_2 = 0xA5A5;
 c10b7e8:	e59f30f8 	ldr	r3, [pc, #248]	; c10b8e8 <lcd_init+0x118>
 c10b7ec:	e59f20f8 	ldr	r2, [pc, #248]	; c10b8ec <lcd_init+0x11c>
 c10b7f0:	e5832000 	str	r2, [r3]
	rDP4_7 = 0xBA5DA65;
 c10b7f4:	e59f30f4 	ldr	r3, [pc, #244]	; c10b8f0 <lcd_init+0x120>
 c10b7f8:	e59f20f4 	ldr	r2, [pc, #244]	; c10b8f4 <lcd_init+0x124>
 c10b7fc:	e5832000 	str	r2, [r3]
	rDP3_5 = 0xA5A5F;
 c10b800:	e59f30f0 	ldr	r3, [pc, #240]	; c10b8f8 <lcd_init+0x128>
 c10b804:	e59f20f0 	ldr	r2, [pc, #240]	; c10b8fc <lcd_init+0x12c>
 c10b808:	e5832000 	str	r2, [r3]
	rDP2_3 = 0xD6B;
 c10b80c:	e59f30ec 	ldr	r3, [pc, #236]	; c10b900 <lcd_init+0x130>
 c10b810:	e59f20ec 	ldr	r2, [pc, #236]	; c10b904 <lcd_init+0x134>
 c10b814:	e5832000 	str	r2, [r3]
	rDP5_7 = 0xEB7B5ED;
 c10b818:	e59f30e8 	ldr	r3, [pc, #232]	; c10b908 <lcd_init+0x138>
 c10b81c:	e59f20e8 	ldr	r2, [pc, #232]	; c10b90c <lcd_init+0x13c>
 c10b820:	e5832000 	str	r2, [r3]
	rDP3_4 = 0x7DBE;
 c10b824:	e59f30e4 	ldr	r3, [pc, #228]	; c10b910 <lcd_init+0x140>
 c10b828:	e59f20e4 	ldr	r2, [pc, #228]	; c10b914 <lcd_init+0x144>
 c10b82c:	e5832000 	str	r2, [r3]
	rDP4_5 = 0x7EBDF;
 c10b830:	e59f30e0 	ldr	r3, [pc, #224]	; c10b918 <lcd_init+0x148>
 c10b834:	e59f20e0 	ldr	r2, [pc, #224]	; c10b91c <lcd_init+0x14c>
 c10b838:	e5832000 	str	r2, [r3]
	rDP6_7 = 0x7FDFBFE;
 c10b83c:	e59f30dc 	ldr	r3, [pc, #220]	; c10b920 <lcd_init+0x150>
 c10b840:	e59f20dc 	ldr	r2, [pc, #220]	; c10b924 <lcd_init+0x154>
 c10b844:	e5832000 	str	r2, [r3]

	//Zero, black and white LCD
    rREDLUT   = 0;
 c10b848:	e59f30d8 	ldr	r3, [pc, #216]	; c10b928 <lcd_init+0x158>
 c10b84c:	e3a02000 	mov	r2, #0
 c10b850:	e5832000 	str	r2, [r3]
    rGREENLUT = 0;
 c10b854:	e59f30d0 	ldr	r3, [pc, #208]	; c10b92c <lcd_init+0x15c>
 c10b858:	e3a02000 	mov	r2, #0
 c10b85c:	e5832000 	str	r2, [r3]
    rBLUELUT  = 0;
 c10b860:	e59f30c8 	ldr	r3, [pc, #200]	; c10b930 <lcd_init+0x160>
 c10b864:	e3a02000 	mov	r2, #0
 c10b868:	e5832000 	str	r2, [r3]
    //LCDCON1[3]     = 0   no invierte la señal VLINE
    //LCDCON1[4]     = 0   las señales de vídeo se muestrean a flanco de bajada
    //LCDCON1[9:8]   = 0   WDLY = 4 ciclos (minimum blanking)
    //LCDCON1[11:10] = 0   WLH = 4 ciclos  (minimum blanking)
    //LCDCON1[21:12] = 28  CLKVAL = 28 => tFRAME = 59,4 Hz
    rLCDCON1  = 0x1C020;
 c10b86c:	e3a0361f 	mov	r3, #32505856	; 0x1f00000
 c10b870:	e59f20bc 	ldr	r2, [pc, #188]	; c10b934 <lcd_init+0x164>
 c10b874:	e5832000 	str	r2, [r3]

    //LCDCON2[31:21] =  0 LINEBLANK = 0 ciclos (minimum horizontal blanking
    //LCDCON2[20:10] = 79   HOZVAL = (320 / 4)  1 (Horizontal resolution)
    //LCDCON2[9:0]   = 239  LINEVAL = 240  1 (Vertical resolution)
    rLCDCON2  = 0x13CEF;
 c10b878:	e59f30b8 	ldr	r3, [pc, #184]	; c10b938 <lcd_init+0x168>
 c10b87c:	e59f20b8 	ldr	r2, [pc, #184]	; c10b93c <lcd_init+0x16c>
 c10b880:	e5832000 	str	r2, [r3]

    //LCDCON3[0] = 0  Disable self refresh
    rLCDCON3  = 0;
 c10b884:	e59f30b4 	ldr	r3, [pc, #180]	; c10b940 <lcd_init+0x170>
 c10b888:	e3a02000 	mov	r2, #0
 c10b88c:	e5832000 	str	r2, [r3]

    //Start of lcd_buffer
    rLCDSADDR1 = (2 << 27) | ((uint32)lcd_buffer >> 1);
 c10b890:	e59f30ac 	ldr	r3, [pc, #172]	; c10b944 <lcd_init+0x174>
 c10b894:	e59f20ac 	ldr	r2, [pc, #172]	; c10b948 <lcd_init+0x178>
 c10b898:	e1a020a2 	lsr	r2, r2, #1
 c10b89c:	e3822201 	orr	r2, r2, #268435456	; 0x10000000
 c10b8a0:	e5832000 	str	r2, [r3]

    //End of lcd_buffer
    rLCDSADDR2 = (1 << 29) | (((uint32)lcd_buffer + LCD_BUFFER_SIZE) & 0x3FFFFF) >> 1;
 c10b8a4:	e59f20a0 	ldr	r2, [pc, #160]	; c10b94c <lcd_init+0x17c>
 c10b8a8:	e59f3098 	ldr	r3, [pc, #152]	; c10b948 <lcd_init+0x178>
 c10b8ac:	e2833c96 	add	r3, r3, #38400	; 0x9600
 c10b8b0:	e3c334ff 	bic	r3, r3, #-16777216	; 0xff000000
 c10b8b4:	e3c33503 	bic	r3, r3, #12582912	; 0xc00000
 c10b8b8:	e1a030a3 	lsr	r3, r3, #1
 c10b8bc:	e3833202 	orr	r3, r3, #536870912	; 0x20000000
 c10b8c0:	e5823000 	str	r3, [r2]

    //No virtual screen
    //LCDSADDR3[19:9] = 0 OFFSIZE = 0
    //LCDSADDR3[8:0] = 80 PAGEWIDTH = HOZVAL + 1 = 320 / 4
    rLCDSADDR3 = 0x50;
 c10b8c4:	e59f3084 	ldr	r3, [pc, #132]	; c10b950 <lcd_init+0x180>
 c10b8c8:	e3a02050 	mov	r2, #80	; 0x50
 c10b8cc:	e5832000 	str	r2, [r3]

    lcd_off();
 c10b8d0:	eb00002e 	bl	c10b990 <lcd_off>
}
 c10b8d4:	e24bd00c 	sub	sp, fp, #12
 c10b8d8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10b8dc:	e12fff1e 	bx	lr
 c10b8e0:	01f00044 	.word	0x01f00044
 c10b8e4:	00012210 	.word	0x00012210
 c10b8e8:	01f00020 	.word	0x01f00020
 c10b8ec:	0000a5a5 	.word	0x0000a5a5
 c10b8f0:	01f00024 	.word	0x01f00024
 c10b8f4:	0ba5da65 	.word	0x0ba5da65
 c10b8f8:	01f00028 	.word	0x01f00028
 c10b8fc:	000a5a5f 	.word	0x000a5a5f
 c10b900:	01f0002c 	.word	0x01f0002c
 c10b904:	00000d6b 	.word	0x00000d6b
 c10b908:	01f00030 	.word	0x01f00030
 c10b90c:	0eb7b5ed 	.word	0x0eb7b5ed
 c10b910:	01f00034 	.word	0x01f00034
 c10b914:	00007dbe 	.word	0x00007dbe
 c10b918:	01f00038 	.word	0x01f00038
 c10b91c:	0007ebdf 	.word	0x0007ebdf
 c10b920:	01f0003c 	.word	0x01f0003c
 c10b924:	07fdfbfe 	.word	0x07fdfbfe
 c10b928:	01f00014 	.word	0x01f00014
 c10b92c:	01f00018 	.word	0x01f00018
 c10b930:	01f0001c 	.word	0x01f0001c
 c10b934:	0001c020 	.word	0x0001c020
 c10b938:	01f00004 	.word	0x01f00004
 c10b93c:	00013cef 	.word	0x00013cef
 c10b940:	01f00040 	.word	0x01f00040
 c10b944:	01f00008 	.word	0x01f00008
 c10b948:	0c101168 	.word	0x0c101168
 c10b94c:	01f0000c 	.word	0x01f0000c
 c10b950:	01f00010 	.word	0x01f00010

0c10b954 <lcd_on>:

void lcd_on( void )
{
 c10b954:	e1a0c00d 	mov	ip, sp
 c10b958:	e92dd800 	push	{fp, ip, lr, pc}
 c10b95c:	e24cb004 	sub	fp, ip, #4
    rLCDCON1 |= 1;
 c10b960:	e3a0361f 	mov	r3, #32505856	; 0x1f00000
 c10b964:	e3a0261f 	mov	r2, #32505856	; 0x1f00000
 c10b968:	e5922000 	ldr	r2, [r2]
 c10b96c:	e3822001 	orr	r2, r2, #1
 c10b970:	e5832000 	str	r2, [r3]
	state = 1;
 c10b974:	e59f3010 	ldr	r3, [pc, #16]	; c10b98c <lcd_on+0x38>
 c10b978:	e3a02001 	mov	r2, #1
 c10b97c:	e5c32000 	strb	r2, [r3]
}
 c10b980:	e24bd00c 	sub	sp, fp, #12
 c10b984:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10b988:	e12fff1e 	bx	lr
 c10b98c:	0c10a768 	.word	0x0c10a768

0c10b990 <lcd_off>:

void lcd_off( void )
{
 c10b990:	e1a0c00d 	mov	ip, sp
 c10b994:	e92dd800 	push	{fp, ip, lr, pc}
 c10b998:	e24cb004 	sub	fp, ip, #4
    rLCDCON1 &= ~1;
 c10b99c:	e3a0361f 	mov	r3, #32505856	; 0x1f00000
 c10b9a0:	e3a0261f 	mov	r2, #32505856	; 0x1f00000
 c10b9a4:	e5922000 	ldr	r2, [r2]
 c10b9a8:	e3c22001 	bic	r2, r2, #1
 c10b9ac:	e5832000 	str	r2, [r3]
	state = 0;
 c10b9b0:	e59f3010 	ldr	r3, [pc, #16]	; c10b9c8 <lcd_off+0x38>
 c10b9b4:	e3a02000 	mov	r2, #0
 c10b9b8:	e5c32000 	strb	r2, [r3]
}
 c10b9bc:	e24bd00c 	sub	sp, fp, #12
 c10b9c0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10b9c4:	e12fff1e 	bx	lr
 c10b9c8:	0c10a768 	.word	0x0c10a768

0c10b9cc <lcd_status>:

uint8 lcd_status( void )
{
 c10b9cc:	e1a0c00d 	mov	ip, sp
 c10b9d0:	e92dd800 	push	{fp, ip, lr, pc}
 c10b9d4:	e24cb004 	sub	fp, ip, #4
	return state;
 c10b9d8:	e59f3010 	ldr	r3, [pc, #16]	; c10b9f0 <lcd_status+0x24>
 c10b9dc:	e5d33000 	ldrb	r3, [r3]
}
 c10b9e0:	e1a00003 	mov	r0, r3
 c10b9e4:	e24bd00c 	sub	sp, fp, #12
 c10b9e8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10b9ec:	e12fff1e 	bx	lr
 c10b9f0:	0c10a768 	.word	0x0c10a768

0c10b9f4 <lcd_clear>:

void lcd_clear( void )
{
 c10b9f4:	e1a0c00d 	mov	ip, sp
 c10b9f8:	e92dd800 	push	{fp, ip, lr, pc}
 c10b9fc:	e24cb004 	sub	fp, ip, #4
 c10ba00:	e24dd008 	sub	sp, sp, #8
	uint16 i = 0;
 c10ba04:	e3a03000 	mov	r3, #0
 c10ba08:	e14b30be 	strh	r3, [fp, #-14]
    while(i < LCD_BUFFER_SIZE) {
 c10ba0c:	ea000006 	b	c10ba2c <lcd_clear+0x38>
    	lcd_buffer[i] = 0x0;
 c10ba10:	e15b30be 	ldrh	r3, [fp, #-14]
 c10ba14:	e59f202c 	ldr	r2, [pc, #44]	; c10ba48 <lcd_clear+0x54>
 c10ba18:	e3a01000 	mov	r1, #0
 c10ba1c:	e7c21003 	strb	r1, [r2, r3]
    	i++;
 c10ba20:	e15b30be 	ldrh	r3, [fp, #-14]
 c10ba24:	e2833001 	add	r3, r3, #1
 c10ba28:	e14b30be 	strh	r3, [fp, #-14]
}

void lcd_clear( void )
{
	uint16 i = 0;
    while(i < LCD_BUFFER_SIZE) {
 c10ba2c:	e15b20be 	ldrh	r2, [fp, #-14]
 c10ba30:	e59f3014 	ldr	r3, [pc, #20]	; c10ba4c <lcd_clear+0x58>
 c10ba34:	e1520003 	cmp	r2, r3
 c10ba38:	9afffff4 	bls	c10ba10 <lcd_clear+0x1c>
    	lcd_buffer[i] = 0x0;
    	i++;
    }
}
 c10ba3c:	e24bd00c 	sub	sp, fp, #12
 c10ba40:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10ba44:	e12fff1e 	bx	lr
 c10ba48:	0c101168 	.word	0x0c101168
 c10ba4c:	000095ff 	.word	0x000095ff

0c10ba50 <lcd_clear_color>:

void lcd_clear_color( uint8 color )
{
 c10ba50:	e1a0c00d 	mov	ip, sp
 c10ba54:	e92dd800 	push	{fp, ip, lr, pc}
 c10ba58:	e24cb004 	sub	fp, ip, #4
 c10ba5c:	e24dd010 	sub	sp, sp, #16
 c10ba60:	e1a03000 	mov	r3, r0
 c10ba64:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	uint16 i = 0;
 c10ba68:	e3a03000 	mov	r3, #0
 c10ba6c:	e14b30be 	strh	r3, [fp, #-14]
	uint8 c = color & 0xf;
 c10ba70:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10ba74:	e203300f 	and	r3, r3, #15
 c10ba78:	e54b300f 	strb	r3, [fp, #-15]

    while(i < LCD_BUFFER_SIZE) {
 c10ba7c:	ea00000c 	b	c10bab4 <lcd_clear_color+0x64>
    	lcd_buffer[i] = (c << 4) | c;
 c10ba80:	e15b30be 	ldrh	r3, [fp, #-14]
 c10ba84:	e55b200f 	ldrb	r2, [fp, #-15]
 c10ba88:	e1a02202 	lsl	r2, r2, #4
 c10ba8c:	e20210ff 	and	r1, r2, #255	; 0xff
 c10ba90:	e55b200f 	ldrb	r2, [fp, #-15]
 c10ba94:	e1812002 	orr	r2, r1, r2
 c10ba98:	e20220ff 	and	r2, r2, #255	; 0xff
 c10ba9c:	e20210ff 	and	r1, r2, #255	; 0xff
 c10baa0:	e59f2028 	ldr	r2, [pc, #40]	; c10bad0 <lcd_clear_color+0x80>
 c10baa4:	e7c21003 	strb	r1, [r2, r3]
    	i++;
 c10baa8:	e15b30be 	ldrh	r3, [fp, #-14]
 c10baac:	e2833001 	add	r3, r3, #1
 c10bab0:	e14b30be 	strh	r3, [fp, #-14]
void lcd_clear_color( uint8 color )
{
	uint16 i = 0;
	uint8 c = color & 0xf;

    while(i < LCD_BUFFER_SIZE) {
 c10bab4:	e15b20be 	ldrh	r2, [fp, #-14]
 c10bab8:	e59f3014 	ldr	r3, [pc, #20]	; c10bad4 <lcd_clear_color+0x84>
 c10babc:	e1520003 	cmp	r2, r3
 c10bac0:	9affffee 	bls	c10ba80 <lcd_clear_color+0x30>
    	lcd_buffer[i] = (c << 4) | c;
    	i++;
    }
}
 c10bac4:	e24bd00c 	sub	sp, fp, #12
 c10bac8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10bacc:	e12fff1e 	bx	lr
 c10bad0:	0c101168 	.word	0x0c101168
 c10bad4:	000095ff 	.word	0x000095ff

0c10bad8 <lcd_putpixel>:


void lcd_putpixel( uint16 x, uint16 y, uint8 c)
{
 c10bad8:	e1a0c00d 	mov	ip, sp
 c10badc:	e92dd800 	push	{fp, ip, lr, pc}
 c10bae0:	e24cb004 	sub	fp, ip, #4
 c10bae4:	e24dd010 	sub	sp, sp, #16
 c10bae8:	e1a03002 	mov	r3, r2
 c10baec:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c10baf0:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c10baf4:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    uint8 byte, bit;
    uint16 i;

    i = x/2 + y*(LCD_WIDTH/2);
 c10baf8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c10bafc:	e1a030a3 	lsr	r3, r3, #1
 c10bb00:	e1a03803 	lsl	r3, r3, #16
 c10bb04:	e1a02823 	lsr	r2, r3, #16
 c10bb08:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c10bb0c:	e1a01003 	mov	r1, r3
 c10bb10:	e1a01101 	lsl	r1, r1, #2
 c10bb14:	e0813003 	add	r3, r1, r3
 c10bb18:	e1a03283 	lsl	r3, r3, #5
 c10bb1c:	e1a03803 	lsl	r3, r3, #16
 c10bb20:	e1a03823 	lsr	r3, r3, #16
 c10bb24:	e0823003 	add	r3, r2, r3
 c10bb28:	e14b30be 	strh	r3, [fp, #-14]
    bit = (1-x%2)*4;
 c10bb2c:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c10bb30:	e2033001 	and	r3, r3, #1
 c10bb34:	e3530000 	cmp	r3, #0
 c10bb38:	1a000001 	bne	c10bb44 <lcd_putpixel+0x6c>
 c10bb3c:	e3a03004 	mov	r3, #4
 c10bb40:	ea000000 	b	c10bb48 <lcd_putpixel+0x70>
 c10bb44:	e3a03000 	mov	r3, #0
 c10bb48:	e54b300f 	strb	r3, [fp, #-15]

    byte = lcd_buffer[i];
 c10bb4c:	e15b30be 	ldrh	r3, [fp, #-14]
 c10bb50:	e59f2068 	ldr	r2, [pc, #104]	; c10bbc0 <lcd_putpixel+0xe8>
 c10bb54:	e7d23003 	ldrb	r3, [r2, r3]
 c10bb58:	e54b3010 	strb	r3, [fp, #-16]
    byte &= ~(0xF << bit);
 c10bb5c:	e55b300f 	ldrb	r3, [fp, #-15]
 c10bb60:	e3a0200f 	mov	r2, #15
 c10bb64:	e1a03312 	lsl	r3, r2, r3
 c10bb68:	e20330ff 	and	r3, r3, #255	; 0xff
 c10bb6c:	e1e03003 	mvn	r3, r3
 c10bb70:	e20320ff 	and	r2, r3, #255	; 0xff
 c10bb74:	e55b3010 	ldrb	r3, [fp, #-16]
 c10bb78:	e0023003 	and	r3, r2, r3
 c10bb7c:	e20330ff 	and	r3, r3, #255	; 0xff
 c10bb80:	e54b3010 	strb	r3, [fp, #-16]
    byte |= c << bit;
 c10bb84:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
 c10bb88:	e55b300f 	ldrb	r3, [fp, #-15]
 c10bb8c:	e1a03312 	lsl	r3, r2, r3
 c10bb90:	e20320ff 	and	r2, r3, #255	; 0xff
 c10bb94:	e55b3010 	ldrb	r3, [fp, #-16]
 c10bb98:	e1823003 	orr	r3, r2, r3
 c10bb9c:	e20330ff 	and	r3, r3, #255	; 0xff
 c10bba0:	e54b3010 	strb	r3, [fp, #-16]
    lcd_buffer[i] = byte;
 c10bba4:	e15b30be 	ldrh	r3, [fp, #-14]
 c10bba8:	e59f2010 	ldr	r2, [pc, #16]	; c10bbc0 <lcd_putpixel+0xe8>
 c10bbac:	e55b1010 	ldrb	r1, [fp, #-16]
 c10bbb0:	e7c21003 	strb	r1, [r2, r3]
}
 c10bbb4:	e24bd00c 	sub	sp, fp, #12
 c10bbb8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10bbbc:	e12fff1e 	bx	lr
 c10bbc0:	0c101168 	.word	0x0c101168

0c10bbc4 <lcd_getpixel>:

uint8 lcd_getpixel( uint16 x, uint16 y )
{
 c10bbc4:	e1a0c00d 	mov	ip, sp
 c10bbc8:	e92dd800 	push	{fp, ip, lr, pc}
 c10bbcc:	e24cb004 	sub	fp, ip, #4
 c10bbd0:	e24dd010 	sub	sp, sp, #16
 c10bbd4:	e1a02000 	mov	r2, r0
 c10bbd8:	e1a03001 	mov	r3, r1
 c10bbdc:	e14b21b6 	strh	r2, [fp, #-22]	; 0xffffffea
 c10bbe0:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
	uint8 byte, bit;
	uint16 i = x/2 + y*(LCD_WIDTH/2);
 c10bbe4:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c10bbe8:	e1a030a3 	lsr	r3, r3, #1
 c10bbec:	e1a03803 	lsl	r3, r3, #16
 c10bbf0:	e1a02823 	lsr	r2, r3, #16
 c10bbf4:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c10bbf8:	e1a01003 	mov	r1, r3
 c10bbfc:	e1a01101 	lsl	r1, r1, #2
 c10bc00:	e0813003 	add	r3, r1, r3
 c10bc04:	e1a03283 	lsl	r3, r3, #5
 c10bc08:	e1a03803 	lsl	r3, r3, #16
 c10bc0c:	e1a03823 	lsr	r3, r3, #16
 c10bc10:	e0823003 	add	r3, r2, r3
 c10bc14:	e14b30be 	strh	r3, [fp, #-14]

	bit = (1-x%2)*4;
 c10bc18:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c10bc1c:	e2033001 	and	r3, r3, #1
 c10bc20:	e3530000 	cmp	r3, #0
 c10bc24:	1a000001 	bne	c10bc30 <lcd_getpixel+0x6c>
 c10bc28:	e3a03004 	mov	r3, #4
 c10bc2c:	ea000000 	b	c10bc34 <lcd_getpixel+0x70>
 c10bc30:	e3a03000 	mov	r3, #0
 c10bc34:	e54b300f 	strb	r3, [fp, #-15]
	byte = lcd_buffer[i];
 c10bc38:	e15b30be 	ldrh	r3, [fp, #-14]
 c10bc3c:	e59f202c 	ldr	r2, [pc, #44]	; c10bc70 <lcd_getpixel+0xac>
 c10bc40:	e7d23003 	ldrb	r3, [r2, r3]
 c10bc44:	e54b3010 	strb	r3, [fp, #-16]

	return (byte >> bit ) & 0xf;
 c10bc48:	e55b2010 	ldrb	r2, [fp, #-16]
 c10bc4c:	e55b300f 	ldrb	r3, [fp, #-15]
 c10bc50:	e1a03352 	asr	r3, r2, r3
 c10bc54:	e20330ff 	and	r3, r3, #255	; 0xff
 c10bc58:	e203300f 	and	r3, r3, #15
 c10bc5c:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c10bc60:	e1a00003 	mov	r0, r3
 c10bc64:	e24bd00c 	sub	sp, fp, #12
 c10bc68:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10bc6c:	e12fff1e 	bx	lr
 c10bc70:	0c101168 	.word	0x0c101168

0c10bc74 <lcd_draw_hline>:

void lcd_draw_hline( uint16 xleft, uint16 xright, uint16 y, uint8 color, uint16 width )
{
 c10bc74:	e1a0c00d 	mov	ip, sp
 c10bc78:	e92dd800 	push	{fp, ip, lr, pc}
 c10bc7c:	e24cb004 	sub	fp, ip, #4
 c10bc80:	e24dd010 	sub	sp, sp, #16
 c10bc84:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c10bc88:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c10bc8c:	e14b21ba 	strh	r2, [fp, #-26]	; 0xffffffe6
 c10bc90:	e54b301b 	strb	r3, [fp, #-27]	; 0xffffffe5
	int x_i, y_i;
	for(x_i = xleft; x_i <= xright; ++x_i)
 c10bc94:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c10bc98:	e50b3010 	str	r3, [fp, #-16]
 c10bc9c:	ea000019 	b	c10bd08 <lcd_draw_hline+0x94>
		for(y_i = y; y_i < y + width; ++y_i)
 c10bca0:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c10bca4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c10bca8:	ea00000d 	b	c10bce4 <lcd_draw_hline+0x70>
			lcd_putpixel(x_i, y_i, color);
 c10bcac:	e51b3010 	ldr	r3, [fp, #-16]
 c10bcb0:	e1a03803 	lsl	r3, r3, #16
 c10bcb4:	e1a01823 	lsr	r1, r3, #16
 c10bcb8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10bcbc:	e1a03803 	lsl	r3, r3, #16
 c10bcc0:	e1a02823 	lsr	r2, r3, #16
 c10bcc4:	e55b301b 	ldrb	r3, [fp, #-27]	; 0xffffffe5
 c10bcc8:	e1a00001 	mov	r0, r1
 c10bccc:	e1a01002 	mov	r1, r2
 c10bcd0:	e1a02003 	mov	r2, r3
 c10bcd4:	ebffff7f 	bl	c10bad8 <lcd_putpixel>

void lcd_draw_hline( uint16 xleft, uint16 xright, uint16 y, uint8 color, uint16 width )
{
	int x_i, y_i;
	for(x_i = xleft; x_i <= xright; ++x_i)
		for(y_i = y; y_i < y + width; ++y_i)
 c10bcd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10bcdc:	e2833001 	add	r3, r3, #1
 c10bce0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c10bce4:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
 c10bce8:	e1db30b4 	ldrh	r3, [fp, #4]
 c10bcec:	e0822003 	add	r2, r2, r3
 c10bcf0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10bcf4:	e1520003 	cmp	r2, r3
 c10bcf8:	caffffeb 	bgt	c10bcac <lcd_draw_hline+0x38>
}

void lcd_draw_hline( uint16 xleft, uint16 xright, uint16 y, uint8 color, uint16 width )
{
	int x_i, y_i;
	for(x_i = xleft; x_i <= xright; ++x_i)
 c10bcfc:	e51b3010 	ldr	r3, [fp, #-16]
 c10bd00:	e2833001 	add	r3, r3, #1
 c10bd04:	e50b3010 	str	r3, [fp, #-16]
 c10bd08:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
 c10bd0c:	e51b3010 	ldr	r3, [fp, #-16]
 c10bd10:	e1520003 	cmp	r2, r3
 c10bd14:	aaffffe1 	bge	c10bca0 <lcd_draw_hline+0x2c>
		for(y_i = y; y_i < y + width; ++y_i)
			lcd_putpixel(x_i, y_i, color);
}
 c10bd18:	e24bd00c 	sub	sp, fp, #12
 c10bd1c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10bd20:	e12fff1e 	bx	lr

0c10bd24 <lcd_draw_vline>:

void lcd_draw_vline( uint16 yup, uint16 ydown, uint16 x, uint8 color, uint16 width )
{
 c10bd24:	e1a0c00d 	mov	ip, sp
 c10bd28:	e92dd800 	push	{fp, ip, lr, pc}
 c10bd2c:	e24cb004 	sub	fp, ip, #4
 c10bd30:	e24dd010 	sub	sp, sp, #16
 c10bd34:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c10bd38:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c10bd3c:	e14b21ba 	strh	r2, [fp, #-26]	; 0xffffffe6
 c10bd40:	e54b301b 	strb	r3, [fp, #-27]	; 0xffffffe5
	int x_i, y_i;
	for(y_i = yup; y_i <= ydown; ++y_i)
 c10bd44:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c10bd48:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c10bd4c:	ea000019 	b	c10bdb8 <lcd_draw_vline+0x94>
		for(x_i = x; x_i < x + width; ++x_i)
 c10bd50:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c10bd54:	e50b3010 	str	r3, [fp, #-16]
 c10bd58:	ea00000d 	b	c10bd94 <lcd_draw_vline+0x70>
			lcd_putpixel(x_i, y_i, color);
 c10bd5c:	e51b3010 	ldr	r3, [fp, #-16]
 c10bd60:	e1a03803 	lsl	r3, r3, #16
 c10bd64:	e1a01823 	lsr	r1, r3, #16
 c10bd68:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10bd6c:	e1a03803 	lsl	r3, r3, #16
 c10bd70:	e1a02823 	lsr	r2, r3, #16
 c10bd74:	e55b301b 	ldrb	r3, [fp, #-27]	; 0xffffffe5
 c10bd78:	e1a00001 	mov	r0, r1
 c10bd7c:	e1a01002 	mov	r1, r2
 c10bd80:	e1a02003 	mov	r2, r3
 c10bd84:	ebffff53 	bl	c10bad8 <lcd_putpixel>

void lcd_draw_vline( uint16 yup, uint16 ydown, uint16 x, uint8 color, uint16 width )
{
	int x_i, y_i;
	for(y_i = yup; y_i <= ydown; ++y_i)
		for(x_i = x; x_i < x + width; ++x_i)
 c10bd88:	e51b3010 	ldr	r3, [fp, #-16]
 c10bd8c:	e2833001 	add	r3, r3, #1
 c10bd90:	e50b3010 	str	r3, [fp, #-16]
 c10bd94:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
 c10bd98:	e1db30b4 	ldrh	r3, [fp, #4]
 c10bd9c:	e0822003 	add	r2, r2, r3
 c10bda0:	e51b3010 	ldr	r3, [fp, #-16]
 c10bda4:	e1520003 	cmp	r2, r3
 c10bda8:	caffffeb 	bgt	c10bd5c <lcd_draw_vline+0x38>
}

void lcd_draw_vline( uint16 yup, uint16 ydown, uint16 x, uint8 color, uint16 width )
{
	int x_i, y_i;
	for(y_i = yup; y_i <= ydown; ++y_i)
 c10bdac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10bdb0:	e2833001 	add	r3, r3, #1
 c10bdb4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c10bdb8:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
 c10bdbc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10bdc0:	e1520003 	cmp	r2, r3
 c10bdc4:	aaffffe1 	bge	c10bd50 <lcd_draw_vline+0x2c>
		for(x_i = x; x_i < x + width; ++x_i)
			lcd_putpixel(x_i, y_i, color);
}
 c10bdc8:	e24bd00c 	sub	sp, fp, #12
 c10bdcc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10bdd0:	e12fff1e 	bx	lr

0c10bdd4 <lcd_draw_box>:

void lcd_draw_box( uint16 xleft, uint16 yup, uint16 xright, uint16 ydown, uint8 color, uint16 width )
{
 c10bdd4:	e1a0c00d 	mov	ip, sp
 c10bdd8:	e92dd800 	push	{fp, ip, lr, pc}
 c10bddc:	e24cb004 	sub	fp, ip, #4
 c10bde0:	e24dd010 	sub	sp, sp, #16
 c10bde4:	e14b00be 	strh	r0, [fp, #-14]
 c10bde8:	e14b11b0 	strh	r1, [fp, #-16]
 c10bdec:	e14b21b2 	strh	r2, [fp, #-18]	; 0xffffffee
 c10bdf0:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
	lcd_draw_hline(xleft, xright, yup, color, width);
 c10bdf4:	e15b00be 	ldrh	r0, [fp, #-14]
 c10bdf8:	e15b11b2 	ldrh	r1, [fp, #-18]	; 0xffffffee
 c10bdfc:	e15b21b0 	ldrh	r2, [fp, #-16]
 c10be00:	e5db3004 	ldrb	r3, [fp, #4]
 c10be04:	e1dbc0b8 	ldrh	ip, [fp, #8]
 c10be08:	e58dc000 	str	ip, [sp]
 c10be0c:	ebffff98 	bl	c10bc74 <lcd_draw_hline>
	lcd_draw_vline(yup, ydown, xleft, color, width);
 c10be10:	e15b01b0 	ldrh	r0, [fp, #-16]
 c10be14:	e15b11b4 	ldrh	r1, [fp, #-20]	; 0xffffffec
 c10be18:	e15b20be 	ldrh	r2, [fp, #-14]
 c10be1c:	e5db3004 	ldrb	r3, [fp, #4]
 c10be20:	e1dbc0b8 	ldrh	ip, [fp, #8]
 c10be24:	e58dc000 	str	ip, [sp]
 c10be28:	ebffffbd 	bl	c10bd24 <lcd_draw_vline>
	lcd_draw_vline(yup, ydown, xright - width + 1, color, width);
 c10be2c:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c10be30:	e1db30b8 	ldrh	r3, [fp, #8]
 c10be34:	e0633002 	rsb	r3, r3, r2
 c10be38:	e1a03803 	lsl	r3, r3, #16
 c10be3c:	e1a03823 	lsr	r3, r3, #16
 c10be40:	e2833001 	add	r3, r3, #1
 c10be44:	e1a03803 	lsl	r3, r3, #16
 c10be48:	e1a02823 	lsr	r2, r3, #16
 c10be4c:	e15b01b0 	ldrh	r0, [fp, #-16]
 c10be50:	e15b11b4 	ldrh	r1, [fp, #-20]	; 0xffffffec
 c10be54:	e5db3004 	ldrb	r3, [fp, #4]
 c10be58:	e1dbc0b8 	ldrh	ip, [fp, #8]
 c10be5c:	e58dc000 	str	ip, [sp]
 c10be60:	ebffffaf 	bl	c10bd24 <lcd_draw_vline>
	lcd_draw_hline(xleft, xright, ydown - width + 1, color, width);
 c10be64:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
 c10be68:	e1db30b8 	ldrh	r3, [fp, #8]
 c10be6c:	e0633002 	rsb	r3, r3, r2
 c10be70:	e1a03803 	lsl	r3, r3, #16
 c10be74:	e1a03823 	lsr	r3, r3, #16
 c10be78:	e2833001 	add	r3, r3, #1
 c10be7c:	e1a03803 	lsl	r3, r3, #16
 c10be80:	e1a02823 	lsr	r2, r3, #16
 c10be84:	e15b00be 	ldrh	r0, [fp, #-14]
 c10be88:	e15b11b2 	ldrh	r1, [fp, #-18]	; 0xffffffee
 c10be8c:	e5db3004 	ldrb	r3, [fp, #4]
 c10be90:	e1dbc0b8 	ldrh	ip, [fp, #8]
 c10be94:	e58dc000 	str	ip, [sp]
 c10be98:	ebffff75 	bl	c10bc74 <lcd_draw_hline>
}
 c10be9c:	e24bd00c 	sub	sp, fp, #12
 c10bea0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10bea4:	e12fff1e 	bx	lr

0c10bea8 <lcd_putchar>:

void lcd_putchar( uint16 x, uint16 y, uint8 color, char ch )
{
 c10bea8:	e1a0c00d 	mov	ip, sp
 c10beac:	e92dd800 	push	{fp, ip, lr, pc}
 c10beb0:	e24cb004 	sub	fp, ip, #4
 c10beb4:	e24dd010 	sub	sp, sp, #16
 c10beb8:	e14b01b6 	strh	r0, [fp, #-22]	; 0xffffffea
 c10bebc:	e14b11b8 	strh	r1, [fp, #-24]	; 0xffffffe8
 c10bec0:	e54b2019 	strb	r2, [fp, #-25]	; 0xffffffe7
 c10bec4:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
    uint8 line, row;
    uint8 *bitmap;

    bitmap = font + ch*16;
 c10bec8:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
 c10becc:	e1a03203 	lsl	r3, r3, #4
 c10bed0:	e1a02003 	mov	r2, r3
 c10bed4:	e59f311c 	ldr	r3, [pc, #284]	; c10bff8 <lcd_putchar+0x150>
 c10bed8:	e0823003 	add	r3, r2, r3
 c10bedc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for( line=0; line<16; line++ )
 c10bee0:	e3a03000 	mov	r3, #0
 c10bee4:	e54b300d 	strb	r3, [fp, #-13]
 c10bee8:	ea00003c 	b	c10bfe0 <lcd_putchar+0x138>
        for( row=0; row<8; row++ )
 c10beec:	e3a03000 	mov	r3, #0
 c10bef0:	e54b300e 	strb	r3, [fp, #-14]
 c10bef4:	ea000033 	b	c10bfc8 <lcd_putchar+0x120>
            if( bitmap[line] & (0x80 >> row) )
 c10bef8:	e55b300d 	ldrb	r3, [fp, #-13]
 c10befc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c10bf00:	e0823003 	add	r3, r2, r3
 c10bf04:	e5d33000 	ldrb	r3, [r3]
 c10bf08:	e1a02003 	mov	r2, r3
 c10bf0c:	e55b300e 	ldrb	r3, [fp, #-14]
 c10bf10:	e3a01080 	mov	r1, #128	; 0x80
 c10bf14:	e1a03351 	asr	r3, r1, r3
 c10bf18:	e0023003 	and	r3, r2, r3
 c10bf1c:	e3530000 	cmp	r3, #0
 c10bf20:	0a000013 	beq	c10bf74 <lcd_putchar+0xcc>
                lcd_putpixel( x+row, y+line, color );
 c10bf24:	e55b300e 	ldrb	r3, [fp, #-14]
 c10bf28:	e1a03803 	lsl	r3, r3, #16
 c10bf2c:	e1a02823 	lsr	r2, r3, #16
 c10bf30:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c10bf34:	e0823003 	add	r3, r2, r3
 c10bf38:	e1a03803 	lsl	r3, r3, #16
 c10bf3c:	e1a01823 	lsr	r1, r3, #16
 c10bf40:	e55b300d 	ldrb	r3, [fp, #-13]
 c10bf44:	e1a03803 	lsl	r3, r3, #16
 c10bf48:	e1a02823 	lsr	r2, r3, #16
 c10bf4c:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c10bf50:	e0823003 	add	r3, r2, r3
 c10bf54:	e1a03803 	lsl	r3, r3, #16
 c10bf58:	e1a02823 	lsr	r2, r3, #16
 c10bf5c:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
 c10bf60:	e1a00001 	mov	r0, r1
 c10bf64:	e1a01002 	mov	r1, r2
 c10bf68:	e1a02003 	mov	r2, r3
 c10bf6c:	ebfffed9 	bl	c10bad8 <lcd_putpixel>
 c10bf70:	ea000011 	b	c10bfbc <lcd_putchar+0x114>
            else
                lcd_putpixel( x+row, y+line, WHITE );
 c10bf74:	e55b300e 	ldrb	r3, [fp, #-14]
 c10bf78:	e1a03803 	lsl	r3, r3, #16
 c10bf7c:	e1a02823 	lsr	r2, r3, #16
 c10bf80:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c10bf84:	e0823003 	add	r3, r2, r3
 c10bf88:	e1a03803 	lsl	r3, r3, #16
 c10bf8c:	e1a02823 	lsr	r2, r3, #16
 c10bf90:	e55b300d 	ldrb	r3, [fp, #-13]
 c10bf94:	e1a03803 	lsl	r3, r3, #16
 c10bf98:	e1a01823 	lsr	r1, r3, #16
 c10bf9c:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
 c10bfa0:	e0813003 	add	r3, r1, r3
 c10bfa4:	e1a03803 	lsl	r3, r3, #16
 c10bfa8:	e1a03823 	lsr	r3, r3, #16
 c10bfac:	e1a00002 	mov	r0, r2
 c10bfb0:	e1a01003 	mov	r1, r3
 c10bfb4:	e3a02000 	mov	r2, #0
 c10bfb8:	ebfffec6 	bl	c10bad8 <lcd_putpixel>
    uint8 line, row;
    uint8 *bitmap;

    bitmap = font + ch*16;
    for( line=0; line<16; line++ )
        for( row=0; row<8; row++ )
 c10bfbc:	e55b300e 	ldrb	r3, [fp, #-14]
 c10bfc0:	e2833001 	add	r3, r3, #1
 c10bfc4:	e54b300e 	strb	r3, [fp, #-14]
 c10bfc8:	e55b300e 	ldrb	r3, [fp, #-14]
 c10bfcc:	e3530007 	cmp	r3, #7
 c10bfd0:	9affffc8 	bls	c10bef8 <lcd_putchar+0x50>
{
    uint8 line, row;
    uint8 *bitmap;

    bitmap = font + ch*16;
    for( line=0; line<16; line++ )
 c10bfd4:	e55b300d 	ldrb	r3, [fp, #-13]
 c10bfd8:	e2833001 	add	r3, r3, #1
 c10bfdc:	e54b300d 	strb	r3, [fp, #-13]
 c10bfe0:	e55b300d 	ldrb	r3, [fp, #-13]
 c10bfe4:	e353000f 	cmp	r3, #15
 c10bfe8:	9affffbf 	bls	c10beec <lcd_putchar+0x44>
        for( row=0; row<8; row++ )
            if( bitmap[line] & (0x80 >> row) )
                lcd_putpixel( x+row, y+line, color );
            else
                lcd_putpixel( x+row, y+line, WHITE );
}
 c10bfec:	e24bd00c 	sub	sp, fp, #12
 c10bff0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10bff4:	e12fff1e 	bx	lr
 c10bff8:	0c100068 	.word	0x0c100068

0c10bffc <lcd_puts>:

void lcd_puts( uint16 x, uint16 y, uint8 color, char *s )
{
 c10bffc:	e1a0c00d 	mov	ip, sp
 c10c000:	e92dd800 	push	{fp, ip, lr, pc}
 c10c004:	e24cb004 	sub	fp, ip, #4
 c10c008:	e24dd010 	sub	sp, sp, #16
 c10c00c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c10c010:	e14b00be 	strh	r0, [fp, #-14]
 c10c014:	e14b11b0 	strh	r1, [fp, #-16]
 c10c018:	e1a03002 	mov	r3, r2
 c10c01c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	while(*s) {
 c10c020:	ea000015 	b	c10c07c <lcd_puts+0x80>
		lcd_putchar(x, y, color, *s);
 c10c024:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10c028:	e5d33000 	ldrb	r3, [r3]
 c10c02c:	e15b00be 	ldrh	r0, [fp, #-14]
 c10c030:	e15b11b0 	ldrh	r1, [fp, #-16]
 c10c034:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
 c10c038:	ebffff9a 	bl	c10bea8 <lcd_putchar>

		x += 8;
 c10c03c:	e15b30be 	ldrh	r3, [fp, #-14]
 c10c040:	e2833008 	add	r3, r3, #8
 c10c044:	e14b30be 	strh	r3, [fp, #-14]
		if(x + 8 >= LCD_WIDTH) {
 c10c048:	e15b30be 	ldrh	r3, [fp, #-14]
 c10c04c:	e2832008 	add	r2, r3, #8
 c10c050:	e59f3040 	ldr	r3, [pc, #64]	; c10c098 <lcd_puts+0x9c>
 c10c054:	e1520003 	cmp	r2, r3
 c10c058:	da000004 	ble	c10c070 <lcd_puts+0x74>
			x = 0;
 c10c05c:	e3a03000 	mov	r3, #0
 c10c060:	e14b30be 	strh	r3, [fp, #-14]
			y += 16;
 c10c064:	e15b31b0 	ldrh	r3, [fp, #-16]
 c10c068:	e2833010 	add	r3, r3, #16
 c10c06c:	e14b31b0 	strh	r3, [fp, #-16]
		}
		s++;
 c10c070:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10c074:	e2833001 	add	r3, r3, #1
 c10c078:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                lcd_putpixel( x+row, y+line, WHITE );
}

void lcd_puts( uint16 x, uint16 y, uint8 color, char *s )
{
	while(*s) {
 c10c07c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10c080:	e5d33000 	ldrb	r3, [r3]
 c10c084:	e3530000 	cmp	r3, #0
 c10c088:	1affffe5 	bne	c10c024 <lcd_puts+0x28>
			x = 0;
			y += 16;
		}
		s++;
	}
}
 c10c08c:	e24bd00c 	sub	sp, fp, #12
 c10c090:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10c094:	e12fff1e 	bx	lr
 c10c098:	0000013f 	.word	0x0000013f

0c10c09c <lcd_putWallpaper>:

void lcd_putWallpaper( uint8 *bmp )
{
 c10c09c:	e1a0c00d 	mov	ip, sp
 c10c0a0:	e92dd800 	push	{fp, ip, lr, pc}
 c10c0a4:	e24cb004 	sub	fp, ip, #4
 c10c0a8:	e24dd018 	sub	sp, sp, #24
 c10c0ac:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    uint32 headerSize;

    uint16 x, ySrc, yDst;
    uint16 offsetSrc, offsetDst;

    headerSize = bmp[10] + (bmp[11] << 8) + (bmp[12] << 16) + (bmp[13] << 24);
 c10c0b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10c0b4:	e283300a 	add	r3, r3, #10
 c10c0b8:	e5d33000 	ldrb	r3, [r3]
 c10c0bc:	e1a02003 	mov	r2, r3
 c10c0c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10c0c4:	e283300b 	add	r3, r3, #11
 c10c0c8:	e5d33000 	ldrb	r3, [r3]
 c10c0cc:	e1a03403 	lsl	r3, r3, #8
 c10c0d0:	e0822003 	add	r2, r2, r3
 c10c0d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10c0d8:	e283300c 	add	r3, r3, #12
 c10c0dc:	e5d33000 	ldrb	r3, [r3]
 c10c0e0:	e1a03803 	lsl	r3, r3, #16
 c10c0e4:	e0822003 	add	r2, r2, r3
 c10c0e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10c0ec:	e283300d 	add	r3, r3, #13
 c10c0f0:	e5d33000 	ldrb	r3, [r3]
 c10c0f4:	e1a03c03 	lsl	r3, r3, #24
 c10c0f8:	e0823003 	add	r3, r2, r3
 c10c0fc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

    bmp = bmp + headerSize;
 c10c100:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c10c104:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10c108:	e0823003 	add	r3, r2, r3
 c10c10c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

    for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )
 c10c110:	e3a03000 	mov	r3, #0
 c10c114:	e14b31b0 	strh	r3, [fp, #-16]
 c10c118:	e3a030ef 	mov	r3, #239	; 0xef
 c10c11c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
 c10c120:	ea00002d 	b	c10c1dc <lcd_putWallpaper+0x140>
    {
        offsetDst = yDst*LCD_WIDTH/2;
 c10c124:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c10c128:	e1a03002 	mov	r3, r2
 c10c12c:	e1a03103 	lsl	r3, r3, #2
 c10c130:	e0833002 	add	r3, r3, r2
 c10c134:	e1a03303 	lsl	r3, r3, #6
 c10c138:	e1a02fa3 	lsr	r2, r3, #31
 c10c13c:	e0823003 	add	r3, r2, r3
 c10c140:	e1a030c3 	asr	r3, r3, #1
 c10c144:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
        offsetSrc = ySrc*LCD_WIDTH/2;
 c10c148:	e15b21b0 	ldrh	r2, [fp, #-16]
 c10c14c:	e1a03002 	mov	r3, r2
 c10c150:	e1a03103 	lsl	r3, r3, #2
 c10c154:	e0833002 	add	r3, r3, r2
 c10c158:	e1a03303 	lsl	r3, r3, #6
 c10c15c:	e1a02fa3 	lsr	r2, r3, #31
 c10c160:	e0823003 	add	r3, r2, r3
 c10c164:	e1a030c3 	asr	r3, r3, #1
 c10c168:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
        for( x=0; x<LCD_WIDTH/2; x++ )
 c10c16c:	e3a03000 	mov	r3, #0
 c10c170:	e14b30be 	strh	r3, [fp, #-14]
 c10c174:	ea00000f 	b	c10c1b8 <lcd_putWallpaper+0x11c>
            lcd_buffer[offsetDst+x] = ~bmp[offsetSrc+x];
 c10c178:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
 c10c17c:	e15b30be 	ldrh	r3, [fp, #-14]
 c10c180:	e0823003 	add	r3, r2, r3
 c10c184:	e15b11bc 	ldrh	r1, [fp, #-28]	; 0xffffffe4
 c10c188:	e15b20be 	ldrh	r2, [fp, #-14]
 c10c18c:	e0812002 	add	r2, r1, r2
 c10c190:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
 c10c194:	e0812002 	add	r2, r1, r2
 c10c198:	e5d22000 	ldrb	r2, [r2]
 c10c19c:	e1e02002 	mvn	r2, r2
 c10c1a0:	e20210ff 	and	r1, r2, #255	; 0xff
 c10c1a4:	e59f2048 	ldr	r2, [pc, #72]	; c10c1f4 <lcd_putWallpaper+0x158>
 c10c1a8:	e7c21003 	strb	r1, [r2, r3]

    for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )
    {
        offsetDst = yDst*LCD_WIDTH/2;
        offsetSrc = ySrc*LCD_WIDTH/2;
        for( x=0; x<LCD_WIDTH/2; x++ )
 c10c1ac:	e15b30be 	ldrh	r3, [fp, #-14]
 c10c1b0:	e2833001 	add	r3, r3, #1
 c10c1b4:	e14b30be 	strh	r3, [fp, #-14]
 c10c1b8:	e15b30be 	ldrh	r3, [fp, #-14]
 c10c1bc:	e353009f 	cmp	r3, #159	; 0x9f
 c10c1c0:	9affffec 	bls	c10c178 <lcd_putWallpaper+0xdc>

    headerSize = bmp[10] + (bmp[11] << 8) + (bmp[12] << 16) + (bmp[13] << 24);

    bmp = bmp + headerSize;

    for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )
 c10c1c4:	e15b31b0 	ldrh	r3, [fp, #-16]
 c10c1c8:	e2833001 	add	r3, r3, #1
 c10c1cc:	e14b31b0 	strh	r3, [fp, #-16]
 c10c1d0:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
 c10c1d4:	e2433001 	sub	r3, r3, #1
 c10c1d8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
 c10c1dc:	e15b31b0 	ldrh	r3, [fp, #-16]
 c10c1e0:	e35300ef 	cmp	r3, #239	; 0xef
 c10c1e4:	9affffce 	bls	c10c124 <lcd_putWallpaper+0x88>
        offsetDst = yDst*LCD_WIDTH/2;
        offsetSrc = ySrc*LCD_WIDTH/2;
        for( x=0; x<LCD_WIDTH/2; x++ )
            lcd_buffer[offsetDst+x] = ~bmp[offsetSrc+x];
    }
}
 c10c1e8:	e24bd00c 	sub	sp, fp, #12
 c10c1ec:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10c1f0:	e12fff1e 	bx	lr
 c10c1f4:	0c101168 	.word	0x0c101168

0c10c1f8 <leds_init>:
// significativos, cada uno para un led
// 1 encendido y 0 apagado
static unsigned int status = 0;

void leds_init( void )
{
 c10c1f8:	e1a0c00d 	mov	ip, sp
 c10c1fc:	e92dd800 	push	{fp, ip, lr, pc}
 c10c200:	e24cb004 	sub	fp, ip, #4
	//COMPLETAR usando el interfaz del puerto B definido en gpio.h
	// hay que configurar los pines 9 y 10 como pines de salida
	portB_conf(BIT_LED1, OUTPUT);
 c10c204:	e3a00009 	mov	r0, #9
 c10c208:	e3a01001 	mov	r1, #1
 c10c20c:	ebfff9b2 	bl	c10a8dc <portB_conf>
	portB_conf(BIT_LED2, OUTPUT);
 c10c210:	e3a0000a 	mov	r0, #10
 c10c214:	e3a01001 	mov	r1, #1
 c10c218:	ebfff9af 	bl	c10a8dc <portB_conf>
	leds_display( status );
 c10c21c:	e59f3014 	ldr	r3, [pc, #20]	; c10c238 <leds_init+0x40>
 c10c220:	e5933000 	ldr	r3, [r3]
 c10c224:	e1a00003 	mov	r0, r3
 c10c228:	eb000073 	bl	c10c3fc <leds_display>
}
 c10c22c:	e24bd00c 	sub	sp, fp, #12
 c10c230:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10c234:	e12fff1e 	bx	lr
 c10c238:	0c10a76c 	.word	0x0c10a76c

0c10c23c <led1_on>:

void led1_on( void )
{
 c10c23c:	e1a0c00d 	mov	ip, sp
 c10c240:	e92dd800 	push	{fp, ip, lr, pc}
 c10c244:	e24cb004 	sub	fp, ip, #4
	status |=  LED1;
 c10c248:	e59f3028 	ldr	r3, [pc, #40]	; c10c278 <led1_on+0x3c>
 c10c24c:	e5933000 	ldr	r3, [r3]
 c10c250:	e3832001 	orr	r2, r3, #1
 c10c254:	e59f301c 	ldr	r3, [pc, #28]	; c10c278 <led1_on+0x3c>
 c10c258:	e5832000 	str	r2, [r3]
	leds_display( status );
 c10c25c:	e59f3014 	ldr	r3, [pc, #20]	; c10c278 <led1_on+0x3c>
 c10c260:	e5933000 	ldr	r3, [r3]
 c10c264:	e1a00003 	mov	r0, r3
 c10c268:	eb000063 	bl	c10c3fc <leds_display>
}
 c10c26c:	e24bd00c 	sub	sp, fp, #12
 c10c270:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10c274:	e12fff1e 	bx	lr
 c10c278:	0c10a76c 	.word	0x0c10a76c

0c10c27c <led1_off>:

void led1_off( void )
{
 c10c27c:	e1a0c00d 	mov	ip, sp
 c10c280:	e92dd800 	push	{fp, ip, lr, pc}
 c10c284:	e24cb004 	sub	fp, ip, #4
	status &=  ~LED1;
 c10c288:	e59f3028 	ldr	r3, [pc, #40]	; c10c2b8 <led1_off+0x3c>
 c10c28c:	e5933000 	ldr	r3, [r3]
 c10c290:	e3c32001 	bic	r2, r3, #1
 c10c294:	e59f301c 	ldr	r3, [pc, #28]	; c10c2b8 <led1_off+0x3c>
 c10c298:	e5832000 	str	r2, [r3]
	leds_display( status );
 c10c29c:	e59f3014 	ldr	r3, [pc, #20]	; c10c2b8 <led1_off+0x3c>
 c10c2a0:	e5933000 	ldr	r3, [r3]
 c10c2a4:	e1a00003 	mov	r0, r3
 c10c2a8:	eb000053 	bl	c10c3fc <leds_display>
}
 c10c2ac:	e24bd00c 	sub	sp, fp, #12
 c10c2b0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10c2b4:	e12fff1e 	bx	lr
 c10c2b8:	0c10a76c 	.word	0x0c10a76c

0c10c2bc <led2_on>:

void led2_on( void )
{
 c10c2bc:	e1a0c00d 	mov	ip, sp
 c10c2c0:	e92dd800 	push	{fp, ip, lr, pc}
 c10c2c4:	e24cb004 	sub	fp, ip, #4
	status |=  LED2;
 c10c2c8:	e59f3028 	ldr	r3, [pc, #40]	; c10c2f8 <led2_on+0x3c>
 c10c2cc:	e5933000 	ldr	r3, [r3]
 c10c2d0:	e3832002 	orr	r2, r3, #2
 c10c2d4:	e59f301c 	ldr	r3, [pc, #28]	; c10c2f8 <led2_on+0x3c>
 c10c2d8:	e5832000 	str	r2, [r3]
	leds_display( status );
 c10c2dc:	e59f3014 	ldr	r3, [pc, #20]	; c10c2f8 <led2_on+0x3c>
 c10c2e0:	e5933000 	ldr	r3, [r3]
 c10c2e4:	e1a00003 	mov	r0, r3
 c10c2e8:	eb000043 	bl	c10c3fc <leds_display>
}
 c10c2ec:	e24bd00c 	sub	sp, fp, #12
 c10c2f0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10c2f4:	e12fff1e 	bx	lr
 c10c2f8:	0c10a76c 	.word	0x0c10a76c

0c10c2fc <led2_off>:

void led2_off( void )
{
 c10c2fc:	e1a0c00d 	mov	ip, sp
 c10c300:	e92dd800 	push	{fp, ip, lr, pc}
 c10c304:	e24cb004 	sub	fp, ip, #4
	status &=  ~LED2;
 c10c308:	e59f3028 	ldr	r3, [pc, #40]	; c10c338 <led2_off+0x3c>
 c10c30c:	e5933000 	ldr	r3, [r3]
 c10c310:	e3c32002 	bic	r2, r3, #2
 c10c314:	e59f301c 	ldr	r3, [pc, #28]	; c10c338 <led2_off+0x3c>
 c10c318:	e5832000 	str	r2, [r3]
	leds_display( status );
 c10c31c:	e59f3014 	ldr	r3, [pc, #20]	; c10c338 <led2_off+0x3c>
 c10c320:	e5933000 	ldr	r3, [r3]
 c10c324:	e1a00003 	mov	r0, r3
 c10c328:	eb000033 	bl	c10c3fc <leds_display>
}
 c10c32c:	e24bd00c 	sub	sp, fp, #12
 c10c330:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10c334:	e12fff1e 	bx	lr
 c10c338:	0c10a76c 	.word	0x0c10a76c

0c10c33c <led1_switch>:

void led1_switch( void )
{
 c10c33c:	e1a0c00d 	mov	ip, sp
 c10c340:	e92dd800 	push	{fp, ip, lr, pc}
 c10c344:	e24cb004 	sub	fp, ip, #4
	status ^= LED1;
 c10c348:	e59f3028 	ldr	r3, [pc, #40]	; c10c378 <led1_switch+0x3c>
 c10c34c:	e5933000 	ldr	r3, [r3]
 c10c350:	e2232001 	eor	r2, r3, #1
 c10c354:	e59f301c 	ldr	r3, [pc, #28]	; c10c378 <led1_switch+0x3c>
 c10c358:	e5832000 	str	r2, [r3]
	leds_display( status );
 c10c35c:	e59f3014 	ldr	r3, [pc, #20]	; c10c378 <led1_switch+0x3c>
 c10c360:	e5933000 	ldr	r3, [r3]
 c10c364:	e1a00003 	mov	r0, r3
 c10c368:	eb000023 	bl	c10c3fc <leds_display>
}
 c10c36c:	e24bd00c 	sub	sp, fp, #12
 c10c370:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10c374:	e12fff1e 	bx	lr
 c10c378:	0c10a76c 	.word	0x0c10a76c

0c10c37c <led2_switch>:

void led2_switch( void )
{
 c10c37c:	e1a0c00d 	mov	ip, sp
 c10c380:	e92dd800 	push	{fp, ip, lr, pc}
 c10c384:	e24cb004 	sub	fp, ip, #4
	status ^= LED2;
 c10c388:	e59f3028 	ldr	r3, [pc, #40]	; c10c3b8 <led2_switch+0x3c>
 c10c38c:	e5933000 	ldr	r3, [r3]
 c10c390:	e2232002 	eor	r2, r3, #2
 c10c394:	e59f301c 	ldr	r3, [pc, #28]	; c10c3b8 <led2_switch+0x3c>
 c10c398:	e5832000 	str	r2, [r3]
	leds_display( status );
 c10c39c:	e59f3014 	ldr	r3, [pc, #20]	; c10c3b8 <led2_switch+0x3c>
 c10c3a0:	e5933000 	ldr	r3, [r3]
 c10c3a4:	e1a00003 	mov	r0, r3
 c10c3a8:	eb000013 	bl	c10c3fc <leds_display>
}
 c10c3ac:	e24bd00c 	sub	sp, fp, #12
 c10c3b0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10c3b4:	e12fff1e 	bx	lr
 c10c3b8:	0c10a76c 	.word	0x0c10a76c

0c10c3bc <leds_switch>:

void leds_switch( void ){
 c10c3bc:	e1a0c00d 	mov	ip, sp
 c10c3c0:	e92dd800 	push	{fp, ip, lr, pc}
 c10c3c4:	e24cb004 	sub	fp, ip, #4
	status ^= (LED1 | LED2);
 c10c3c8:	e59f3028 	ldr	r3, [pc, #40]	; c10c3f8 <leds_switch+0x3c>
 c10c3cc:	e5933000 	ldr	r3, [r3]
 c10c3d0:	e2232003 	eor	r2, r3, #3
 c10c3d4:	e59f301c 	ldr	r3, [pc, #28]	; c10c3f8 <leds_switch+0x3c>
 c10c3d8:	e5832000 	str	r2, [r3]
	leds_display( status );
 c10c3dc:	e59f3014 	ldr	r3, [pc, #20]	; c10c3f8 <leds_switch+0x3c>
 c10c3e0:	e5933000 	ldr	r3, [r3]
 c10c3e4:	e1a00003 	mov	r0, r3
 c10c3e8:	eb000003 	bl	c10c3fc <leds_display>
}
 c10c3ec:	e24bd00c 	sub	sp, fp, #12
 c10c3f0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10c3f4:	e12fff1e 	bx	lr
 c10c3f8:	0c10a76c 	.word	0x0c10a76c

0c10c3fc <leds_display>:

void leds_display( unsigned int leds_status )
{
 c10c3fc:	e1a0c00d 	mov	ip, sp
 c10c400:	e92dd800 	push	{fp, ip, lr, pc}
 c10c404:	e24cb004 	sub	fp, ip, #4
 c10c408:	e24dd008 	sub	sp, sp, #8
 c10c40c:	e50b0010 	str	r0, [fp, #-16]
	status = leds_status;
 c10c410:	e59f3074 	ldr	r3, [pc, #116]	; c10c48c <leds_display+0x90>
 c10c414:	e51b2010 	ldr	r2, [fp, #-16]
 c10c418:	e5832000 	str	r2, [r3]
	
	// LED 1
	if( status & LED1 )
 c10c41c:	e59f3068 	ldr	r3, [pc, #104]	; c10c48c <leds_display+0x90>
 c10c420:	e5933000 	ldr	r3, [r3]
 c10c424:	e2033001 	and	r3, r3, #1
 c10c428:	e20330ff 	and	r3, r3, #255	; 0xff
 c10c42c:	e3530000 	cmp	r3, #0
 c10c430:	0a000003 	beq	c10c444 <leds_display+0x48>
		//COMPLETAR usando el interfaz del puerto B definido en gpio.h
		//hay que poner a nivel bajo el bit correspondiente al led 1
		portB_write(BIT_LED1, DISABLE);
 c10c434:	e3a00009 	mov	r0, #9
 c10c438:	e3a01000 	mov	r1, #0
 c10c43c:	ebfff958 	bl	c10a9a4 <portB_write>
 c10c440:	ea000002 	b	c10c450 <leds_display+0x54>
	else
		//COMPLETAR usando el interfaz del puerto B definido en gpio.h
		//hay que poner a nivel alto el bit correspondiente al led 1
		portB_write(BIT_LED1, ENABLE);
 c10c444:	e3a00009 	mov	r0, #9
 c10c448:	e3a01001 	mov	r1, #1
 c10c44c:	ebfff954 	bl	c10a9a4 <portB_write>

	// LED 2
	if( status & LED2 )
 c10c450:	e59f3034 	ldr	r3, [pc, #52]	; c10c48c <leds_display+0x90>
 c10c454:	e5933000 	ldr	r3, [r3]
 c10c458:	e2033002 	and	r3, r3, #2
 c10c45c:	e3530000 	cmp	r3, #0
 c10c460:	0a000003 	beq	c10c474 <leds_display+0x78>
		//COMPLETAR usando el interfaz del puerto B definido en gpio.h
		//hay que poner a nivel bajo el bit correspondiente al led 2
		portB_write(BIT_LED2, DISABLE);
 c10c464:	e3a0000a 	mov	r0, #10
 c10c468:	e3a01000 	mov	r1, #0
 c10c46c:	ebfff94c 	bl	c10a9a4 <portB_write>
 c10c470:	ea000002 	b	c10c480 <leds_display+0x84>
	else
		//COMPLETAR usando el interfaz del puerto B definido en gpio.h
		//hay que poner a nivel alto el bit correspondiente al led 2
		portB_write(BIT_LED2, ENABLE);
 c10c474:	e3a0000a 	mov	r0, #10
 c10c478:	e3a01001 	mov	r1, #1
 c10c47c:	ebfff948 	bl	c10a9a4 <portB_write>
}
 c10c480:	e24bd00c 	sub	sp, fp, #12
 c10c484:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10c488:	e12fff1e 	bx	lr
 c10c48c:	0c10a76c 	.word	0x0c10a76c

0c10c490 <timer_ISR>:
void keyboard_ISR(void) __attribute__ ((interrupt ("IRQ")));
void rtc_ISR(void)  __attribute__ ((interrupt ("IRQ")));
void rtc_alarm_ISR(void)  __attribute__ ((interrupt ("IRQ")));

void timer_ISR(void)
{
 c10c490:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c494:	e1a0c00d 	mov	ip, sp
 c10c498:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c49c:	e24cb004 	sub	fp, ip, #4
	//Timer ISR Implementation
	led1_switch();
 c10c4a0:	ebffffa5 	bl	c10c33c <led1_switch>
	led2_switch();
 c10c4a4:	ebffffb4 	bl	c10c37c <led2_switch>

	ic_cleanflag(INT_TIMER0);
 c10c4a8:	e3a0000d 	mov	r0, #13
 c10c4ac:	ebfffc34 	bl	c10b584 <ic_cleanflag>
}
 c10c4b0:	e24bd01c 	sub	sp, fp, #28
 c10c4b4:	e89d680f 	ldm	sp, {r0, r1, r2, r3, fp, sp, lr}
 c10c4b8:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c10c4bc:	e25ef004 	subs	pc, lr, #4

0c10c4c0 <button_ISR>:

void button_ISR(void)
{
 c10c4c0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c4c4:	e1a0c00d 	mov	ip, sp
 c10c4c8:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c4cc:	e24cb004 	sub	fp, ip, #4
 c10c4d0:	e24dd008 	sub	sp, sp, #8
	unsigned int whicheint = rEXTINTPND;
 c10c4d4:	e59f3080 	ldr	r3, [pc, #128]	; c10c55c <button_ISR+0x9c>
 c10c4d8:	e5933000 	ldr	r3, [r3]
 c10c4dc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
	unsigned int buttons = (whicheint >> 2) & 0x3;
 c10c4e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10c4e4:	e1a03123 	lsr	r3, r3, #2
 c10c4e8:	e2033003 	and	r3, r3, #3
 c10c4ec:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
	if (buttons & BUT2) {
		//BUT2 pressed
	}

	// eliminamos rebotes
	Delay(2000);
 c10c4f0:	e3a00e7d 	mov	r0, #2000	; 0x7d0
 c10c4f4:	eb000828 	bl	c10e59c <Delay>
	// borramos el flag en extintpnd
	//COMPLETAR: debemos borrar las peticiones de interrupciÃ³n en
	//EXTINTPND escribiendo un 1 en los flags que queremos borrar (los
	//correspondientes a los pulsadores pulsados)

	if(buttons & BUT1)
 c10c4f8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c10c4fc:	e2033001 	and	r3, r3, #1
 c10c500:	e20330ff 	and	r3, r3, #255	; 0xff
 c10c504:	e3530000 	cmp	r3, #0
 c10c508:	0a000004 	beq	c10c520 <button_ISR+0x60>
		//Borrar bit 2
		rEXTINTPND |= 1 << 2;
 c10c50c:	e59f3048 	ldr	r3, [pc, #72]	; c10c55c <button_ISR+0x9c>
 c10c510:	e59f2044 	ldr	r2, [pc, #68]	; c10c55c <button_ISR+0x9c>
 c10c514:	e5922000 	ldr	r2, [r2]
 c10c518:	e3822004 	orr	r2, r2, #4
 c10c51c:	e5832000 	str	r2, [r3]

	if(buttons & BUT2)
 c10c520:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c10c524:	e2033002 	and	r3, r3, #2
 c10c528:	e3530000 	cmp	r3, #0
 c10c52c:	0a000004 	beq	c10c544 <button_ISR+0x84>
		//Borrar bit 3
		rEXTINTPND |= 1 << 3;
 c10c530:	e59f3024 	ldr	r3, [pc, #36]	; c10c55c <button_ISR+0x9c>
 c10c534:	e59f2020 	ldr	r2, [pc, #32]	; c10c55c <button_ISR+0x9c>
 c10c538:	e5922000 	ldr	r2, [r2]
 c10c53c:	e3822008 	orr	r2, r2, #8
 c10c540:	e5832000 	str	r2, [r3]

	ic_cleanflag(INT_EINT4567);
 c10c544:	e3a00015 	mov	r0, #21
 c10c548:	ebfffc0d 	bl	c10b584 <ic_cleanflag>
}
 c10c54c:	e24bd01c 	sub	sp, fp, #28
 c10c550:	e89d680f 	ldm	sp, {r0, r1, r2, r3, fp, sp, lr}
 c10c554:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c10c558:	e25ef004 	subs	pc, lr, #4
 c10c55c:	01d20054 	.word	0x01d20054

0c10c560 <keyboard_ISR>:

void keyboard_ISR(void)
{
 c10c560:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c564:	e1a0c00d 	mov	ip, sp
 c10c568:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c56c:	e24cb004 	sub	fp, ip, #4
 c10c570:	e24dd008 	sub	sp, sp, #8
	static unsigned n = 0;
	int key = -1;
 c10c574:	e3e03000 	mvn	r3, #0
 c10c578:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

	/* Eliminar rebotes de presiÃ³n */
	Delay(200);
 c10c57c:	e3a000c8 	mov	r0, #200	; 0xc8
 c10c580:	eb000805 	bl	c10e59c <Delay>
	
	/* Escaneo de tecla */
	key = kb_scan();
 c10c584:	ebfffc28 	bl	c10b62c <kb_scan>
 c10c588:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0

	n = (n+1) & 0xf;
 c10c58c:	e59f3044 	ldr	r3, [pc, #68]	; c10c5d8 <keyboard_ISR+0x78>
 c10c590:	e5933000 	ldr	r3, [r3]
 c10c594:	e2833001 	add	r3, r3, #1
 c10c598:	e203200f 	and	r2, r3, #15
 c10c59c:	e59f3034 	ldr	r3, [pc, #52]	; c10c5d8 <keyboard_ISR+0x78>
 c10c5a0:	e5832000 	str	r2, [r3]

	if (key != -1) {
 c10c5a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10c5a8:	e3730001 	cmn	r3, #1
 c10c5ac:	0a000001 	beq	c10c5b8 <keyboard_ISR+0x58>
		/* Visualizacion en el display */
		//COMPLETAR: mostrar la tecla en el display utilizando el interfaz
		//definido en D8Led.h

		D8Led_digit(key);
 c10c5b0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
 c10c5b4:	ebfff892 	bl	c10a804 <D8Led_digit>
		/* Esperar a que la tecla se suelte, consultando el registro de datos */		
		//while (/*COMPLETAR: true si estÃ¡ pulsada la tecla (leer del registro rPDATG)*/);
	}

    /* Eliminar rebotes de depresiÃ³n */
    Delay(200);
 c10c5b8:	e3a000c8 	mov	r0, #200	; 0xc8
 c10c5bc:	eb0007f6 	bl	c10e59c <Delay>
     
    /* Borrar interrupciones pendientes */
	//COMPLETAR
	//borrar la interrupciÃ³n por la lÃ­nea EINT1 en el registro rI_ISPC
    ic_cleanflag(INT_EINT1);
 c10c5c0:	e3a00018 	mov	r0, #24
 c10c5c4:	ebfffbee 	bl	c10b584 <ic_cleanflag>
}
 c10c5c8:	e24bd01c 	sub	sp, fp, #28
 c10c5cc:	e89d680f 	ldm	sp, {r0, r1, r2, r3, fp, sp, lr}
 c10c5d0:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c10c5d4:	e25ef004 	subs	pc, lr, #4
 c10c5d8:	0c10a780 	.word	0x0c10a780

0c10c5dc <setup>:

int setup(void)
{
 c10c5dc:	e1a0c00d 	mov	ip, sp
 c10c5e0:	e92dd800 	push	{fp, ip, lr, pc}
 c10c5e4:	e24cb004 	sub	fp, ip, #4
	leds_init();
 c10c5e8:	ebffff02 	bl	c10c1f8 <leds_init>
	D8Led_init();
 c10c5ec:	ebfff864 	bl	c10a784 <D8Led_init>
	D8Led_segment(0x02); // "-" Symbol
 c10c5f0:	e3a00002 	mov	r0, #2
 c10c5f4:	ebfff86b 	bl	c10a7a8 <D8Led_segment>
	led1_on();
 c10c5f8:	ebffff0f 	bl	c10c23c <led1_on>
	//COMPLETAR: utilizando el interfaz para el puerto G definido en gpio.h
	//configurar los pines 1, 6 y 7 del puerto G para poder generar interrupciones
	//externas por flanco de bajada por ellos y activar las correspondientes
	//resistencias de pull-up.

	portG_conf(6, EINT);
 c10c5fc:	e3a00006 	mov	r0, #6
 c10c600:	e3a01003 	mov	r1, #3
 c10c604:	ebfff915 	bl	c10aa60 <portG_conf>
	portG_eint_trig(6, FALLING);
 c10c608:	e3a00006 	mov	r0, #6
 c10c60c:	e3a01002 	mov	r1, #2
 c10c610:	ebfff980 	bl	c10ac18 <portG_eint_trig>
	portG_conf_pup(6, ENABLE);
 c10c614:	e3a00006 	mov	r0, #6
 c10c618:	e3a01001 	mov	r1, #1
 c10c61c:	ebfffaa2 	bl	c10b0ac <portG_conf_pup>

	portG_conf(7, EINT);
 c10c620:	e3a00007 	mov	r0, #7
 c10c624:	e3a01003 	mov	r1, #3
 c10c628:	ebfff90c 	bl	c10aa60 <portG_conf>
	portG_eint_trig(7, FALLING);
 c10c62c:	e3a00007 	mov	r0, #7
 c10c630:	e3a01002 	mov	r1, #2
 c10c634:	ebfff977 	bl	c10ac18 <portG_eint_trig>
	portG_conf_pup(7, ENABLE);
 c10c638:	e3a00007 	mov	r0, #7
 c10c63c:	e3a01001 	mov	r1, #1
 c10c640:	ebfffa99 	bl	c10b0ac <portG_conf_pup>
	/********************************************************************/

	/* ConfiguraciÃ³n del timer */

	//TIMER0: 0.5 seconds
	tmr_set_mode(TIMER0, RELOAD);
 c10c644:	e3a00000 	mov	r0, #0
 c10c648:	e3a01001 	mov	r1, #1
 c10c64c:	eb0005a9 	bl	c10dcf8 <tmr_set_mode>
	tmr_set_prescaler(TIMER0, 255);
 c10c650:	e3a00000 	mov	r0, #0
 c10c654:	e3a010ff 	mov	r1, #255	; 0xff
 c10c658:	eb0004a5 	bl	c10d8f4 <tmr_set_prescaler>
	tmr_set_divider(TIMER0, D1_8);
 c10c65c:	e3a00000 	mov	r0, #0
 c10c660:	e3a01002 	mov	r1, #2
 c10c664:	eb0004d9 	bl	c10d9d0 <tmr_set_divider>
	tmr_set_count(TIMER0, 62500 >> 3, 1);
 c10c668:	e3a00000 	mov	r0, #0
 c10c66c:	e59f10a4 	ldr	r1, [pc, #164]	; c10c718 <setup+0x13c>
 c10c670:	e3a02001 	mov	r2, #1
 c10c674:	eb000524 	bl	c10db0c <tmr_set_count>

	tmr_update(TIMER0);
 c10c678:	e3a00000 	mov	r0, #0
 c10c67c:	eb00056f 	bl	c10dc40 <tmr_update>

	//COMPLETAR: tomar el cÃ³digo de la segunda parte

	tmr_start(TIMER0);
 c10c680:	e3a00000 	mov	r0, #0
 c10c684:	eb0005de 	bl	c10de04 <tmr_start>
	//if (RL.moving)
	//
	/***************************/

	// Registramos las ISRs
	pISR_TIMER0 = (unsigned)timer_ISR;//COMPLETAR: registrar la RTI del timer
 c10c688:	e59f308c 	ldr	r3, [pc, #140]	; c10c71c <setup+0x140>
 c10c68c:	e59f208c 	ldr	r2, [pc, #140]	; c10c720 <setup+0x144>
 c10c690:	e5832000 	str	r2, [r3]
	pISR_EINT4567 = (unsigned)button_ISR; //COMPLETAR: registrar la RTI de los botones
 c10c694:	e59f3088 	ldr	r3, [pc, #136]	; c10c724 <setup+0x148>
 c10c698:	e59f2088 	ldr	r2, [pc, #136]	; c10c728 <setup+0x14c>
 c10c69c:	e5832000 	str	r2, [r3]
	pISR_EINT1    = (unsigned)keyboard_ISR; //COMPLETAR: registrar la RTI del teclado
 c10c6a0:	e59f3084 	ldr	r3, [pc, #132]	; c10c72c <setup+0x150>
 c10c6a4:	e59f2084 	ldr	r2, [pc, #132]	; c10c730 <setup+0x154>
 c10c6a8:	e5832000 	str	r2, [r3]
	 * Configuramos el timer 0 en modo IRQ y habilitamos esta lÃ­nea
	 * Configuramos la lÃ­nea EINT4567 en modo IRQ y la habilitamos
	 * Configuramos la lÃ­nea EINT1 en modo IRQ y la habilitamos
	 */

	uart0_init();
 c10c6ac:	eb00063d 	bl	c10dfa8 <uart0_init>
	rtc_init();
 c10c6b0:	eb000126 	bl	c10cb50 <rtc_init>
	ic_init();
 c10c6b4:	ebfffaee 	bl	c10b274 <ic_init>
	//		habilitar la lÃ­nea INT_EINT4567
	//		habilitar la lÃ­nea INT_EINT1

	/***************************************************/

	ic_conf_irq(ENABLE, VEC);
 c10c6b8:	e3a00001 	mov	r0, #1
 c10c6bc:	e3a01000 	mov	r1, #0
 c10c6c0:	ebfffafc 	bl	c10b2b8 <ic_conf_irq>
	ic_conf_fiq(DISABLE);
 c10c6c4:	e3a00000 	mov	r0, #0
 c10c6c8:	ebfffb29 	bl	c10b374 <ic_conf_fiq>

	ic_conf_line(INT_TIMER0, IRQ);
 c10c6cc:	e3a0000d 	mov	r0, #13
 c10c6d0:	e3a01000 	mov	r1, #0
 c10c6d4:	ebfffb47 	bl	c10b3f8 <ic_conf_line>
	ic_conf_line(INT_EINT4567, IRQ);
 c10c6d8:	e3a00015 	mov	r0, #21
 c10c6dc:	e3a01000 	mov	r1, #0
 c10c6e0:	ebfffb44 	bl	c10b3f8 <ic_conf_line>
	ic_conf_line(INT_EINT1, IRQ);
 c10c6e4:	e3a00018 	mov	r0, #24
 c10c6e8:	e3a01000 	mov	r1, #0
 c10c6ec:	ebfffb41 	bl	c10b3f8 <ic_conf_line>

	//ic_enable(INT_TIMER0);
	//ic_enable(INT_EINT4567);
	//ic_enable(INT_EINT1);

	ic_enable(INT_GLOBAL);
 c10c6f0:	e3a0001a 	mov	r0, #26
 c10c6f4:	ebfffb6f 	bl	c10b4b8 <ic_enable>

	lcd_init();
 c10c6f8:	ebfffc34 	bl	c10b7d0 <lcd_init>

	Delay(0);
 c10c6fc:	e3a00000 	mov	r0, #0
 c10c700:	eb0007a5 	bl	c10e59c <Delay>
	return 0;
 c10c704:	e3a03000 	mov	r3, #0
}
 c10c708:	e1a00003 	mov	r0, r3
 c10c70c:	e24bd00c 	sub	sp, fp, #12
 c10c710:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10c714:	e12fff1e 	bx	lr
 c10c718:	00001e84 	.word	0x00001e84
 c10c71c:	0c7fff54 	.word	0x0c7fff54
 c10c720:	0c10c490 	.word	0x0c10c490
 c10c724:	0c7fff74 	.word	0x0c7fff74
 c10c728:	0c10c4c0 	.word	0x0c10c4c0
 c10c72c:	0c7fff80 	.word	0x0c7fff80
 c10c730:	0c10c560 	.word	0x0c10c560

0c10c734 <read_date>:

void read_date(rtc_time_t* rtc_time)
{
 c10c734:	e1a0c00d 	mov	ip, sp
 c10c738:	e92dd800 	push	{fp, ip, lr, pc}
 c10c73c:	e24cb004 	sub	fp, ip, #4
 c10c740:	e24dd008 	sub	sp, sp, #8
 c10c744:	e50b0010 	str	r0, [fp, #-16]
	uart0_puts( "\nDia: " );
 c10c748:	e59f00c8 	ldr	r0, [pc, #200]	; c10c818 <read_date+0xe4>
 c10c74c:	eb000654 	bl	c10e0a4 <uart0_puts>
	rtc_time->mday = uart0_getint();
 c10c750:	eb0006f0 	bl	c10e318 <uart0_getint>
 c10c754:	e1a03000 	mov	r3, r0
 c10c758:	e20320ff 	and	r2, r3, #255	; 0xff
 c10c75c:	e51b3010 	ldr	r3, [fp, #-16]
 c10c760:	e5c32003 	strb	r2, [r3, #3]
	uart0_puts( "\nMes: " );
 c10c764:	e59f00b0 	ldr	r0, [pc, #176]	; c10c81c <read_date+0xe8>
 c10c768:	eb00064d 	bl	c10e0a4 <uart0_puts>
	rtc_time->mon = uart0_getint();
 c10c76c:	eb0006e9 	bl	c10e318 <uart0_getint>
 c10c770:	e1a03000 	mov	r3, r0
 c10c774:	e20320ff 	and	r2, r3, #255	; 0xff
 c10c778:	e51b3010 	ldr	r3, [fp, #-16]
 c10c77c:	e5c32005 	strb	r2, [r3, #5]
	uart0_puts( "\nAño: " );
 c10c780:	e59f0098 	ldr	r0, [pc, #152]	; c10c820 <read_date+0xec>
 c10c784:	eb000646 	bl	c10e0a4 <uart0_puts>
	rtc_time->year = uart0_getint();
 c10c788:	eb0006e2 	bl	c10e318 <uart0_getint>
 c10c78c:	e1a03000 	mov	r3, r0
 c10c790:	e20320ff 	and	r2, r3, #255	; 0xff
 c10c794:	e51b3010 	ldr	r3, [fp, #-16]
 c10c798:	e5c32006 	strb	r2, [r3, #6]
	uart0_puts( "\nDia de la semana: " );
 c10c79c:	e59f0080 	ldr	r0, [pc, #128]	; c10c824 <read_date+0xf0>
 c10c7a0:	eb00063f 	bl	c10e0a4 <uart0_puts>
	rtc_time->wday = uart0_getint();
 c10c7a4:	eb0006db 	bl	c10e318 <uart0_getint>
 c10c7a8:	e1a03000 	mov	r3, r0
 c10c7ac:	e20320ff 	and	r2, r3, #255	; 0xff
 c10c7b0:	e51b3010 	ldr	r3, [fp, #-16]
 c10c7b4:	e5c32004 	strb	r2, [r3, #4]

	uart0_puts( "\nHora: " );
 c10c7b8:	e59f0068 	ldr	r0, [pc, #104]	; c10c828 <read_date+0xf4>
 c10c7bc:	eb000638 	bl	c10e0a4 <uart0_puts>
	rtc_time->hour = uart0_getint();
 c10c7c0:	eb0006d4 	bl	c10e318 <uart0_getint>
 c10c7c4:	e1a03000 	mov	r3, r0
 c10c7c8:	e20320ff 	and	r2, r3, #255	; 0xff
 c10c7cc:	e51b3010 	ldr	r3, [fp, #-16]
 c10c7d0:	e5c32002 	strb	r2, [r3, #2]
	uart0_puts( "\nMinutos: " );
 c10c7d4:	e59f0050 	ldr	r0, [pc, #80]	; c10c82c <read_date+0xf8>
 c10c7d8:	eb000631 	bl	c10e0a4 <uart0_puts>
	rtc_time->min = uart0_getint();
 c10c7dc:	eb0006cd 	bl	c10e318 <uart0_getint>
 c10c7e0:	e1a03000 	mov	r3, r0
 c10c7e4:	e20320ff 	and	r2, r3, #255	; 0xff
 c10c7e8:	e51b3010 	ldr	r3, [fp, #-16]
 c10c7ec:	e5c32001 	strb	r2, [r3, #1]
	uart0_puts( "\nSegundos: " );
 c10c7f0:	e59f0038 	ldr	r0, [pc, #56]	; c10c830 <read_date+0xfc>
 c10c7f4:	eb00062a 	bl	c10e0a4 <uart0_puts>
	rtc_time->sec = uart0_getint();
 c10c7f8:	eb0006c6 	bl	c10e318 <uart0_getint>
 c10c7fc:	e1a03000 	mov	r3, r0
 c10c800:	e20320ff 	and	r2, r3, #255	; 0xff
 c10c804:	e51b3010 	ldr	r3, [fp, #-16]
 c10c808:	e5c32000 	strb	r2, [r3]
}
 c10c80c:	e24bd00c 	sub	sp, fp, #12
 c10c810:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10c814:	e12fff1e 	bx	lr
 c10c818:	0c1010b8 	.word	0x0c1010b8
 c10c81c:	0c1010c0 	.word	0x0c1010c0
 c10c820:	0c1010c8 	.word	0x0c1010c8
 c10c824:	0c1010d0 	.word	0x0c1010d0
 c10c828:	0c1010e4 	.word	0x0c1010e4
 c10c82c:	0c1010ec 	.word	0x0c1010ec
 c10c830:	0c1010f8 	.word	0x0c1010f8

0c10c834 <rtc_ISR>:

void rtc_ISR() {
 c10c834:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c838:	e1a0c00d 	mov	ip, sp
 c10c83c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c840:	e24cb004 	sub	fp, ip, #4
	static rtc_time_t rtc_time;

	rtc_gettime(&rtc_time);
 c10c844:	e59f0028 	ldr	r0, [pc, #40]	; c10c874 <rtc_ISR+0x40>
 c10c848:	eb0001ea 	bl	c10cff8 <rtc_gettime>
	uart0_put_rtc_time(&rtc_time);
 c10c84c:	e59f0020 	ldr	r0, [pc, #32]	; c10c874 <rtc_ISR+0x40>
 c10c850:	eb000727 	bl	c10e4f4 <uart0_put_rtc_time>
	uart0_putchar('\n');
 c10c854:	e3a0000a 	mov	r0, #10
 c10c858:	eb0005eb 	bl	c10e00c <uart0_putchar>

	ic_cleanflag(INT_TICK);
 c10c85c:	e3a00014 	mov	r0, #20
 c10c860:	ebfffb47 	bl	c10b584 <ic_cleanflag>
}
 c10c864:	e24bd01c 	sub	sp, fp, #28
 c10c868:	e89d680f 	ldm	sp, {r0, r1, r2, r3, fp, sp, lr}
 c10c86c:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c10c870:	e25ef004 	subs	pc, lr, #4
 c10c874:	0c10a778 	.word	0x0c10a778

0c10c878 <rtc_alarm_ISR>:

void rtc_alarm_ISR(void) {
 c10c878:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10c87c:	e1a0c00d 	mov	ip, sp
 c10c880:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10c884:	e24cb004 	sub	fp, ip, #4
	uart0_puts("\nALARM GOES OFF!\n");
 c10c888:	e59f0018 	ldr	r0, [pc, #24]	; c10c8a8 <rtc_alarm_ISR+0x30>
 c10c88c:	eb000604 	bl	c10e0a4 <uart0_puts>
	ic_cleanflag(INT_RTC);
 c10c890:	e3a00001 	mov	r0, #1
 c10c894:	ebfffb3a 	bl	c10b584 <ic_cleanflag>
}
 c10c898:	e24bd01c 	sub	sp, fp, #28
 c10c89c:	e89d680f 	ldm	sp, {r0, r1, r2, r3, fp, sp, lr}
 c10c8a0:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c10c8a4:	e25ef004 	subs	pc, lr, #4
 c10c8a8:	0c101104 	.word	0x0c101104

0c10c8ac <clock_setup>:

void clock_setup() {
 c10c8ac:	e1a0c00d 	mov	ip, sp
 c10c8b0:	e92dd800 	push	{fp, ip, lr, pc}
 c10c8b4:	e24cb004 	sub	fp, ip, #4
	static rtc_time_t rtc_time;
	uart0_puts("Initial time: \n");
 c10c8b8:	e59f0128 	ldr	r0, [pc, #296]	; c10c9e8 <clock_setup+0x13c>
 c10c8bc:	eb0005f8 	bl	c10e0a4 <uart0_puts>
	rtc_gettime(&rtc_time);
 c10c8c0:	e59f0124 	ldr	r0, [pc, #292]	; c10c9ec <clock_setup+0x140>
 c10c8c4:	eb0001cb 	bl	c10cff8 <rtc_gettime>
	uart0_put_rtc_time(&rtc_time);
 c10c8c8:	e59f011c 	ldr	r0, [pc, #284]	; c10c9ec <clock_setup+0x140>
 c10c8cc:	eb000708 	bl	c10e4f4 <uart0_put_rtc_time>

	//Ask for time first time
	read_date(&rtc_time);
 c10c8d0:	e59f0114 	ldr	r0, [pc, #276]	; c10c9ec <clock_setup+0x140>
 c10c8d4:	ebffff96 	bl	c10c734 <read_date>
	rtc_puttime(&rtc_time);
 c10c8d8:	e59f010c 	ldr	r0, [pc, #268]	; c10c9ec <clock_setup+0x140>
 c10c8dc:	eb0000d0 	bl	c10cc24 <rtc_puttime>

	//Set alarm 10 seconds from now (imperfect but enough)

	rtc_time.sec += 10;
 c10c8e0:	e59f3104 	ldr	r3, [pc, #260]	; c10c9ec <clock_setup+0x140>
 c10c8e4:	e5d33000 	ldrb	r3, [r3]
 c10c8e8:	e283300a 	add	r3, r3, #10
 c10c8ec:	e20320ff 	and	r2, r3, #255	; 0xff
 c10c8f0:	e59f30f4 	ldr	r3, [pc, #244]	; c10c9ec <clock_setup+0x140>
 c10c8f4:	e5c32000 	strb	r2, [r3]
	if(rtc_time.sec >= 60) {
 c10c8f8:	e59f30ec 	ldr	r3, [pc, #236]	; c10c9ec <clock_setup+0x140>
 c10c8fc:	e5d33000 	ldrb	r3, [r3]
 c10c900:	e353003b 	cmp	r3, #59	; 0x3b
 c10c904:	9a00000b 	bls	c10c938 <clock_setup+0x8c>
		rtc_time.sec -= 60;
 c10c908:	e59f30dc 	ldr	r3, [pc, #220]	; c10c9ec <clock_setup+0x140>
 c10c90c:	e5d33000 	ldrb	r3, [r3]
 c10c910:	e243303c 	sub	r3, r3, #60	; 0x3c
 c10c914:	e20320ff 	and	r2, r3, #255	; 0xff
 c10c918:	e59f30cc 	ldr	r3, [pc, #204]	; c10c9ec <clock_setup+0x140>
 c10c91c:	e5c32000 	strb	r2, [r3]
		rtc_time.min++;
 c10c920:	e59f30c4 	ldr	r3, [pc, #196]	; c10c9ec <clock_setup+0x140>
 c10c924:	e5d33001 	ldrb	r3, [r3, #1]
 c10c928:	e2833001 	add	r3, r3, #1
 c10c92c:	e20320ff 	and	r2, r3, #255	; 0xff
 c10c930:	e59f30b4 	ldr	r3, [pc, #180]	; c10c9ec <clock_setup+0x140>
 c10c934:	e5c32001 	strb	r2, [r3, #1]
	}

	if(rtc_time.min >= 60) {
 c10c938:	e59f30ac 	ldr	r3, [pc, #172]	; c10c9ec <clock_setup+0x140>
 c10c93c:	e5d33001 	ldrb	r3, [r3, #1]
 c10c940:	e353003b 	cmp	r3, #59	; 0x3b
 c10c944:	9a00000b 	bls	c10c978 <clock_setup+0xcc>
		rtc_time.min -= 60;
 c10c948:	e59f309c 	ldr	r3, [pc, #156]	; c10c9ec <clock_setup+0x140>
 c10c94c:	e5d33001 	ldrb	r3, [r3, #1]
 c10c950:	e243303c 	sub	r3, r3, #60	; 0x3c
 c10c954:	e20320ff 	and	r2, r3, #255	; 0xff
 c10c958:	e59f308c 	ldr	r3, [pc, #140]	; c10c9ec <clock_setup+0x140>
 c10c95c:	e5c32001 	strb	r2, [r3, #1]
		rtc_time.hour++;
 c10c960:	e59f3084 	ldr	r3, [pc, #132]	; c10c9ec <clock_setup+0x140>
 c10c964:	e5d33002 	ldrb	r3, [r3, #2]
 c10c968:	e2833001 	add	r3, r3, #1
 c10c96c:	e20320ff 	and	r2, r3, #255	; 0xff
 c10c970:	e59f3074 	ldr	r3, [pc, #116]	; c10c9ec <clock_setup+0x140>
 c10c974:	e5c32002 	strb	r2, [r3, #2]
	}

	if(rtc_time.hour >= 24) {
 c10c978:	e59f306c 	ldr	r3, [pc, #108]	; c10c9ec <clock_setup+0x140>
 c10c97c:	e5d33002 	ldrb	r3, [r3, #2]
 c10c980:	e3530017 	cmp	r3, #23
 c10c984:	9a00000b 	bls	c10c9b8 <clock_setup+0x10c>
		rtc_time.hour--;
 c10c988:	e59f305c 	ldr	r3, [pc, #92]	; c10c9ec <clock_setup+0x140>
 c10c98c:	e5d33002 	ldrb	r3, [r3, #2]
 c10c990:	e2433001 	sub	r3, r3, #1
 c10c994:	e20320ff 	and	r2, r3, #255	; 0xff
 c10c998:	e59f304c 	ldr	r3, [pc, #76]	; c10c9ec <clock_setup+0x140>
 c10c99c:	e5c32002 	strb	r2, [r3, #2]
		rtc_time.mday++;
 c10c9a0:	e59f3044 	ldr	r3, [pc, #68]	; c10c9ec <clock_setup+0x140>
 c10c9a4:	e5d33003 	ldrb	r3, [r3, #3]
 c10c9a8:	e2833001 	add	r3, r3, #1
 c10c9ac:	e20320ff 	and	r2, r3, #255	; 0xff
 c10c9b0:	e59f3034 	ldr	r3, [pc, #52]	; c10c9ec <clock_setup+0x140>
 c10c9b4:	e5c32003 	strb	r2, [r3, #3]
	}

	uart0_puts("Alarm time: ");
 c10c9b8:	e59f0030 	ldr	r0, [pc, #48]	; c10c9f0 <clock_setup+0x144>
 c10c9bc:	eb0005b8 	bl	c10e0a4 <uart0_puts>
	uart0_put_rtc_time(&rtc_time);
 c10c9c0:	e59f0024 	ldr	r0, [pc, #36]	; c10c9ec <clock_setup+0x140>
 c10c9c4:	eb0006ca 	bl	c10e4f4 <uart0_put_rtc_time>
	uart0_putchar('\n');
 c10c9c8:	e3a0000a 	mov	r0, #10
 c10c9cc:	eb00058e 	bl	c10e00c <uart0_putchar>

	rtc_set_alarm(rtc_alarm_ISR, &rtc_time);
 c10c9d0:	e59f001c 	ldr	r0, [pc, #28]	; c10c9f4 <clock_setup+0x148>
 c10c9d4:	e59f1010 	ldr	r1, [pc, #16]	; c10c9ec <clock_setup+0x140>
 c10c9d8:	eb000296 	bl	c10d438 <rtc_set_alarm>
}
 c10c9dc:	e24bd00c 	sub	sp, fp, #12
 c10c9e0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10c9e4:	e12fff1e 	bx	lr
 c10c9e8:	0c101118 	.word	0x0c101118
 c10c9ec:	0c10a770 	.word	0x0c10a770
 c10c9f0:	0c101128 	.word	0x0c101128
 c10c9f4:	0c10c878 	.word	0x0c10c878

0c10c9f8 <startup>:

void startup() {
 c10c9f8:	e1a0c00d 	mov	ip, sp
 c10c9fc:	e92dd800 	push	{fp, ip, lr, pc}
 c10ca00:	e24cb004 	sub	fp, ip, #4
 c10ca04:	e24dd008 	sub	sp, sp, #8
	int x, y;
	rtc_time_t rtc_time;

	rtc_gettime(&rtc_time);
 c10ca08:	e24b3014 	sub	r3, fp, #20
 c10ca0c:	e1a00003 	mov	r0, r3
 c10ca10:	eb000178 	bl	c10cff8 <rtc_gettime>
	uart0_puts("Current time: ");
 c10ca14:	e59f0030 	ldr	r0, [pc, #48]	; c10ca4c <startup+0x54>
 c10ca18:	eb0005a1 	bl	c10e0a4 <uart0_puts>
	uart0_put_rtc_time(&rtc_time);
 c10ca1c:	e24b3014 	sub	r3, fp, #20
 c10ca20:	e1a00003 	mov	r0, r3
 c10ca24:	eb0006b2 	bl	c10e4f4 <uart0_put_rtc_time>
	uart0_putchar('\n');
 c10ca28:	e3a0000a 	mov	r0, #10
 c10ca2c:	eb000576 	bl	c10e00c <uart0_putchar>

	lcd_clear();
 c10ca30:	ebfffbef 	bl	c10b9f4 <lcd_clear>
	lcd_on();
 c10ca34:	ebfffbc6 	bl	c10b954 <lcd_on>

	lcd_putWallpaper(PICACHU);
 c10ca38:	e59f0010 	ldr	r0, [pc, #16]	; c10ca50 <startup+0x58>
 c10ca3c:	ebfffd96 	bl	c10c09c <lcd_putWallpaper>
}
 c10ca40:	e24bd00c 	sub	sp, fp, #12
 c10ca44:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10ca48:	e12fff1e 	bx	lr
 c10ca4c:	0c101138 	.word	0x0c101138
 c10ca50:	0c230000 	.word	0x0c230000

0c10ca54 <loop>:

int loop(void) {
 c10ca54:	e1a0c00d 	mov	ip, sp
 c10ca58:	e92dd800 	push	{fp, ip, lr, pc}
 c10ca5c:	e24cb004 	sub	fp, ip, #4
 c10ca60:	e24dd010 	sub	sp, sp, #16
	int c;

	uart0_puts("Introduce color: \n");
 c10ca64:	e59f006c 	ldr	r0, [pc, #108]	; c10cad8 <loop+0x84>
 c10ca68:	eb00058d 	bl	c10e0a4 <uart0_puts>
	c = uart0_getint();
 c10ca6c:	eb000629 	bl	c10e318 <uart0_getint>
 c10ca70:	e50b0010 	str	r0, [fp, #-16]
	lcd_clear_color(c & 0xf);
 c10ca74:	e51b3010 	ldr	r3, [fp, #-16]
 c10ca78:	e20330ff 	and	r3, r3, #255	; 0xff
 c10ca7c:	e203300f 	and	r3, r3, #15
 c10ca80:	e20330ff 	and	r3, r3, #255	; 0xff
 c10ca84:	e1a00003 	mov	r0, r3
 c10ca88:	ebfffbf0 	bl	c10ba50 <lcd_clear_color>
	lcd_puts(16, 16, BLACK, "Hola mundo!");
 c10ca8c:	e3a00010 	mov	r0, #16
 c10ca90:	e3a01010 	mov	r1, #16
 c10ca94:	e3a0200f 	mov	r2, #15
 c10ca98:	e59f303c 	ldr	r3, [pc, #60]	; c10cadc <loop+0x88>
 c10ca9c:	ebfffd56 	bl	c10bffc <lcd_puts>
	lcd_draw_box(0, 0, LCD_WIDTH - 1, LCD_HEIGHT - 1, BLACK, 8);
 c10caa0:	e3a0300f 	mov	r3, #15
 c10caa4:	e58d3000 	str	r3, [sp]
 c10caa8:	e3a03008 	mov	r3, #8
 c10caac:	e58d3004 	str	r3, [sp, #4]
 c10cab0:	e3a00000 	mov	r0, #0
 c10cab4:	e3a01000 	mov	r1, #0
 c10cab8:	e59f2020 	ldr	r2, [pc, #32]	; c10cae0 <loop+0x8c>
 c10cabc:	e3a030ef 	mov	r3, #239	; 0xef
 c10cac0:	ebfffcc3 	bl	c10bdd4 <lcd_draw_box>

	return 0;
 c10cac4:	e3a03000 	mov	r3, #0
}
 c10cac8:	e1a00003 	mov	r0, r3
 c10cacc:	e24bd00c 	sub	sp, fp, #12
 c10cad0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10cad4:	e12fff1e 	bx	lr
 c10cad8:	0c101148 	.word	0x0c101148
 c10cadc:	0c10115c 	.word	0x0c10115c
 c10cae0:	0000013f 	.word	0x0000013f

0c10cae4 <main>:

int main(void) {
 c10cae4:	e1a0c00d 	mov	ip, sp
 c10cae8:	e92dd800 	push	{fp, ip, lr, pc}
 c10caec:	e24cb004 	sub	fp, ip, #4

	setup();
 c10caf0:	ebfffeb9 	bl	c10c5dc <setup>
	startup();
 c10caf4:	ebffffbf 	bl	c10c9f8 <startup>

	while (1) {
		loop();
 c10caf8:	ebffffd5 	bl	c10ca54 <loop>
	}
 c10cafc:	eafffffd 	b	c10caf8 <main+0x14>

0c10cb00 <isr_TICK_dummy>:
#include "intcontroller.h"

void isr_TICK_dummy(void)  __attribute__ ((interrupt ("IRQ")));
void isr_ALARM_dummy(void) __attribute__ ((interrupt ("IRQ")));

void isr_TICK_dummy(void){
 c10cb00:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10cb04:	e1a0c00d 	mov	ip, sp
 c10cb08:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10cb0c:	e24cb004 	sub	fp, ip, #4
	ic_cleanflag(INT_TICK);
 c10cb10:	e3a00014 	mov	r0, #20
 c10cb14:	ebfffa9a 	bl	c10b584 <ic_cleanflag>
}
 c10cb18:	e24bd01c 	sub	sp, fp, #28
 c10cb1c:	e89d680f 	ldm	sp, {r0, r1, r2, r3, fp, sp, lr}
 c10cb20:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c10cb24:	e25ef004 	subs	pc, lr, #4

0c10cb28 <isr_ALARM_dummy>:

void isr_ALARM_dummy(void){
 c10cb28:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10cb2c:	e1a0c00d 	mov	ip, sp
 c10cb30:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10cb34:	e24cb004 	sub	fp, ip, #4
	ic_cleanflag(INT_RTC);
 c10cb38:	e3a00001 	mov	r0, #1
 c10cb3c:	ebfffa90 	bl	c10b584 <ic_cleanflag>
}
 c10cb40:	e24bd01c 	sub	sp, fp, #28
 c10cb44:	e89d680f 	ldm	sp, {r0, r1, r2, r3, fp, sp, lr}
 c10cb48:	e49dc004 	pop	{ip}		; (ldr ip, [sp], #4)
 c10cb4c:	e25ef004 	subs	pc, lr, #4

0c10cb50 <rtc_init>:

void rtc_init( void )
{
 c10cb50:	e1a0c00d 	mov	ip, sp
 c10cb54:	e92dd800 	push	{fp, ip, lr, pc}
 c10cb58:	e24cb004 	sub	fp, ip, #4
	//Disable Tick interrupt
    rTICINT   = 0x0;
 c10cb5c:	e59f3098 	ldr	r3, [pc, #152]	; c10cbfc <rtc_init+0xac>
 c10cb60:	e3a02000 	mov	r2, #0
 c10cb64:	e5c32000 	strb	r2, [r3]

    //Disable alarm
    rRTCALM  = 0x0;
 c10cb68:	e59f3090 	ldr	r3, [pc, #144]	; c10cc00 <rtc_init+0xb0>
 c10cb6c:	e3a02000 	mov	r2, #0
 c10cb70:	e5c32000 	strb	r2, [r3]

    //Disable Rounding
    rRTCRST  = 0x0;
 c10cb74:	e59f3088 	ldr	r3, [pc, #136]	; c10cc04 <rtc_init+0xb4>
 c10cb78:	e3a02000 	mov	r2, #0
 c10cb7c:	e5c32000 	strb	r2, [r3]


    // RTCCON[2] = 0 merged BCD registers: única opción posible
    // RTCCON[1] = 0 Fuente de reloj primaria: única opción posible: XTAL
    // RTCCON[0] = 1 Enabled register read/write
    rRTCCON  = 0x1;
 c10cb80:	e59f3080 	ldr	r3, [pc, #128]	; c10cc08 <rtc_init+0xb8>
 c10cb84:	e3a02001 	mov	r2, #1
 c10cb88:	e5c32000 	strb	r2, [r3]
    rBCDMIN  = 0x0;
    rBCDSEC  = 0x0;
    */

    //Init to 0
    rALMYEAR = 0;
 c10cb8c:	e59f3078 	ldr	r3, [pc, #120]	; c10cc0c <rtc_init+0xbc>
 c10cb90:	e3a02000 	mov	r2, #0
 c10cb94:	e5c32000 	strb	r2, [r3]
    rALMMON  = 0;
 c10cb98:	e59f3070 	ldr	r3, [pc, #112]	; c10cc10 <rtc_init+0xc0>
 c10cb9c:	e3a02000 	mov	r2, #0
 c10cba0:	e5c32000 	strb	r2, [r3]
    rALMDAY  = 0;
 c10cba4:	e59f3068 	ldr	r3, [pc, #104]	; c10cc14 <rtc_init+0xc4>
 c10cba8:	e3a02000 	mov	r2, #0
 c10cbac:	e5c32000 	strb	r2, [r3]
    rALMHOUR = 0;
 c10cbb0:	e59f3060 	ldr	r3, [pc, #96]	; c10cc18 <rtc_init+0xc8>
 c10cbb4:	e3a02000 	mov	r2, #0
 c10cbb8:	e5c32000 	strb	r2, [r3]
    rALMMIN  = 0;
 c10cbbc:	e59f3058 	ldr	r3, [pc, #88]	; c10cc1c <rtc_init+0xcc>
 c10cbc0:	e3a02000 	mov	r2, #0
 c10cbc4:	e5c32000 	strb	r2, [r3]
    rALMSEC  = 0;
 c10cbc8:	e59f3050 	ldr	r3, [pc, #80]	; c10cc20 <rtc_init+0xd0>
 c10cbcc:	e3a02000 	mov	r2, #0
 c10cbd0:	e5c32000 	strb	r2, [r3]

    rRTCCON &= ~1;
 c10cbd4:	e59f302c 	ldr	r3, [pc, #44]	; c10cc08 <rtc_init+0xb8>
 c10cbd8:	e59f2028 	ldr	r2, [pc, #40]	; c10cc08 <rtc_init+0xb8>
 c10cbdc:	e5d22000 	ldrb	r2, [r2]
 c10cbe0:	e20220ff 	and	r2, r2, #255	; 0xff
 c10cbe4:	e3c22001 	bic	r2, r2, #1
 c10cbe8:	e20220ff 	and	r2, r2, #255	; 0xff
 c10cbec:	e5c32000 	strb	r2, [r3]
}
 c10cbf0:	e24bd00c 	sub	sp, fp, #12
 c10cbf4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10cbf8:	e12fff1e 	bx	lr
 c10cbfc:	01d7008c 	.word	0x01d7008c
 c10cc00:	01d70050 	.word	0x01d70050
 c10cc04:	01d7006c 	.word	0x01d7006c
 c10cc08:	01d70040 	.word	0x01d70040
 c10cc0c:	01d70068 	.word	0x01d70068
 c10cc10:	01d70064 	.word	0x01d70064
 c10cc14:	01d70060 	.word	0x01d70060
 c10cc18:	01d7005c 	.word	0x01d7005c
 c10cc1c:	01d70058 	.word	0x01d70058
 c10cc20:	01d70054 	.word	0x01d70054

0c10cc24 <rtc_puttime>:

void rtc_puttime( rtc_time_t *rtc_time )
{
 c10cc24:	e1a0c00d 	mov	ip, sp
 c10cc28:	e92dd800 	push	{fp, ip, lr, pc}
 c10cc2c:	e24cb004 	sub	fp, ip, #4
 c10cc30:	e24dd008 	sub	sp, sp, #8
 c10cc34:	e50b0010 	str	r0, [fp, #-16]
	//Set RTCEN=RTCCON[0] = 1
    rRTCCON |= 1;
 c10cc38:	e59f3394 	ldr	r3, [pc, #916]	; c10cfd4 <rtc_puttime+0x3b0>
 c10cc3c:	e59f2390 	ldr	r2, [pc, #912]	; c10cfd4 <rtc_puttime+0x3b0>
 c10cc40:	e5d22000 	ldrb	r2, [r2]
 c10cc44:	e20220ff 	and	r2, r2, #255	; 0xff
 c10cc48:	e3822001 	orr	r2, r2, #1
 c10cc4c:	e20220ff 	and	r2, r2, #255	; 0xff
 c10cc50:	e5c32000 	strb	r2, [r3]

    rBCDYEAR = ((rtc_time->year / 10) % 10) << 4 | (rtc_time->year % 10);
 c10cc54:	e59f037c 	ldr	r0, [pc, #892]	; c10cfd8 <rtc_puttime+0x3b4>
 c10cc58:	e51b3010 	ldr	r3, [fp, #-16]
 c10cc5c:	e5d32006 	ldrb	r2, [r3, #6]
 c10cc60:	e59f3374 	ldr	r3, [pc, #884]	; c10cfdc <rtc_puttime+0x3b8>
 c10cc64:	e0831392 	umull	r1, r3, r2, r3
 c10cc68:	e1a031a3 	lsr	r3, r3, #3
 c10cc6c:	e20320ff 	and	r2, r3, #255	; 0xff
 c10cc70:	e59f3364 	ldr	r3, [pc, #868]	; c10cfdc <rtc_puttime+0x3b8>
 c10cc74:	e0831392 	umull	r1, r3, r2, r3
 c10cc78:	e1a011a3 	lsr	r1, r3, #3
 c10cc7c:	e1a03001 	mov	r3, r1
 c10cc80:	e1a03103 	lsl	r3, r3, #2
 c10cc84:	e0833001 	add	r3, r3, r1
 c10cc88:	e1a03083 	lsl	r3, r3, #1
 c10cc8c:	e0633002 	rsb	r3, r3, r2
 c10cc90:	e20330ff 	and	r3, r3, #255	; 0xff
 c10cc94:	e1a03203 	lsl	r3, r3, #4
 c10cc98:	e203c0ff 	and	ip, r3, #255	; 0xff
 c10cc9c:	e51b3010 	ldr	r3, [fp, #-16]
 c10cca0:	e5d32006 	ldrb	r2, [r3, #6]
 c10cca4:	e59f3330 	ldr	r3, [pc, #816]	; c10cfdc <rtc_puttime+0x3b8>
 c10cca8:	e0831392 	umull	r1, r3, r2, r3
 c10ccac:	e1a011a3 	lsr	r1, r3, #3
 c10ccb0:	e1a03001 	mov	r3, r1
 c10ccb4:	e1a03103 	lsl	r3, r3, #2
 c10ccb8:	e0833001 	add	r3, r3, r1
 c10ccbc:	e1a03083 	lsl	r3, r3, #1
 c10ccc0:	e0633002 	rsb	r3, r3, r2
 c10ccc4:	e20330ff 	and	r3, r3, #255	; 0xff
 c10ccc8:	e20330ff 	and	r3, r3, #255	; 0xff
 c10cccc:	e1a0200c 	mov	r2, ip
 c10ccd0:	e1823003 	orr	r3, r2, r3
 c10ccd4:	e20330ff 	and	r3, r3, #255	; 0xff
 c10ccd8:	e20330ff 	and	r3, r3, #255	; 0xff
 c10ccdc:	e5c03000 	strb	r3, [r0]
    rBCDMON  = ((rtc_time->mon / 10) % 10) << 4 | (rtc_time->mon % 10);
 c10cce0:	e59f02f8 	ldr	r0, [pc, #760]	; c10cfe0 <rtc_puttime+0x3bc>
 c10cce4:	e51b3010 	ldr	r3, [fp, #-16]
 c10cce8:	e5d32005 	ldrb	r2, [r3, #5]
 c10ccec:	e59f32e8 	ldr	r3, [pc, #744]	; c10cfdc <rtc_puttime+0x3b8>
 c10ccf0:	e0831392 	umull	r1, r3, r2, r3
 c10ccf4:	e1a031a3 	lsr	r3, r3, #3
 c10ccf8:	e20320ff 	and	r2, r3, #255	; 0xff
 c10ccfc:	e59f32d8 	ldr	r3, [pc, #728]	; c10cfdc <rtc_puttime+0x3b8>
 c10cd00:	e0831392 	umull	r1, r3, r2, r3
 c10cd04:	e1a011a3 	lsr	r1, r3, #3
 c10cd08:	e1a03001 	mov	r3, r1
 c10cd0c:	e1a03103 	lsl	r3, r3, #2
 c10cd10:	e0833001 	add	r3, r3, r1
 c10cd14:	e1a03083 	lsl	r3, r3, #1
 c10cd18:	e0633002 	rsb	r3, r3, r2
 c10cd1c:	e20330ff 	and	r3, r3, #255	; 0xff
 c10cd20:	e1a03203 	lsl	r3, r3, #4
 c10cd24:	e203c0ff 	and	ip, r3, #255	; 0xff
 c10cd28:	e51b3010 	ldr	r3, [fp, #-16]
 c10cd2c:	e5d32005 	ldrb	r2, [r3, #5]
 c10cd30:	e59f32a4 	ldr	r3, [pc, #676]	; c10cfdc <rtc_puttime+0x3b8>
 c10cd34:	e0831392 	umull	r1, r3, r2, r3
 c10cd38:	e1a011a3 	lsr	r1, r3, #3
 c10cd3c:	e1a03001 	mov	r3, r1
 c10cd40:	e1a03103 	lsl	r3, r3, #2
 c10cd44:	e0833001 	add	r3, r3, r1
 c10cd48:	e1a03083 	lsl	r3, r3, #1
 c10cd4c:	e0633002 	rsb	r3, r3, r2
 c10cd50:	e20330ff 	and	r3, r3, #255	; 0xff
 c10cd54:	e20330ff 	and	r3, r3, #255	; 0xff
 c10cd58:	e1a0200c 	mov	r2, ip
 c10cd5c:	e1823003 	orr	r3, r2, r3
 c10cd60:	e20330ff 	and	r3, r3, #255	; 0xff
 c10cd64:	e20330ff 	and	r3, r3, #255	; 0xff
 c10cd68:	e5c03000 	strb	r3, [r0]
    rBCDDAY  = ((rtc_time->mday / 10) % 10) << 4 | (rtc_time->mday % 10);
 c10cd6c:	e59f0270 	ldr	r0, [pc, #624]	; c10cfe4 <rtc_puttime+0x3c0>
 c10cd70:	e51b3010 	ldr	r3, [fp, #-16]
 c10cd74:	e5d32003 	ldrb	r2, [r3, #3]
 c10cd78:	e59f325c 	ldr	r3, [pc, #604]	; c10cfdc <rtc_puttime+0x3b8>
 c10cd7c:	e0831392 	umull	r1, r3, r2, r3
 c10cd80:	e1a031a3 	lsr	r3, r3, #3
 c10cd84:	e20320ff 	and	r2, r3, #255	; 0xff
 c10cd88:	e59f324c 	ldr	r3, [pc, #588]	; c10cfdc <rtc_puttime+0x3b8>
 c10cd8c:	e0831392 	umull	r1, r3, r2, r3
 c10cd90:	e1a011a3 	lsr	r1, r3, #3
 c10cd94:	e1a03001 	mov	r3, r1
 c10cd98:	e1a03103 	lsl	r3, r3, #2
 c10cd9c:	e0833001 	add	r3, r3, r1
 c10cda0:	e1a03083 	lsl	r3, r3, #1
 c10cda4:	e0633002 	rsb	r3, r3, r2
 c10cda8:	e20330ff 	and	r3, r3, #255	; 0xff
 c10cdac:	e1a03203 	lsl	r3, r3, #4
 c10cdb0:	e203c0ff 	and	ip, r3, #255	; 0xff
 c10cdb4:	e51b3010 	ldr	r3, [fp, #-16]
 c10cdb8:	e5d32003 	ldrb	r2, [r3, #3]
 c10cdbc:	e59f3218 	ldr	r3, [pc, #536]	; c10cfdc <rtc_puttime+0x3b8>
 c10cdc0:	e0831392 	umull	r1, r3, r2, r3
 c10cdc4:	e1a011a3 	lsr	r1, r3, #3
 c10cdc8:	e1a03001 	mov	r3, r1
 c10cdcc:	e1a03103 	lsl	r3, r3, #2
 c10cdd0:	e0833001 	add	r3, r3, r1
 c10cdd4:	e1a03083 	lsl	r3, r3, #1
 c10cdd8:	e0633002 	rsb	r3, r3, r2
 c10cddc:	e20330ff 	and	r3, r3, #255	; 0xff
 c10cde0:	e20330ff 	and	r3, r3, #255	; 0xff
 c10cde4:	e1a0200c 	mov	r2, ip
 c10cde8:	e1823003 	orr	r3, r2, r3
 c10cdec:	e20330ff 	and	r3, r3, #255	; 0xff
 c10cdf0:	e20330ff 	and	r3, r3, #255	; 0xff
 c10cdf4:	e5c03000 	strb	r3, [r0]
    rBCDDATE = rtc_time->wday;
 c10cdf8:	e59f31e8 	ldr	r3, [pc, #488]	; c10cfe8 <rtc_puttime+0x3c4>
 c10cdfc:	e51b2010 	ldr	r2, [fp, #-16]
 c10ce00:	e5d22004 	ldrb	r2, [r2, #4]
 c10ce04:	e5c32000 	strb	r2, [r3]
    rBCDHOUR = ((rtc_time->hour / 10) % 10) << 4 | (rtc_time->hour % 10);
 c10ce08:	e59f01dc 	ldr	r0, [pc, #476]	; c10cfec <rtc_puttime+0x3c8>
 c10ce0c:	e51b3010 	ldr	r3, [fp, #-16]
 c10ce10:	e5d32002 	ldrb	r2, [r3, #2]
 c10ce14:	e59f31c0 	ldr	r3, [pc, #448]	; c10cfdc <rtc_puttime+0x3b8>
 c10ce18:	e0831392 	umull	r1, r3, r2, r3
 c10ce1c:	e1a031a3 	lsr	r3, r3, #3
 c10ce20:	e20320ff 	and	r2, r3, #255	; 0xff
 c10ce24:	e59f31b0 	ldr	r3, [pc, #432]	; c10cfdc <rtc_puttime+0x3b8>
 c10ce28:	e0831392 	umull	r1, r3, r2, r3
 c10ce2c:	e1a011a3 	lsr	r1, r3, #3
 c10ce30:	e1a03001 	mov	r3, r1
 c10ce34:	e1a03103 	lsl	r3, r3, #2
 c10ce38:	e0833001 	add	r3, r3, r1
 c10ce3c:	e1a03083 	lsl	r3, r3, #1
 c10ce40:	e0633002 	rsb	r3, r3, r2
 c10ce44:	e20330ff 	and	r3, r3, #255	; 0xff
 c10ce48:	e1a03203 	lsl	r3, r3, #4
 c10ce4c:	e203c0ff 	and	ip, r3, #255	; 0xff
 c10ce50:	e51b3010 	ldr	r3, [fp, #-16]
 c10ce54:	e5d32002 	ldrb	r2, [r3, #2]
 c10ce58:	e59f317c 	ldr	r3, [pc, #380]	; c10cfdc <rtc_puttime+0x3b8>
 c10ce5c:	e0831392 	umull	r1, r3, r2, r3
 c10ce60:	e1a011a3 	lsr	r1, r3, #3
 c10ce64:	e1a03001 	mov	r3, r1
 c10ce68:	e1a03103 	lsl	r3, r3, #2
 c10ce6c:	e0833001 	add	r3, r3, r1
 c10ce70:	e1a03083 	lsl	r3, r3, #1
 c10ce74:	e0633002 	rsb	r3, r3, r2
 c10ce78:	e20330ff 	and	r3, r3, #255	; 0xff
 c10ce7c:	e20330ff 	and	r3, r3, #255	; 0xff
 c10ce80:	e1a0200c 	mov	r2, ip
 c10ce84:	e1823003 	orr	r3, r2, r3
 c10ce88:	e20330ff 	and	r3, r3, #255	; 0xff
 c10ce8c:	e20330ff 	and	r3, r3, #255	; 0xff
 c10ce90:	e5c03000 	strb	r3, [r0]
    rBCDMIN  = ((rtc_time->min / 10) % 10) << 4 | (rtc_time->min % 10);
 c10ce94:	e59f0154 	ldr	r0, [pc, #340]	; c10cff0 <rtc_puttime+0x3cc>
 c10ce98:	e51b3010 	ldr	r3, [fp, #-16]
 c10ce9c:	e5d32001 	ldrb	r2, [r3, #1]
 c10cea0:	e59f3134 	ldr	r3, [pc, #308]	; c10cfdc <rtc_puttime+0x3b8>
 c10cea4:	e0831392 	umull	r1, r3, r2, r3
 c10cea8:	e1a031a3 	lsr	r3, r3, #3
 c10ceac:	e20320ff 	and	r2, r3, #255	; 0xff
 c10ceb0:	e59f3124 	ldr	r3, [pc, #292]	; c10cfdc <rtc_puttime+0x3b8>
 c10ceb4:	e0831392 	umull	r1, r3, r2, r3
 c10ceb8:	e1a011a3 	lsr	r1, r3, #3
 c10cebc:	e1a03001 	mov	r3, r1
 c10cec0:	e1a03103 	lsl	r3, r3, #2
 c10cec4:	e0833001 	add	r3, r3, r1
 c10cec8:	e1a03083 	lsl	r3, r3, #1
 c10cecc:	e0633002 	rsb	r3, r3, r2
 c10ced0:	e20330ff 	and	r3, r3, #255	; 0xff
 c10ced4:	e1a03203 	lsl	r3, r3, #4
 c10ced8:	e203c0ff 	and	ip, r3, #255	; 0xff
 c10cedc:	e51b3010 	ldr	r3, [fp, #-16]
 c10cee0:	e5d32001 	ldrb	r2, [r3, #1]
 c10cee4:	e59f30f0 	ldr	r3, [pc, #240]	; c10cfdc <rtc_puttime+0x3b8>
 c10cee8:	e0831392 	umull	r1, r3, r2, r3
 c10ceec:	e1a011a3 	lsr	r1, r3, #3
 c10cef0:	e1a03001 	mov	r3, r1
 c10cef4:	e1a03103 	lsl	r3, r3, #2
 c10cef8:	e0833001 	add	r3, r3, r1
 c10cefc:	e1a03083 	lsl	r3, r3, #1
 c10cf00:	e0633002 	rsb	r3, r3, r2
 c10cf04:	e20330ff 	and	r3, r3, #255	; 0xff
 c10cf08:	e20330ff 	and	r3, r3, #255	; 0xff
 c10cf0c:	e1a0200c 	mov	r2, ip
 c10cf10:	e1823003 	orr	r3, r2, r3
 c10cf14:	e20330ff 	and	r3, r3, #255	; 0xff
 c10cf18:	e20330ff 	and	r3, r3, #255	; 0xff
 c10cf1c:	e5c03000 	strb	r3, [r0]
    rBCDSEC  = ((rtc_time->sec / 10) % 10) << 4 | (rtc_time->sec % 10);
 c10cf20:	e59f00cc 	ldr	r0, [pc, #204]	; c10cff4 <rtc_puttime+0x3d0>
 c10cf24:	e51b3010 	ldr	r3, [fp, #-16]
 c10cf28:	e5d32000 	ldrb	r2, [r3]
 c10cf2c:	e59f30a8 	ldr	r3, [pc, #168]	; c10cfdc <rtc_puttime+0x3b8>
 c10cf30:	e0831392 	umull	r1, r3, r2, r3
 c10cf34:	e1a031a3 	lsr	r3, r3, #3
 c10cf38:	e20320ff 	and	r2, r3, #255	; 0xff
 c10cf3c:	e59f3098 	ldr	r3, [pc, #152]	; c10cfdc <rtc_puttime+0x3b8>
 c10cf40:	e0831392 	umull	r1, r3, r2, r3
 c10cf44:	e1a011a3 	lsr	r1, r3, #3
 c10cf48:	e1a03001 	mov	r3, r1
 c10cf4c:	e1a03103 	lsl	r3, r3, #2
 c10cf50:	e0833001 	add	r3, r3, r1
 c10cf54:	e1a03083 	lsl	r3, r3, #1
 c10cf58:	e0633002 	rsb	r3, r3, r2
 c10cf5c:	e20330ff 	and	r3, r3, #255	; 0xff
 c10cf60:	e1a03203 	lsl	r3, r3, #4
 c10cf64:	e203c0ff 	and	ip, r3, #255	; 0xff
 c10cf68:	e51b3010 	ldr	r3, [fp, #-16]
 c10cf6c:	e5d32000 	ldrb	r2, [r3]
 c10cf70:	e59f3064 	ldr	r3, [pc, #100]	; c10cfdc <rtc_puttime+0x3b8>
 c10cf74:	e0831392 	umull	r1, r3, r2, r3
 c10cf78:	e1a011a3 	lsr	r1, r3, #3
 c10cf7c:	e1a03001 	mov	r3, r1
 c10cf80:	e1a03103 	lsl	r3, r3, #2
 c10cf84:	e0833001 	add	r3, r3, r1
 c10cf88:	e1a03083 	lsl	r3, r3, #1
 c10cf8c:	e0633002 	rsb	r3, r3, r2
 c10cf90:	e20330ff 	and	r3, r3, #255	; 0xff
 c10cf94:	e20330ff 	and	r3, r3, #255	; 0xff
 c10cf98:	e1a0200c 	mov	r2, ip
 c10cf9c:	e1823003 	orr	r3, r2, r3
 c10cfa0:	e20330ff 	and	r3, r3, #255	; 0xff
 c10cfa4:	e20330ff 	and	r3, r3, #255	; 0xff
 c10cfa8:	e5c03000 	strb	r3, [r0]

	//Set RTCEN=RTCCON[0] = 0
    rRTCCON &= ~1;
 c10cfac:	e59f3020 	ldr	r3, [pc, #32]	; c10cfd4 <rtc_puttime+0x3b0>
 c10cfb0:	e59f201c 	ldr	r2, [pc, #28]	; c10cfd4 <rtc_puttime+0x3b0>
 c10cfb4:	e5d22000 	ldrb	r2, [r2]
 c10cfb8:	e20220ff 	and	r2, r2, #255	; 0xff
 c10cfbc:	e3c22001 	bic	r2, r2, #1
 c10cfc0:	e20220ff 	and	r2, r2, #255	; 0xff
 c10cfc4:	e5c32000 	strb	r2, [r3]
}
 c10cfc8:	e24bd00c 	sub	sp, fp, #12
 c10cfcc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10cfd0:	e12fff1e 	bx	lr
 c10cfd4:	01d70040 	.word	0x01d70040
 c10cfd8:	01d70088 	.word	0x01d70088
 c10cfdc:	cccccccd 	.word	0xcccccccd
 c10cfe0:	01d70084 	.word	0x01d70084
 c10cfe4:	01d7007c 	.word	0x01d7007c
 c10cfe8:	01d70080 	.word	0x01d70080
 c10cfec:	01d70078 	.word	0x01d70078
 c10cff0:	01d70074 	.word	0x01d70074
 c10cff4:	01d70070 	.word	0x01d70070

0c10cff8 <rtc_gettime>:

void rtc_gettime( rtc_time_t *rtc_time )
{
 c10cff8:	e1a0c00d 	mov	ip, sp
 c10cffc:	e92dd800 	push	{fp, ip, lr, pc}
 c10d000:	e24cb004 	sub	fp, ip, #4
 c10d004:	e24dd008 	sub	sp, sp, #8
 c10d008:	e50b0010 	str	r0, [fp, #-16]
	//Set RTCEN=RTCCON[0] = 1
    rRTCCON |= 1;
 c10d00c:	e59f3404 	ldr	r3, [pc, #1028]	; c10d418 <rtc_gettime+0x420>
 c10d010:	e59f2400 	ldr	r2, [pc, #1024]	; c10d418 <rtc_gettime+0x420>
 c10d014:	e5d22000 	ldrb	r2, [r2]
 c10d018:	e20220ff 	and	r2, r2, #255	; 0xff
 c10d01c:	e3822001 	orr	r2, r2, #1
 c10d020:	e20220ff 	and	r2, r2, #255	; 0xff
 c10d024:	e5c32000 	strb	r2, [r3]

    rtc_time->year = (rBCDYEAR & 0b1111) + 10 * (rBCDYEAR >> 4);
 c10d028:	e59f33ec 	ldr	r3, [pc, #1004]	; c10d41c <rtc_gettime+0x424>
 c10d02c:	e5d33000 	ldrb	r3, [r3]
 c10d030:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d034:	e203300f 	and	r3, r3, #15
 c10d038:	e20320ff 	and	r2, r3, #255	; 0xff
 c10d03c:	e59f33d8 	ldr	r3, [pc, #984]	; c10d41c <rtc_gettime+0x424>
 c10d040:	e5d33000 	ldrb	r3, [r3]
 c10d044:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d048:	e1a03223 	lsr	r3, r3, #4
 c10d04c:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d050:	e1a01003 	mov	r1, r3
 c10d054:	e1a01101 	lsl	r1, r1, #2
 c10d058:	e0813003 	add	r3, r1, r3
 c10d05c:	e1a03083 	lsl	r3, r3, #1
 c10d060:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d064:	e0823003 	add	r3, r2, r3
 c10d068:	e20320ff 	and	r2, r3, #255	; 0xff
 c10d06c:	e51b3010 	ldr	r3, [fp, #-16]
 c10d070:	e5c32006 	strb	r2, [r3, #6]
    rtc_time->mon  = (rBCDMON & 0b1111) + 10 * (rBCDMON >> 4);
 c10d074:	e59f33a4 	ldr	r3, [pc, #932]	; c10d420 <rtc_gettime+0x428>
 c10d078:	e5d33000 	ldrb	r3, [r3]
 c10d07c:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d080:	e203300f 	and	r3, r3, #15
 c10d084:	e20320ff 	and	r2, r3, #255	; 0xff
 c10d088:	e59f3390 	ldr	r3, [pc, #912]	; c10d420 <rtc_gettime+0x428>
 c10d08c:	e5d33000 	ldrb	r3, [r3]
 c10d090:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d094:	e1a03223 	lsr	r3, r3, #4
 c10d098:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d09c:	e1a01003 	mov	r1, r3
 c10d0a0:	e1a01101 	lsl	r1, r1, #2
 c10d0a4:	e0813003 	add	r3, r1, r3
 c10d0a8:	e1a03083 	lsl	r3, r3, #1
 c10d0ac:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d0b0:	e0823003 	add	r3, r2, r3
 c10d0b4:	e20320ff 	and	r2, r3, #255	; 0xff
 c10d0b8:	e51b3010 	ldr	r3, [fp, #-16]
 c10d0bc:	e5c32005 	strb	r2, [r3, #5]
    rtc_time->mday = (rBCDDAY & 0b1111) + 10 * (rBCDDAY >> 4);
 c10d0c0:	e59f335c 	ldr	r3, [pc, #860]	; c10d424 <rtc_gettime+0x42c>
 c10d0c4:	e5d33000 	ldrb	r3, [r3]
 c10d0c8:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d0cc:	e203300f 	and	r3, r3, #15
 c10d0d0:	e20320ff 	and	r2, r3, #255	; 0xff
 c10d0d4:	e59f3348 	ldr	r3, [pc, #840]	; c10d424 <rtc_gettime+0x42c>
 c10d0d8:	e5d33000 	ldrb	r3, [r3]
 c10d0dc:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d0e0:	e1a03223 	lsr	r3, r3, #4
 c10d0e4:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d0e8:	e1a01003 	mov	r1, r3
 c10d0ec:	e1a01101 	lsl	r1, r1, #2
 c10d0f0:	e0813003 	add	r3, r1, r3
 c10d0f4:	e1a03083 	lsl	r3, r3, #1
 c10d0f8:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d0fc:	e0823003 	add	r3, r2, r3
 c10d100:	e20320ff 	and	r2, r3, #255	; 0xff
 c10d104:	e51b3010 	ldr	r3, [fp, #-16]
 c10d108:	e5c32003 	strb	r2, [r3, #3]
    rtc_time->wday = rBCDDATE;
 c10d10c:	e59f3314 	ldr	r3, [pc, #788]	; c10d428 <rtc_gettime+0x430>
 c10d110:	e5d33000 	ldrb	r3, [r3]
 c10d114:	e20320ff 	and	r2, r3, #255	; 0xff
 c10d118:	e51b3010 	ldr	r3, [fp, #-16]
 c10d11c:	e5c32004 	strb	r2, [r3, #4]
    rtc_time->hour = (rBCDHOUR & 0b1111) + 10 * (rBCDHOUR >> 4);
 c10d120:	e59f3304 	ldr	r3, [pc, #772]	; c10d42c <rtc_gettime+0x434>
 c10d124:	e5d33000 	ldrb	r3, [r3]
 c10d128:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d12c:	e203300f 	and	r3, r3, #15
 c10d130:	e20320ff 	and	r2, r3, #255	; 0xff
 c10d134:	e59f32f0 	ldr	r3, [pc, #752]	; c10d42c <rtc_gettime+0x434>
 c10d138:	e5d33000 	ldrb	r3, [r3]
 c10d13c:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d140:	e1a03223 	lsr	r3, r3, #4
 c10d144:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d148:	e1a01003 	mov	r1, r3
 c10d14c:	e1a01101 	lsl	r1, r1, #2
 c10d150:	e0813003 	add	r3, r1, r3
 c10d154:	e1a03083 	lsl	r3, r3, #1
 c10d158:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d15c:	e0823003 	add	r3, r2, r3
 c10d160:	e20320ff 	and	r2, r3, #255	; 0xff
 c10d164:	e51b3010 	ldr	r3, [fp, #-16]
 c10d168:	e5c32002 	strb	r2, [r3, #2]
    rtc_time->min  = (rBCDMIN & 0b1111) + 10 * (rBCDMIN >> 4);
 c10d16c:	e59f32bc 	ldr	r3, [pc, #700]	; c10d430 <rtc_gettime+0x438>
 c10d170:	e5d33000 	ldrb	r3, [r3]
 c10d174:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d178:	e203300f 	and	r3, r3, #15
 c10d17c:	e20320ff 	and	r2, r3, #255	; 0xff
 c10d180:	e59f32a8 	ldr	r3, [pc, #680]	; c10d430 <rtc_gettime+0x438>
 c10d184:	e5d33000 	ldrb	r3, [r3]
 c10d188:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d18c:	e1a03223 	lsr	r3, r3, #4
 c10d190:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d194:	e1a01003 	mov	r1, r3
 c10d198:	e1a01101 	lsl	r1, r1, #2
 c10d19c:	e0813003 	add	r3, r1, r3
 c10d1a0:	e1a03083 	lsl	r3, r3, #1
 c10d1a4:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d1a8:	e0823003 	add	r3, r2, r3
 c10d1ac:	e20320ff 	and	r2, r3, #255	; 0xff
 c10d1b0:	e51b3010 	ldr	r3, [fp, #-16]
 c10d1b4:	e5c32001 	strb	r2, [r3, #1]
    rtc_time->sec  = (rBCDSEC & 0b1111) + 10 * (rBCDSEC >> 4);
 c10d1b8:	e59f3274 	ldr	r3, [pc, #628]	; c10d434 <rtc_gettime+0x43c>
 c10d1bc:	e5d33000 	ldrb	r3, [r3]
 c10d1c0:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d1c4:	e203300f 	and	r3, r3, #15
 c10d1c8:	e20320ff 	and	r2, r3, #255	; 0xff
 c10d1cc:	e59f3260 	ldr	r3, [pc, #608]	; c10d434 <rtc_gettime+0x43c>
 c10d1d0:	e5d33000 	ldrb	r3, [r3]
 c10d1d4:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d1d8:	e1a03223 	lsr	r3, r3, #4
 c10d1dc:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d1e0:	e1a01003 	mov	r1, r3
 c10d1e4:	e1a01101 	lsl	r1, r1, #2
 c10d1e8:	e0813003 	add	r3, r1, r3
 c10d1ec:	e1a03083 	lsl	r3, r3, #1
 c10d1f0:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d1f4:	e0823003 	add	r3, r2, r3
 c10d1f8:	e20320ff 	and	r2, r3, #255	; 0xff
 c10d1fc:	e51b3010 	ldr	r3, [fp, #-16]
 c10d200:	e5c32000 	strb	r2, [r3]
    if( ! rtc_time->sec ){
 c10d204:	e51b3010 	ldr	r3, [fp, #-16]
 c10d208:	e5d33000 	ldrb	r3, [r3]
 c10d20c:	e3530000 	cmp	r3, #0
 c10d210:	1a000076 	bne	c10d3f0 <rtc_gettime+0x3f8>
    	//Reread, a second may have elapsed so date is invalid
        rtc_time->year = (rBCDYEAR & 0b1111) + 10 * (rBCDYEAR >> 4);
 c10d214:	e59f3200 	ldr	r3, [pc, #512]	; c10d41c <rtc_gettime+0x424>
 c10d218:	e5d33000 	ldrb	r3, [r3]
 c10d21c:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d220:	e203300f 	and	r3, r3, #15
 c10d224:	e20320ff 	and	r2, r3, #255	; 0xff
 c10d228:	e59f31ec 	ldr	r3, [pc, #492]	; c10d41c <rtc_gettime+0x424>
 c10d22c:	e5d33000 	ldrb	r3, [r3]
 c10d230:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d234:	e1a03223 	lsr	r3, r3, #4
 c10d238:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d23c:	e1a01003 	mov	r1, r3
 c10d240:	e1a01101 	lsl	r1, r1, #2
 c10d244:	e0813003 	add	r3, r1, r3
 c10d248:	e1a03083 	lsl	r3, r3, #1
 c10d24c:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d250:	e0823003 	add	r3, r2, r3
 c10d254:	e20320ff 	and	r2, r3, #255	; 0xff
 c10d258:	e51b3010 	ldr	r3, [fp, #-16]
 c10d25c:	e5c32006 	strb	r2, [r3, #6]
        rtc_time->mon  = (rBCDMON & 0b1111) + 10 * (rBCDMON >> 4);
 c10d260:	e59f31b8 	ldr	r3, [pc, #440]	; c10d420 <rtc_gettime+0x428>
 c10d264:	e5d33000 	ldrb	r3, [r3]
 c10d268:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d26c:	e203300f 	and	r3, r3, #15
 c10d270:	e20320ff 	and	r2, r3, #255	; 0xff
 c10d274:	e59f31a4 	ldr	r3, [pc, #420]	; c10d420 <rtc_gettime+0x428>
 c10d278:	e5d33000 	ldrb	r3, [r3]
 c10d27c:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d280:	e1a03223 	lsr	r3, r3, #4
 c10d284:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d288:	e1a01003 	mov	r1, r3
 c10d28c:	e1a01101 	lsl	r1, r1, #2
 c10d290:	e0813003 	add	r3, r1, r3
 c10d294:	e1a03083 	lsl	r3, r3, #1
 c10d298:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d29c:	e0823003 	add	r3, r2, r3
 c10d2a0:	e20320ff 	and	r2, r3, #255	; 0xff
 c10d2a4:	e51b3010 	ldr	r3, [fp, #-16]
 c10d2a8:	e5c32005 	strb	r2, [r3, #5]
        rtc_time->mday = (rBCDDAY & 0b1111) + 10 * (rBCDDAY >> 4);
 c10d2ac:	e59f3170 	ldr	r3, [pc, #368]	; c10d424 <rtc_gettime+0x42c>
 c10d2b0:	e5d33000 	ldrb	r3, [r3]
 c10d2b4:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d2b8:	e203300f 	and	r3, r3, #15
 c10d2bc:	e20320ff 	and	r2, r3, #255	; 0xff
 c10d2c0:	e59f315c 	ldr	r3, [pc, #348]	; c10d424 <rtc_gettime+0x42c>
 c10d2c4:	e5d33000 	ldrb	r3, [r3]
 c10d2c8:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d2cc:	e1a03223 	lsr	r3, r3, #4
 c10d2d0:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d2d4:	e1a01003 	mov	r1, r3
 c10d2d8:	e1a01101 	lsl	r1, r1, #2
 c10d2dc:	e0813003 	add	r3, r1, r3
 c10d2e0:	e1a03083 	lsl	r3, r3, #1
 c10d2e4:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d2e8:	e0823003 	add	r3, r2, r3
 c10d2ec:	e20320ff 	and	r2, r3, #255	; 0xff
 c10d2f0:	e51b3010 	ldr	r3, [fp, #-16]
 c10d2f4:	e5c32003 	strb	r2, [r3, #3]
        rtc_time->wday = rBCDDATE;
 c10d2f8:	e59f3128 	ldr	r3, [pc, #296]	; c10d428 <rtc_gettime+0x430>
 c10d2fc:	e5d33000 	ldrb	r3, [r3]
 c10d300:	e20320ff 	and	r2, r3, #255	; 0xff
 c10d304:	e51b3010 	ldr	r3, [fp, #-16]
 c10d308:	e5c32004 	strb	r2, [r3, #4]
        rtc_time->hour = (rBCDHOUR & 0b1111) + 10 * (rBCDHOUR >> 4);
 c10d30c:	e59f3118 	ldr	r3, [pc, #280]	; c10d42c <rtc_gettime+0x434>
 c10d310:	e5d33000 	ldrb	r3, [r3]
 c10d314:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d318:	e203300f 	and	r3, r3, #15
 c10d31c:	e20320ff 	and	r2, r3, #255	; 0xff
 c10d320:	e59f3104 	ldr	r3, [pc, #260]	; c10d42c <rtc_gettime+0x434>
 c10d324:	e5d33000 	ldrb	r3, [r3]
 c10d328:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d32c:	e1a03223 	lsr	r3, r3, #4
 c10d330:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d334:	e1a01003 	mov	r1, r3
 c10d338:	e1a01101 	lsl	r1, r1, #2
 c10d33c:	e0813003 	add	r3, r1, r3
 c10d340:	e1a03083 	lsl	r3, r3, #1
 c10d344:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d348:	e0823003 	add	r3, r2, r3
 c10d34c:	e20320ff 	and	r2, r3, #255	; 0xff
 c10d350:	e51b3010 	ldr	r3, [fp, #-16]
 c10d354:	e5c32002 	strb	r2, [r3, #2]
        rtc_time->min  = (rBCDMIN & 0b1111) + 10 * (rBCDMIN >> 4);
 c10d358:	e59f30d0 	ldr	r3, [pc, #208]	; c10d430 <rtc_gettime+0x438>
 c10d35c:	e5d33000 	ldrb	r3, [r3]
 c10d360:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d364:	e203300f 	and	r3, r3, #15
 c10d368:	e20320ff 	and	r2, r3, #255	; 0xff
 c10d36c:	e59f30bc 	ldr	r3, [pc, #188]	; c10d430 <rtc_gettime+0x438>
 c10d370:	e5d33000 	ldrb	r3, [r3]
 c10d374:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d378:	e1a03223 	lsr	r3, r3, #4
 c10d37c:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d380:	e1a01003 	mov	r1, r3
 c10d384:	e1a01101 	lsl	r1, r1, #2
 c10d388:	e0813003 	add	r3, r1, r3
 c10d38c:	e1a03083 	lsl	r3, r3, #1
 c10d390:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d394:	e0823003 	add	r3, r2, r3
 c10d398:	e20320ff 	and	r2, r3, #255	; 0xff
 c10d39c:	e51b3010 	ldr	r3, [fp, #-16]
 c10d3a0:	e5c32001 	strb	r2, [r3, #1]
        rtc_time->sec  = (rBCDSEC & 0b1111) + 10 * (rBCDSEC >> 4);
 c10d3a4:	e59f3088 	ldr	r3, [pc, #136]	; c10d434 <rtc_gettime+0x43c>
 c10d3a8:	e5d33000 	ldrb	r3, [r3]
 c10d3ac:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d3b0:	e203300f 	and	r3, r3, #15
 c10d3b4:	e20320ff 	and	r2, r3, #255	; 0xff
 c10d3b8:	e59f3074 	ldr	r3, [pc, #116]	; c10d434 <rtc_gettime+0x43c>
 c10d3bc:	e5d33000 	ldrb	r3, [r3]
 c10d3c0:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d3c4:	e1a03223 	lsr	r3, r3, #4
 c10d3c8:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d3cc:	e1a01003 	mov	r1, r3
 c10d3d0:	e1a01101 	lsl	r1, r1, #2
 c10d3d4:	e0813003 	add	r3, r1, r3
 c10d3d8:	e1a03083 	lsl	r3, r3, #1
 c10d3dc:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d3e0:	e0823003 	add	r3, r2, r3
 c10d3e4:	e20320ff 	and	r2, r3, #255	; 0xff
 c10d3e8:	e51b3010 	ldr	r3, [fp, #-16]
 c10d3ec:	e5c32000 	strb	r2, [r3]
    }

	//Set RTCEN=RTCCON[0] = 0
    rRTCCON &= ~1;
 c10d3f0:	e59f3020 	ldr	r3, [pc, #32]	; c10d418 <rtc_gettime+0x420>
 c10d3f4:	e59f201c 	ldr	r2, [pc, #28]	; c10d418 <rtc_gettime+0x420>
 c10d3f8:	e5d22000 	ldrb	r2, [r2]
 c10d3fc:	e20220ff 	and	r2, r2, #255	; 0xff
 c10d400:	e3c22001 	bic	r2, r2, #1
 c10d404:	e20220ff 	and	r2, r2, #255	; 0xff
 c10d408:	e5c32000 	strb	r2, [r3]
}
 c10d40c:	e24bd00c 	sub	sp, fp, #12
 c10d410:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10d414:	e12fff1e 	bx	lr
 c10d418:	01d70040 	.word	0x01d70040
 c10d41c:	01d70088 	.word	0x01d70088
 c10d420:	01d70084 	.word	0x01d70084
 c10d424:	01d7007c 	.word	0x01d7007c
 c10d428:	01d70080 	.word	0x01d70080
 c10d42c:	01d70078 	.word	0x01d70078
 c10d430:	01d70074 	.word	0x01d70074
 c10d434:	01d70070 	.word	0x01d70070

0c10d438 <rtc_set_alarm>:

void rtc_set_alarm( void(*isr)(void), rtc_time_t* rtc_time ) {
 c10d438:	e1a0c00d 	mov	ip, sp
 c10d43c:	e92dd800 	push	{fp, ip, lr, pc}
 c10d440:	e24cb004 	sub	fp, ip, #4
 c10d444:	e24dd008 	sub	sp, sp, #8
 c10d448:	e50b0010 	str	r0, [fp, #-16]
 c10d44c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec


    //Set alarm date
    rALMYEAR = ((rtc_time->year / 10) % 10) << 4 | (rtc_time->year % 10);
 c10d450:	e59f0380 	ldr	r0, [pc, #896]	; c10d7d8 <rtc_set_alarm+0x3a0>
 c10d454:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10d458:	e5d32006 	ldrb	r2, [r3, #6]
 c10d45c:	e59f3378 	ldr	r3, [pc, #888]	; c10d7dc <rtc_set_alarm+0x3a4>
 c10d460:	e0831392 	umull	r1, r3, r2, r3
 c10d464:	e1a031a3 	lsr	r3, r3, #3
 c10d468:	e20320ff 	and	r2, r3, #255	; 0xff
 c10d46c:	e59f3368 	ldr	r3, [pc, #872]	; c10d7dc <rtc_set_alarm+0x3a4>
 c10d470:	e0831392 	umull	r1, r3, r2, r3
 c10d474:	e1a011a3 	lsr	r1, r3, #3
 c10d478:	e1a03001 	mov	r3, r1
 c10d47c:	e1a03103 	lsl	r3, r3, #2
 c10d480:	e0833001 	add	r3, r3, r1
 c10d484:	e1a03083 	lsl	r3, r3, #1
 c10d488:	e0633002 	rsb	r3, r3, r2
 c10d48c:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d490:	e1a03203 	lsl	r3, r3, #4
 c10d494:	e203c0ff 	and	ip, r3, #255	; 0xff
 c10d498:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10d49c:	e5d32006 	ldrb	r2, [r3, #6]
 c10d4a0:	e59f3334 	ldr	r3, [pc, #820]	; c10d7dc <rtc_set_alarm+0x3a4>
 c10d4a4:	e0831392 	umull	r1, r3, r2, r3
 c10d4a8:	e1a011a3 	lsr	r1, r3, #3
 c10d4ac:	e1a03001 	mov	r3, r1
 c10d4b0:	e1a03103 	lsl	r3, r3, #2
 c10d4b4:	e0833001 	add	r3, r3, r1
 c10d4b8:	e1a03083 	lsl	r3, r3, #1
 c10d4bc:	e0633002 	rsb	r3, r3, r2
 c10d4c0:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d4c4:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d4c8:	e1a0200c 	mov	r2, ip
 c10d4cc:	e1823003 	orr	r3, r2, r3
 c10d4d0:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d4d4:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d4d8:	e5c03000 	strb	r3, [r0]
    rALMMON  = ((rtc_time->mon / 10) % 10) << 4 | (rtc_time->mon % 10);
 c10d4dc:	e59f02fc 	ldr	r0, [pc, #764]	; c10d7e0 <rtc_set_alarm+0x3a8>
 c10d4e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10d4e4:	e5d32005 	ldrb	r2, [r3, #5]
 c10d4e8:	e59f32ec 	ldr	r3, [pc, #748]	; c10d7dc <rtc_set_alarm+0x3a4>
 c10d4ec:	e0831392 	umull	r1, r3, r2, r3
 c10d4f0:	e1a031a3 	lsr	r3, r3, #3
 c10d4f4:	e20320ff 	and	r2, r3, #255	; 0xff
 c10d4f8:	e59f32dc 	ldr	r3, [pc, #732]	; c10d7dc <rtc_set_alarm+0x3a4>
 c10d4fc:	e0831392 	umull	r1, r3, r2, r3
 c10d500:	e1a011a3 	lsr	r1, r3, #3
 c10d504:	e1a03001 	mov	r3, r1
 c10d508:	e1a03103 	lsl	r3, r3, #2
 c10d50c:	e0833001 	add	r3, r3, r1
 c10d510:	e1a03083 	lsl	r3, r3, #1
 c10d514:	e0633002 	rsb	r3, r3, r2
 c10d518:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d51c:	e1a03203 	lsl	r3, r3, #4
 c10d520:	e203c0ff 	and	ip, r3, #255	; 0xff
 c10d524:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10d528:	e5d32005 	ldrb	r2, [r3, #5]
 c10d52c:	e59f32a8 	ldr	r3, [pc, #680]	; c10d7dc <rtc_set_alarm+0x3a4>
 c10d530:	e0831392 	umull	r1, r3, r2, r3
 c10d534:	e1a011a3 	lsr	r1, r3, #3
 c10d538:	e1a03001 	mov	r3, r1
 c10d53c:	e1a03103 	lsl	r3, r3, #2
 c10d540:	e0833001 	add	r3, r3, r1
 c10d544:	e1a03083 	lsl	r3, r3, #1
 c10d548:	e0633002 	rsb	r3, r3, r2
 c10d54c:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d550:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d554:	e1a0200c 	mov	r2, ip
 c10d558:	e1823003 	orr	r3, r2, r3
 c10d55c:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d560:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d564:	e5c03000 	strb	r3, [r0]
    rALMDAY  = ((rtc_time->mday / 10) % 10) << 4 | (rtc_time->mday % 10);
 c10d568:	e59f0274 	ldr	r0, [pc, #628]	; c10d7e4 <rtc_set_alarm+0x3ac>
 c10d56c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10d570:	e5d32003 	ldrb	r2, [r3, #3]
 c10d574:	e59f3260 	ldr	r3, [pc, #608]	; c10d7dc <rtc_set_alarm+0x3a4>
 c10d578:	e0831392 	umull	r1, r3, r2, r3
 c10d57c:	e1a031a3 	lsr	r3, r3, #3
 c10d580:	e20320ff 	and	r2, r3, #255	; 0xff
 c10d584:	e59f3250 	ldr	r3, [pc, #592]	; c10d7dc <rtc_set_alarm+0x3a4>
 c10d588:	e0831392 	umull	r1, r3, r2, r3
 c10d58c:	e1a011a3 	lsr	r1, r3, #3
 c10d590:	e1a03001 	mov	r3, r1
 c10d594:	e1a03103 	lsl	r3, r3, #2
 c10d598:	e0833001 	add	r3, r3, r1
 c10d59c:	e1a03083 	lsl	r3, r3, #1
 c10d5a0:	e0633002 	rsb	r3, r3, r2
 c10d5a4:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d5a8:	e1a03203 	lsl	r3, r3, #4
 c10d5ac:	e203c0ff 	and	ip, r3, #255	; 0xff
 c10d5b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10d5b4:	e5d32003 	ldrb	r2, [r3, #3]
 c10d5b8:	e59f321c 	ldr	r3, [pc, #540]	; c10d7dc <rtc_set_alarm+0x3a4>
 c10d5bc:	e0831392 	umull	r1, r3, r2, r3
 c10d5c0:	e1a011a3 	lsr	r1, r3, #3
 c10d5c4:	e1a03001 	mov	r3, r1
 c10d5c8:	e1a03103 	lsl	r3, r3, #2
 c10d5cc:	e0833001 	add	r3, r3, r1
 c10d5d0:	e1a03083 	lsl	r3, r3, #1
 c10d5d4:	e0633002 	rsb	r3, r3, r2
 c10d5d8:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d5dc:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d5e0:	e1a0200c 	mov	r2, ip
 c10d5e4:	e1823003 	orr	r3, r2, r3
 c10d5e8:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d5ec:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d5f0:	e5c03000 	strb	r3, [r0]
    rALMHOUR = ((rtc_time->hour / 10) % 10) << 4 | (rtc_time->hour % 10);
 c10d5f4:	e59f01ec 	ldr	r0, [pc, #492]	; c10d7e8 <rtc_set_alarm+0x3b0>
 c10d5f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10d5fc:	e5d32002 	ldrb	r2, [r3, #2]
 c10d600:	e59f31d4 	ldr	r3, [pc, #468]	; c10d7dc <rtc_set_alarm+0x3a4>
 c10d604:	e0831392 	umull	r1, r3, r2, r3
 c10d608:	e1a031a3 	lsr	r3, r3, #3
 c10d60c:	e20320ff 	and	r2, r3, #255	; 0xff
 c10d610:	e59f31c4 	ldr	r3, [pc, #452]	; c10d7dc <rtc_set_alarm+0x3a4>
 c10d614:	e0831392 	umull	r1, r3, r2, r3
 c10d618:	e1a011a3 	lsr	r1, r3, #3
 c10d61c:	e1a03001 	mov	r3, r1
 c10d620:	e1a03103 	lsl	r3, r3, #2
 c10d624:	e0833001 	add	r3, r3, r1
 c10d628:	e1a03083 	lsl	r3, r3, #1
 c10d62c:	e0633002 	rsb	r3, r3, r2
 c10d630:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d634:	e1a03203 	lsl	r3, r3, #4
 c10d638:	e203c0ff 	and	ip, r3, #255	; 0xff
 c10d63c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10d640:	e5d32002 	ldrb	r2, [r3, #2]
 c10d644:	e59f3190 	ldr	r3, [pc, #400]	; c10d7dc <rtc_set_alarm+0x3a4>
 c10d648:	e0831392 	umull	r1, r3, r2, r3
 c10d64c:	e1a011a3 	lsr	r1, r3, #3
 c10d650:	e1a03001 	mov	r3, r1
 c10d654:	e1a03103 	lsl	r3, r3, #2
 c10d658:	e0833001 	add	r3, r3, r1
 c10d65c:	e1a03083 	lsl	r3, r3, #1
 c10d660:	e0633002 	rsb	r3, r3, r2
 c10d664:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d668:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d66c:	e1a0200c 	mov	r2, ip
 c10d670:	e1823003 	orr	r3, r2, r3
 c10d674:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d678:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d67c:	e5c03000 	strb	r3, [r0]
    rALMMIN  = ((rtc_time->min / 10) % 10) << 4 | (rtc_time->min % 10);
 c10d680:	e59f0164 	ldr	r0, [pc, #356]	; c10d7ec <rtc_set_alarm+0x3b4>
 c10d684:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10d688:	e5d32001 	ldrb	r2, [r3, #1]
 c10d68c:	e59f3148 	ldr	r3, [pc, #328]	; c10d7dc <rtc_set_alarm+0x3a4>
 c10d690:	e0831392 	umull	r1, r3, r2, r3
 c10d694:	e1a031a3 	lsr	r3, r3, #3
 c10d698:	e20320ff 	and	r2, r3, #255	; 0xff
 c10d69c:	e59f3138 	ldr	r3, [pc, #312]	; c10d7dc <rtc_set_alarm+0x3a4>
 c10d6a0:	e0831392 	umull	r1, r3, r2, r3
 c10d6a4:	e1a011a3 	lsr	r1, r3, #3
 c10d6a8:	e1a03001 	mov	r3, r1
 c10d6ac:	e1a03103 	lsl	r3, r3, #2
 c10d6b0:	e0833001 	add	r3, r3, r1
 c10d6b4:	e1a03083 	lsl	r3, r3, #1
 c10d6b8:	e0633002 	rsb	r3, r3, r2
 c10d6bc:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d6c0:	e1a03203 	lsl	r3, r3, #4
 c10d6c4:	e203c0ff 	and	ip, r3, #255	; 0xff
 c10d6c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10d6cc:	e5d32001 	ldrb	r2, [r3, #1]
 c10d6d0:	e59f3104 	ldr	r3, [pc, #260]	; c10d7dc <rtc_set_alarm+0x3a4>
 c10d6d4:	e0831392 	umull	r1, r3, r2, r3
 c10d6d8:	e1a011a3 	lsr	r1, r3, #3
 c10d6dc:	e1a03001 	mov	r3, r1
 c10d6e0:	e1a03103 	lsl	r3, r3, #2
 c10d6e4:	e0833001 	add	r3, r3, r1
 c10d6e8:	e1a03083 	lsl	r3, r3, #1
 c10d6ec:	e0633002 	rsb	r3, r3, r2
 c10d6f0:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d6f4:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d6f8:	e1a0200c 	mov	r2, ip
 c10d6fc:	e1823003 	orr	r3, r2, r3
 c10d700:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d704:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d708:	e5c03000 	strb	r3, [r0]
    rALMSEC  = ((rtc_time->sec / 10) % 10) << 4 | (rtc_time->sec % 10);
 c10d70c:	e59f00dc 	ldr	r0, [pc, #220]	; c10d7f0 <rtc_set_alarm+0x3b8>
 c10d710:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10d714:	e5d32000 	ldrb	r2, [r3]
 c10d718:	e59f30bc 	ldr	r3, [pc, #188]	; c10d7dc <rtc_set_alarm+0x3a4>
 c10d71c:	e0831392 	umull	r1, r3, r2, r3
 c10d720:	e1a031a3 	lsr	r3, r3, #3
 c10d724:	e20320ff 	and	r2, r3, #255	; 0xff
 c10d728:	e59f30ac 	ldr	r3, [pc, #172]	; c10d7dc <rtc_set_alarm+0x3a4>
 c10d72c:	e0831392 	umull	r1, r3, r2, r3
 c10d730:	e1a011a3 	lsr	r1, r3, #3
 c10d734:	e1a03001 	mov	r3, r1
 c10d738:	e1a03103 	lsl	r3, r3, #2
 c10d73c:	e0833001 	add	r3, r3, r1
 c10d740:	e1a03083 	lsl	r3, r3, #1
 c10d744:	e0633002 	rsb	r3, r3, r2
 c10d748:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d74c:	e1a03203 	lsl	r3, r3, #4
 c10d750:	e203c0ff 	and	ip, r3, #255	; 0xff
 c10d754:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10d758:	e5d32000 	ldrb	r2, [r3]
 c10d75c:	e59f3078 	ldr	r3, [pc, #120]	; c10d7dc <rtc_set_alarm+0x3a4>
 c10d760:	e0831392 	umull	r1, r3, r2, r3
 c10d764:	e1a011a3 	lsr	r1, r3, #3
 c10d768:	e1a03001 	mov	r3, r1
 c10d76c:	e1a03103 	lsl	r3, r3, #2
 c10d770:	e0833001 	add	r3, r3, r1
 c10d774:	e1a03083 	lsl	r3, r3, #1
 c10d778:	e0633002 	rsb	r3, r3, r2
 c10d77c:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d780:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d784:	e1a0200c 	mov	r2, ip
 c10d788:	e1823003 	orr	r3, r2, r3
 c10d78c:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d790:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d794:	e5c03000 	strb	r3, [r0]

	//Enable alarm (bits [7:0] = 1)
    rRTCALM  = 0x7F;
 c10d798:	e59f3054 	ldr	r3, [pc, #84]	; c10d7f4 <rtc_set_alarm+0x3bc>
 c10d79c:	e3a0207f 	mov	r2, #127	; 0x7f
 c10d7a0:	e5c32000 	strb	r2, [r3]

    ic_conf_line(INT_RTC, IRQ);
 c10d7a4:	e3a00001 	mov	r0, #1
 c10d7a8:	e3a01000 	mov	r1, #0
 c10d7ac:	ebfff711 	bl	c10b3f8 <ic_conf_line>
    ic_cleanflag(INT_RTC);
 c10d7b0:	e3a00001 	mov	r0, #1
 c10d7b4:	ebfff772 	bl	c10b584 <ic_cleanflag>
    ic_enable(INT_RTC);
 c10d7b8:	e3a00001 	mov	r0, #1
 c10d7bc:	ebfff73d 	bl	c10b4b8 <ic_enable>

    pISR_RTC = (unsigned) isr;
 c10d7c0:	e59f3030 	ldr	r3, [pc, #48]	; c10d7f8 <rtc_set_alarm+0x3c0>
 c10d7c4:	e51b2010 	ldr	r2, [fp, #-16]
 c10d7c8:	e5832000 	str	r2, [r3]
}
 c10d7cc:	e24bd00c 	sub	sp, fp, #12
 c10d7d0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10d7d4:	e12fff1e 	bx	lr
 c10d7d8:	01d70068 	.word	0x01d70068
 c10d7dc:	cccccccd 	.word	0xcccccccd
 c10d7e0:	01d70064 	.word	0x01d70064
 c10d7e4:	01d70060 	.word	0x01d70060
 c10d7e8:	01d7005c 	.word	0x01d7005c
 c10d7ec:	01d70058 	.word	0x01d70058
 c10d7f0:	01d70054 	.word	0x01d70054
 c10d7f4:	01d70050 	.word	0x01d70050
 c10d7f8:	0c7fff24 	.word	0x0c7fff24

0c10d7fc <rtc_clear_alarm>:

void rtc_clear_alarm() {
 c10d7fc:	e1a0c00d 	mov	ip, sp
 c10d800:	e92dd800 	push	{fp, ip, lr, pc}
 c10d804:	e24cb004 	sub	fp, ip, #4
	ic_disable(INT_RTC);
 c10d808:	e3a00001 	mov	r0, #1
 c10d80c:	ebfff743 	bl	c10b520 <ic_disable>
	pISR_RTC = (unsigned) isr_ALARM_dummy;
 c10d810:	e59f301c 	ldr	r3, [pc, #28]	; c10d834 <rtc_clear_alarm+0x38>
 c10d814:	e59f201c 	ldr	r2, [pc, #28]	; c10d838 <rtc_clear_alarm+0x3c>
 c10d818:	e5832000 	str	r2, [r3]
    rRTCALM  = 0;
 c10d81c:	e59f3018 	ldr	r3, [pc, #24]	; c10d83c <rtc_clear_alarm+0x40>
 c10d820:	e3a02000 	mov	r2, #0
 c10d824:	e5c32000 	strb	r2, [r3]
}
 c10d828:	e24bd00c 	sub	sp, fp, #12
 c10d82c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10d830:	e12fff1e 	bx	lr
 c10d834:	0c7fff24 	.word	0x0c7fff24
 c10d838:	0c10cb28 	.word	0x0c10cb28
 c10d83c:	01d70050 	.word	0x01d70050

0c10d840 <rtc_open>:

// Sets ISR to RTC ticks (tick_count)
void rtc_open( void (*isr)(void), uint8 tick_count )
{
 c10d840:	e1a0c00d 	mov	ip, sp
 c10d844:	e92dd800 	push	{fp, ip, lr, pc}
 c10d848:	e24cb004 	sub	fp, ip, #4
 c10d84c:	e24dd008 	sub	sp, sp, #8
 c10d850:	e50b0010 	str	r0, [fp, #-16]
 c10d854:	e1a03001 	mov	r3, r1
 c10d858:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    pISR_TICK = (unsigned)isr;
 c10d85c:	e59f3044 	ldr	r3, [pc, #68]	; c10d8a8 <rtc_open+0x68>
 c10d860:	e51b2010 	ldr	r2, [fp, #-16]
 c10d864:	e5832000 	str	r2, [r3]

    ic_conf_line(INT_TICK, IRQ);
 c10d868:	e3a00014 	mov	r0, #20
 c10d86c:	e3a01000 	mov	r1, #0
 c10d870:	ebfff6e0 	bl	c10b3f8 <ic_conf_line>
    ic_cleanflag(INT_TICK);
 c10d874:	e3a00014 	mov	r0, #20
 c10d878:	ebfff741 	bl	c10b584 <ic_cleanflag>
    ic_enable(INT_TICK);
 c10d87c:	e3a00014 	mov	r0, #20
 c10d880:	ebfff70c 	bl	c10b4b8 <ic_enable>

    rTICINT = 1 << 7 | (tick_count & 0b1111111);
 c10d884:	e59f2020 	ldr	r2, [pc, #32]	; c10d8ac <rtc_open+0x6c>
 c10d888:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10d88c:	e1e03c83 	mvn	r3, r3, lsl #25
 c10d890:	e1e03ca3 	mvn	r3, r3, lsr #25
 c10d894:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d898:	e5c23000 	strb	r3, [r2]
}
 c10d89c:	e24bd00c 	sub	sp, fp, #12
 c10d8a0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10d8a4:	e12fff1e 	bx	lr
 c10d8a8:	0c7fff70 	.word	0x0c7fff70
 c10d8ac:	01d7008c 	.word	0x01d7008c

0c10d8b0 <rtc_close>:

// Removes RTC ISR
void rtc_close( void )
{
 c10d8b0:	e1a0c00d 	mov	ip, sp
 c10d8b4:	e92dd800 	push	{fp, ip, lr, pc}
 c10d8b8:	e24cb004 	sub	fp, ip, #4
    rTICINT = 0;
 c10d8bc:	e59f3024 	ldr	r3, [pc, #36]	; c10d8e8 <rtc_close+0x38>
 c10d8c0:	e3a02000 	mov	r2, #0
 c10d8c4:	e5c32000 	strb	r2, [r3]
    ic_disable(INT_TICK);
 c10d8c8:	e3a00014 	mov	r0, #20
 c10d8cc:	ebfff713 	bl	c10b520 <ic_disable>
    pISR_TICK = (unsigned)isr_TICK_dummy;
 c10d8d0:	e59f3014 	ldr	r3, [pc, #20]	; c10d8ec <rtc_close+0x3c>
 c10d8d4:	e59f2014 	ldr	r2, [pc, #20]	; c10d8f0 <rtc_close+0x40>
 c10d8d8:	e5832000 	str	r2, [r3]
}
 c10d8dc:	e24bd00c 	sub	sp, fp, #12
 c10d8e0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10d8e4:	e12fff1e 	bx	lr
 c10d8e8:	01d7008c 	.word	0x01d7008c
 c10d8ec:	0c7fff70 	.word	0x0c7fff70
 c10d8f0:	0c10cb00 	.word	0x0c10cb00

0c10d8f4 <tmr_set_prescaler>:
/*--- ficheros de cabecera ---*/
#include "44b.h"
#include "timer.h"

int tmr_set_prescaler(int p, int  value)
{
 c10d8f4:	e1a0c00d 	mov	ip, sp
 c10d8f8:	e92dd800 	push	{fp, ip, lr, pc}
 c10d8fc:	e24cb004 	sub	fp, ip, #4
 c10d900:	e24dd018 	sub	sp, sp, #24
 c10d904:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
 c10d908:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
	int offset = p*8;
 c10d90c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10d910:	e1a03183 	lsl	r3, r3, #3
 c10d914:	e50b3010 	str	r3, [fp, #-16]
	value &= 0xFF;
 c10d918:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c10d91c:	e20330ff 	and	r3, r3, #255	; 0xff
 c10d920:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc

	if (p < 0 || p > 3)
 c10d924:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10d928:	e3530000 	cmp	r3, #0
 c10d92c:	ba000002 	blt	c10d93c <tmr_set_prescaler+0x48>
 c10d930:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10d934:	e3530003 	cmp	r3, #3
 c10d938:	da000001 	ble	c10d944 <tmr_set_prescaler+0x50>
		return -1;
 c10d93c:	e3e03000 	mvn	r3, #0
 c10d940:	ea00001d 	b	c10d9bc <tmr_set_prescaler+0xc8>

	//COMPLETAR: escribir el valor value a partir de la posiciÃ³n offset en el
	//registro rTCFG0, para establecer el valor de pre-escalado del mÃ³dulo p

	int bitfield = value, mask = 0xff, reg = rTCFG0;
 c10d944:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
 c10d948:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c10d94c:	e3a030ff 	mov	r3, #255	; 0xff
 c10d950:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c10d954:	e59f3070 	ldr	r3, [pc, #112]	; c10d9cc <tmr_set_prescaler+0xd8>
 c10d958:	e5933000 	ldr	r3, [r3]
 c10d95c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
	bitfield <<= offset;
 c10d960:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c10d964:	e51b3010 	ldr	r3, [fp, #-16]
 c10d968:	e1a03312 	lsl	r3, r2, r3
 c10d96c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

	mask <<= offset;
 c10d970:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c10d974:	e51b3010 	ldr	r3, [fp, #-16]
 c10d978:	e1a03312 	lsl	r3, r2, r3
 c10d97c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	mask ^= ~0;
 c10d980:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10d984:	e1e03003 	mvn	r3, r3
 c10d988:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

	reg &= mask; // Ponemos a 0 todos los valores en la zona que va a ir el nuevo byte
 c10d98c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c10d990:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10d994:	e0023003 	and	r3, r2, r3
 c10d998:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
	reg |= bitfield; // Ponemos a 1 los bits que esten a 1 del nuevo byte
 c10d99c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c10d9a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10d9a4:	e1823003 	orr	r3, r2, r3
 c10d9a8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

	rTCFG0 = reg;
 c10d9ac:	e59f3018 	ldr	r3, [pc, #24]	; c10d9cc <tmr_set_prescaler+0xd8>
 c10d9b0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c10d9b4:	e5832000 	str	r2, [r3]

	return 0;
 c10d9b8:	e3a03000 	mov	r3, #0
}
 c10d9bc:	e1a00003 	mov	r0, r3
 c10d9c0:	e24bd00c 	sub	sp, fp, #12
 c10d9c4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10d9c8:	e12fff1e 	bx	lr
 c10d9cc:	01d50000 	.word	0x01d50000

0c10d9d0 <tmr_set_divider>:

int tmr_set_divider(int d, enum tmr_div div)
{
 c10d9d0:	e1a0c00d 	mov	ip, sp
 c10d9d4:	e92dd800 	push	{fp, ip, lr, pc}
 c10d9d8:	e24cb004 	sub	fp, ip, #4
 c10d9dc:	e24dd018 	sub	sp, sp, #24
 c10d9e0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
 c10d9e4:	e1a03001 	mov	r3, r1
 c10d9e8:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
	int pos = d*4;
 c10d9ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10d9f0:	e1a03103 	lsl	r3, r3, #2
 c10d9f4:	e50b3010 	str	r3, [fp, #-16]

	if ((d < 0 || d > 5) ||
 c10d9f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10d9fc:	e3530000 	cmp	r3, #0
 c10da00:	ba000014 	blt	c10da58 <tmr_set_divider+0x88>
 c10da04:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10da08:	e3530005 	cmp	r3, #5
 c10da0c:	ca000011 	bgt	c10da58 <tmr_set_divider+0x88>
 c10da10:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
 c10da14:	e3530004 	cmp	r3, #4
 c10da18:	1a000002 	bne	c10da28 <tmr_set_divider+0x58>
			(div == D1_32 && d > 3) ||
 c10da1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10da20:	e3530003 	cmp	r3, #3
 c10da24:	ca00000b 	bgt	c10da58 <tmr_set_divider+0x88>
 c10da28:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
 c10da2c:	e3530005 	cmp	r3, #5
 c10da30:	1a000002 	bne	c10da40 <tmr_set_divider+0x70>
			(div == EXTCLK && d != 5) ||
 c10da34:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10da38:	e3530005 	cmp	r3, #5
 c10da3c:	1a000005 	bne	c10da58 <tmr_set_divider+0x88>
 c10da40:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
 c10da44:	e3530006 	cmp	r3, #6
 c10da48:	1a000004 	bne	c10da60 <tmr_set_divider+0x90>
			(div == TCLK && d != 4))
 c10da4c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10da50:	e3530004 	cmp	r3, #4
 c10da54:	0a000001 	beq	c10da60 <tmr_set_divider+0x90>
		return -1;
 c10da58:	e3e03000 	mvn	r3, #0
 c10da5c:	ea000025 	b	c10daf8 <tmr_set_divider+0x128>

	if (div == EXTCLK || div == TCLK)
 c10da60:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
 c10da64:	e3530005 	cmp	r3, #5
 c10da68:	0a000002 	beq	c10da78 <tmr_set_divider+0xa8>
 c10da6c:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
 c10da70:	e3530006 	cmp	r3, #6
 c10da74:	1a000001 	bne	c10da80 <tmr_set_divider+0xb0>
		div = 4;
 c10da78:	e3a03004 	mov	r3, #4
 c10da7c:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf

	//COMPLETAR: escribir el valor div a partir de la posiciÃ³n pos en el
	//registro rTCFG1 para establecer el valor para el divisor d

	int bitfield = div, mask = 0xf, reg = rTCFG1;
 c10da80:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
 c10da84:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c10da88:	e3a0300f 	mov	r3, #15
 c10da8c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c10da90:	e59f3070 	ldr	r3, [pc, #112]	; c10db08 <tmr_set_divider+0x138>
 c10da94:	e5933000 	ldr	r3, [r3]
 c10da98:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
	bitfield <<= pos;
 c10da9c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c10daa0:	e51b3010 	ldr	r3, [fp, #-16]
 c10daa4:	e1a03312 	lsl	r3, r2, r3
 c10daa8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

	mask <<= pos;
 c10daac:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c10dab0:	e51b3010 	ldr	r3, [fp, #-16]
 c10dab4:	e1a03312 	lsl	r3, r2, r3
 c10dab8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	mask ^= ~0;
 c10dabc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10dac0:	e1e03003 	mvn	r3, r3
 c10dac4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

	reg &= mask; // Ponemos a 0 todos los valores en la zona que va a ir el nuevo nibble
 c10dac8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c10dacc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10dad0:	e0023003 	and	r3, r2, r3
 c10dad4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
	reg |= bitfield; // Ponemos a 1 los bits que esten a 1 del nuevo nibble
 c10dad8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c10dadc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10dae0:	e1823003 	orr	r3, r2, r3
 c10dae4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

	rTCFG1 = reg;
 c10dae8:	e59f3018 	ldr	r3, [pc, #24]	; c10db08 <tmr_set_divider+0x138>
 c10daec:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c10daf0:	e5832000 	str	r2, [r3]

	return 0;
 c10daf4:	e3a03000 	mov	r3, #0
}
 c10daf8:	e1a00003 	mov	r0, r3
 c10dafc:	e24bd00c 	sub	sp, fp, #12
 c10db00:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10db04:	e12fff1e 	bx	lr
 c10db08:	01d50004 	.word	0x01d50004

0c10db0c <tmr_set_count>:

int tmr_set_count(enum tmr_timer t, int count, int cmp)
{
 c10db0c:	e1a0c00d 	mov	ip, sp
 c10db10:	e92dd800 	push	{fp, ip, lr, pc}
 c10db14:	e24cb004 	sub	fp, ip, #4
 c10db18:	e24dd018 	sub	sp, sp, #24
 c10db1c:	e1a03000 	mov	r3, r0
 c10db20:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 c10db24:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
 c10db28:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	int err = 0;
 c10db2c:	e3a03000 	mov	r3, #0
 c10db30:	e50b3010 	str	r3, [fp, #-16]
	switch (t) {
 c10db34:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10db38:	e3530005 	cmp	r3, #5
 c10db3c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 c10db40:	ea00002c 	b	c10dbf8 <tmr_set_count+0xec>
 c10db44:	0c10db5c 	.word	0x0c10db5c
 c10db48:	0c10db78 	.word	0x0c10db78
 c10db4c:	0c10db94 	.word	0x0c10db94
 c10db50:	0c10dbb0 	.word	0x0c10dbb0
 c10db54:	0c10dbcc 	.word	0x0c10dbcc
 c10db58:	0c10dbe8 	.word	0x0c10dbe8
		case TIMER0:
			//COMPLETAR: establecer el valor de cuenta count y el valor de
			//comparaciÃ³n cmp en los registros de buffer del timer0 (rTCNTB0 y
			//rTCMPB0)
			rTCNTB0 = count;
 c10db5c:	e59f30b0 	ldr	r3, [pc, #176]	; c10dc14 <tmr_set_count+0x108>
 c10db60:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c10db64:	e5832000 	str	r2, [r3]
			rTCMPB0 = cmp;
 c10db68:	e59f30a8 	ldr	r3, [pc, #168]	; c10dc18 <tmr_set_count+0x10c>
 c10db6c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c10db70:	e5832000 	str	r2, [r3]
			break;
 c10db74:	ea000021 	b	c10dc00 <tmr_set_count+0xf4>
		case TIMER1:
			//COMPLETAR: establecer el valor de cuenta count y el valor de
			//comparaciÃ³n cmp en los registros de buffer del timer1 (rTCNTB1 y
			//rTCMPB1)
			rTCNTB1 = count;
 c10db78:	e59f309c 	ldr	r3, [pc, #156]	; c10dc1c <tmr_set_count+0x110>
 c10db7c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c10db80:	e5832000 	str	r2, [r3]
			rTCMPB1 = cmp;
 c10db84:	e59f3094 	ldr	r3, [pc, #148]	; c10dc20 <tmr_set_count+0x114>
 c10db88:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c10db8c:	e5832000 	str	r2, [r3]
			 break;
 c10db90:	ea00001a 	b	c10dc00 <tmr_set_count+0xf4>
		case TIMER2:
			//COMPLETAR: establecer el valor de cuenta count y el valor de
			//comparaciÃ³n cmp en los registros de buffer del timer2 (rTCNTB2 y
			//rTCMPB2)
			rTCNTB2 = count;
 c10db94:	e59f3088 	ldr	r3, [pc, #136]	; c10dc24 <tmr_set_count+0x118>
 c10db98:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c10db9c:	e5832000 	str	r2, [r3]
			rTCMPB2 = cmp;
 c10dba0:	e59f3080 	ldr	r3, [pc, #128]	; c10dc28 <tmr_set_count+0x11c>
 c10dba4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c10dba8:	e5832000 	str	r2, [r3]
			 break;
 c10dbac:	ea000013 	b	c10dc00 <tmr_set_count+0xf4>
		case TIMER3:
			//COMPLETAR: establecer el valor de cuenta count y el valor de
			//comparaciÃ³n cmp en los registros de buffer del timer3 (rTCNTB3 y
			//rTCMPB3)
			rTCNTB3 = count;
 c10dbb0:	e59f3074 	ldr	r3, [pc, #116]	; c10dc2c <tmr_set_count+0x120>
 c10dbb4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c10dbb8:	e5832000 	str	r2, [r3]
			rTCMPB3 = cmp;
 c10dbbc:	e59f306c 	ldr	r3, [pc, #108]	; c10dc30 <tmr_set_count+0x124>
 c10dbc0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c10dbc4:	e5832000 	str	r2, [r3]
			 break;
 c10dbc8:	ea00000c 	b	c10dc00 <tmr_set_count+0xf4>
		case TIMER4:
			//COMPLETAR: establecer el valor de cuenta count y el valor de
			//comparaciÃ³n cmp en los registros de buffer del timer4 (rTCNTB4 y
			//rTCMPB4)
			rTCNTB4 = count;
 c10dbcc:	e59f3060 	ldr	r3, [pc, #96]	; c10dc34 <tmr_set_count+0x128>
 c10dbd0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c10dbd4:	e5832000 	str	r2, [r3]
			rTCMPB4 = cmp;
 c10dbd8:	e59f3058 	ldr	r3, [pc, #88]	; c10dc38 <tmr_set_count+0x12c>
 c10dbdc:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c10dbe0:	e5832000 	str	r2, [r3]
			 break;
 c10dbe4:	ea000005 	b	c10dc00 <tmr_set_count+0xf4>
		case TIMER5:
			//COMPLETAR: establecer el valor de cuenta count en el registro de 
			//buffer del timer5 (rTCNTB5)
			rTCNTB5 = count;
 c10dbe8:	e59f304c 	ldr	r3, [pc, #76]	; c10dc3c <tmr_set_count+0x130>
 c10dbec:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
 c10dbf0:	e5832000 	str	r2, [r3]
			 break;
 c10dbf4:	ea000001 	b	c10dc00 <tmr_set_count+0xf4>
		default:
			err = -1;
 c10dbf8:	e3e03000 	mvn	r3, #0
 c10dbfc:	e50b3010 	str	r3, [fp, #-16]
	}

	return err;
 c10dc00:	e51b3010 	ldr	r3, [fp, #-16]
}
 c10dc04:	e1a00003 	mov	r0, r3
 c10dc08:	e24bd00c 	sub	sp, fp, #12
 c10dc0c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10dc10:	e12fff1e 	bx	lr
 c10dc14:	01d5000c 	.word	0x01d5000c
 c10dc18:	01d50010 	.word	0x01d50010
 c10dc1c:	01d50018 	.word	0x01d50018
 c10dc20:	01d5001c 	.word	0x01d5001c
 c10dc24:	01d50024 	.word	0x01d50024
 c10dc28:	01d50028 	.word	0x01d50028
 c10dc2c:	01d50030 	.word	0x01d50030
 c10dc30:	01d50034 	.word	0x01d50034
 c10dc34:	01d5003c 	.word	0x01d5003c
 c10dc38:	01d50040 	.word	0x01d50040
 c10dc3c:	01d50048 	.word	0x01d50048

0c10dc40 <tmr_update>:

int tmr_update(enum tmr_timer t)
{
 c10dc40:	e1a0c00d 	mov	ip, sp
 c10dc44:	e92dd800 	push	{fp, ip, lr, pc}
 c10dc48:	e24cb004 	sub	fp, ip, #4
 c10dc4c:	e24dd010 	sub	sp, sp, #16
 c10dc50:	e1a03000 	mov	r3, r0
 c10dc54:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	int pos = t*4;
 c10dc58:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10dc5c:	e1a03103 	lsl	r3, r3, #2
 c10dc60:	e50b3010 	str	r3, [fp, #-16]
	if (t > 0)
 c10dc64:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10dc68:	e3530000 	cmp	r3, #0
 c10dc6c:	0a000002 	beq	c10dc7c <tmr_update+0x3c>
		pos += 4;
 c10dc70:	e51b3010 	ldr	r3, [fp, #-16]
 c10dc74:	e2833004 	add	r3, r3, #4
 c10dc78:	e50b3010 	str	r3, [fp, #-16]

	if (t < 0 || t > 5)
 c10dc7c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10dc80:	e3530005 	cmp	r3, #5
 c10dc84:	9a000001 	bls	c10dc90 <tmr_update+0x50>
		return -1;
 c10dc88:	e3e03000 	mvn	r3, #0
 c10dc8c:	ea000014 	b	c10dce4 <tmr_update+0xa4>

	pos++;
 c10dc90:	e51b3010 	ldr	r3, [fp, #-16]
 c10dc94:	e2833001 	add	r3, r3, #1
 c10dc98:	e50b3010 	str	r3, [fp, #-16]

	//COMPLETAR: poner a 1 en el registro rTCON el bit indicado por pos 
	// y justo despuÃ©s ponerlo a 0 (deben ser stores distintos, lo hacemos con
	// sentencias C distintas)
	rTCON |= 1 << pos;
 c10dc9c:	e59f3050 	ldr	r3, [pc, #80]	; c10dcf4 <tmr_update+0xb4>
 c10dca0:	e59f204c 	ldr	r2, [pc, #76]	; c10dcf4 <tmr_update+0xb4>
 c10dca4:	e5921000 	ldr	r1, [r2]
 c10dca8:	e3a00001 	mov	r0, #1
 c10dcac:	e51b2010 	ldr	r2, [fp, #-16]
 c10dcb0:	e1a02210 	lsl	r2, r0, r2
 c10dcb4:	e1812002 	orr	r2, r1, r2
 c10dcb8:	e5832000 	str	r2, [r3]
	rTCON &= ~(1 << pos);
 c10dcbc:	e59f3030 	ldr	r3, [pc, #48]	; c10dcf4 <tmr_update+0xb4>
 c10dcc0:	e59f202c 	ldr	r2, [pc, #44]	; c10dcf4 <tmr_update+0xb4>
 c10dcc4:	e5921000 	ldr	r1, [r2]
 c10dcc8:	e3a00001 	mov	r0, #1
 c10dccc:	e51b2010 	ldr	r2, [fp, #-16]
 c10dcd0:	e1a02210 	lsl	r2, r0, r2
 c10dcd4:	e1e02002 	mvn	r2, r2
 c10dcd8:	e0012002 	and	r2, r1, r2
 c10dcdc:	e5832000 	str	r2, [r3]

	return 0;
 c10dce0:	e3a03000 	mov	r3, #0
}
 c10dce4:	e1a00003 	mov	r0, r3
 c10dce8:	e24bd00c 	sub	sp, fp, #12
 c10dcec:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10dcf0:	e12fff1e 	bx	lr
 c10dcf4:	01d50008 	.word	0x01d50008

0c10dcf8 <tmr_set_mode>:

int tmr_set_mode(enum tmr_timer t, enum tmr_mode mode)
{
 c10dcf8:	e1a0c00d 	mov	ip, sp
 c10dcfc:	e92dd800 	push	{fp, ip, lr, pc}
 c10dd00:	e24cb004 	sub	fp, ip, #4
 c10dd04:	e24dd010 	sub	sp, sp, #16
 c10dd08:	e1a02000 	mov	r2, r0
 c10dd0c:	e1a03001 	mov	r3, r1
 c10dd10:	e54b2015 	strb	r2, [fp, #-21]	; 0xffffffeb
 c10dd14:	e54b3016 	strb	r3, [fp, #-22]	; 0xffffffea
	int err = 0;
 c10dd18:	e3a03000 	mov	r3, #0
 c10dd1c:	e50b3010 	str	r3, [fp, #-16]
	int pos = t*4;
 c10dd20:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10dd24:	e1a03103 	lsl	r3, r3, #2
 c10dd28:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	if (t > 0)
 c10dd2c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10dd30:	e3530000 	cmp	r3, #0
 c10dd34:	0a000002 	beq	c10dd44 <tmr_set_mode+0x4c>
		pos += 4;
 c10dd38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10dd3c:	e2833004 	add	r3, r3, #4
 c10dd40:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

	if (t < 0 || t > 5)
 c10dd44:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10dd48:	e3530005 	cmp	r3, #5
 c10dd4c:	9a000001 	bls	c10dd58 <tmr_set_mode+0x60>
		return -1;
 c10dd50:	e3e03000 	mvn	r3, #0
 c10dd54:	ea000025 	b	c10ddf0 <tmr_set_mode+0xf8>

	if(t == 5)
 c10dd58:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10dd5c:	e3530005 	cmp	r3, #5
 c10dd60:	1a000003 	bne	c10dd74 <tmr_set_mode+0x7c>
		pos += 2;
 c10dd64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10dd68:	e2833002 	add	r3, r3, #2
 c10dd6c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c10dd70:	ea000002 	b	c10dd80 <tmr_set_mode+0x88>
	else
		pos += 3;
 c10dd74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10dd78:	e2833003 	add	r3, r3, #3
 c10dd7c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

	if (mode == ONE_SHOT)
 c10dd80:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
 c10dd84:	e3530000 	cmp	r3, #0
 c10dd88:	1a000009 	bne	c10ddb4 <tmr_set_mode+0xbc>
		//COMPLETAR: poner a 0 el bit autoreload a partir de la posiciÃ³n pos (es
		//el cuarto bit a partir de esa posiciÃ³n)
		rTCON &= ~(1 << pos);
 c10dd8c:	e59f306c 	ldr	r3, [pc, #108]	; c10de00 <tmr_set_mode+0x108>
 c10dd90:	e59f2068 	ldr	r2, [pc, #104]	; c10de00 <tmr_set_mode+0x108>
 c10dd94:	e5921000 	ldr	r1, [r2]
 c10dd98:	e3a00001 	mov	r0, #1
 c10dd9c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c10dda0:	e1a02210 	lsl	r2, r0, r2
 c10dda4:	e1e02002 	mvn	r2, r2
 c10dda8:	e0012002 	and	r2, r1, r2
 c10ddac:	e5832000 	str	r2, [r3]
 c10ddb0:	ea00000d 	b	c10ddec <tmr_set_mode+0xf4>
	else if (mode == RELOAD)
 c10ddb4:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
 c10ddb8:	e3530001 	cmp	r3, #1
 c10ddbc:	1a000008 	bne	c10dde4 <tmr_set_mode+0xec>
		//COMPLETAR: poner a 1 el bit autoreload a partir de la posiciÃ³n pos (es
		//el cuarto bit a partir de esa posiciÃ³n)
		rTCON |= 1 << pos;
 c10ddc0:	e59f3038 	ldr	r3, [pc, #56]	; c10de00 <tmr_set_mode+0x108>
 c10ddc4:	e59f2034 	ldr	r2, [pc, #52]	; c10de00 <tmr_set_mode+0x108>
 c10ddc8:	e5921000 	ldr	r1, [r2]
 c10ddcc:	e3a00001 	mov	r0, #1
 c10ddd0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c10ddd4:	e1a02210 	lsl	r2, r0, r2
 c10ddd8:	e1812002 	orr	r2, r1, r2
 c10dddc:	e5832000 	str	r2, [r3]
 c10dde0:	ea000001 	b	c10ddec <tmr_set_mode+0xf4>
	else
		err = -1;
 c10dde4:	e3e03000 	mvn	r3, #0
 c10dde8:	e50b3010 	str	r3, [fp, #-16]

	return err;
 c10ddec:	e51b3010 	ldr	r3, [fp, #-16]
}
 c10ddf0:	e1a00003 	mov	r0, r3
 c10ddf4:	e24bd00c 	sub	sp, fp, #12
 c10ddf8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10ddfc:	e12fff1e 	bx	lr
 c10de00:	01d50008 	.word	0x01d50008

0c10de04 <tmr_start>:

int tmr_start(enum tmr_timer t)
{
 c10de04:	e1a0c00d 	mov	ip, sp
 c10de08:	e92dd800 	push	{fp, ip, lr, pc}
 c10de0c:	e24cb004 	sub	fp, ip, #4
 c10de10:	e24dd010 	sub	sp, sp, #16
 c10de14:	e1a03000 	mov	r3, r0
 c10de18:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	int pos = t*4;
 c10de1c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10de20:	e1a03103 	lsl	r3, r3, #2
 c10de24:	e50b3010 	str	r3, [fp, #-16]
	if (t > 0)
 c10de28:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10de2c:	e3530000 	cmp	r3, #0
 c10de30:	0a000002 	beq	c10de40 <tmr_start+0x3c>
		pos += 4;
 c10de34:	e51b3010 	ldr	r3, [fp, #-16]
 c10de38:	e2833004 	add	r3, r3, #4
 c10de3c:	e50b3010 	str	r3, [fp, #-16]

	if (t < 0 || t > 5)
 c10de40:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10de44:	e3530005 	cmp	r3, #5
 c10de48:	9a000001 	bls	c10de54 <tmr_start+0x50>
		return -1;
 c10de4c:	e3e03000 	mvn	r3, #0
 c10de50:	ea000008 	b	c10de78 <tmr_start+0x74>

	//COMPLETAR: poner a 1 el bit de start a partir de la posiciÃ³n pos en el
	//registro rTCON (es el primer bit del grupo)
	rTCON |= 1 << pos;
 c10de54:	e59f302c 	ldr	r3, [pc, #44]	; c10de88 <tmr_start+0x84>
 c10de58:	e59f2028 	ldr	r2, [pc, #40]	; c10de88 <tmr_start+0x84>
 c10de5c:	e5921000 	ldr	r1, [r2]
 c10de60:	e3a00001 	mov	r0, #1
 c10de64:	e51b2010 	ldr	r2, [fp, #-16]
 c10de68:	e1a02210 	lsl	r2, r0, r2
 c10de6c:	e1812002 	orr	r2, r1, r2
 c10de70:	e5832000 	str	r2, [r3]
	return 0;
 c10de74:	e3a03000 	mov	r3, #0
}
 c10de78:	e1a00003 	mov	r0, r3
 c10de7c:	e24bd00c 	sub	sp, fp, #12
 c10de80:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10de84:	e12fff1e 	bx	lr
 c10de88:	01d50008 	.word	0x01d50008

0c10de8c <tmr_stop>:

int tmr_stop(enum tmr_timer t)
{
 c10de8c:	e1a0c00d 	mov	ip, sp
 c10de90:	e92dd800 	push	{fp, ip, lr, pc}
 c10de94:	e24cb004 	sub	fp, ip, #4
 c10de98:	e24dd010 	sub	sp, sp, #16
 c10de9c:	e1a03000 	mov	r3, r0
 c10dea0:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	int pos = t*4;
 c10dea4:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10dea8:	e1a03103 	lsl	r3, r3, #2
 c10deac:	e50b3010 	str	r3, [fp, #-16]
	if (t > 0)
 c10deb0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10deb4:	e3530000 	cmp	r3, #0
 c10deb8:	0a000002 	beq	c10dec8 <tmr_stop+0x3c>
		pos += 4;
 c10debc:	e51b3010 	ldr	r3, [fp, #-16]
 c10dec0:	e2833004 	add	r3, r3, #4
 c10dec4:	e50b3010 	str	r3, [fp, #-16]

	if (t < 0 || t > 5)
 c10dec8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10decc:	e3530005 	cmp	r3, #5
 c10ded0:	9a000001 	bls	c10dedc <tmr_stop+0x50>
		return -1;
 c10ded4:	e3e03000 	mvn	r3, #0
 c10ded8:	ea000009 	b	c10df04 <tmr_stop+0x78>

	//COMPLETAR: poner a 0 el bit de start a partir de la posiciÃ³n pos en el
	//registro rTCON (es el primer bit del grupo)
	rTCON &= ~(1 << pos);
 c10dedc:	e59f3030 	ldr	r3, [pc, #48]	; c10df14 <tmr_stop+0x88>
 c10dee0:	e59f202c 	ldr	r2, [pc, #44]	; c10df14 <tmr_stop+0x88>
 c10dee4:	e5921000 	ldr	r1, [r2]
 c10dee8:	e3a00001 	mov	r0, #1
 c10deec:	e51b2010 	ldr	r2, [fp, #-16]
 c10def0:	e1a02210 	lsl	r2, r0, r2
 c10def4:	e1e02002 	mvn	r2, r2
 c10def8:	e0012002 	and	r2, r1, r2
 c10defc:	e5832000 	str	r2, [r3]

	return 0;
 c10df00:	e3a03000 	mov	r3, #0
}
 c10df04:	e1a00003 	mov	r0, r3
 c10df08:	e24bd00c 	sub	sp, fp, #12
 c10df0c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10df10:	e12fff1e 	bx	lr
 c10df14:	01d50008 	.word	0x01d50008

0c10df18 <tmr_isrunning>:

int tmr_isrunning(enum tmr_timer t)
{
 c10df18:	e1a0c00d 	mov	ip, sp
 c10df1c:	e92dd800 	push	{fp, ip, lr, pc}
 c10df20:	e24cb004 	sub	fp, ip, #4
 c10df24:	e24dd010 	sub	sp, sp, #16
 c10df28:	e1a03000 	mov	r3, r0
 c10df2c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	int ret = 0;
 c10df30:	e3a03000 	mov	r3, #0
 c10df34:	e50b3010 	str	r3, [fp, #-16]
	int pos = t*4;
 c10df38:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10df3c:	e1a03103 	lsl	r3, r3, #2
 c10df40:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	if (t > 0)
 c10df44:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10df48:	e3530000 	cmp	r3, #0
 c10df4c:	0a000002 	beq	c10df5c <tmr_isrunning+0x44>
		pos += 4;
 c10df50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10df54:	e2833004 	add	r3, r3, #4
 c10df58:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

	if ((t >= 0) && (t <= 5) 
 c10df5c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10df60:	e3530005 	cmp	r3, #5
 c10df64:	8a000009 	bhi	c10df90 <tmr_isrunning+0x78>
			&& (rTCON & (0x1 << pos)))
 c10df68:	e59f3034 	ldr	r3, [pc, #52]	; c10dfa4 <tmr_isrunning+0x8c>
 c10df6c:	e5932000 	ldr	r2, [r3]
 c10df70:	e3a01001 	mov	r1, #1
 c10df74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10df78:	e1a03311 	lsl	r3, r1, r3
 c10df7c:	e0023003 	and	r3, r2, r3
 c10df80:	e3530000 	cmp	r3, #0
 c10df84:	0a000001 	beq	c10df90 <tmr_isrunning+0x78>
		ret = 1;
 c10df88:	e3a03001 	mov	r3, #1
 c10df8c:	e50b3010 	str	r3, [fp, #-16]

	return ret;
 c10df90:	e51b3010 	ldr	r3, [fp, #-16]
}
 c10df94:	e1a00003 	mov	r0, r3
 c10df98:	e24bd00c 	sub	sp, fp, #12
 c10df9c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10dfa0:	e12fff1e 	bx	lr
 c10dfa4:	01d50008 	.word	0x01d50008

0c10dfa8 <uart0_init>:
#include "uart.h"
#include "44b.h"

void uart0_init( void )
{
 c10dfa8:	e1a0c00d 	mov	ip, sp
 c10dfac:	e92dd800 	push	{fp, ip, lr, pc}
 c10dfb0:	e24cb004 	sub	fp, ip, #4
	//*Enable FIFO, Rx normal, Tx normal
	//UFCON0[0] = 1
	//UFCON0[1] = 0  Rx FIFO normal (no reset)
	//UFCON0[2] = 0  Rx FIFO normal (no reset)
    rUFCON0 = 0x1;
 c10dfb4:	e59f3040 	ldr	r3, [pc, #64]	; c10dffc <uart0_init+0x54>
 c10dfb8:	e3a02001 	mov	r2, #1
 c10dfbc:	e5832000 	str	r2, [r3]

    //Disable Auto Flow Control and disable Request to Send
    //UMCON0[4] = 0
    rUMCON0 = 0x0;
 c10dfc0:	e59f3038 	ldr	r3, [pc, #56]	; c10e000 <uart0_init+0x58>
 c10dfc4:	e3a02000 	mov	r2, #0
 c10dfc8:	e5832000 	str	r2, [r3]
    //* Formato de la trama:
    //ULCON0[6]   = 0  normal (no infrarrojos)
    //ULCON0[5:3] = 0  sin paridad
    //ULCON0[2]   = 0  1 bit de stop
    //ULCON0[1:0] = 3  8 bits de datos
    rULCON0 = 0x3;
 c10dfcc:	e3a0361d 	mov	r3, #30408704	; 0x1d00000
 c10dfd0:	e3a02003 	mov	r2, #3
 c10dfd4:	e5832000 	str	r2, [r3]

    //* 115200 Baudios
    //UBRDIV0 = 34  64MHz / (115200 Ã 16) â 1
    rUBRDIV0 = 34;
 c10dfd8:	e59f3024 	ldr	r3, [pc, #36]	; c10e004 <uart0_init+0x5c>
 c10dfdc:	e3a02022 	mov	r2, #34	; 0x22
 c10dfe0:	e5832000 	str	r2, [r3]

    //UCON0[1:0] = 1  Rx: polling/interrupt mode
    //UCON0[3:2] = 1  Tx: polling/interrupt mode
    //UCON0[4]   = 0  no break
    //UCON0[5]   = 0  no loopback
    rUCON0 = 0x5;
 c10dfe4:	e59f301c 	ldr	r3, [pc, #28]	; c10e008 <uart0_init+0x60>
 c10dfe8:	e3a02005 	mov	r2, #5
 c10dfec:	e5832000 	str	r2, [r3]
}
 c10dff0:	e24bd00c 	sub	sp, fp, #12
 c10dff4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10dff8:	e12fff1e 	bx	lr
 c10dffc:	01d00008 	.word	0x01d00008
 c10e000:	01d0000c 	.word	0x01d0000c
 c10e004:	01d00028 	.word	0x01d00028
 c10e008:	01d00004 	.word	0x01d00004

0c10e00c <uart0_putchar>:

void uart0_putchar( char ch )
{
 c10e00c:	e1a0c00d 	mov	ip, sp
 c10e010:	e92dd800 	push	{fp, ip, lr, pc}
 c10e014:	e24cb004 	sub	fp, ip, #4
 c10e018:	e24dd008 	sub	sp, sp, #8
 c10e01c:	e1a03000 	mov	r3, r0
 c10e020:	e54b300d 	strb	r3, [fp, #-13]
	//While FIFO is full wait (while UFSTAT0[9] == 1)
    while( rUFSTAT0 & (1 << 9) );
 c10e024:	e1a00000 	nop			; (mov r0, r0)
 c10e028:	e59f3024 	ldr	r3, [pc, #36]	; c10e054 <uart0_putchar+0x48>
 c10e02c:	e5933000 	ldr	r3, [r3]
 c10e030:	e2033c02 	and	r3, r3, #512	; 0x200
 c10e034:	e3530000 	cmp	r3, #0
 c10e038:	1afffffa 	bne	c10e028 <uart0_putchar+0x1c>
    rUTXH0 = ch;
 c10e03c:	e59f3014 	ldr	r3, [pc, #20]	; c10e058 <uart0_putchar+0x4c>
 c10e040:	e55b200d 	ldrb	r2, [fp, #-13]
 c10e044:	e5c32000 	strb	r2, [r3]
}
 c10e048:	e24bd00c 	sub	sp, fp, #12
 c10e04c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10e050:	e12fff1e 	bx	lr
 c10e054:	01d00018 	.word	0x01d00018
 c10e058:	01d00020 	.word	0x01d00020

0c10e05c <uart0_getchar>:

char uart0_getchar( void )
{
 c10e05c:	e1a0c00d 	mov	ip, sp
 c10e060:	e92dd800 	push	{fp, ip, lr, pc}
 c10e064:	e24cb004 	sub	fp, ip, #4
	//While FIFO is empty wait (while UFSTAT0[3:0] == 0)
    while( (rUFSTAT0 & 0b1111) == 0 );
 c10e068:	e1a00000 	nop			; (mov r0, r0)
 c10e06c:	e59f3028 	ldr	r3, [pc, #40]	; c10e09c <uart0_getchar+0x40>
 c10e070:	e5933000 	ldr	r3, [r3]
 c10e074:	e203300f 	and	r3, r3, #15
 c10e078:	e3530000 	cmp	r3, #0
 c10e07c:	0afffffa 	beq	c10e06c <uart0_getchar+0x10>

    //Read URXH0
    return rURXH0;
 c10e080:	e59f3018 	ldr	r3, [pc, #24]	; c10e0a0 <uart0_getchar+0x44>
 c10e084:	e5d33000 	ldrb	r3, [r3]
 c10e088:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c10e08c:	e1a00003 	mov	r0, r3
 c10e090:	e24bd00c 	sub	sp, fp, #12
 c10e094:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10e098:	e12fff1e 	bx	lr
 c10e09c:	01d00018 	.word	0x01d00018
 c10e0a0:	01d00024 	.word	0x01d00024

0c10e0a4 <uart0_puts>:

void uart0_puts( char *s )
{
 c10e0a4:	e1a0c00d 	mov	ip, sp
 c10e0a8:	e92dd800 	push	{fp, ip, lr, pc}
 c10e0ac:	e24cb004 	sub	fp, ip, #4
 c10e0b0:	e24dd008 	sub	sp, sp, #8
 c10e0b4:	e50b0010 	str	r0, [fp, #-16]
    while(*s) {
 c10e0b8:	ea000006 	b	c10e0d8 <uart0_puts+0x34>
    	uart0_putchar(*s);
 c10e0bc:	e51b3010 	ldr	r3, [fp, #-16]
 c10e0c0:	e5d33000 	ldrb	r3, [r3]
 c10e0c4:	e1a00003 	mov	r0, r3
 c10e0c8:	ebffffcf 	bl	c10e00c <uart0_putchar>
    	s++;
 c10e0cc:	e51b3010 	ldr	r3, [fp, #-16]
 c10e0d0:	e2833001 	add	r3, r3, #1
 c10e0d4:	e50b3010 	str	r3, [fp, #-16]
    return rURXH0;
}

void uart0_puts( char *s )
{
    while(*s) {
 c10e0d8:	e51b3010 	ldr	r3, [fp, #-16]
 c10e0dc:	e5d33000 	ldrb	r3, [r3]
 c10e0e0:	e3530000 	cmp	r3, #0
 c10e0e4:	1afffff4 	bne	c10e0bc <uart0_puts+0x18>
    	uart0_putchar(*s);
    	s++;
    }
}
 c10e0e8:	e24bd00c 	sub	sp, fp, #12
 c10e0ec:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10e0f0:	e12fff1e 	bx	lr

0c10e0f4 <uart0_putint>:

void uart0_putint( int32 i )
{
 c10e0f4:	e1a0c00d 	mov	ip, sp
 c10e0f8:	e92dd800 	push	{fp, ip, lr, pc}
 c10e0fc:	e24cb004 	sub	fp, ip, #4
 c10e100:	e24dd020 	sub	sp, sp, #32
 c10e104:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
	char s[11 + 1];
	int negative = i < 0;
 c10e108:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c10e10c:	e1a03fa3 	lsr	r3, r3, #31
 c10e110:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	char* p = s + 11;
 c10e114:	e24b3020 	sub	r3, fp, #32
 c10e118:	e283300b 	add	r3, r3, #11
 c10e11c:	e50b3010 	str	r3, [fp, #-16]

	*p = '\0';
 c10e120:	e51b3010 	ldr	r3, [fp, #-16]
 c10e124:	e3a02000 	mov	r2, #0
 c10e128:	e5c32000 	strb	r2, [r3]
	if (negative)
 c10e12c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10e130:	e3530000 	cmp	r3, #0
 c10e134:	0a000002 	beq	c10e144 <uart0_putint+0x50>
		i *= -1;
 c10e138:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c10e13c:	e2633000 	rsb	r3, r3, #0
 c10e140:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

	do {
		*--p = '0' + ( i % 10 );
 c10e144:	e51b3010 	ldr	r3, [fp, #-16]
 c10e148:	e2433001 	sub	r3, r3, #1
 c10e14c:	e50b3010 	str	r3, [fp, #-16]
 c10e150:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
 c10e154:	e59f3094 	ldr	r3, [pc, #148]	; c10e1f0 <uart0_putint+0xfc>
 c10e158:	e0c32391 	smull	r2, r3, r1, r3
 c10e15c:	e1a02143 	asr	r2, r3, #2
 c10e160:	e1a03fc1 	asr	r3, r1, #31
 c10e164:	e0632002 	rsb	r2, r3, r2
 c10e168:	e1a03002 	mov	r3, r2
 c10e16c:	e1a03103 	lsl	r3, r3, #2
 c10e170:	e0833002 	add	r3, r3, r2
 c10e174:	e1a03083 	lsl	r3, r3, #1
 c10e178:	e0632001 	rsb	r2, r3, r1
 c10e17c:	e20230ff 	and	r3, r2, #255	; 0xff
 c10e180:	e2833030 	add	r3, r3, #48	; 0x30
 c10e184:	e20320ff 	and	r2, r3, #255	; 0xff
 c10e188:	e51b3010 	ldr	r3, [fp, #-16]
 c10e18c:	e5c32000 	strb	r2, [r3]
		i /= 10;
 c10e190:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c10e194:	e59f2054 	ldr	r2, [pc, #84]	; c10e1f0 <uart0_putint+0xfc>
 c10e198:	e0c21293 	smull	r1, r2, r3, r2
 c10e19c:	e1a02142 	asr	r2, r2, #2
 c10e1a0:	e1a03fc3 	asr	r3, r3, #31
 c10e1a4:	e0633002 	rsb	r3, r3, r2
 c10e1a8:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
	} while(i > 0);
 c10e1ac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
 c10e1b0:	e3530000 	cmp	r3, #0
 c10e1b4:	caffffe2 	bgt	c10e144 <uart0_putint+0x50>

	if(negative) {
 c10e1b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10e1bc:	e3530000 	cmp	r3, #0
 c10e1c0:	0a000005 	beq	c10e1dc <uart0_putint+0xe8>
		*--p = '-';
 c10e1c4:	e51b3010 	ldr	r3, [fp, #-16]
 c10e1c8:	e2433001 	sub	r3, r3, #1
 c10e1cc:	e50b3010 	str	r3, [fp, #-16]
 c10e1d0:	e51b3010 	ldr	r3, [fp, #-16]
 c10e1d4:	e3a0202d 	mov	r2, #45	; 0x2d
 c10e1d8:	e5c32000 	strb	r2, [r3]
	}

	uart0_puts(p);
 c10e1dc:	e51b0010 	ldr	r0, [fp, #-16]
 c10e1e0:	ebffffaf 	bl	c10e0a4 <uart0_puts>
}
 c10e1e4:	e24bd00c 	sub	sp, fp, #12
 c10e1e8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10e1ec:	e12fff1e 	bx	lr
 c10e1f0:	66666667 	.word	0x66666667

0c10e1f4 <uart0_puthex>:

void uart0_puthex( uint32 i )
{
 c10e1f4:	e1a0c00d 	mov	ip, sp
 c10e1f8:	e92dd800 	push	{fp, ip, lr, pc}
 c10e1fc:	e24cb004 	sub	fp, ip, #4
 c10e200:	e24dd018 	sub	sp, sp, #24
 c10e204:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    char buf[8 + 1];
    char *p = buf + 8;
 c10e208:	e24b301c 	sub	r3, fp, #28
 c10e20c:	e2833008 	add	r3, r3, #8
 c10e210:	e50b3010 	str	r3, [fp, #-16]
    uint8 c;

    *p = '\0';
 c10e214:	e51b3010 	ldr	r3, [fp, #-16]
 c10e218:	e3a02000 	mov	r2, #0
 c10e21c:	e5c32000 	strb	r2, [r3]

    do {
        c = i & 0xf;
 c10e220:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10e224:	e20330ff 	and	r3, r3, #255	; 0xff
 c10e228:	e203300f 	and	r3, r3, #15
 c10e22c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        if( c < 10 )
 c10e230:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10e234:	e3530009 	cmp	r3, #9
 c10e238:	8a000008 	bhi	c10e260 <uart0_puthex+0x6c>
            *--p = '0' + c;
 c10e23c:	e51b3010 	ldr	r3, [fp, #-16]
 c10e240:	e2433001 	sub	r3, r3, #1
 c10e244:	e50b3010 	str	r3, [fp, #-16]
 c10e248:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10e24c:	e2833030 	add	r3, r3, #48	; 0x30
 c10e250:	e20320ff 	and	r2, r3, #255	; 0xff
 c10e254:	e51b3010 	ldr	r3, [fp, #-16]
 c10e258:	e5c32000 	strb	r2, [r3]
 c10e25c:	ea000007 	b	c10e280 <uart0_puthex+0x8c>
        else
            *--p = 'a' + c - 10;
 c10e260:	e51b3010 	ldr	r3, [fp, #-16]
 c10e264:	e2433001 	sub	r3, r3, #1
 c10e268:	e50b3010 	str	r3, [fp, #-16]
 c10e26c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10e270:	e2833057 	add	r3, r3, #87	; 0x57
 c10e274:	e20320ff 	and	r2, r3, #255	; 0xff
 c10e278:	e51b3010 	ldr	r3, [fp, #-16]
 c10e27c:	e5c32000 	strb	r2, [r3]
        i = i >> 4;
 c10e280:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10e284:	e1a03223 	lsr	r3, r3, #4
 c10e288:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    } while( i );
 c10e28c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c10e290:	e3530000 	cmp	r3, #0
 c10e294:	1affffe1 	bne	c10e220 <uart0_puthex+0x2c>

    uart0_puts( p );
 c10e298:	e51b0010 	ldr	r0, [fp, #-16]
 c10e29c:	ebffff80 	bl	c10e0a4 <uart0_puts>
}
 c10e2a0:	e24bd00c 	sub	sp, fp, #12
 c10e2a4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10e2a8:	e12fff1e 	bx	lr

0c10e2ac <uart0_gets>:

void uart0_gets( char *s )
{
 c10e2ac:	e1a0c00d 	mov	ip, sp
 c10e2b0:	e92dd800 	push	{fp, ip, lr, pc}
 c10e2b4:	e24cb004 	sub	fp, ip, #4
 c10e2b8:	e24dd010 	sub	sp, sp, #16
 c10e2bc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
	char c = uart0_getchar();
 c10e2c0:	ebffff65 	bl	c10e05c <uart0_getchar>
 c10e2c4:	e1a03000 	mov	r3, r0
 c10e2c8:	e54b300d 	strb	r3, [fp, #-13]

	while(c != '\n') {
 c10e2cc:	ea000008 	b	c10e2f4 <uart0_gets+0x48>
		*s = c;
 c10e2d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10e2d4:	e55b200d 	ldrb	r2, [fp, #-13]
 c10e2d8:	e5c32000 	strb	r2, [r3]
		s++;
 c10e2dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10e2e0:	e2833001 	add	r3, r3, #1
 c10e2e4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
		c = uart0_getchar();
 c10e2e8:	ebffff5b 	bl	c10e05c <uart0_getchar>
 c10e2ec:	e1a03000 	mov	r3, r0
 c10e2f0:	e54b300d 	strb	r3, [fp, #-13]

void uart0_gets( char *s )
{
	char c = uart0_getchar();

	while(c != '\n') {
 c10e2f4:	e55b300d 	ldrb	r3, [fp, #-13]
 c10e2f8:	e353000a 	cmp	r3, #10
 c10e2fc:	1afffff3 	bne	c10e2d0 <uart0_gets+0x24>
		*s = c;
		s++;
		c = uart0_getchar();
	}

	*s = '\0';
 c10e300:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10e304:	e3a02000 	mov	r2, #0
 c10e308:	e5c32000 	strb	r2, [r3]
}
 c10e30c:	e24bd00c 	sub	sp, fp, #12
 c10e310:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10e314:	e12fff1e 	bx	lr

0c10e318 <uart0_getint>:

int32 uart0_getint( void )
{
 c10e318:	e1a0c00d 	mov	ip, sp
 c10e31c:	e92dd800 	push	{fp, ip, lr, pc}
 c10e320:	e24cb004 	sub	fp, ip, #4
 c10e324:	e24dd018 	sub	sp, sp, #24
	char s[11 + 1];
	char* p = s;
 c10e328:	e24b3020 	sub	r3, fp, #32
 c10e32c:	e50b3010 	str	r3, [fp, #-16]
	int32 res = 0;
 c10e330:	e3a03000 	mov	r3, #0
 c10e334:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

	uart0_gets(s);
 c10e338:	e24b3020 	sub	r3, fp, #32
 c10e33c:	e1a00003 	mov	r0, r3
 c10e340:	ebffffd9 	bl	c10e2ac <uart0_gets>

	if(s[0] == '\0')
 c10e344:	e55b3020 	ldrb	r3, [fp, #-32]	; 0xffffffe0
 c10e348:	e3530000 	cmp	r3, #0
 c10e34c:	1a000001 	bne	c10e358 <uart0_getint+0x40>
		return 0;
 c10e350:	e3a03000 	mov	r3, #0
 c10e354:	ea000021 	b	c10e3e0 <uart0_getint+0xc8>

	if(s[0]=='-')
 c10e358:	e55b3020 	ldrb	r3, [fp, #-32]	; 0xffffffe0
 c10e35c:	e353002d 	cmp	r3, #45	; 0x2d
 c10e360:	1a000012 	bne	c10e3b0 <uart0_getint+0x98>
		p++;
 c10e364:	e51b3010 	ldr	r3, [fp, #-16]
 c10e368:	e2833001 	add	r3, r3, #1
 c10e36c:	e50b3010 	str	r3, [fp, #-16]

	while(*p) {
 c10e370:	ea00000f 	b	c10e3b4 <uart0_getint+0x9c>
		res = 10 * res + (*p - '0');
 c10e374:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c10e378:	e1a03002 	mov	r3, r2
 c10e37c:	e1a03103 	lsl	r3, r3, #2
 c10e380:	e0833002 	add	r3, r3, r2
 c10e384:	e1a03083 	lsl	r3, r3, #1
 c10e388:	e1a02003 	mov	r2, r3
 c10e38c:	e51b3010 	ldr	r3, [fp, #-16]
 c10e390:	e5d33000 	ldrb	r3, [r3]
 c10e394:	e2433030 	sub	r3, r3, #48	; 0x30
 c10e398:	e0823003 	add	r3, r2, r3
 c10e39c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		p++;
 c10e3a0:	e51b3010 	ldr	r3, [fp, #-16]
 c10e3a4:	e2833001 	add	r3, r3, #1
 c10e3a8:	e50b3010 	str	r3, [fp, #-16]
 c10e3ac:	ea000000 	b	c10e3b4 <uart0_getint+0x9c>
		return 0;

	if(s[0]=='-')
		p++;

	while(*p) {
 c10e3b0:	e1a00000 	nop			; (mov r0, r0)
 c10e3b4:	e51b3010 	ldr	r3, [fp, #-16]
 c10e3b8:	e5d33000 	ldrb	r3, [r3]
 c10e3bc:	e3530000 	cmp	r3, #0
 c10e3c0:	1affffeb 	bne	c10e374 <uart0_getint+0x5c>
		res = 10 * res + (*p - '0');
		p++;
	}

	if(s[0] == '-')
 c10e3c4:	e55b3020 	ldrb	r3, [fp, #-32]	; 0xffffffe0
 c10e3c8:	e353002d 	cmp	r3, #45	; 0x2d
 c10e3cc:	1a000002 	bne	c10e3dc <uart0_getint+0xc4>
		res *= -1;
 c10e3d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10e3d4:	e2633000 	rsb	r3, r3, #0
 c10e3d8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

	return res;
 c10e3dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
 c10e3e0:	e1a00003 	mov	r0, r3
 c10e3e4:	e24bd00c 	sub	sp, fp, #12
 c10e3e8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10e3ec:	e12fff1e 	bx	lr

0c10e3f0 <uart0_gethex>:

uint32 uart0_gethex( void )
{
 c10e3f0:	e1a0c00d 	mov	ip, sp
 c10e3f4:	e92dd800 	push	{fp, ip, lr, pc}
 c10e3f8:	e24cb004 	sub	fp, ip, #4
 c10e3fc:	e24dd018 	sub	sp, sp, #24
	char s[8 + 1];
	char* p = s;
 c10e400:	e24b3020 	sub	r3, fp, #32
 c10e404:	e50b3010 	str	r3, [fp, #-16]
	int32 res = 0;
 c10e408:	e3a03000 	mov	r3, #0
 c10e40c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

	uart0_gets(s);
 c10e410:	e24b3020 	sub	r3, fp, #32
 c10e414:	e1a00003 	mov	r0, r3
 c10e418:	ebffffa3 	bl	c10e2ac <uart0_gets>

	while(*p) {
 c10e41c:	ea00002b 	b	c10e4d0 <uart0_gethex+0xe0>
		res = res << 4;
 c10e420:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10e424:	e1a03203 	lsl	r3, r3, #4
 c10e428:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		char c = *p;
 c10e42c:	e51b3010 	ldr	r3, [fp, #-16]
 c10e430:	e5d33000 	ldrb	r3, [r3]
 c10e434:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
		if(c >= '0' && c <= '9')
 c10e438:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10e43c:	e353002f 	cmp	r3, #47	; 0x2f
 c10e440:	9a000008 	bls	c10e468 <uart0_gethex+0x78>
 c10e444:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10e448:	e3530039 	cmp	r3, #57	; 0x39
 c10e44c:	8a000005 	bhi	c10e468 <uart0_gethex+0x78>
			res += c - '0';
 c10e450:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10e454:	e2433030 	sub	r3, r3, #48	; 0x30
 c10e458:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c10e45c:	e0823003 	add	r3, r2, r3
 c10e460:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c10e464:	ea000016 	b	c10e4c4 <uart0_gethex+0xd4>
		else if(c >= 'a' && c <= 'f')
 c10e468:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10e46c:	e3530060 	cmp	r3, #96	; 0x60
 c10e470:	9a000008 	bls	c10e498 <uart0_gethex+0xa8>
 c10e474:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10e478:	e3530066 	cmp	r3, #102	; 0x66
 c10e47c:	8a000005 	bhi	c10e498 <uart0_gethex+0xa8>
			res += 10 + c - 'a';
 c10e480:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10e484:	e2433057 	sub	r3, r3, #87	; 0x57
 c10e488:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c10e48c:	e0823003 	add	r3, r2, r3
 c10e490:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c10e494:	ea00000a 	b	c10e4c4 <uart0_gethex+0xd4>
		else if(c >= 'A' && c <= 'F')
 c10e498:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10e49c:	e3530040 	cmp	r3, #64	; 0x40
 c10e4a0:	9a000007 	bls	c10e4c4 <uart0_gethex+0xd4>
 c10e4a4:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10e4a8:	e3530046 	cmp	r3, #70	; 0x46
 c10e4ac:	8a000004 	bhi	c10e4c4 <uart0_gethex+0xd4>
			res += 10 + c - 'A';
 c10e4b0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10e4b4:	e2433037 	sub	r3, r3, #55	; 0x37
 c10e4b8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c10e4bc:	e0823003 	add	r3, r2, r3
 c10e4c0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		p++;
 c10e4c4:	e51b3010 	ldr	r3, [fp, #-16]
 c10e4c8:	e2833001 	add	r3, r3, #1
 c10e4cc:	e50b3010 	str	r3, [fp, #-16]
	char* p = s;
	int32 res = 0;

	uart0_gets(s);

	while(*p) {
 c10e4d0:	e51b3010 	ldr	r3, [fp, #-16]
 c10e4d4:	e5d33000 	ldrb	r3, [r3]
 c10e4d8:	e3530000 	cmp	r3, #0
 c10e4dc:	1affffcf 	bne	c10e420 <uart0_gethex+0x30>
		else if(c >= 'A' && c <= 'F')
			res += 10 + c - 'A';
		p++;
	}

	return res;
 c10e4e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
 c10e4e4:	e1a00003 	mov	r0, r3
 c10e4e8:	e24bd00c 	sub	sp, fp, #12
 c10e4ec:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10e4f0:	e12fff1e 	bx	lr

0c10e4f4 <uart0_put_rtc_time>:

void uart0_put_rtc_time( rtc_time_t* rtc_time )
{
 c10e4f4:	e1a0c00d 	mov	ip, sp
 c10e4f8:	e92dd800 	push	{fp, ip, lr, pc}
 c10e4fc:	e24cb004 	sub	fp, ip, #4
 c10e500:	e24dd008 	sub	sp, sp, #8
 c10e504:	e50b0010 	str	r0, [fp, #-16]
	uart0_putint( rtc_time->mday );
 c10e508:	e51b3010 	ldr	r3, [fp, #-16]
 c10e50c:	e5d33003 	ldrb	r3, [r3, #3]
 c10e510:	e1a00003 	mov	r0, r3
 c10e514:	ebfffef6 	bl	c10e0f4 <uart0_putint>
	uart0_putchar( '/' );
 c10e518:	e3a0002f 	mov	r0, #47	; 0x2f
 c10e51c:	ebfffeba 	bl	c10e00c <uart0_putchar>
	uart0_putint( rtc_time->mon );
 c10e520:	e51b3010 	ldr	r3, [fp, #-16]
 c10e524:	e5d33005 	ldrb	r3, [r3, #5]
 c10e528:	e1a00003 	mov	r0, r3
 c10e52c:	ebfffef0 	bl	c10e0f4 <uart0_putint>
	uart0_putchar( '/' );
 c10e530:	e3a0002f 	mov	r0, #47	; 0x2f
 c10e534:	ebfffeb4 	bl	c10e00c <uart0_putchar>
	uart0_putint( rtc_time->year );
 c10e538:	e51b3010 	ldr	r3, [fp, #-16]
 c10e53c:	e5d33006 	ldrb	r3, [r3, #6]
 c10e540:	e1a00003 	mov	r0, r3
 c10e544:	ebfffeea 	bl	c10e0f4 <uart0_putint>
	uart0_putchar( ' ' );
 c10e548:	e3a00020 	mov	r0, #32
 c10e54c:	ebfffeae 	bl	c10e00c <uart0_putchar>
	uart0_putint( rtc_time->hour );
 c10e550:	e51b3010 	ldr	r3, [fp, #-16]
 c10e554:	e5d33002 	ldrb	r3, [r3, #2]
 c10e558:	e1a00003 	mov	r0, r3
 c10e55c:	ebfffee4 	bl	c10e0f4 <uart0_putint>
	uart0_putchar( ':' );
 c10e560:	e3a0003a 	mov	r0, #58	; 0x3a
 c10e564:	ebfffea8 	bl	c10e00c <uart0_putchar>
	uart0_putint( rtc_time->min );
 c10e568:	e51b3010 	ldr	r3, [fp, #-16]
 c10e56c:	e5d33001 	ldrb	r3, [r3, #1]
 c10e570:	e1a00003 	mov	r0, r3
 c10e574:	ebfffede 	bl	c10e0f4 <uart0_putint>
	uart0_putchar( ':' );
 c10e578:	e3a0003a 	mov	r0, #58	; 0x3a
 c10e57c:	ebfffea2 	bl	c10e00c <uart0_putchar>
	uart0_putint( rtc_time->sec );
 c10e580:	e51b3010 	ldr	r3, [fp, #-16]
 c10e584:	e5d33000 	ldrb	r3, [r3]
 c10e588:	e1a00003 	mov	r0, r3
 c10e58c:	ebfffed8 	bl	c10e0f4 <uart0_putint>
}
 c10e590:	e24bd00c 	sub	sp, fp, #12
 c10e594:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10e598:	e12fff1e 	bx	lr

0c10e59c <Delay>:

void Delay(int time)
// time=0: adjust the Delay function by WatchDog timer.//
// time>0: the number of loop time//
// 100us resolution.//
{
 c10e59c:	e1a0c00d 	mov	ip, sp
 c10e5a0:	e92dd800 	push	{fp, ip, lr, pc}
 c10e5a4:	e24cb004 	sub	fp, ip, #4
 c10e5a8:	e24dd010 	sub	sp, sp, #16
 c10e5ac:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
	int i,adjust=0;
 c10e5b0:	e3a03000 	mov	r3, #0
 c10e5b4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	if(time==0)
 c10e5b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10e5bc:	e3530000 	cmp	r3, #0
 c10e5c0:	1a000021 	bne	c10e64c <Delay+0xb0>
	{
		time=200;
 c10e5c4:	e3a030c8 	mov	r3, #200	; 0xc8
 c10e5c8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
		adjust=1;
 c10e5cc:	e3a03001 	mov	r3, #1
 c10e5d0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		delayLoopCount=400;
 c10e5d4:	e59f30d8 	ldr	r3, [pc, #216]	; c10e6b4 <Delay+0x118>
 c10e5d8:	e3a02e19 	mov	r2, #400	; 0x190
 c10e5dc:	e5832000 	str	r2, [r3]
		rWTCON=((MCLK/1000000-1)<<8)|(2<<3);	// 1M/64,Watch-dog,nRESET,interrupt disable//
 c10e5e0:	e59f30d0 	ldr	r3, [pc, #208]	; c10e6b8 <Delay+0x11c>
 c10e5e4:	e59f20d0 	ldr	r2, [pc, #208]	; c10e6bc <Delay+0x120>
 c10e5e8:	e5832000 	str	r2, [r3]
		rWTDAT=0xffff;
 c10e5ec:	e59f30cc 	ldr	r3, [pc, #204]	; c10e6c0 <Delay+0x124>
 c10e5f0:	e59f20cc 	ldr	r2, [pc, #204]	; c10e6c4 <Delay+0x128>
 c10e5f4:	e5832000 	str	r2, [r3]
		rWTCNT=0xffff;
 c10e5f8:	e59f30c8 	ldr	r3, [pc, #200]	; c10e6c8 <Delay+0x12c>
 c10e5fc:	e59f20c0 	ldr	r2, [pc, #192]	; c10e6c4 <Delay+0x128>
 c10e600:	e5832000 	str	r2, [r3]
		rWTCON=((MCLK/1000000-1)<<8)|(2<<3)|(1<<5); // 1M/64,Watch-dog enable,nRESET,interrupt disable //
 c10e604:	e59f30ac 	ldr	r3, [pc, #172]	; c10e6b8 <Delay+0x11c>
 c10e608:	e59f20bc 	ldr	r2, [pc, #188]	; c10e6cc <Delay+0x130>
 c10e60c:	e5832000 	str	r2, [r3]
	}
	for(;time>0;time--)
 c10e610:	ea00000d 	b	c10e64c <Delay+0xb0>
		for(i=0;i<delayLoopCount;i++);
 c10e614:	e3a03000 	mov	r3, #0
 c10e618:	e50b3010 	str	r3, [fp, #-16]
 c10e61c:	ea000002 	b	c10e62c <Delay+0x90>
 c10e620:	e51b3010 	ldr	r3, [fp, #-16]
 c10e624:	e2833001 	add	r3, r3, #1
 c10e628:	e50b3010 	str	r3, [fp, #-16]
 c10e62c:	e59f3080 	ldr	r3, [pc, #128]	; c10e6b4 <Delay+0x118>
 c10e630:	e5933000 	ldr	r3, [r3]
 c10e634:	e51b2010 	ldr	r2, [fp, #-16]
 c10e638:	e1520003 	cmp	r2, r3
 c10e63c:	bafffff7 	blt	c10e620 <Delay+0x84>
		rWTCON=((MCLK/1000000-1)<<8)|(2<<3);	// 1M/64,Watch-dog,nRESET,interrupt disable//
		rWTDAT=0xffff;
		rWTCNT=0xffff;
		rWTCON=((MCLK/1000000-1)<<8)|(2<<3)|(1<<5); // 1M/64,Watch-dog enable,nRESET,interrupt disable //
	}
	for(;time>0;time--)
 c10e640:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10e644:	e2433001 	sub	r3, r3, #1
 c10e648:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c10e64c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c10e650:	e3530000 	cmp	r3, #0
 c10e654:	caffffee 	bgt	c10e614 <Delay+0x78>
		for(i=0;i<delayLoopCount;i++);
	if(adjust==1)
 c10e658:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c10e65c:	e3530001 	cmp	r3, #1
 c10e660:	1a000010 	bne	c10e6a8 <Delay+0x10c>
	{
		rWTCON=((MCLK/1000000-1)<<8)|(2<<3);
 c10e664:	e59f304c 	ldr	r3, [pc, #76]	; c10e6b8 <Delay+0x11c>
 c10e668:	e59f204c 	ldr	r2, [pc, #76]	; c10e6bc <Delay+0x120>
 c10e66c:	e5832000 	str	r2, [r3]
		i=0xffff-rWTCNT;   //  1count/16us?????????//
 c10e670:	e59f3050 	ldr	r3, [pc, #80]	; c10e6c8 <Delay+0x12c>
 c10e674:	e5933000 	ldr	r3, [r3]
 c10e678:	e2633cff 	rsb	r3, r3, #65280	; 0xff00
 c10e67c:	e28330ff 	add	r3, r3, #255	; 0xff
 c10e680:	e50b3010 	str	r3, [fp, #-16]
		delayLoopCount=8000000/(i*64);	//400*100/(i*64/200)   //
 c10e684:	e51b3010 	ldr	r3, [fp, #-16]
 c10e688:	e1a03303 	lsl	r3, r3, #6
 c10e68c:	e59f003c 	ldr	r0, [pc, #60]	; c10e6d0 <Delay+0x134>
 c10e690:	e1a01003 	mov	r1, r3
 c10e694:	eb00000e 	bl	c10e6d4 <__aeabi_idiv>
 c10e698:	e1a03000 	mov	r3, r0
 c10e69c:	e1a02003 	mov	r2, r3
 c10e6a0:	e59f300c 	ldr	r3, [pc, #12]	; c10e6b4 <Delay+0x118>
 c10e6a4:	e5832000 	str	r2, [r3]
	}
}
 c10e6a8:	e24bd00c 	sub	sp, fp, #12
 c10e6ac:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10e6b0:	e12fff1e 	bx	lr
 c10e6b4:	0c100064 	.word	0x0c100064
 c10e6b8:	01d30000 	.word	0x01d30000
 c10e6bc:	00003f10 	.word	0x00003f10
 c10e6c0:	01d30004 	.word	0x01d30004
 c10e6c4:	0000ffff 	.word	0x0000ffff
 c10e6c8:	01d30008 	.word	0x01d30008
 c10e6cc:	00003f30 	.word	0x00003f30
 c10e6d0:	007a1200 	.word	0x007a1200

0c10e6d4 <__aeabi_idiv>:
 c10e6d4:	e3510000 	cmp	r1, #0
 c10e6d8:	0a000043 	beq	c10e7ec <.divsi3_skip_div0_test+0x110>

0c10e6dc <.divsi3_skip_div0_test>:
 c10e6dc:	e020c001 	eor	ip, r0, r1
 c10e6e0:	42611000 	rsbmi	r1, r1, #0
 c10e6e4:	e2512001 	subs	r2, r1, #1
 c10e6e8:	0a000027 	beq	c10e78c <.divsi3_skip_div0_test+0xb0>
 c10e6ec:	e1b03000 	movs	r3, r0
 c10e6f0:	42603000 	rsbmi	r3, r0, #0
 c10e6f4:	e1530001 	cmp	r3, r1
 c10e6f8:	9a000026 	bls	c10e798 <.divsi3_skip_div0_test+0xbc>
 c10e6fc:	e1110002 	tst	r1, r2
 c10e700:	0a000028 	beq	c10e7a8 <.divsi3_skip_div0_test+0xcc>
 c10e704:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 c10e708:	01a01181 	lsleq	r1, r1, #3
 c10e70c:	03a02008 	moveq	r2, #8
 c10e710:	13a02001 	movne	r2, #1
 c10e714:	e3510201 	cmp	r1, #268435456	; 0x10000000
 c10e718:	31510003 	cmpcc	r1, r3
 c10e71c:	31a01201 	lslcc	r1, r1, #4
 c10e720:	31a02202 	lslcc	r2, r2, #4
 c10e724:	3afffffa 	bcc	c10e714 <.divsi3_skip_div0_test+0x38>
 c10e728:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 c10e72c:	31510003 	cmpcc	r1, r3
 c10e730:	31a01081 	lslcc	r1, r1, #1
 c10e734:	31a02082 	lslcc	r2, r2, #1
 c10e738:	3afffffa 	bcc	c10e728 <.divsi3_skip_div0_test+0x4c>
 c10e73c:	e3a00000 	mov	r0, #0
 c10e740:	e1530001 	cmp	r3, r1
 c10e744:	20433001 	subcs	r3, r3, r1
 c10e748:	21800002 	orrcs	r0, r0, r2
 c10e74c:	e15300a1 	cmp	r3, r1, lsr #1
 c10e750:	204330a1 	subcs	r3, r3, r1, lsr #1
 c10e754:	218000a2 	orrcs	r0, r0, r2, lsr #1
 c10e758:	e1530121 	cmp	r3, r1, lsr #2
 c10e75c:	20433121 	subcs	r3, r3, r1, lsr #2
 c10e760:	21800122 	orrcs	r0, r0, r2, lsr #2
 c10e764:	e15301a1 	cmp	r3, r1, lsr #3
 c10e768:	204331a1 	subcs	r3, r3, r1, lsr #3
 c10e76c:	218001a2 	orrcs	r0, r0, r2, lsr #3
 c10e770:	e3530000 	cmp	r3, #0
 c10e774:	11b02222 	lsrsne	r2, r2, #4
 c10e778:	11a01221 	lsrne	r1, r1, #4
 c10e77c:	1affffef 	bne	c10e740 <.divsi3_skip_div0_test+0x64>
 c10e780:	e35c0000 	cmp	ip, #0
 c10e784:	42600000 	rsbmi	r0, r0, #0
 c10e788:	e12fff1e 	bx	lr
 c10e78c:	e13c0000 	teq	ip, r0
 c10e790:	42600000 	rsbmi	r0, r0, #0
 c10e794:	e12fff1e 	bx	lr
 c10e798:	33a00000 	movcc	r0, #0
 c10e79c:	01a00fcc 	asreq	r0, ip, #31
 c10e7a0:	03800001 	orreq	r0, r0, #1
 c10e7a4:	e12fff1e 	bx	lr
 c10e7a8:	e3510801 	cmp	r1, #65536	; 0x10000
 c10e7ac:	21a01821 	lsrcs	r1, r1, #16
 c10e7b0:	23a02010 	movcs	r2, #16
 c10e7b4:	33a02000 	movcc	r2, #0
 c10e7b8:	e3510c01 	cmp	r1, #256	; 0x100
 c10e7bc:	21a01421 	lsrcs	r1, r1, #8
 c10e7c0:	22822008 	addcs	r2, r2, #8
 c10e7c4:	e3510010 	cmp	r1, #16
 c10e7c8:	21a01221 	lsrcs	r1, r1, #4
 c10e7cc:	22822004 	addcs	r2, r2, #4
 c10e7d0:	e3510004 	cmp	r1, #4
 c10e7d4:	82822003 	addhi	r2, r2, #3
 c10e7d8:	908220a1 	addls	r2, r2, r1, lsr #1
 c10e7dc:	e35c0000 	cmp	ip, #0
 c10e7e0:	e1a00233 	lsr	r0, r3, r2
 c10e7e4:	42600000 	rsbmi	r0, r0, #0
 c10e7e8:	e12fff1e 	bx	lr
 c10e7ec:	e3500000 	cmp	r0, #0
 c10e7f0:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
 c10e7f4:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
 c10e7f8:	ea000007 	b	c10e81c <__aeabi_idiv0>

0c10e7fc <__aeabi_idivmod>:
 c10e7fc:	e3510000 	cmp	r1, #0
 c10e800:	0afffff9 	beq	c10e7ec <.divsi3_skip_div0_test+0x110>
 c10e804:	e92d4003 	push	{r0, r1, lr}
 c10e808:	ebffffb3 	bl	c10e6dc <.divsi3_skip_div0_test>
 c10e80c:	e8bd4006 	pop	{r1, r2, lr}
 c10e810:	e0030092 	mul	r3, r2, r0
 c10e814:	e0411003 	sub	r1, r1, r3
 c10e818:	e12fff1e 	bx	lr

0c10e81c <__aeabi_idiv0>:
 c10e81c:	e12fff1e 	bx	lr

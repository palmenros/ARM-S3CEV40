   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"ts.c"
  21              	.Ltext0:
  22              		.file 1 "../ts.c"
 1870              		.align	1
 1871              	Vxmin:
 1872 0000 0000     		.space	2
 1873              		.align	1
 1874              	Vxmax:
 1875 0002 0000     		.space	2
 1876              		.align	1
 1877              	Vymin:
 1878 0004 0000     		.space	2
 1879              		.align	1
 1880              	Vymax:
 1881 0006 0000     		.space	2
 1882              	state:
 1883 0008 00       		.space	1
 1884 0009 00       		.text
 1885              		.align	2
 1886              		.global	isr_TS_dummy
 1888              	isr_TS_dummy:
 1889              	.LFB0:
   1:../ts.c       **** #include "44b.h"
   2:../ts.c       **** #include "adc.h"
   3:../ts.c       **** #include "lcd.h"
   4:../ts.c       **** #include "gpio.h"
   5:../ts.c       **** #include "utils.h"
   6:../ts.c       **** #include "ts.h"
   7:../ts.c       **** #include "intcontroller.h"
   8:../ts.c       **** #include "uart.h"
   9:../ts.c       **** 
  10:../ts.c       **** #define PX_ERROR    (5)
  11:../ts.c       **** #define TS_DOWN_DELAY 100
  12:../ts.c       **** #define TS_UP_DELAY 200
  13:../ts.c       **** 
  14:../ts.c       **** 
  15:../ts.c       **** static uint16 Vxmin = 0;
  16:../ts.c       **** static uint16 Vxmax = 0;
  17:../ts.c       **** static uint16 Vymin = 0;
  18:../ts.c       **** static uint16 Vymax = 0;
  19:../ts.c       **** 
  20:../ts.c       **** static uint8 state;
  21:../ts.c       **** 
  22:../ts.c       **** extern void isr_TS_dummy( void ) __attribute__ ((interrupt ("IRQ")));
  23:../ts.c       **** 
  24:../ts.c       **** void isr_TS_dummy( void )
  25:../ts.c       **** {
 1890              		.loc 1 25 0
 1891              		.cfi_startproc
 1892              		@ Interrupt Service Routine.
 1893              		@ args = 0, pretend = 0, frame = 0
 1894              		@ frame_needed = 1, uses_anonymous_args = 0
 1895 0000 04C02DE5 		str	ip, [sp, #-4]!
 1896 0004 0DC0A0E1 		mov	ip, sp
 1897              	.LCFI0:
 1898              		.cfi_def_cfa_register 12
 1899 0008 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
 1900 000c 04B04CE2 		sub	fp, ip, #4
 1901              		.cfi_offset 14, -8
 1902              		.cfi_offset 13, -12
 1903              		.cfi_offset 11, -16
 1904              		.cfi_offset 3, -20
 1905              		.cfi_offset 2, -24
 1906              		.cfi_offset 1, -28
 1907              		.cfi_offset 0, -32
 1908              	.LCFI1:
 1909              		.cfi_def_cfa 11, 4
  26:../ts.c       **** 	ic_cleanflag(INT_EINT2);
 1910              		.loc 1 26 0
 1911 0010 1700A0E3 		mov	r0, #23
 1912 0014 FEFFFFEB 		bl	ic_cleanflag
  27:../ts.c       **** }
 1913              		.loc 1 27 0
 1914 0018 1CD04BE2 		sub	sp, fp, #28
 1915 001c 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 1916 0020 04C09DE4 		ldmfd	sp!, {ip}
 1917 0024 04F05EE2 		subs	pc, lr, #4
 1918              		.cfi_endproc
 1919              	.LFE0:
 1921              		.align	2
 1922              		.global	ts_init
 1924              	ts_init:
 1925              	.LFB1:
  28:../ts.c       **** 
  29:../ts.c       **** static void ts_scan( uint16 *Vx, uint16 *Vy );
  30:../ts.c       **** static void ts_calibrate( void );
  31:../ts.c       **** static void ts_sample2coord( uint16 Vx, uint16 Vy, uint16 *x, uint16 *y );
  32:../ts.c       **** 
  33:../ts.c       **** void ts_init( void )
  34:../ts.c       **** {
 1926              		.loc 1 34 0
 1927              		.cfi_startproc
 1928              		@ Function supports interworking.
 1929              		@ args = 0, pretend = 0, frame = 0
 1930              		@ frame_needed = 1, uses_anonymous_args = 0
 1931 0028 0DC0A0E1 		mov	ip, sp
 1932              	.LCFI2:
 1933              		.cfi_def_cfa_register 12
 1934 002c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1935 0030 04B04CE2 		sub	fp, ip, #4
 1936              		.cfi_offset 14, -8
 1937              		.cfi_offset 13, -12
 1938              		.cfi_offset 11, -16
 1939              	.LCFI3:
 1940              		.cfi_def_cfa 11, 4
  35:../ts.c       ****     lcd_init();
 1941              		.loc 1 35 0
 1942 0034 FEFFFFEB 		bl	lcd_init
  36:../ts.c       ****     adc_init();
 1943              		.loc 1 36 0
 1944 0038 FEFFFFEB 		bl	adc_init
  37:../ts.c       **** 
  38:../ts.c       ****     //Conf PE[7..4] as Output
  39:../ts.c       ****     rPCONE &= ~(0xff << 8);
 1945              		.loc 1 39 0
 1946 003c 70309FE5 		ldr	r3, .L3
 1947 0040 6C209FE5 		ldr	r2, .L3
 1948 0044 002092E5 		ldr	r2, [r2, #0]
 1949 0048 FF2CC2E3 		bic	r2, r2, #65280
 1950 004c 002083E5 		str	r2, [r3, #0]
  40:../ts.c       ****     rPCONE |= 0b01010101 << 8;
 1951              		.loc 1 40 0
 1952 0050 5C309FE5 		ldr	r3, .L3
 1953 0054 58209FE5 		ldr	r2, .L3
 1954 0058 002092E5 		ldr	r2, [r2, #0]
 1955 005c 552C82E3 		orr	r2, r2, #21760
 1956 0060 002083E5 		str	r2, [r3, #0]
  41:../ts.c       **** 
  42:../ts.c       ****     //Conecta Y‐ con GND dejando el resto de terminales abiertos
  43:../ts.c       ****     //PE[7..4] = 1011
  44:../ts.c       ****     rPDATE &= ~(0xf << 4);
 1957              		.loc 1 44 0
 1958 0064 4C309FE5 		ldr	r3, .L3+4
 1959 0068 48209FE5 		ldr	r2, .L3+4
 1960 006c 002092E5 		ldr	r2, [r2, #0]
 1961 0070 F020C2E3 		bic	r2, r2, #240
 1962 0074 002083E5 		str	r2, [r3, #0]
  45:../ts.c       ****     rPDATE |= 0b1011 << 4;
 1963              		.loc 1 45 0
 1964 0078 38309FE5 		ldr	r3, .L3+4
 1965 007c 34209FE5 		ldr	r2, .L3+4
 1966 0080 002092E5 		ldr	r2, [r2, #0]
 1967 0084 B02082E3 		orr	r2, r2, #176
 1968 0088 002083E5 		str	r2, [r3, #0]
  46:../ts.c       **** 
  47:../ts.c       ****     Delay( 1 );
 1969              		.loc 1 47 0
 1970 008c 0100A0E3 		mov	r0, #1
 1971 0090 FEFFFFEB 		bl	Delay
  48:../ts.c       ****     portG_conf(2, INPUT);
 1972              		.loc 1 48 0
 1973 0094 0200A0E3 		mov	r0, #2
 1974 0098 0010A0E3 		mov	r1, #0
 1975 009c FEFFFFEB 		bl	portG_conf
  49:../ts.c       ****     //portG_conf_pup(2, ENABLE);
  50:../ts.c       **** 
  51:../ts.c       ****     ts_on();
 1976              		.loc 1 51 0
 1977 00a0 FEFFFFEB 		bl	ts_on
  52:../ts.c       ****     ts_calibrate();
 1978              		.loc 1 52 0
 1979 00a4 330000EB 		bl	ts_calibrate
  53:../ts.c       **** }
 1980              		.loc 1 53 0
 1981 00a8 0CD04BE2 		sub	sp, fp, #12
 1982 00ac 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1983 00b0 1EFF2FE1 		bx	lr
 1984              	.L4:
 1985              		.align	2
 1986              	.L3:
 1987 00b4 2800D201 		.word	30539816
 1988 00b8 2C00D201 		.word	30539820
 1989              		.cfi_endproc
 1990              	.LFE1:
 1992              		.align	2
 1993              		.global	ts_on
 1995              	ts_on:
 1996              	.LFB2:
  54:../ts.c       **** 
  55:../ts.c       **** void ts_on( void )
  56:../ts.c       **** {
 1997              		.loc 1 56 0
 1998              		.cfi_startproc
 1999              		@ Function supports interworking.
 2000              		@ args = 0, pretend = 0, frame = 0
 2001              		@ frame_needed = 1, uses_anonymous_args = 0
 2002 00bc 0DC0A0E1 		mov	ip, sp
 2003              	.LCFI4:
 2004              		.cfi_def_cfa_register 12
 2005 00c0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2006 00c4 04B04CE2 		sub	fp, ip, #4
 2007              		.cfi_offset 14, -8
 2008              		.cfi_offset 13, -12
 2009              		.cfi_offset 11, -16
 2010              	.LCFI5:
 2011              		.cfi_def_cfa 11, 4
  57:../ts.c       ****     adc_on();
 2012              		.loc 1 57 0
 2013 00c8 FEFFFFEB 		bl	adc_on
  58:../ts.c       ****     state = ON;
 2014              		.loc 1 58 0
 2015 00cc 10309FE5 		ldr	r3, .L6
 2016 00d0 0120A0E3 		mov	r2, #1
 2017 00d4 0020C3E5 		strb	r2, [r3, #0]
  59:../ts.c       **** }
 2018              		.loc 1 59 0
 2019 00d8 0CD04BE2 		sub	sp, fp, #12
 2020 00dc 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2021 00e0 1EFF2FE1 		bx	lr
 2022              	.L7:
 2023              		.align	2
 2024              	.L6:
 2025 00e4 08000000 		.word	state
 2026              		.cfi_endproc
 2027              	.LFE2:
 2029              		.align	2
 2030              		.global	ts_off
 2032              	ts_off:
 2033              	.LFB3:
  60:../ts.c       **** 
  61:../ts.c       **** void ts_off( void )
  62:../ts.c       **** {
 2034              		.loc 1 62 0
 2035              		.cfi_startproc
 2036              		@ Function supports interworking.
 2037              		@ args = 0, pretend = 0, frame = 0
 2038              		@ frame_needed = 1, uses_anonymous_args = 0
 2039 00e8 0DC0A0E1 		mov	ip, sp
 2040              	.LCFI6:
 2041              		.cfi_def_cfa_register 12
 2042 00ec 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2043 00f0 04B04CE2 		sub	fp, ip, #4
 2044              		.cfi_offset 14, -8
 2045              		.cfi_offset 13, -12
 2046              		.cfi_offset 11, -16
 2047              	.LCFI7:
 2048              		.cfi_def_cfa 11, 4
  63:../ts.c       ****     adc_off();
 2049              		.loc 1 63 0
 2050 00f4 FEFFFFEB 		bl	adc_off
  64:../ts.c       ****     state = OFF;
 2051              		.loc 1 64 0
 2052 00f8 10309FE5 		ldr	r3, .L9
 2053 00fc 0020A0E3 		mov	r2, #0
 2054 0100 0020C3E5 		strb	r2, [r3, #0]
  65:../ts.c       **** }
 2055              		.loc 1 65 0
 2056 0104 0CD04BE2 		sub	sp, fp, #12
 2057 0108 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2058 010c 1EFF2FE1 		bx	lr
 2059              	.L10:
 2060              		.align	2
 2061              	.L9:
 2062 0110 08000000 		.word	state
 2063              		.cfi_endproc
 2064              	.LFE3:
 2066              		.align	2
 2067              		.global	ts_status
 2069              	ts_status:
 2070              	.LFB4:
  66:../ts.c       **** 
  67:../ts.c       **** uint8 ts_status( void )
  68:../ts.c       **** {
 2071              		.loc 1 68 0
 2072              		.cfi_startproc
 2073              		@ Function supports interworking.
 2074              		@ args = 0, pretend = 0, frame = 0
 2075              		@ frame_needed = 1, uses_anonymous_args = 0
 2076 0114 0DC0A0E1 		mov	ip, sp
 2077              	.LCFI8:
 2078              		.cfi_def_cfa_register 12
 2079 0118 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2080 011c 04B04CE2 		sub	fp, ip, #4
 2081              		.cfi_offset 14, -8
 2082              		.cfi_offset 13, -12
 2083              		.cfi_offset 11, -16
 2084              	.LCFI9:
 2085              		.cfi_def_cfa 11, 4
  69:../ts.c       **** 	return state;
 2086              		.loc 1 69 0
 2087 0120 10309FE5 		ldr	r3, .L12
 2088 0124 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  70:../ts.c       **** }
 2089              		.loc 1 70 0
 2090 0128 0300A0E1 		mov	r0, r3
 2091 012c 0CD04BE2 		sub	sp, fp, #12
 2092 0130 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2093 0134 1EFF2FE1 		bx	lr
 2094              	.L13:
 2095              		.align	2
 2096              	.L12:
 2097 0138 08000000 		.word	state
 2098              		.cfi_endproc
 2099              	.LFE4:
 2101              		.align	2
 2102              		.global	ts_pressed
 2104              	ts_pressed:
 2105              	.LFB5:
  71:../ts.c       **** 
  72:../ts.c       **** uint8 ts_pressed( void )
  73:../ts.c       **** {
 2106              		.loc 1 73 0
 2107              		.cfi_startproc
 2108              		@ Function supports interworking.
 2109              		@ args = 0, pretend = 0, frame = 0
 2110              		@ frame_needed = 1, uses_anonymous_args = 0
 2111 013c 0DC0A0E1 		mov	ip, sp
 2112              	.LCFI10:
 2113              		.cfi_def_cfa_register 12
 2114 0140 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2115 0144 04B04CE2 		sub	fp, ip, #4
 2116              		.cfi_offset 14, -8
 2117              		.cfi_offset 13, -12
 2118              		.cfi_offset 11, -16
 2119              	.LCFI11:
 2120              		.cfi_def_cfa 11, 4
  74:../ts.c       ****     return !(rPDATG & (1 << 2));
 2121              		.loc 1 74 0
 2122 0148 24309FE5 		ldr	r3, .L15
 2123 014c 003093E5 		ldr	r3, [r3, #0]
 2124 0150 043003E2 		and	r3, r3, #4
 2125 0154 000053E3 		cmp	r3, #0
 2126 0158 0030A013 		movne	r3, #0
 2127 015c 0130A003 		moveq	r3, #1
 2128 0160 FF3003E2 		and	r3, r3, #255
  75:../ts.c       **** }
 2129              		.loc 1 75 0
 2130 0164 0300A0E1 		mov	r0, r3
 2131 0168 0CD04BE2 		sub	sp, fp, #12
 2132 016c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2133 0170 1EFF2FE1 		bx	lr
 2134              	.L16:
 2135              		.align	2
 2136              	.L15:
 2137 0174 4400D201 		.word	30539844
 2138              		.cfi_endproc
 2139              	.LFE5:
 2141              		.section	.rodata
 2142              		.align	2
 2143              	.LC0:
 2144 0000 43616C69 		.ascii	"Calibracion pantalla tactil: \012\000"
 2144      62726163 
 2144      696F6E20 
 2144      70616E74 
 2144      616C6C61 
 2145 001f 00       		.align	2
 2146              	.LC1:
 2147 0020 50756C73 		.ascii	"Pulse el punto en la esquina superior izquierda...\000"
 2147      6520656C 
 2147      2070756E 
 2147      746F2065 
 2147      6E206C61 
 2148 0053 00       		.align	2
 2149              	.LC2:
 2150 0054 204F6B0A 		.ascii	" Ok\012\000"
 2150      00
 2151 0059 000000   		.align	2
 2152              	.LC3:
 2153 005c 50756C73 		.ascii	"Pulse el punto en la esquina inferior derecha...\000"
 2153      6520656C 
 2153      2070756E 
 2153      746F2065 
 2153      6E206C61 
 2154 008d 000000   		.align	2
 2155              	.LC4:
 2156 0090 50756C73 		.ascii	"Pulse el punto en el centro...\000"
 2156      6520656C 
 2156      2070756E 
 2156      746F2065 
 2156      6E20656C 
 2157 00af 00       		.align	2
 2158              	.LC5:
 2159 00b0 583A2000 		.ascii	"X: \000"
 2160              		.align	2
 2161              	.LC6:
 2162 00b4 2C20593A 		.ascii	", Y: \000"
 2162      2000
 2163 00ba 0000     		.align	2
 2164              	.LC7:
 2165 00bc 0A00     		.ascii	"\012\000"
 2166 00be 0000     		.align	2
 2167              	.LC8:
 2168 00c0 43616C69 		.ascii	"Calibracion completada\012\000"
 2168      62726163 
 2168      696F6E20 
 2168      636F6D70 
 2168      6C657461 
 2169              		.text
 2170              		.align	2
 2172              	ts_calibrate:
 2173              	.LFB6:
  76:../ts.c       **** 
  77:../ts.c       **** static void ts_calibrate( void )
  78:../ts.c       **** {
 2174              		.loc 1 78 0
 2175              		.cfi_startproc
 2176              		@ Function supports interworking.
 2177              		@ args = 0, pretend = 0, frame = 8
 2178              		@ frame_needed = 1, uses_anonymous_args = 0
 2179 0178 0DC0A0E1 		mov	ip, sp
 2180              	.LCFI12:
 2181              		.cfi_def_cfa_register 12
 2182 017c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2183 0180 04B04CE2 		sub	fp, ip, #4
 2184              		.cfi_offset 14, -8
 2185              		.cfi_offset 13, -12
 2186              		.cfi_offset 11, -16
 2187              	.LCFI13:
 2188              		.cfi_def_cfa 11, 4
 2189 0184 10D04DE2 		sub	sp, sp, #16
  79:../ts.c       ****     uint16 x, y;
  80:../ts.c       **** 
  81:../ts.c       **** 	uart0_puts("Calibracion pantalla tactil: \n");
 2190              		.loc 1 81 0
 2191 0188 D4019FE5 		ldr	r0, .L23
 2192 018c FEFFFFEB 		bl	uart0_puts
  82:../ts.c       ****     lcd_on();
 2193              		.loc 1 82 0
 2194 0190 FEFFFFEB 		bl	lcd_on
 2195              	.L22:
  83:../ts.c       ****     do {
  84:../ts.c       **** 
  85:../ts.c       ****     	lcd_clear_color(BLACK);
 2196              		.loc 1 85 0
 2197 0194 0F00A0E3 		mov	r0, #15
 2198 0198 FEFFFFEB 		bl	lcd_clear_color
  86:../ts.c       ****     	lcd_draw_box(0, 0, 0 + PX_ERROR, 0 + PX_ERROR, WHITE, 3);
 2199              		.loc 1 86 0
 2200 019c 0030A0E3 		mov	r3, #0
 2201 01a0 00308DE5 		str	r3, [sp, #0]
 2202 01a4 0330A0E3 		mov	r3, #3
 2203 01a8 04308DE5 		str	r3, [sp, #4]
 2204 01ac 0000A0E3 		mov	r0, #0
 2205 01b0 0010A0E3 		mov	r1, #0
 2206 01b4 0520A0E3 		mov	r2, #5
 2207 01b8 0530A0E3 		mov	r3, #5
 2208 01bc FEFFFFEB 		bl	lcd_draw_box
  87:../ts.c       ****     	uart0_puts("Pulse el punto en la esquina superior izquierda...");
 2209              		.loc 1 87 0
 2210 01c0 A0019FE5 		ldr	r0, .L23+4
 2211 01c4 FEFFFFEB 		bl	uart0_puts
  88:../ts.c       **** 
  89:../ts.c       ****     	while(rPDATG & (1 << 2));
 2212              		.loc 1 89 0
 2213 01c8 0000A0E1 		mov	r0, r0	@ nop
 2214              	.L18:
 2215              		.loc 1 89 0 is_stmt 0 discriminator 1
 2216 01cc 98319FE5 		ldr	r3, .L23+8
 2217 01d0 003093E5 		ldr	r3, [r3, #0]
 2218 01d4 043003E2 		and	r3, r3, #4
 2219 01d8 000053E3 		cmp	r3, #0
 2220 01dc FAFFFF1A 		bne	.L18
  90:../ts.c       ****         Delay( TS_DOWN_DELAY );
 2221              		.loc 1 90 0 is_stmt 1
 2222 01e0 6400A0E3 		mov	r0, #100
 2223 01e4 FEFFFFEB 		bl	Delay
  91:../ts.c       ****         ts_scan( &Vxmin, &Vymax );
 2224              		.loc 1 91 0
 2225 01e8 80019FE5 		ldr	r0, .L23+12
 2226 01ec 80119FE5 		ldr	r1, .L23+16
 2227 01f0 910000EB 		bl	ts_scan
  92:../ts.c       ****     	while(!(rPDATG & (1 << 2)));
 2228              		.loc 1 92 0
 2229 01f4 0000A0E1 		mov	r0, r0	@ nop
 2230              	.L19:
 2231              		.loc 1 92 0 is_stmt 0 discriminator 1
 2232 01f8 6C319FE5 		ldr	r3, .L23+8
 2233 01fc 003093E5 		ldr	r3, [r3, #0]
 2234 0200 043003E2 		and	r3, r3, #4
 2235 0204 000053E3 		cmp	r3, #0
 2236 0208 FAFFFF0A 		beq	.L19
  93:../ts.c       ****         Delay( TS_UP_DELAY );
 2237              		.loc 1 93 0 is_stmt 1
 2238 020c C800A0E3 		mov	r0, #200
 2239 0210 FEFFFFEB 		bl	Delay
  94:../ts.c       **** 
  95:../ts.c       ****     	uart0_puts(" Ok\n");
 2240              		.loc 1 95 0
 2241 0214 5C019FE5 		ldr	r0, .L23+20
 2242 0218 FEFFFFEB 		bl	uart0_puts
  96:../ts.c       **** 
  97:../ts.c       ****     	lcd_clear_color(BLACK);
 2243              		.loc 1 97 0
 2244 021c 0F00A0E3 		mov	r0, #15
 2245 0220 FEFFFFEB 		bl	lcd_clear_color
  98:../ts.c       ****     	lcd_draw_box(LCD_WIDTH - 1 - PX_ERROR, LCD_HEIGHT - 1 - PX_ERROR, LCD_WIDTH - 1, LCD_HEIGHT - 
 2246              		.loc 1 98 0
 2247 0224 0030A0E3 		mov	r3, #0
 2248 0228 00308DE5 		str	r3, [sp, #0]
 2249 022c 0330A0E3 		mov	r3, #3
 2250 0230 04308DE5 		str	r3, [sp, #4]
 2251 0234 40019FE5 		ldr	r0, .L23+24
 2252 0238 EA10A0E3 		mov	r1, #234
 2253 023c 3C219FE5 		ldr	r2, .L23+28
 2254 0240 EF30A0E3 		mov	r3, #239
 2255 0244 FEFFFFEB 		bl	lcd_draw_box
  99:../ts.c       ****     	uart0_puts("Pulse el punto en la esquina inferior derecha...");
 2256              		.loc 1 99 0
 2257 0248 34019FE5 		ldr	r0, .L23+32
 2258 024c FEFFFFEB 		bl	uart0_puts
 100:../ts.c       **** 
 101:../ts.c       ****     	while(rPDATG & (1 << 2));
 2259              		.loc 1 101 0
 2260 0250 0000A0E1 		mov	r0, r0	@ nop
 2261              	.L20:
 2262              		.loc 1 101 0 is_stmt 0 discriminator 1
 2263 0254 10319FE5 		ldr	r3, .L23+8
 2264 0258 003093E5 		ldr	r3, [r3, #0]
 2265 025c 043003E2 		and	r3, r3, #4
 2266 0260 000053E3 		cmp	r3, #0
 2267 0264 FAFFFF1A 		bne	.L20
 102:../ts.c       ****         Delay( TS_DOWN_DELAY );
 2268              		.loc 1 102 0 is_stmt 1
 2269 0268 6400A0E3 		mov	r0, #100
 2270 026c FEFFFFEB 		bl	Delay
 103:../ts.c       ****         ts_scan( &Vxmax, &Vymin );
 2271              		.loc 1 103 0
 2272 0270 10019FE5 		ldr	r0, .L23+36
 2273 0274 10119FE5 		ldr	r1, .L23+40
 2274 0278 6F0000EB 		bl	ts_scan
 104:../ts.c       ****     	while(!(rPDATG & (1 << 2)));
 2275              		.loc 1 104 0
 2276 027c 0000A0E1 		mov	r0, r0	@ nop
 2277              	.L21:
 2278              		.loc 1 104 0 is_stmt 0 discriminator 1
 2279 0280 E4309FE5 		ldr	r3, .L23+8
 2280 0284 003093E5 		ldr	r3, [r3, #0]
 2281 0288 043003E2 		and	r3, r3, #4
 2282 028c 000053E3 		cmp	r3, #0
 2283 0290 FAFFFF0A 		beq	.L21
 105:../ts.c       ****         Delay( TS_UP_DELAY );
 2284              		.loc 1 105 0 is_stmt 1
 2285 0294 C800A0E3 		mov	r0, #200
 2286 0298 FEFFFFEB 		bl	Delay
 106:../ts.c       **** 
 107:../ts.c       ****         uart0_puts(" Ok\n");
 2287              		.loc 1 107 0
 2288 029c D4009FE5 		ldr	r0, .L23+20
 2289 02a0 FEFFFFEB 		bl	uart0_puts
 108:../ts.c       **** 
 109:../ts.c       ****     	lcd_clear_color(BLACK);
 2290              		.loc 1 109 0
 2291 02a4 0F00A0E3 		mov	r0, #15
 2292 02a8 FEFFFFEB 		bl	lcd_clear_color
 110:../ts.c       ****     	lcd_draw_box(LCD_WIDTH/2 - PX_ERROR / 2, LCD_HEIGHT/2 - PX_ERROR / 2, LCD_WIDTH/2 + PX_ERROR /
 2293              		.loc 1 110 0
 2294 02ac 0030A0E3 		mov	r3, #0
 2295 02b0 00308DE5 		str	r3, [sp, #0]
 2296 02b4 0330A0E3 		mov	r3, #3
 2297 02b8 04308DE5 		str	r3, [sp, #4]
 2298 02bc 9E00A0E3 		mov	r0, #158
 2299 02c0 7610A0E3 		mov	r1, #118
 2300 02c4 A220A0E3 		mov	r2, #162
 2301 02c8 7A30A0E3 		mov	r3, #122
 2302 02cc FEFFFFEB 		bl	lcd_draw_box
 111:../ts.c       **** 
 112:../ts.c       ****     	uart0_puts("Pulse el punto en el centro...");
 2303              		.loc 1 112 0
 2304 02d0 B8009FE5 		ldr	r0, .L23+44
 2305 02d4 FEFFFFEB 		bl	uart0_puts
 113:../ts.c       **** 
 114:../ts.c       ****         ts_getpos( &x, &y );
 2306              		.loc 1 114 0
 2307 02d8 0E204BE2 		sub	r2, fp, #14
 2308 02dc 10304BE2 		sub	r3, fp, #16
 2309 02e0 0200A0E1 		mov	r0, r2
 2310 02e4 0310A0E1 		mov	r1, r3
 2311 02e8 FEFFFFEB 		bl	ts_getpos
 115:../ts.c       **** 
 116:../ts.c       ****     	uart0_puts("X: ");
 2312              		.loc 1 116 0
 2313 02ec A0009FE5 		ldr	r0, .L23+48
 2314 02f0 FEFFFFEB 		bl	uart0_puts
 117:../ts.c       ****     	uart0_putint(x);
 2315              		.loc 1 117 0
 2316 02f4 BE305BE1 		ldrh	r3, [fp, #-14]
 2317 02f8 0300A0E1 		mov	r0, r3
 2318 02fc FEFFFFEB 		bl	uart0_putint
 118:../ts.c       ****     	uart0_puts(", Y: ");
 2319              		.loc 1 118 0
 2320 0300 90009FE5 		ldr	r0, .L23+52
 2321 0304 FEFFFFEB 		bl	uart0_puts
 119:../ts.c       ****     	uart0_putint(y);
 2322              		.loc 1 119 0
 2323 0308 B0315BE1 		ldrh	r3, [fp, #-16]
 2324 030c 0300A0E1 		mov	r0, r3
 2325 0310 FEFFFFEB 		bl	uart0_putint
 120:../ts.c       ****     	uart0_puts("\n");
 2326              		.loc 1 120 0
 2327 0314 80009FE5 		ldr	r0, .L23+56
 2328 0318 FEFFFFEB 		bl	uart0_puts
 121:../ts.c       **** 
 122:../ts.c       ****     } while( (x > LCD_WIDTH/2+PX_ERROR) || (x < LCD_WIDTH/2-PX_ERROR) || (y > LCD_HEIGHT/2+PX_ERROR
 2329              		.loc 1 122 0
 2330 031c BE305BE1 		ldrh	r3, [fp, #-14]
 2331 0320 A50053E3 		cmp	r3, #165
 2332 0324 9AFFFF8A 		bhi	.L22
 2333              		.loc 1 122 0 is_stmt 0 discriminator 1
 2334 0328 BE305BE1 		ldrh	r3, [fp, #-14]
 2335 032c 9A0053E3 		cmp	r3, #154
 2336 0330 97FFFF9A 		bls	.L22
 2337 0334 B0315BE1 		ldrh	r3, [fp, #-16]
 2338 0338 7D0053E3 		cmp	r3, #125
 2339 033c 94FFFF8A 		bhi	.L22
 2340 0340 B0315BE1 		ldrh	r3, [fp, #-16]
 2341 0344 720053E3 		cmp	r3, #114
 2342 0348 91FFFF9A 		bls	.L22
 123:../ts.c       **** 
 124:../ts.c       ****     uart0_puts("Calibracion completada\n");
 2343              		.loc 1 124 0 is_stmt 1
 2344 034c 4C009FE5 		ldr	r0, .L23+60
 2345 0350 FEFFFFEB 		bl	uart0_puts
 125:../ts.c       ****     lcd_clear();
 2346              		.loc 1 125 0
 2347 0354 FEFFFFEB 		bl	lcd_clear
 126:../ts.c       **** }
 2348              		.loc 1 126 0
 2349 0358 0CD04BE2 		sub	sp, fp, #12
 2350 035c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2351 0360 1EFF2FE1 		bx	lr
 2352              	.L24:
 2353              		.align	2
 2354              	.L23:
 2355 0364 00000000 		.word	.LC0
 2356 0368 20000000 		.word	.LC1
 2357 036c 4400D201 		.word	30539844
 2358 0370 00000000 		.word	Vxmin
 2359 0374 06000000 		.word	Vymax
 2360 0378 54000000 		.word	.LC2
 2361 037c 3A010000 		.word	314
 2362 0380 3F010000 		.word	319
 2363 0384 5C000000 		.word	.LC3
 2364 0388 02000000 		.word	Vxmax
 2365 038c 04000000 		.word	Vymin
 2366 0390 90000000 		.word	.LC4
 2367 0394 B0000000 		.word	.LC5
 2368 0398 B4000000 		.word	.LC6
 2369 039c BC000000 		.word	.LC7
 2370 03a0 C0000000 		.word	.LC8
 2371              		.cfi_endproc
 2372              	.LFE6:
 2374              		.align	2
 2375              		.global	ts_getpos
 2377              	ts_getpos:
 2378              	.LFB7:
 127:../ts.c       **** 
 128:../ts.c       **** void ts_getpos( uint16 *x, uint16 *y )
 129:../ts.c       **** {
 2379              		.loc 1 129 0
 2380              		.cfi_startproc
 2381              		@ Function supports interworking.
 2382              		@ args = 0, pretend = 0, frame = 16
 2383              		@ frame_needed = 1, uses_anonymous_args = 0
 2384 03a4 0DC0A0E1 		mov	ip, sp
 2385              	.LCFI14:
 2386              		.cfi_def_cfa_register 12
 2387 03a8 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2388 03ac 04B04CE2 		sub	fp, ip, #4
 2389              		.cfi_offset 14, -8
 2390              		.cfi_offset 13, -12
 2391              		.cfi_offset 11, -16
 2392              	.LCFI15:
 2393              		.cfi_def_cfa 11, 4
 2394 03b0 10D04DE2 		sub	sp, sp, #16
 2395 03b4 18000BE5 		str	r0, [fp, #-24]
 2396 03b8 1C100BE5 		str	r1, [fp, #-28]
 130:../ts.c       **** 	uint16 Vx, Vy;
 131:../ts.c       **** 
 132:../ts.c       **** 	//Esperar a que PG[2]=0
 133:../ts.c       **** 	while(rPDATG & (1 << 2));
 2397              		.loc 1 133 0
 2398 03bc 0000A0E1 		mov	r0, r0	@ nop
 2399              	.L26:
 2400              		.loc 1 133 0 is_stmt 0 discriminator 1
 2401 03c0 70309FE5 		ldr	r3, .L28
 2402 03c4 003093E5 		ldr	r3, [r3, #0]
 2403 03c8 043003E2 		and	r3, r3, #4
 2404 03cc 000053E3 		cmp	r3, #0
 2405 03d0 FAFFFF1A 		bne	.L26
 134:../ts.c       **** 
 135:../ts.c       **** 	//Esperar TS_DOWN_DELAY
 136:../ts.c       **** 	Delay(TS_DOWN_DELAY);
 2406              		.loc 1 136 0 is_stmt 1
 2407 03d4 6400A0E3 		mov	r0, #100
 2408 03d8 FEFFFFEB 		bl	Delay
 137:../ts.c       **** 
 138:../ts.c       **** 	ts_scan(&Vx, &Vy);
 2409              		.loc 1 138 0
 2410 03dc 0E204BE2 		sub	r2, fp, #14
 2411 03e0 10304BE2 		sub	r3, fp, #16
 2412 03e4 0200A0E1 		mov	r0, r2
 2413 03e8 0310A0E1 		mov	r1, r3
 2414 03ec 120000EB 		bl	ts_scan
 139:../ts.c       **** 	ts_sample2coord(Vx, Vy, x, y);
 2415              		.loc 1 139 0
 2416 03f0 BE205BE1 		ldrh	r2, [fp, #-14]
 2417 03f4 B0315BE1 		ldrh	r3, [fp, #-16]
 2418 03f8 0200A0E1 		mov	r0, r2
 2419 03fc 0310A0E1 		mov	r1, r3
 2420 0400 18201BE5 		ldr	r2, [fp, #-24]
 2421 0404 1C301BE5 		ldr	r3, [fp, #-28]
 2422 0408 410000EB 		bl	ts_sample2coord
 140:../ts.c       **** 
 141:../ts.c       **** 	//Esperar a que PG[2]=1
 142:../ts.c       **** 	while(!(rPDATG & (1 << 2)));
 2423              		.loc 1 142 0
 2424 040c 0000A0E1 		mov	r0, r0	@ nop
 2425              	.L27:
 2426              		.loc 1 142 0 is_stmt 0 discriminator 1
 2427 0410 20309FE5 		ldr	r3, .L28
 2428 0414 003093E5 		ldr	r3, [r3, #0]
 2429 0418 043003E2 		and	r3, r3, #4
 2430 041c 000053E3 		cmp	r3, #0
 2431 0420 FAFFFF0A 		beq	.L27
 143:../ts.c       **** 
 144:../ts.c       **** 	//Esperar TS_UP_DELAY
 145:../ts.c       **** 	Delay(TS_UP_DELAY);
 2432              		.loc 1 145 0 is_stmt 1
 2433 0424 C800A0E3 		mov	r0, #200
 2434 0428 FEFFFFEB 		bl	Delay
 146:../ts.c       **** }
 2435              		.loc 1 146 0
 2436 042c 0CD04BE2 		sub	sp, fp, #12
 2437 0430 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2438 0434 1EFF2FE1 		bx	lr
 2439              	.L29:
 2440              		.align	2
 2441              	.L28:
 2442 0438 4400D201 		.word	30539844
 2443              		.cfi_endproc
 2444              	.LFE7:
 2446              		.align	2
 2448              	ts_scan:
 2449              	.LFB8:
 147:../ts.c       **** 
 148:../ts.c       **** static void ts_scan( uint16 *Vx, uint16 *Vy )
 149:../ts.c       **** {
 2450              		.loc 1 149 0
 2451              		.cfi_startproc
 2452              		@ Function supports interworking.
 2453              		@ args = 0, pretend = 0, frame = 8
 2454              		@ frame_needed = 1, uses_anonymous_args = 0
 2455 043c 0DC0A0E1 		mov	ip, sp
 2456              	.LCFI16:
 2457              		.cfi_def_cfa_register 12
 2458 0440 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2459 0444 04B04CE2 		sub	fp, ip, #4
 2460              		.cfi_offset 14, -8
 2461              		.cfi_offset 13, -12
 2462              		.cfi_offset 11, -16
 2463              	.LCFI17:
 2464              		.cfi_def_cfa 11, 4
 2465 0448 08D04DE2 		sub	sp, sp, #8
 2466 044c 10000BE5 		str	r0, [fp, #-16]
 2467 0450 14100BE5 		str	r1, [fp, #-20]
 150:../ts.c       **** 	//PE[7..4] = (0,1,1,0)
 151:../ts.c       ****     rPDATE &= ~(0xf << 4);
 2468              		.loc 1 151 0
 2469 0454 B4309FE5 		ldr	r3, .L31
 2470 0458 B0209FE5 		ldr	r2, .L31
 2471 045c 002092E5 		ldr	r2, [r2, #0]
 2472 0460 F020C2E3 		bic	r2, r2, #240
 2473 0464 002083E5 		str	r2, [r3, #0]
 152:../ts.c       ****     rPDATE |= 0b0110 << 4;
 2474              		.loc 1 152 0
 2475 0468 A0309FE5 		ldr	r3, .L31
 2476 046c 9C209FE5 		ldr	r2, .L31
 2477 0470 002092E5 		ldr	r2, [r2, #0]
 2478 0474 602082E3 		orr	r2, r2, #96
 2479 0478 002083E5 		str	r2, [r3, #0]
 153:../ts.c       **** 
 154:../ts.c       ****     //leer Vx por canal AIN1
 155:../ts.c       **** 
 156:../ts.c       ****     *Vx = adc_getSample( ADC_AIN1 );
 2480              		.loc 1 156 0
 2481 047c 0100A0E3 		mov	r0, #1
 2482 0480 FEFFFFEB 		bl	adc_getSample
 2483 0484 0030A0E1 		mov	r3, r0
 2484 0488 0320A0E1 		mov	r2, r3
 2485 048c 10301BE5 		ldr	r3, [fp, #-16]
 2486 0490 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 157:../ts.c       **** 
 158:../ts.c       **** 	//PE[7..4] = (1,0,0,1)
 159:../ts.c       ****     rPDATE &= ~(0xf << 4);
 2487              		.loc 1 159 0
 2488 0494 74309FE5 		ldr	r3, .L31
 2489 0498 70209FE5 		ldr	r2, .L31
 2490 049c 002092E5 		ldr	r2, [r2, #0]
 2491 04a0 F020C2E3 		bic	r2, r2, #240
 2492 04a4 002083E5 		str	r2, [r3, #0]
 160:../ts.c       ****     rPDATE |= 0b1001 << 4;
 2493              		.loc 1 160 0
 2494 04a8 60309FE5 		ldr	r3, .L31
 2495 04ac 5C209FE5 		ldr	r2, .L31
 2496 04b0 002092E5 		ldr	r2, [r2, #0]
 2497 04b4 902082E3 		orr	r2, r2, #144
 2498 04b8 002083E5 		str	r2, [r3, #0]
 161:../ts.c       **** 
 162:../ts.c       ****     //leer Vy por canal AIN0
 163:../ts.c       **** 
 164:../ts.c       ****     *Vy = adc_getSample( ADC_AIN0 );
 2499              		.loc 1 164 0
 2500 04bc 0000A0E3 		mov	r0, #0
 2501 04c0 FEFFFFEB 		bl	adc_getSample
 2502 04c4 0030A0E1 		mov	r3, r0
 2503 04c8 0320A0E1 		mov	r2, r3
 2504 04cc 14301BE5 		ldr	r3, [fp, #-20]
 2505 04d0 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 165:../ts.c       **** 
 166:../ts.c       **** 	//PE[7..4] = (1,0,1,1)
 167:../ts.c       ****     rPDATE &= ~(0xf << 4);
 2506              		.loc 1 167 0
 2507 04d4 34309FE5 		ldr	r3, .L31
 2508 04d8 30209FE5 		ldr	r2, .L31
 2509 04dc 002092E5 		ldr	r2, [r2, #0]
 2510 04e0 F020C2E3 		bic	r2, r2, #240
 2511 04e4 002083E5 		str	r2, [r3, #0]
 168:../ts.c       ****     rPDATE |= 0b1011 << 4;
 2512              		.loc 1 168 0
 2513 04e8 20309FE5 		ldr	r3, .L31
 2514 04ec 1C209FE5 		ldr	r2, .L31
 2515 04f0 002092E5 		ldr	r2, [r2, #0]
 2516 04f4 B02082E3 		orr	r2, r2, #176
 2517 04f8 002083E5 		str	r2, [r3, #0]
 169:../ts.c       **** 
 170:../ts.c       ****     Delay(1);
 2518              		.loc 1 170 0
 2519 04fc 0100A0E3 		mov	r0, #1
 2520 0500 FEFFFFEB 		bl	Delay
 171:../ts.c       **** }
 2521              		.loc 1 171 0
 2522 0504 0CD04BE2 		sub	sp, fp, #12
 2523 0508 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2524 050c 1EFF2FE1 		bx	lr
 2525              	.L32:
 2526              		.align	2
 2527              	.L31:
 2528 0510 2C00D201 		.word	30539820
 2529              		.cfi_endproc
 2530              	.LFE8:
 2532              		.global	__aeabi_idiv
 2533              		.align	2
 2535              	ts_sample2coord:
 2536              	.LFB9:
 172:../ts.c       **** 
 173:../ts.c       **** static void ts_sample2coord( uint16 Vx, uint16 Vy, uint16 *x, uint16 *y )
 174:../ts.c       **** {
 2537              		.loc 1 174 0
 2538              		.cfi_startproc
 2539              		@ Function supports interworking.
 2540              		@ args = 0, pretend = 0, frame = 16
 2541              		@ frame_needed = 1, uses_anonymous_args = 0
 2542 0514 0DC0A0E1 		mov	ip, sp
 2543              	.LCFI18:
 2544              		.cfi_def_cfa_register 12
 2545 0518 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2546 051c 04B04CE2 		sub	fp, ip, #4
 2547              		.cfi_offset 14, -8
 2548              		.cfi_offset 13, -12
 2549              		.cfi_offset 11, -16
 2550              	.LCFI19:
 2551              		.cfi_def_cfa 11, 4
 2552 0520 10D04DE2 		sub	sp, sp, #16
 2553 0524 14200BE5 		str	r2, [fp, #-20]
 2554 0528 18300BE5 		str	r3, [fp, #-24]
 2555 052c BE004BE1 		strh	r0, [fp, #-14]	@ movhi
 2556 0530 B0114BE1 		strh	r1, [fp, #-16]	@ movhi
 175:../ts.c       **** 	//Interpolate Vx
 176:../ts.c       ****     if( Vx < Vxmin )
 2557              		.loc 1 176 0
 2558 0534 68319FE5 		ldr	r3, .L40
 2559 0538 B030D3E1 		ldrh	r3, [r3, #0]
 2560 053c BE205BE1 		ldrh	r2, [fp, #-14]
 2561 0540 030052E1 		cmp	r2, r3
 2562 0544 0300002A 		bcs	.L34
 177:../ts.c       ****         *x = 0;
 2563              		.loc 1 177 0
 2564 0548 14301BE5 		ldr	r3, [fp, #-20]
 2565 054c 0020A0E3 		mov	r2, #0
 2566 0550 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 2567 0554 1F0000EA 		b	.L35
 2568              	.L34:
 178:../ts.c       ****     else if( Vx > Vxmax )
 2569              		.loc 1 178 0
 2570 0558 48319FE5 		ldr	r3, .L40+4
 2571 055c B030D3E1 		ldrh	r3, [r3, #0]
 2572 0560 BE205BE1 		ldrh	r2, [fp, #-14]
 2573 0564 030052E1 		cmp	r2, r3
 2574 0568 0300009A 		bls	.L36
 179:../ts.c       ****         *x = LCD_WIDTH-1;
 2575              		.loc 1 179 0
 2576 056c 14301BE5 		ldr	r3, [fp, #-20]
 2577 0570 34219FE5 		ldr	r2, .L40+8
 2578 0574 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 2579 0578 160000EA 		b	.L35
 2580              	.L36:
 180:../ts.c       ****     else
 181:../ts.c       ****         *x = LCD_WIDTH*(Vx-Vxmin) / (Vxmax-Vxmin);
 2581              		.loc 1 181 0
 2582 057c BE205BE1 		ldrh	r2, [fp, #-14]
 2583 0580 1C319FE5 		ldr	r3, .L40
 2584 0584 B030D3E1 		ldrh	r3, [r3, #0]
 2585 0588 022063E0 		rsb	r2, r3, r2
 2586 058c 0230A0E1 		mov	r3, r2
 2587 0590 0331A0E1 		mov	r3, r3, asl #2
 2588 0594 023083E0 		add	r3, r3, r2
 2589 0598 0333A0E1 		mov	r3, r3, asl #6
 2590 059c 0320A0E1 		mov	r2, r3
 2591 05a0 00319FE5 		ldr	r3, .L40+4
 2592 05a4 B030D3E1 		ldrh	r3, [r3, #0]
 2593 05a8 0310A0E1 		mov	r1, r3
 2594 05ac F0309FE5 		ldr	r3, .L40
 2595 05b0 B030D3E1 		ldrh	r3, [r3, #0]
 2596 05b4 013063E0 		rsb	r3, r3, r1
 2597 05b8 0200A0E1 		mov	r0, r2
 2598 05bc 0310A0E1 		mov	r1, r3
 2599 05c0 FEFFFFEB 		bl	__aeabi_idiv
 2600 05c4 0030A0E1 		mov	r3, r0
 2601 05c8 0338A0E1 		mov	r3, r3, asl #16
 2602 05cc 2328A0E1 		mov	r2, r3, lsr #16
 2603 05d0 14301BE5 		ldr	r3, [fp, #-20]
 2604 05d4 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 2605              	.L35:
 182:../ts.c       **** 
 183:../ts.c       ****     //Interpolate Vy
 184:../ts.c       ****     if( Vy < Vymin )
 2606              		.loc 1 184 0
 2607 05d8 D0309FE5 		ldr	r3, .L40+12
 2608 05dc B030D3E1 		ldrh	r3, [r3, #0]
 2609 05e0 B0215BE1 		ldrh	r2, [fp, #-16]
 2610 05e4 030052E1 		cmp	r2, r3
 2611 05e8 0300002A 		bcs	.L37
 185:../ts.c       ****         *y = 0;
 2612              		.loc 1 185 0
 2613 05ec 18301BE5 		ldr	r3, [fp, #-24]
 2614 05f0 0020A0E3 		mov	r2, #0
 2615 05f4 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 2616 05f8 1F0000EA 		b	.L38
 2617              	.L37:
 186:../ts.c       ****     else if( Vy > Vymax )
 2618              		.loc 1 186 0
 2619 05fc B0309FE5 		ldr	r3, .L40+16
 2620 0600 B030D3E1 		ldrh	r3, [r3, #0]
 2621 0604 B0215BE1 		ldrh	r2, [fp, #-16]
 2622 0608 030052E1 		cmp	r2, r3
 2623 060c 0300009A 		bls	.L39
 187:../ts.c       ****         *y = LCD_HEIGHT-1;
 2624              		.loc 1 187 0
 2625 0610 18301BE5 		ldr	r3, [fp, #-24]
 2626 0614 EF20A0E3 		mov	r2, #239
 2627 0618 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 2628 061c 160000EA 		b	.L38
 2629              	.L39:
 188:../ts.c       ****     else
 189:../ts.c       ****         *y = LCD_HEIGHT*(Vy-Vymin) / (Vymax-Vymin);
 2630              		.loc 1 189 0
 2631 0620 B0215BE1 		ldrh	r2, [fp, #-16]
 2632 0624 84309FE5 		ldr	r3, .L40+12
 2633 0628 B030D3E1 		ldrh	r3, [r3, #0]
 2634 062c 022063E0 		rsb	r2, r3, r2
 2635 0630 0230A0E1 		mov	r3, r2
 2636 0634 0332A0E1 		mov	r3, r3, asl #4
 2637 0638 033062E0 		rsb	r3, r2, r3
 2638 063c 0332A0E1 		mov	r3, r3, asl #4
 2639 0640 0320A0E1 		mov	r2, r3
 2640 0644 68309FE5 		ldr	r3, .L40+16
 2641 0648 B030D3E1 		ldrh	r3, [r3, #0]
 2642 064c 0310A0E1 		mov	r1, r3
 2643 0650 58309FE5 		ldr	r3, .L40+12
 2644 0654 B030D3E1 		ldrh	r3, [r3, #0]
 2645 0658 013063E0 		rsb	r3, r3, r1
 2646 065c 0200A0E1 		mov	r0, r2
 2647 0660 0310A0E1 		mov	r1, r3
 2648 0664 FEFFFFEB 		bl	__aeabi_idiv
 2649 0668 0030A0E1 		mov	r3, r0
 2650 066c 0338A0E1 		mov	r3, r3, asl #16
 2651 0670 2328A0E1 		mov	r2, r3, lsr #16
 2652 0674 18301BE5 		ldr	r3, [fp, #-24]
 2653 0678 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 2654              	.L38:
 190:../ts.c       **** 
 191:../ts.c       ****     //Vy crece cuando y decrece
 192:../ts.c       ****     *y = LCD_HEIGHT - *y;
 2655              		.loc 1 192 0
 2656 067c 18301BE5 		ldr	r3, [fp, #-24]
 2657 0680 B030D3E1 		ldrh	r3, [r3, #0]
 2658 0684 F03063E2 		rsb	r3, r3, #240
 2659 0688 0338A0E1 		mov	r3, r3, asl #16
 2660 068c 2328A0E1 		mov	r2, r3, lsr #16
 2661 0690 18301BE5 		ldr	r3, [fp, #-24]
 2662 0694 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 193:../ts.c       **** }
 2663              		.loc 1 193 0
 2664 0698 0CD04BE2 		sub	sp, fp, #12
 2665 069c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2666 06a0 1EFF2FE1 		bx	lr
 2667              	.L41:
 2668              		.align	2
 2669              	.L40:
 2670 06a4 00000000 		.word	Vxmin
 2671 06a8 02000000 		.word	Vxmax
 2672 06ac 3F010000 		.word	319
 2673 06b0 04000000 		.word	Vymin
 2674 06b4 06000000 		.word	Vymax
 2675              		.cfi_endproc
 2676              	.LFE9:
 2678              		.align	2
 2679              		.global	ts_open
 2681              	ts_open:
 2682              	.LFB10:
 194:../ts.c       **** 
 195:../ts.c       **** void ts_open( void (*isr)(void) )
 196:../ts.c       **** {
 2683              		.loc 1 196 0
 2684              		.cfi_startproc
 2685              		@ Function supports interworking.
 2686              		@ args = 0, pretend = 0, frame = 8
 2687              		@ frame_needed = 1, uses_anonymous_args = 0
 2688 06b8 0DC0A0E1 		mov	ip, sp
 2689              	.LCFI20:
 2690              		.cfi_def_cfa_register 12
 2691 06bc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2692 06c0 04B04CE2 		sub	fp, ip, #4
 2693              		.cfi_offset 14, -8
 2694              		.cfi_offset 13, -12
 2695              		.cfi_offset 11, -16
 2696              	.LCFI21:
 2697              		.cfi_def_cfa 11, 4
 2698 06c4 08D04DE2 		sub	sp, sp, #8
 2699 06c8 10000BE5 		str	r0, [fp, #-16]
 197:../ts.c       **** 	pISR_EINT2 = (unsigned) isr;
 2700              		.loc 1 197 0
 2701 06cc 20309FE5 		ldr	r3, .L43
 2702 06d0 10201BE5 		ldr	r2, [fp, #-16]
 2703 06d4 002083E5 		str	r2, [r3, #0]
 198:../ts.c       **** 	ic_cleanflag(INT_EINT2);
 2704              		.loc 1 198 0
 2705 06d8 1700A0E3 		mov	r0, #23
 2706 06dc FEFFFFEB 		bl	ic_cleanflag
 199:../ts.c       **** 	ic_enable(INT_EINT2);
 2707              		.loc 1 199 0
 2708 06e0 1700A0E3 		mov	r0, #23
 2709 06e4 FEFFFFEB 		bl	ic_enable
 200:../ts.c       **** }
 2710              		.loc 1 200 0
 2711 06e8 0CD04BE2 		sub	sp, fp, #12
 2712 06ec 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2713 06f0 1EFF2FE1 		bx	lr
 2714              	.L44:
 2715              		.align	2
 2716              	.L43:
 2717 06f4 7CFF7F0C 		.word	209715068
 2718              		.cfi_endproc
 2719              	.LFE10:
 2721              		.align	2
 2722              		.global	ts_close
 2724              	ts_close:
 2725              	.LFB11:
 201:../ts.c       **** 
 202:../ts.c       **** void ts_close( void )
 203:../ts.c       **** {
 2726              		.loc 1 203 0
 2727              		.cfi_startproc
 2728              		@ Function supports interworking.
 2729              		@ args = 0, pretend = 0, frame = 0
 2730              		@ frame_needed = 1, uses_anonymous_args = 0
 2731 06f8 0DC0A0E1 		mov	ip, sp
 2732              	.LCFI22:
 2733              		.cfi_def_cfa_register 12
 2734 06fc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2735 0700 04B04CE2 		sub	fp, ip, #4
 2736              		.cfi_offset 14, -8
 2737              		.cfi_offset 13, -12
 2738              		.cfi_offset 11, -16
 2739              	.LCFI23:
 2740              		.cfi_def_cfa 11, 4
 204:../ts.c       ****     ic_disable(INT_EINT2);
 2741              		.loc 1 204 0
 2742 0704 1700A0E3 		mov	r0, #23
 2743 0708 FEFFFFEB 		bl	ic_disable
 205:../ts.c       ****     pISR_EINT2 = (unsigned) isr_TS_dummy;
 2744              		.loc 1 205 0
 2745 070c 10309FE5 		ldr	r3, .L46
 2746 0710 10209FE5 		ldr	r2, .L46+4
 2747 0714 002083E5 		str	r2, [r3, #0]
 206:../ts.c       **** }
 2748              		.loc 1 206 0
 2749 0718 0CD04BE2 		sub	sp, fp, #12
 2750 071c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2751 0720 1EFF2FE1 		bx	lr
 2752              	.L47:
 2753              		.align	2
 2754              	.L46:
 2755 0724 7CFF7F0C 		.word	209715068
 2756 0728 00000000 		.word	isr_TS_dummy
 2757              		.cfi_endproc
 2758              	.LFE11:
 2760              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 ts.c
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:1870   .bss:00000000 $d
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:1871   .bss:00000000 Vxmin
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:1874   .bss:00000002 Vxmax
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:1877   .bss:00000004 Vymin
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:1880   .bss:00000006 Vymax
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:1882   .bss:00000008 state
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:1885   .text:00000000 $a
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:1888   .text:00000000 isr_TS_dummy
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:1924   .text:00000028 ts_init
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:1995   .text:000000bc ts_on
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:2172   .text:00000178 ts_calibrate
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:1987   .text:000000b4 $d
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:1992   .text:000000bc $a
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:2025   .text:000000e4 $d
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:2029   .text:000000e8 $a
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:2032   .text:000000e8 ts_off
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:2062   .text:00000110 $d
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:2066   .text:00000114 $a
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:2069   .text:00000114 ts_status
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:2097   .text:00000138 $d
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:2101   .text:0000013c $a
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:2104   .text:0000013c ts_pressed
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:2137   .text:00000174 $d
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:2142   .rodata:00000000 $d
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:2170   .text:00000178 $a
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:2448   .text:0000043c ts_scan
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:2377   .text:000003a4 ts_getpos
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:2355   .text:00000364 $d
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:2374   .text:000003a4 $a
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:2535   .text:00000514 ts_sample2coord
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:2442   .text:00000438 $d
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:2446   .text:0000043c $a
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:2528   .text:00000510 $d
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:2533   .text:00000514 $a
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:2670   .text:000006a4 $d
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:2678   .text:000006b8 $a
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:2681   .text:000006b8 ts_open
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:2717   .text:000006f4 $d
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:2721   .text:000006f8 $a
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:2724   .text:000006f8 ts_close
C:\Users\Pedro\AppData\Local\Temp\ccVdfDjb.s:2755   .text:00000724 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
ic_cleanflag
lcd_init
adc_init
Delay
portG_conf
adc_on
adc_off
uart0_puts
lcd_on
lcd_clear_color
lcd_draw_box
uart0_putint
lcd_clear
adc_getSample
__aeabi_idiv
ic_enable
ic_disable

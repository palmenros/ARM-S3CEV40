   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"os_q.c"
  21              	.Ltext0:
  22              		.file 1 "../kernel/os_core/os_q.c"
 1630              		.align	2
 1631              		.global	OSQAccept
 1633              	OSQAccept:
 1634              	.LFB0:
   1:../kernel/os_core/os_q.c **** /*
   2:../kernel/os_core/os_q.c **** ***************************************************************************************************
   3:../kernel/os_core/os_q.c **** *                                                uC/OS-II
   4:../kernel/os_core/os_q.c **** *                                          The Real-Time Kernel
   5:../kernel/os_core/os_q.c **** *                                        MESSAGE QUEUE MANAGEMENT
   6:../kernel/os_core/os_q.c **** *
   7:../kernel/os_core/os_q.c **** *                          (c) Copyright 1992-2003, Jean J. Labrosse, Weston, FL
   8:../kernel/os_core/os_q.c **** *                                           All Rights Reserved
   9:../kernel/os_core/os_q.c **** *
  10:../kernel/os_core/os_q.c **** * File    : OS_Q.C
  11:../kernel/os_core/os_q.c **** * By      : Jean J. Labrosse
  12:../kernel/os_core/os_q.c **** * Version : V2.76
  13:../kernel/os_core/os_q.c **** ***************************************************************************************************
  14:../kernel/os_core/os_q.c **** */
  15:../kernel/os_core/os_q.c **** 
  16:../kernel/os_core/os_q.c **** #ifndef  OS_MASTER_FILE
  17:../kernel/os_core/os_q.c **** #include "ucos_ii.h"
  18:../kernel/os_core/os_q.c **** #endif
  19:../kernel/os_core/os_q.c **** 
  20:../kernel/os_core/os_q.c **** #if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
  21:../kernel/os_core/os_q.c **** /*
  22:../kernel/os_core/os_q.c **** ***************************************************************************************************
  23:../kernel/os_core/os_q.c **** *                                      ACCEPT MESSAGE FROM QUEUE
  24:../kernel/os_core/os_q.c **** *
  25:../kernel/os_core/os_q.c **** * Description: This function checks the queue to see if a message is available.  Unlike OSQPend(),
  26:../kernel/os_core/os_q.c **** *              OSQAccept() does not suspend the calling task if a message is not available.
  27:../kernel/os_core/os_q.c **** *
  28:../kernel/os_core/os_q.c **** * Arguments  : pevent        is a pointer to the event control block
  29:../kernel/os_core/os_q.c **** *
  30:../kernel/os_core/os_q.c **** *              err           is a pointer to where an error message will be deposited.  Possible er
  31:../kernel/os_core/os_q.c **** *                            messages are:
  32:../kernel/os_core/os_q.c **** *
  33:../kernel/os_core/os_q.c **** *                            OS_NO_ERR           The call was successful and your task received a
  34:../kernel/os_core/os_q.c **** *                                                message.
  35:../kernel/os_core/os_q.c **** *                            OS_ERR_EVENT_TYPE   You didn't pass a pointer to a queue
  36:../kernel/os_core/os_q.c **** *                            OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer
  37:../kernel/os_core/os_q.c **** *                            OS_Q_EMPTY          The queue did not contain any messages
  38:../kernel/os_core/os_q.c **** *
  39:../kernel/os_core/os_q.c **** * Returns    : != (void *)0  is the message in the queue if one is available.  The message is remov
  40:../kernel/os_core/os_q.c **** *                            from the so the next time OSQAccept() is called, the queue will contai
  41:../kernel/os_core/os_q.c **** *                            one less entry.
  42:../kernel/os_core/os_q.c **** *              == (void *)0  if you received a NULL pointer message
  43:../kernel/os_core/os_q.c **** *                            if the queue is empty or,
  44:../kernel/os_core/os_q.c **** *                            if 'pevent' is a NULL pointer or,
  45:../kernel/os_core/os_q.c **** *                            if you passed an invalid event type
  46:../kernel/os_core/os_q.c **** *
  47:../kernel/os_core/os_q.c **** * Note(s)    : As of V2.60, you can now pass NULL pointers through queues.  Because of this, the ar
  48:../kernel/os_core/os_q.c **** *              'err' has been added to the API to tell you about the outcome of the call.
  49:../kernel/os_core/os_q.c **** ***************************************************************************************************
  50:../kernel/os_core/os_q.c **** */
  51:../kernel/os_core/os_q.c **** 
  52:../kernel/os_core/os_q.c **** #if OS_Q_ACCEPT_EN > 0
  53:../kernel/os_core/os_q.c **** void  *OSQAccept (OS_EVENT *pevent, INT8U *err)
  54:../kernel/os_core/os_q.c **** {
 1635              		.loc 1 54 0
 1636              		.cfi_startproc
 1637              		@ Function supports interworking.
 1638              		@ args = 0, pretend = 0, frame = 16
 1639              		@ frame_needed = 1, uses_anonymous_args = 0
 1640 0000 0DC0A0E1 		mov	ip, sp
 1641              	.LCFI0:
 1642              		.cfi_def_cfa_register 12
 1643 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1644 0008 04B04CE2 		sub	fp, ip, #4
 1645              		.cfi_offset 14, -8
 1646              		.cfi_offset 13, -12
 1647              		.cfi_offset 11, -16
 1648              	.LCFI1:
 1649              		.cfi_def_cfa 11, 4
 1650 000c 10D04DE2 		sub	sp, sp, #16
 1651 0010 18000BE5 		str	r0, [fp, #-24]
 1652 0014 1C100BE5 		str	r1, [fp, #-28]
  55:../kernel/os_core/os_q.c ****     void      *msg;
  56:../kernel/os_core/os_q.c ****     OS_Q      *pq;
  57:../kernel/os_core/os_q.c **** #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register       
  58:../kernel/os_core/os_q.c ****     OS_CPU_SR  cpu_sr;
  59:../kernel/os_core/os_q.c **** 
  60:../kernel/os_core/os_q.c **** 
  61:../kernel/os_core/os_q.c **** 
  62:../kernel/os_core/os_q.c ****     cpu_sr = 0;                                  /* Prevent compiler warning                       
  63:../kernel/os_core/os_q.c **** #endif    
  64:../kernel/os_core/os_q.c **** #if OS_ARG_CHK_EN > 0
  65:../kernel/os_core/os_q.c ****     if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                              
 1653              		.loc 1 65 0
 1654 0018 18301BE5 		ldr	r3, [fp, #-24]
 1655 001c 000053E3 		cmp	r3, #0
 1656 0020 0400001A 		bne	.L2
  66:../kernel/os_core/os_q.c ****         *err = OS_ERR_PEVENT_NULL;
 1657              		.loc 1 66 0
 1658 0024 1C301BE5 		ldr	r3, [fp, #-28]
 1659 0028 0420A0E3 		mov	r2, #4
 1660 002c 0020C3E5 		strb	r2, [r3, #0]
  67:../kernel/os_core/os_q.c ****         return ((void *)0);
 1661              		.loc 1 67 0
 1662 0030 0030A0E3 		mov	r3, #0
 1663 0034 370000EA 		b	.L3
 1664              	.L2:
  68:../kernel/os_core/os_q.c ****     }
  69:../kernel/os_core/os_q.c **** #endif
  70:../kernel/os_core/os_q.c ****     if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                      
 1665              		.loc 1 70 0
 1666 0038 18301BE5 		ldr	r3, [fp, #-24]
 1667 003c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1668 0040 020053E3 		cmp	r3, #2
 1669 0044 0400000A 		beq	.L4
  71:../kernel/os_core/os_q.c ****         *err = OS_ERR_EVENT_TYPE;
 1670              		.loc 1 71 0
 1671 0048 1C301BE5 		ldr	r3, [fp, #-28]
 1672 004c 0120A0E3 		mov	r2, #1
 1673 0050 0020C3E5 		strb	r2, [r3, #0]
  72:../kernel/os_core/os_q.c ****         return ((void *)0);
 1674              		.loc 1 72 0
 1675 0054 0030A0E3 		mov	r3, #0
 1676 0058 2E0000EA 		b	.L3
 1677              	.L4:
  73:../kernel/os_core/os_q.c ****     }
  74:../kernel/os_core/os_q.c ****     OS_ENTER_CRITICAL();
 1678              		.loc 1 74 0
 1679              	@ 74 "../kernel/os_core/os_q.c" 1
 1680 005c 00000FE1 		mrs   r0, cpsr
 1681              	@ 0 "" 2
 1682              	@ 74 "../kernel/os_core/os_q.c" 1
 1683 0060 04002DE5 		stmfd sp!, {r0}
 1684              	@ 0 "" 2
 1685              	@ 74 "../kernel/os_core/os_q.c" 1
 1686 0064 C00080E3 		orr   r0, r0, #0b11000000
 1687              	@ 0 "" 2
 1688              	@ 74 "../kernel/os_core/os_q.c" 1
 1689 0068 00F021E1 		msr   cpsr_c, r0
 1690              	@ 0 "" 2
  75:../kernel/os_core/os_q.c ****     pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                   
 1691              		.loc 1 75 0
 1692 006c 18301BE5 		ldr	r3, [fp, #-24]
 1693 0070 043093E5 		ldr	r3, [r3, #4]
 1694 0074 14300BE5 		str	r3, [fp, #-20]
  76:../kernel/os_core/os_q.c ****     if (pq->OSQEntries > 0) {                    /* See if any messages in the queue               
 1695              		.loc 1 76 0
 1696 0078 14301BE5 		ldr	r3, [fp, #-20]
 1697 007c B631D3E1 		ldrh	r3, [r3, #22]
 1698 0080 000053E3 		cmp	r3, #0
 1699 0084 1B00000A 		beq	.L5
  77:../kernel/os_core/os_q.c ****         msg = *pq->OSQOut++;                     /* Yes, extract oldest message from the queue     
 1700              		.loc 1 77 0
 1701 0088 14301BE5 		ldr	r3, [fp, #-20]
 1702 008c 103093E5 		ldr	r3, [r3, #16]
 1703 0090 002093E5 		ldr	r2, [r3, #0]
 1704 0094 10200BE5 		str	r2, [fp, #-16]
 1705 0098 042083E2 		add	r2, r3, #4
 1706 009c 14301BE5 		ldr	r3, [fp, #-20]
 1707 00a0 102083E5 		str	r2, [r3, #16]
  78:../kernel/os_core/os_q.c ****         pq->OSQEntries--;                        /* Update the number of entries in the queue      
 1708              		.loc 1 78 0
 1709 00a4 14301BE5 		ldr	r3, [fp, #-20]
 1710 00a8 B631D3E1 		ldrh	r3, [r3, #22]
 1711 00ac 013043E2 		sub	r3, r3, #1
 1712 00b0 0338A0E1 		mov	r3, r3, asl #16
 1713 00b4 2328A0E1 		mov	r2, r3, lsr #16
 1714 00b8 14301BE5 		ldr	r3, [fp, #-20]
 1715 00bc B621C3E1 		strh	r2, [r3, #22]	@ movhi
  79:../kernel/os_core/os_q.c ****         if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the qu
 1716              		.loc 1 79 0
 1717 00c0 14301BE5 		ldr	r3, [fp, #-20]
 1718 00c4 102093E5 		ldr	r2, [r3, #16]
 1719 00c8 14301BE5 		ldr	r3, [fp, #-20]
 1720 00cc 083093E5 		ldr	r3, [r3, #8]
 1721 00d0 030052E1 		cmp	r2, r3
 1722 00d4 0300001A 		bne	.L6
  80:../kernel/os_core/os_q.c ****             pq->OSQOut = pq->OSQStart;
 1723              		.loc 1 80 0
 1724 00d8 14301BE5 		ldr	r3, [fp, #-20]
 1725 00dc 042093E5 		ldr	r2, [r3, #4]
 1726 00e0 14301BE5 		ldr	r3, [fp, #-20]
 1727 00e4 102083E5 		str	r2, [r3, #16]
 1728              	.L6:
  81:../kernel/os_core/os_q.c ****         }
  82:../kernel/os_core/os_q.c ****         *err = OS_NO_ERR;
 1729              		.loc 1 82 0
 1730 00e8 1C301BE5 		ldr	r3, [fp, #-28]
 1731 00ec 0020A0E3 		mov	r2, #0
 1732 00f0 0020C3E5 		strb	r2, [r3, #0]
 1733 00f4 040000EA 		b	.L7
 1734              	.L5:
  83:../kernel/os_core/os_q.c ****     } else {
  84:../kernel/os_core/os_q.c ****         *err = OS_Q_EMPTY;
 1735              		.loc 1 84 0
 1736 00f8 1C301BE5 		ldr	r3, [fp, #-28]
 1737 00fc 1F20A0E3 		mov	r2, #31
 1738 0100 0020C3E5 		strb	r2, [r3, #0]
  85:../kernel/os_core/os_q.c ****         msg  = (void *)0;                        /* Queue is empty                                 
 1739              		.loc 1 85 0
 1740 0104 0030A0E3 		mov	r3, #0
 1741 0108 10300BE5 		str	r3, [fp, #-16]
 1742              	.L7:
  86:../kernel/os_core/os_q.c ****     }
  87:../kernel/os_core/os_q.c ****     OS_EXIT_CRITICAL();
 1743              		.loc 1 87 0
 1744              	@ 87 "../kernel/os_core/os_q.c" 1
 1745 010c 04009DE4 		ldmfd sp!, {r0}
 1746              	@ 0 "" 2
 1747              	@ 87 "../kernel/os_core/os_q.c" 1
 1748 0110 00F021E1 		msr   cpsr_c, r0
 1749              	@ 0 "" 2
  88:../kernel/os_core/os_q.c ****     return (msg);                                /* Return message received (or NULL)              
 1750              		.loc 1 88 0
 1751 0114 10301BE5 		ldr	r3, [fp, #-16]
 1752              	.L3:
  89:../kernel/os_core/os_q.c **** }
 1753              		.loc 1 89 0
 1754 0118 0300A0E1 		mov	r0, r3
 1755 011c 0CD04BE2 		sub	sp, fp, #12
 1756 0120 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1757 0124 1EFF2FE1 		bx	lr
 1758              		.cfi_endproc
 1759              	.LFE0:
 1761              		.align	2
 1762              		.global	OSQCreate
 1764              	OSQCreate:
 1765              	.LFB1:
  90:../kernel/os_core/os_q.c **** #endif
  91:../kernel/os_core/os_q.c **** /*$PAGE*/
  92:../kernel/os_core/os_q.c **** /*
  93:../kernel/os_core/os_q.c **** ***************************************************************************************************
  94:../kernel/os_core/os_q.c **** *                                        CREATE A MESSAGE QUEUE
  95:../kernel/os_core/os_q.c **** *
  96:../kernel/os_core/os_q.c **** * Description: This function creates a message queue if free event control blocks are available.
  97:../kernel/os_core/os_q.c **** *
  98:../kernel/os_core/os_q.c **** * Arguments  : start         is a pointer to the base address of the message queue storage area.  T
  99:../kernel/os_core/os_q.c **** *                            storage area MUST be declared as an array of pointers to 'void' as fol
 100:../kernel/os_core/os_q.c **** *
 101:../kernel/os_core/os_q.c **** *                            void *MessageStorage[size]
 102:../kernel/os_core/os_q.c **** *
 103:../kernel/os_core/os_q.c **** *              size          is the number of elements in the storage area
 104:../kernel/os_core/os_q.c **** *
 105:../kernel/os_core/os_q.c **** * Returns    : != (OS_EVENT *)0  is a pointer to the event control clock (OS_EVENT) associated with
 106:../kernel/os_core/os_q.c **** *                                created queue
 107:../kernel/os_core/os_q.c **** *              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
 108:../kernel/os_core/os_q.c **** ***************************************************************************************************
 109:../kernel/os_core/os_q.c **** */
 110:../kernel/os_core/os_q.c **** 
 111:../kernel/os_core/os_q.c **** OS_EVENT  *OSQCreate (void **start, INT16U size)
 112:../kernel/os_core/os_q.c **** {
 1766              		.loc 1 112 0
 1767              		.cfi_startproc
 1768              		@ Function supports interworking.
 1769              		@ args = 0, pretend = 0, frame = 16
 1770              		@ frame_needed = 1, uses_anonymous_args = 0
 1771 0128 0DC0A0E1 		mov	ip, sp
 1772              	.LCFI2:
 1773              		.cfi_def_cfa_register 12
 1774 012c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1775 0130 04B04CE2 		sub	fp, ip, #4
 1776              		.cfi_offset 14, -8
 1777              		.cfi_offset 13, -12
 1778              		.cfi_offset 11, -16
 1779              	.LCFI3:
 1780              		.cfi_def_cfa 11, 4
 1781 0134 10D04DE2 		sub	sp, sp, #16
 1782 0138 18000BE5 		str	r0, [fp, #-24]
 1783 013c 0130A0E1 		mov	r3, r1
 1784 0140 BA314BE1 		strh	r3, [fp, #-26]	@ movhi
 113:../kernel/os_core/os_q.c ****     OS_EVENT  *pevent;
 114:../kernel/os_core/os_q.c ****     OS_Q      *pq;
 115:../kernel/os_core/os_q.c **** #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register       
 116:../kernel/os_core/os_q.c ****     OS_CPU_SR  cpu_sr;
 117:../kernel/os_core/os_q.c **** 
 118:../kernel/os_core/os_q.c **** 
 119:../kernel/os_core/os_q.c **** 
 120:../kernel/os_core/os_q.c ****     cpu_sr = 0;                                  /* Prevent compiler warning                       
 121:../kernel/os_core/os_q.c **** #endif    
 122:../kernel/os_core/os_q.c ****     if (OSIntNesting > 0) {                      /* See if called from ISR ...                     
 1785              		.loc 1 122 0
 1786 0144 88319FE5 		ldr	r3, .L14
 1787 0148 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1788 014c 000053E3 		cmp	r3, #0
 1789 0150 0100000A 		beq	.L9
 123:../kernel/os_core/os_q.c ****         return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                   
 1790              		.loc 1 123 0
 1791 0154 0030A0E3 		mov	r3, #0
 1792 0158 590000EA 		b	.L10
 1793              	.L9:
 124:../kernel/os_core/os_q.c ****     }
 125:../kernel/os_core/os_q.c ****     OS_ENTER_CRITICAL();
 1794              		.loc 1 125 0
 1795              	@ 125 "../kernel/os_core/os_q.c" 1
 1796 015c 00000FE1 		mrs   r0, cpsr
 1797              	@ 0 "" 2
 1798              	@ 125 "../kernel/os_core/os_q.c" 1
 1799 0160 04002DE5 		stmfd sp!, {r0}
 1800              	@ 0 "" 2
 1801              	@ 125 "../kernel/os_core/os_q.c" 1
 1802 0164 C00080E3 		orr   r0, r0, #0b11000000
 1803              	@ 0 "" 2
 1804              	@ 125 "../kernel/os_core/os_q.c" 1
 1805 0168 00F021E1 		msr   cpsr_c, r0
 1806              	@ 0 "" 2
 126:../kernel/os_core/os_q.c ****     pevent = OSEventFreeList;                    /* Get next free event control block              
 1807              		.loc 1 126 0
 1808 016c 64319FE5 		ldr	r3, .L14+4
 1809 0170 003093E5 		ldr	r3, [r3, #0]
 1810 0174 10300BE5 		str	r3, [fp, #-16]
 127:../kernel/os_core/os_q.c ****     if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty         
 1811              		.loc 1 127 0
 1812 0178 58319FE5 		ldr	r3, .L14+4
 1813 017c 003093E5 		ldr	r3, [r3, #0]
 1814 0180 000053E3 		cmp	r3, #0
 1815 0184 0500000A 		beq	.L11
 128:../kernel/os_core/os_q.c ****         OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 1816              		.loc 1 128 0
 1817 0188 48319FE5 		ldr	r3, .L14+4
 1818 018c 003093E5 		ldr	r3, [r3, #0]
 1819 0190 043093E5 		ldr	r3, [r3, #4]
 1820 0194 0320A0E1 		mov	r2, r3
 1821 0198 38319FE5 		ldr	r3, .L14+4
 1822 019c 002083E5 		str	r2, [r3, #0]
 1823              	.L11:
 129:../kernel/os_core/os_q.c ****     }
 130:../kernel/os_core/os_q.c ****     OS_EXIT_CRITICAL();
 1824              		.loc 1 130 0
 1825              	@ 130 "../kernel/os_core/os_q.c" 1
 1826 01a0 04009DE4 		ldmfd sp!, {r0}
 1827              	@ 0 "" 2
 1828              	@ 130 "../kernel/os_core/os_q.c" 1
 1829 01a4 00F021E1 		msr   cpsr_c, r0
 1830              	@ 0 "" 2
 131:../kernel/os_core/os_q.c ****     if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block          
 1831              		.loc 1 131 0
 1832 01a8 10301BE5 		ldr	r3, [fp, #-16]
 1833 01ac 000053E3 		cmp	r3, #0
 1834 01b0 4200000A 		beq	.L12
 132:../kernel/os_core/os_q.c ****         OS_ENTER_CRITICAL();
 1835              		.loc 1 132 0
 1836              	@ 132 "../kernel/os_core/os_q.c" 1
 1837 01b4 00000FE1 		mrs   r0, cpsr
 1838              	@ 0 "" 2
 1839              	@ 132 "../kernel/os_core/os_q.c" 1
 1840 01b8 04002DE5 		stmfd sp!, {r0}
 1841              	@ 0 "" 2
 1842              	@ 132 "../kernel/os_core/os_q.c" 1
 1843 01bc C00080E3 		orr   r0, r0, #0b11000000
 1844              	@ 0 "" 2
 1845              	@ 132 "../kernel/os_core/os_q.c" 1
 1846 01c0 00F021E1 		msr   cpsr_c, r0
 1847              	@ 0 "" 2
 133:../kernel/os_core/os_q.c ****         pq = OSQFreeList;                        /* Get a free queue control block                 
 1848              		.loc 1 133 0
 1849 01c4 10319FE5 		ldr	r3, .L14+8
 1850 01c8 003093E5 		ldr	r3, [r3, #0]
 1851 01cc 14300BE5 		str	r3, [fp, #-20]
 134:../kernel/os_core/os_q.c ****         if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?    
 1852              		.loc 1 134 0
 1853 01d0 14301BE5 		ldr	r3, [fp, #-20]
 1854 01d4 000053E3 		cmp	r3, #0
 1855 01d8 2D00000A 		beq	.L13
 135:../kernel/os_core/os_q.c ****             OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next 
 1856              		.loc 1 135 0
 1857 01dc F8309FE5 		ldr	r3, .L14+8
 1858 01e0 003093E5 		ldr	r3, [r3, #0]
 1859 01e4 002093E5 		ldr	r2, [r3, #0]
 1860 01e8 EC309FE5 		ldr	r3, .L14+8
 1861 01ec 002083E5 		str	r2, [r3, #0]
 136:../kernel/os_core/os_q.c ****             OS_EXIT_CRITICAL();
 1862              		.loc 1 136 0
 1863              	@ 136 "../kernel/os_core/os_q.c" 1
 1864 01f0 04009DE4 		ldmfd sp!, {r0}
 1865              	@ 0 "" 2
 1866              	@ 136 "../kernel/os_core/os_q.c" 1
 1867 01f4 00F021E1 		msr   cpsr_c, r0
 1868              	@ 0 "" 2
 137:../kernel/os_core/os_q.c ****             pq->OSQStart           = start;               /*      Initialize the queue             
 1869              		.loc 1 137 0
 1870 01f8 14301BE5 		ldr	r3, [fp, #-20]
 1871 01fc 18201BE5 		ldr	r2, [fp, #-24]
 1872 0200 042083E5 		str	r2, [r3, #4]
 138:../kernel/os_core/os_q.c ****             pq->OSQEnd             = &start[size];
 1873              		.loc 1 138 0
 1874 0204 BA315BE1 		ldrh	r3, [fp, #-26]
 1875 0208 0331A0E1 		mov	r3, r3, asl #2
 1876 020c 18201BE5 		ldr	r2, [fp, #-24]
 1877 0210 032082E0 		add	r2, r2, r3
 1878 0214 14301BE5 		ldr	r3, [fp, #-20]
 1879 0218 082083E5 		str	r2, [r3, #8]
 139:../kernel/os_core/os_q.c ****             pq->OSQIn              = start;
 1880              		.loc 1 139 0
 1881 021c 14301BE5 		ldr	r3, [fp, #-20]
 1882 0220 18201BE5 		ldr	r2, [fp, #-24]
 1883 0224 0C2083E5 		str	r2, [r3, #12]
 140:../kernel/os_core/os_q.c ****             pq->OSQOut             = start;
 1884              		.loc 1 140 0
 1885 0228 14301BE5 		ldr	r3, [fp, #-20]
 1886 022c 18201BE5 		ldr	r2, [fp, #-24]
 1887 0230 102083E5 		str	r2, [r3, #16]
 141:../kernel/os_core/os_q.c ****             pq->OSQSize            = size;
 1888              		.loc 1 141 0
 1889 0234 14301BE5 		ldr	r3, [fp, #-20]
 1890 0238 BA215BE1 		ldrh	r2, [fp, #-26]	@ movhi
 1891 023c B421C3E1 		strh	r2, [r3, #20]	@ movhi
 142:../kernel/os_core/os_q.c ****             pq->OSQEntries         = 0;
 1892              		.loc 1 142 0
 1893 0240 14301BE5 		ldr	r3, [fp, #-20]
 1894 0244 0020A0E3 		mov	r2, #0
 1895 0248 B621C3E1 		strh	r2, [r3, #22]	@ movhi
 143:../kernel/os_core/os_q.c ****             pevent->OSEventType    = OS_EVENT_TYPE_Q;
 1896              		.loc 1 143 0
 1897 024c 10301BE5 		ldr	r3, [fp, #-16]
 1898 0250 0220A0E3 		mov	r2, #2
 1899 0254 0020C3E5 		strb	r2, [r3, #0]
 144:../kernel/os_core/os_q.c ****             pevent->OSEventCnt     = 0;
 1900              		.loc 1 144 0
 1901 0258 10301BE5 		ldr	r3, [fp, #-16]
 1902 025c 0020A0E3 		mov	r2, #0
 1903 0260 B220C3E1 		strh	r2, [r3, #2]	@ movhi
 145:../kernel/os_core/os_q.c ****             pevent->OSEventPtr     = pq;
 1904              		.loc 1 145 0
 1905 0264 10301BE5 		ldr	r3, [fp, #-16]
 1906 0268 14201BE5 		ldr	r2, [fp, #-20]
 1907 026c 042083E5 		str	r2, [r3, #4]
 146:../kernel/os_core/os_q.c **** #if OS_EVENT_NAME_SIZE > 1
 147:../kernel/os_core/os_q.c ****             pevent->OSEventName[0] = '?';                  /* Unknown name                         
 1908              		.loc 1 147 0
 1909 0270 10301BE5 		ldr	r3, [fp, #-16]
 1910 0274 3F20A0E3 		mov	r2, #63
 1911 0278 1020C3E5 		strb	r2, [r3, #16]
 148:../kernel/os_core/os_q.c ****             pevent->OSEventName[1] = OS_ASCII_NUL;
 1912              		.loc 1 148 0
 1913 027c 10301BE5 		ldr	r3, [fp, #-16]
 1914 0280 0020A0E3 		mov	r2, #0
 1915 0284 1120C3E5 		strb	r2, [r3, #17]
 149:../kernel/os_core/os_q.c **** #endif
 150:../kernel/os_core/os_q.c ****             OS_EventWaitListInit(pevent);                 /*      Initalize the wait list          
 1916              		.loc 1 150 0
 1917 0288 10001BE5 		ldr	r0, [fp, #-16]
 1918 028c FEFFFFEB 		bl	OS_EventWaitListInit
 1919 0290 0A0000EA 		b	.L12
 1920              	.L13:
 151:../kernel/os_core/os_q.c ****         } else {
 152:../kernel/os_core/os_q.c ****             pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on err
 1921              		.loc 1 152 0
 1922 0294 3C309FE5 		ldr	r3, .L14+4
 1923 0298 002093E5 		ldr	r2, [r3, #0]
 1924 029c 10301BE5 		ldr	r3, [fp, #-16]
 1925 02a0 042083E5 		str	r2, [r3, #4]
 153:../kernel/os_core/os_q.c ****             OSEventFreeList    = pevent;
 1926              		.loc 1 153 0
 1927 02a4 2C309FE5 		ldr	r3, .L14+4
 1928 02a8 10201BE5 		ldr	r2, [fp, #-16]
 1929 02ac 002083E5 		str	r2, [r3, #0]
 154:../kernel/os_core/os_q.c ****             OS_EXIT_CRITICAL();
 1930              		.loc 1 154 0
 1931              	@ 154 "../kernel/os_core/os_q.c" 1
 1932 02b0 04009DE4 		ldmfd sp!, {r0}
 1933              	@ 0 "" 2
 1934              	@ 154 "../kernel/os_core/os_q.c" 1
 1935 02b4 00F021E1 		msr   cpsr_c, r0
 1936              	@ 0 "" 2
 155:../kernel/os_core/os_q.c ****             pevent = (OS_EVENT *)0;
 1937              		.loc 1 155 0
 1938 02b8 0030A0E3 		mov	r3, #0
 1939 02bc 10300BE5 		str	r3, [fp, #-16]
 1940              	.L12:
 156:../kernel/os_core/os_q.c ****         }
 157:../kernel/os_core/os_q.c ****     }
 158:../kernel/os_core/os_q.c ****     return (pevent);
 1941              		.loc 1 158 0
 1942 02c0 10301BE5 		ldr	r3, [fp, #-16]
 1943              	.L10:
 159:../kernel/os_core/os_q.c **** }
 1944              		.loc 1 159 0
 1945 02c4 0300A0E1 		mov	r0, r3
 1946 02c8 0CD04BE2 		sub	sp, fp, #12
 1947 02cc 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1948 02d0 1EFF2FE1 		bx	lr
 1949              	.L15:
 1950              		.align	2
 1951              	.L14:
 1952 02d4 00000000 		.word	OSIntNesting
 1953 02d8 00000000 		.word	OSEventFreeList
 1954 02dc 00000000 		.word	OSQFreeList
 1955              		.cfi_endproc
 1956              	.LFE1:
 1958              		.align	2
 1959              		.global	OSQDel
 1961              	OSQDel:
 1962              	.LFB2:
 160:../kernel/os_core/os_q.c **** /*$PAGE*/
 161:../kernel/os_core/os_q.c **** /*
 162:../kernel/os_core/os_q.c **** ***************************************************************************************************
 163:../kernel/os_core/os_q.c **** *                                        DELETE A MESSAGE QUEUE
 164:../kernel/os_core/os_q.c **** *
 165:../kernel/os_core/os_q.c **** * Description: This function deletes a message queue and readies all tasks pending on the queue.
 166:../kernel/os_core/os_q.c **** *
 167:../kernel/os_core/os_q.c **** * Arguments  : pevent        is a pointer to the event control block associated with the desired
 168:../kernel/os_core/os_q.c **** *                            queue.
 169:../kernel/os_core/os_q.c **** *
 170:../kernel/os_core/os_q.c **** *              opt           determines delete options as follows:
 171:../kernel/os_core/os_q.c **** *                            opt == OS_DEL_NO_PEND   Delete the queue ONLY if no task pending
 172:../kernel/os_core/os_q.c **** *                            opt == OS_DEL_ALWAYS    Deletes the queue even if tasks are waiting.
 173:../kernel/os_core/os_q.c **** *                                                    In this case, all the tasks pending will be re
 174:../kernel/os_core/os_q.c **** *
 175:../kernel/os_core/os_q.c **** *              err           is a pointer to an error code that can contain one of the following va
 176:../kernel/os_core/os_q.c **** *                            OS_NO_ERR               The call was successful and the queue was dele
 177:../kernel/os_core/os_q.c **** *                            OS_ERR_DEL_ISR          If you tried to delete the queue from an ISR
 178:../kernel/os_core/os_q.c **** *                            OS_ERR_INVALID_OPT      An invalid option was specified
 179:../kernel/os_core/os_q.c **** *                            OS_ERR_TASK_WAITING     One or more tasks were waiting on the queue
 180:../kernel/os_core/os_q.c **** *                            OS_ERR_EVENT_TYPE       If you didn't pass a pointer to a queue
 181:../kernel/os_core/os_q.c **** *                            OS_ERR_PEVENT_NULL      If 'pevent' is a NULL pointer.
 182:../kernel/os_core/os_q.c **** *
 183:../kernel/os_core/os_q.c **** * Returns    : pevent        upon error
 184:../kernel/os_core/os_q.c **** *              (OS_EVENT *)0 if the queue was successfully deleted.
 185:../kernel/os_core/os_q.c **** *
 186:../kernel/os_core/os_q.c **** * Note(s)    : 1) This function must be used with care.  Tasks that would normally expect the prese
 187:../kernel/os_core/os_q.c **** *                 the queue MUST check the return code of OSQPend().
 188:../kernel/os_core/os_q.c **** *              2) OSQAccept() callers will not know that the intended queue has been deleted unless
 189:../kernel/os_core/os_q.c **** *                 they check 'pevent' to see that it's a NULL pointer.
 190:../kernel/os_core/os_q.c **** *              3) This call can potentially disable interrupts for a long time.  The interrupt disa
 191:../kernel/os_core/os_q.c **** *                 time is directly proportional to the number of tasks waiting on the queue.
 192:../kernel/os_core/os_q.c **** *              4) Because ALL tasks pending on the queue will be readied, you MUST be careful in
 193:../kernel/os_core/os_q.c **** *                 applications where the queue is used for mutual exclusion because the resource(s)
 194:../kernel/os_core/os_q.c **** *                 will no longer be guarded by the queue.
 195:../kernel/os_core/os_q.c **** *              5) If the storage for the message queue was allocated dynamically (i.e. using a mall
 196:../kernel/os_core/os_q.c **** *                 type call) then your application MUST release the memory storage by call the coun
 197:../kernel/os_core/os_q.c **** *                 call of the dynamic allocation scheme used.  If the queue storage was created sta
 198:../kernel/os_core/os_q.c **** *                 then, the storage can be reused.
 199:../kernel/os_core/os_q.c **** ***************************************************************************************************
 200:../kernel/os_core/os_q.c **** */
 201:../kernel/os_core/os_q.c **** 
 202:../kernel/os_core/os_q.c **** #if OS_Q_DEL_EN > 0
 203:../kernel/os_core/os_q.c **** OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *err)
 204:../kernel/os_core/os_q.c **** {
 1963              		.loc 1 204 0
 1964              		.cfi_startproc
 1965              		@ Function supports interworking.
 1966              		@ args = 0, pretend = 0, frame = 24
 1967              		@ frame_needed = 1, uses_anonymous_args = 0
 1968 02e0 0DC0A0E1 		mov	ip, sp
 1969              	.LCFI4:
 1970              		.cfi_def_cfa_register 12
 1971 02e4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1972 02e8 04B04CE2 		sub	fp, ip, #4
 1973              		.cfi_offset 14, -8
 1974              		.cfi_offset 13, -12
 1975              		.cfi_offset 11, -16
 1976              	.LCFI5:
 1977              		.cfi_def_cfa 11, 4
 1978 02ec 18D04DE2 		sub	sp, sp, #24
 1979 02f0 18000BE5 		str	r0, [fp, #-24]
 1980 02f4 0130A0E1 		mov	r3, r1
 1981 02f8 20200BE5 		str	r2, [fp, #-32]
 1982 02fc 19304BE5 		strb	r3, [fp, #-25]
 205:../kernel/os_core/os_q.c ****     BOOLEAN    tasks_waiting;
 206:../kernel/os_core/os_q.c ****     OS_Q      *pq;
 207:../kernel/os_core/os_q.c **** #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status regis
 208:../kernel/os_core/os_q.c ****     OS_CPU_SR  cpu_sr;
 209:../kernel/os_core/os_q.c **** 
 210:../kernel/os_core/os_q.c **** 
 211:../kernel/os_core/os_q.c **** 
 212:../kernel/os_core/os_q.c ****     cpu_sr = 0;                                            /* Prevent compiler warning             
 213:../kernel/os_core/os_q.c **** #endif    
 214:../kernel/os_core/os_q.c ****     if (OSIntNesting > 0) {                                /* See if called from ISR ...           
 1983              		.loc 1 214 0
 1984 0300 54329FE5 		ldr	r3, .L32
 1985 0304 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1986 0308 000053E3 		cmp	r3, #0
 1987 030c 0400000A 		beq	.L17
 215:../kernel/os_core/os_q.c ****         *err = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR         
 1988              		.loc 1 215 0
 1989 0310 20301BE5 		ldr	r3, [fp, #-32]
 1990 0314 7320E0E3 		mvn	r2, #115
 1991 0318 0020C3E5 		strb	r2, [r3, #0]
 216:../kernel/os_core/os_q.c ****         return (pevent);
 1992              		.loc 1 216 0
 1993 031c 18301BE5 		ldr	r3, [fp, #-24]
 1994 0320 890000EA 		b	.L18
 1995              	.L17:
 217:../kernel/os_core/os_q.c ****     }
 218:../kernel/os_core/os_q.c **** #if OS_ARG_CHK_EN > 0
 219:../kernel/os_core/os_q.c ****     if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                    
 1996              		.loc 1 219 0
 1997 0324 18301BE5 		ldr	r3, [fp, #-24]
 1998 0328 000053E3 		cmp	r3, #0
 1999 032c 0400001A 		bne	.L19
 220:../kernel/os_core/os_q.c ****         *err = OS_ERR_PEVENT_NULL;
 2000              		.loc 1 220 0
 2001 0330 20301BE5 		ldr	r3, [fp, #-32]
 2002 0334 0420A0E3 		mov	r2, #4
 2003 0338 0020C3E5 		strb	r2, [r3, #0]
 221:../kernel/os_core/os_q.c ****         return (pevent);
 2004              		.loc 1 221 0
 2005 033c 18301BE5 		ldr	r3, [fp, #-24]
 2006 0340 810000EA 		b	.L18
 2007              	.L19:
 222:../kernel/os_core/os_q.c ****     }
 223:../kernel/os_core/os_q.c **** #endif
 224:../kernel/os_core/os_q.c ****     if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type            
 2008              		.loc 1 224 0
 2009 0344 18301BE5 		ldr	r3, [fp, #-24]
 2010 0348 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2011 034c 020053E3 		cmp	r3, #2
 2012 0350 0400000A 		beq	.L20
 225:../kernel/os_core/os_q.c ****         *err = OS_ERR_EVENT_TYPE;
 2013              		.loc 1 225 0
 2014 0354 20301BE5 		ldr	r3, [fp, #-32]
 2015 0358 0120A0E3 		mov	r2, #1
 2016 035c 0020C3E5 		strb	r2, [r3, #0]
 226:../kernel/os_core/os_q.c ****         return (pevent);
 2017              		.loc 1 226 0
 2018 0360 18301BE5 		ldr	r3, [fp, #-24]
 2019 0364 780000EA 		b	.L18
 2020              	.L20:
 227:../kernel/os_core/os_q.c ****     }
 228:../kernel/os_core/os_q.c ****     OS_ENTER_CRITICAL();
 2021              		.loc 1 228 0
 2022              	@ 228 "../kernel/os_core/os_q.c" 1
 2023 0368 00000FE1 		mrs   r0, cpsr
 2024              	@ 0 "" 2
 2025              	@ 228 "../kernel/os_core/os_q.c" 1
 2026 036c 04002DE5 		stmfd sp!, {r0}
 2027              	@ 0 "" 2
 2028              	@ 228 "../kernel/os_core/os_q.c" 1
 2029 0370 C00080E3 		orr   r0, r0, #0b11000000
 2030              	@ 0 "" 2
 2031              	@ 228 "../kernel/os_core/os_q.c" 1
 2032 0374 00F021E1 		msr   cpsr_c, r0
 2033              	@ 0 "" 2
 229:../kernel/os_core/os_q.c ****     if (pevent->OSEventGrp != 0x00) {                      /* See if any tasks waiting on queue    
 2034              		.loc 1 229 0
 2035 0378 18301BE5 		ldr	r3, [fp, #-24]
 2036 037c 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2037 0380 000053E3 		cmp	r3, #0
 2038 0384 0200000A 		beq	.L21
 230:../kernel/os_core/os_q.c ****         tasks_waiting = TRUE;                              /* Yes                                  
 2039              		.loc 1 230 0
 2040 0388 0130A0E3 		mov	r3, #1
 2041 038c 0D304BE5 		strb	r3, [fp, #-13]
 2042 0390 010000EA 		b	.L22
 2043              	.L21:
 231:../kernel/os_core/os_q.c ****     } else {
 232:../kernel/os_core/os_q.c ****         tasks_waiting = FALSE;                             /* No                                   
 2044              		.loc 1 232 0
 2045 0394 0030A0E3 		mov	r3, #0
 2046 0398 0D304BE5 		strb	r3, [fp, #-13]
 2047              	.L22:
 233:../kernel/os_core/os_q.c ****     }
 234:../kernel/os_core/os_q.c ****     switch (opt) {
 2048              		.loc 1 234 0
 2049 039c 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 2050 03a0 000053E3 		cmp	r3, #0
 2051 03a4 0200000A 		beq	.L24
 2052 03a8 010053E3 		cmp	r3, #1
 2053 03ac 3300000A 		beq	.L31
 2054 03b0 5F0000EA 		b	.L30
 2055              	.L24:
 235:../kernel/os_core/os_q.c ****         case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting 
 236:../kernel/os_core/os_q.c ****              if (tasks_waiting == FALSE) {
 2056              		.loc 1 236 0
 2057 03b4 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2058 03b8 000053E3 		cmp	r3, #0
 2059 03bc 2300001A 		bne	.L26
 237:../kernel/os_core/os_q.c **** #if OS_EVENT_NAME_SIZE > 1
 238:../kernel/os_core/os_q.c ****                  pevent->OSEventName[0] = '?';             /* Unknown name                         
 2060              		.loc 1 238 0
 2061 03c0 18301BE5 		ldr	r3, [fp, #-24]
 2062 03c4 3F20A0E3 		mov	r2, #63
 2063 03c8 1020C3E5 		strb	r2, [r3, #16]
 239:../kernel/os_core/os_q.c ****                  pevent->OSEventName[1] = OS_ASCII_NUL;
 2064              		.loc 1 239 0
 2065 03cc 18301BE5 		ldr	r3, [fp, #-24]
 2066 03d0 0020A0E3 		mov	r2, #0
 2067 03d4 1120C3E5 		strb	r2, [r3, #17]
 240:../kernel/os_core/os_q.c **** #endif
 241:../kernel/os_core/os_q.c ****                  pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list 
 2068              		.loc 1 241 0
 2069 03d8 18301BE5 		ldr	r3, [fp, #-24]
 2070 03dc 043093E5 		ldr	r3, [r3, #4]
 2071 03e0 14300BE5 		str	r3, [fp, #-20]
 242:../kernel/os_core/os_q.c ****                  pq->OSQPtr             = OSQFreeList;
 2072              		.loc 1 242 0
 2073 03e4 74319FE5 		ldr	r3, .L32+4
 2074 03e8 002093E5 		ldr	r2, [r3, #0]
 2075 03ec 14301BE5 		ldr	r3, [fp, #-20]
 2076 03f0 002083E5 		str	r2, [r3, #0]
 243:../kernel/os_core/os_q.c ****                  OSQFreeList            = pq;
 2077              		.loc 1 243 0
 2078 03f4 64319FE5 		ldr	r3, .L32+4
 2079 03f8 14201BE5 		ldr	r2, [fp, #-20]
 2080 03fc 002083E5 		str	r2, [r3, #0]
 244:../kernel/os_core/os_q.c ****                  pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2081              		.loc 1 244 0
 2082 0400 18301BE5 		ldr	r3, [fp, #-24]
 2083 0404 0020A0E3 		mov	r2, #0
 2084 0408 0020C3E5 		strb	r2, [r3, #0]
 245:../kernel/os_core/os_q.c ****                  pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free li
 2085              		.loc 1 245 0
 2086 040c 50319FE5 		ldr	r3, .L32+8
 2087 0410 002093E5 		ldr	r2, [r3, #0]
 2088 0414 18301BE5 		ldr	r3, [fp, #-24]
 2089 0418 042083E5 		str	r2, [r3, #4]
 246:../kernel/os_core/os_q.c ****                  pevent->OSEventCnt     = 0;
 2090              		.loc 1 246 0
 2091 041c 18301BE5 		ldr	r3, [fp, #-24]
 2092 0420 0020A0E3 		mov	r2, #0
 2093 0424 B220C3E1 		strh	r2, [r3, #2]	@ movhi
 247:../kernel/os_core/os_q.c ****                  OSEventFreeList        = pevent;          /* Get next free event control block    
 2094              		.loc 1 247 0
 2095 0428 34319FE5 		ldr	r3, .L32+8
 2096 042c 18201BE5 		ldr	r2, [fp, #-24]
 2097 0430 002083E5 		str	r2, [r3, #0]
 248:../kernel/os_core/os_q.c ****                  OS_EXIT_CRITICAL();
 2098              		.loc 1 248 0
 2099              	@ 248 "../kernel/os_core/os_q.c" 1
 2100 0434 04009DE4 		ldmfd sp!, {r0}
 2101              	@ 0 "" 2
 2102              	@ 248 "../kernel/os_core/os_q.c" 1
 2103 0438 00F021E1 		msr   cpsr_c, r0
 2104              	@ 0 "" 2
 249:../kernel/os_core/os_q.c ****                  *err                   = OS_NO_ERR;
 2105              		.loc 1 249 0
 2106 043c 20301BE5 		ldr	r3, [fp, #-32]
 2107 0440 0020A0E3 		mov	r2, #0
 2108 0444 0020C3E5 		strb	r2, [r3, #0]
 250:../kernel/os_core/os_q.c ****                  return ((OS_EVENT *)0);                   /* Queue has been deleted               
 2109              		.loc 1 250 0
 2110 0448 0030A0E3 		mov	r3, #0
 2111 044c 3E0000EA 		b	.L18
 2112              	.L26:
 251:../kernel/os_core/os_q.c ****              } else {
 252:../kernel/os_core/os_q.c ****                  OS_EXIT_CRITICAL();
 2113              		.loc 1 252 0
 2114              	@ 252 "../kernel/os_core/os_q.c" 1
 2115 0450 04009DE4 		ldmfd sp!, {r0}
 2116              	@ 0 "" 2
 2117              	@ 252 "../kernel/os_core/os_q.c" 1
 2118 0454 00F021E1 		msr   cpsr_c, r0
 2119              	@ 0 "" 2
 253:../kernel/os_core/os_q.c ****                  *err                   = OS_ERR_TASK_WAITING;
 2120              		.loc 1 253 0
 2121 0458 20301BE5 		ldr	r3, [fp, #-32]
 2122 045c 0820A0E3 		mov	r2, #8
 2123 0460 0020C3E5 		strb	r2, [r3, #0]
 254:../kernel/os_core/os_q.c ****                  return (pevent);
 2124              		.loc 1 254 0
 2125 0464 18301BE5 		ldr	r3, [fp, #-24]
 2126 0468 370000EA 		b	.L18
 2127              	.L28:
 255:../kernel/os_core/os_q.c ****              }
 256:../kernel/os_core/os_q.c **** 
 257:../kernel/os_core/os_q.c ****         case OS_DEL_ALWAYS:                                /* Always delete the queue              
 258:../kernel/os_core/os_q.c ****              while (pevent->OSEventGrp != 0x00) {          /* Ready ALL tasks waiting for queue    
 259:../kernel/os_core/os_q.c ****                  (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q);
 2128              		.loc 1 259 0
 2129 046c 18001BE5 		ldr	r0, [fp, #-24]
 2130 0470 0010A0E3 		mov	r1, #0
 2131 0474 0420A0E3 		mov	r2, #4
 2132 0478 FEFFFFEB 		bl	OS_EventTaskRdy
 2133 047c 000000EA 		b	.L27
 2134              	.L31:
 258:../kernel/os_core/os_q.c ****              while (pevent->OSEventGrp != 0x00) {          /* Ready ALL tasks waiting for queue    
 2135              		.loc 1 258 0
 2136 0480 0000A0E1 		mov	r0, r0	@ nop
 2137              	.L27:
 258:../kernel/os_core/os_q.c ****              while (pevent->OSEventGrp != 0x00) {          /* Ready ALL tasks waiting for queue    
 2138              		.loc 1 258 0 is_stmt 0 discriminator 1
 2139 0484 18301BE5 		ldr	r3, [fp, #-24]
 2140 0488 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2141 048c 000053E3 		cmp	r3, #0
 2142 0490 F5FFFF1A 		bne	.L28
 260:../kernel/os_core/os_q.c ****              }
 261:../kernel/os_core/os_q.c **** #if OS_EVENT_NAME_SIZE > 1
 262:../kernel/os_core/os_q.c ****              pevent->OSEventName[0] = '?';                 /* Unknown name                         
 2143              		.loc 1 262 0 is_stmt 1
 2144 0494 18301BE5 		ldr	r3, [fp, #-24]
 2145 0498 3F20A0E3 		mov	r2, #63
 2146 049c 1020C3E5 		strb	r2, [r3, #16]
 263:../kernel/os_core/os_q.c ****              pevent->OSEventName[1] = OS_ASCII_NUL;
 2147              		.loc 1 263 0
 2148 04a0 18301BE5 		ldr	r3, [fp, #-24]
 2149 04a4 0020A0E3 		mov	r2, #0
 2150 04a8 1120C3E5 		strb	r2, [r3, #17]
 264:../kernel/os_core/os_q.c **** #endif
 265:../kernel/os_core/os_q.c ****              pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list    
 2151              		.loc 1 265 0
 2152 04ac 18301BE5 		ldr	r3, [fp, #-24]
 2153 04b0 043093E5 		ldr	r3, [r3, #4]
 2154 04b4 14300BE5 		str	r3, [fp, #-20]
 266:../kernel/os_core/os_q.c ****              pq->OSQPtr             = OSQFreeList;
 2155              		.loc 1 266 0
 2156 04b8 A0309FE5 		ldr	r3, .L32+4
 2157 04bc 002093E5 		ldr	r2, [r3, #0]
 2158 04c0 14301BE5 		ldr	r3, [fp, #-20]
 2159 04c4 002083E5 		str	r2, [r3, #0]
 267:../kernel/os_core/os_q.c ****              OSQFreeList            = pq;
 2160              		.loc 1 267 0
 2161 04c8 90309FE5 		ldr	r3, .L32+4
 2162 04cc 14201BE5 		ldr	r2, [fp, #-20]
 2163 04d0 002083E5 		str	r2, [r3, #0]
 268:../kernel/os_core/os_q.c ****              pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2164              		.loc 1 268 0
 2165 04d4 18301BE5 		ldr	r3, [fp, #-24]
 2166 04d8 0020A0E3 		mov	r2, #0
 2167 04dc 0020C3E5 		strb	r2, [r3, #0]
 269:../kernel/os_core/os_q.c ****              pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free li
 2168              		.loc 1 269 0
 2169 04e0 7C309FE5 		ldr	r3, .L32+8
 2170 04e4 002093E5 		ldr	r2, [r3, #0]
 2171 04e8 18301BE5 		ldr	r3, [fp, #-24]
 2172 04ec 042083E5 		str	r2, [r3, #4]
 270:../kernel/os_core/os_q.c ****              pevent->OSEventCnt     = 0;
 2173              		.loc 1 270 0
 2174 04f0 18301BE5 		ldr	r3, [fp, #-24]
 2175 04f4 0020A0E3 		mov	r2, #0
 2176 04f8 B220C3E1 		strh	r2, [r3, #2]	@ movhi
 271:../kernel/os_core/os_q.c ****              OSEventFreeList        = pevent;              /* Get next free event control block    
 2177              		.loc 1 271 0
 2178 04fc 60309FE5 		ldr	r3, .L32+8
 2179 0500 18201BE5 		ldr	r2, [fp, #-24]
 2180 0504 002083E5 		str	r2, [r3, #0]
 272:../kernel/os_core/os_q.c ****              OS_EXIT_CRITICAL();
 2181              		.loc 1 272 0
 2182              	@ 272 "../kernel/os_core/os_q.c" 1
 2183 0508 04009DE4 		ldmfd sp!, {r0}
 2184              	@ 0 "" 2
 2185              	@ 272 "../kernel/os_core/os_q.c" 1
 2186 050c 00F021E1 		msr   cpsr_c, r0
 2187              	@ 0 "" 2
 273:../kernel/os_core/os_q.c ****              if (tasks_waiting == TRUE) {                  /* Reschedule only if task(s) were waiti
 2188              		.loc 1 273 0
 2189 0510 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2190 0514 010053E3 		cmp	r3, #1
 2191 0518 0000001A 		bne	.L29
 274:../kernel/os_core/os_q.c ****                  OS_Sched();                               /* Find highest priority task ready to r
 2192              		.loc 1 274 0
 2193 051c FEFFFFEB 		bl	OS_Sched
 2194              	.L29:
 275:../kernel/os_core/os_q.c ****              }
 276:../kernel/os_core/os_q.c ****              *err = OS_NO_ERR;
 2195              		.loc 1 276 0
 2196 0520 20301BE5 		ldr	r3, [fp, #-32]
 2197 0524 0020A0E3 		mov	r2, #0
 2198 0528 0020C3E5 		strb	r2, [r3, #0]
 277:../kernel/os_core/os_q.c ****              return ((OS_EVENT *)0);                       /* Queue has been deleted               
 2199              		.loc 1 277 0
 2200 052c 0030A0E3 		mov	r3, #0
 2201 0530 050000EA 		b	.L18
 2202              	.L30:
 278:../kernel/os_core/os_q.c **** 
 279:../kernel/os_core/os_q.c ****         default:
 280:../kernel/os_core/os_q.c ****              OS_EXIT_CRITICAL();
 2203              		.loc 1 280 0
 2204              	@ 280 "../kernel/os_core/os_q.c" 1
 2205 0534 04009DE4 		ldmfd sp!, {r0}
 2206              	@ 0 "" 2
 2207              	@ 280 "../kernel/os_core/os_q.c" 1
 2208 0538 00F021E1 		msr   cpsr_c, r0
 2209              	@ 0 "" 2
 281:../kernel/os_core/os_q.c ****              *err = OS_ERR_INVALID_OPT;
 2210              		.loc 1 281 0
 2211 053c 20301BE5 		ldr	r3, [fp, #-32]
 2212 0540 0720A0E3 		mov	r2, #7
 2213 0544 0020C3E5 		strb	r2, [r3, #0]
 282:../kernel/os_core/os_q.c ****              return (pevent);
 2214              		.loc 1 282 0
 2215 0548 18301BE5 		ldr	r3, [fp, #-24]
 2216              	.L18:
 283:../kernel/os_core/os_q.c ****     }
 284:../kernel/os_core/os_q.c **** }
 2217              		.loc 1 284 0
 2218 054c 0300A0E1 		mov	r0, r3
 2219 0550 0CD04BE2 		sub	sp, fp, #12
 2220 0554 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2221 0558 1EFF2FE1 		bx	lr
 2222              	.L33:
 2223              		.align	2
 2224              	.L32:
 2225 055c 00000000 		.word	OSIntNesting
 2226 0560 00000000 		.word	OSQFreeList
 2227 0564 00000000 		.word	OSEventFreeList
 2228              		.cfi_endproc
 2229              	.LFE2:
 2231              		.align	2
 2232              		.global	OSQFlush
 2234              	OSQFlush:
 2235              	.LFB3:
 285:../kernel/os_core/os_q.c **** #endif
 286:../kernel/os_core/os_q.c **** 
 287:../kernel/os_core/os_q.c **** /*$PAGE*/
 288:../kernel/os_core/os_q.c **** /*
 289:../kernel/os_core/os_q.c **** ***************************************************************************************************
 290:../kernel/os_core/os_q.c **** *                                             FLUSH QUEUE
 291:../kernel/os_core/os_q.c **** *
 292:../kernel/os_core/os_q.c **** * Description : This function is used to flush the contents of the message queue.
 293:../kernel/os_core/os_q.c **** *
 294:../kernel/os_core/os_q.c **** * Arguments   : none
 295:../kernel/os_core/os_q.c **** *
 296:../kernel/os_core/os_q.c **** * Returns     : OS_NO_ERR           upon success
 297:../kernel/os_core/os_q.c **** *               OS_ERR_EVENT_TYPE   If you didn't pass a pointer to a queue
 298:../kernel/os_core/os_q.c **** *               OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer
 299:../kernel/os_core/os_q.c **** *
 300:../kernel/os_core/os_q.c **** * WARNING     : You should use this function with great care because, when to flush the queue, you 
 301:../kernel/os_core/os_q.c **** *               the references to what the queue entries are pointing to and thus, you could cause
 302:../kernel/os_core/os_q.c **** *               'memory leaks'.  In other words, the data you are pointing to that's being referenc
 303:../kernel/os_core/os_q.c **** *               by the queue entries should, most likely, need to be de-allocated (i.e. freed).
 304:../kernel/os_core/os_q.c **** ***************************************************************************************************
 305:../kernel/os_core/os_q.c **** */
 306:../kernel/os_core/os_q.c **** 
 307:../kernel/os_core/os_q.c **** #if OS_Q_FLUSH_EN > 0
 308:../kernel/os_core/os_q.c **** INT8U  OSQFlush (OS_EVENT *pevent)
 309:../kernel/os_core/os_q.c **** {
 2236              		.loc 1 309 0
 2237              		.cfi_startproc
 2238              		@ Function supports interworking.
 2239              		@ args = 0, pretend = 0, frame = 16
 2240              		@ frame_needed = 1, uses_anonymous_args = 0
 2241 0568 0DC0A0E1 		mov	ip, sp
 2242              	.LCFI6:
 2243              		.cfi_def_cfa_register 12
 2244 056c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2245 0570 04B04CE2 		sub	fp, ip, #4
 2246              		.cfi_offset 14, -8
 2247              		.cfi_offset 13, -12
 2248              		.cfi_offset 11, -16
 2249              	.LCFI7:
 2250              		.cfi_def_cfa 11, 4
 2251 0574 10D04DE2 		sub	sp, sp, #16
 2252 0578 18000BE5 		str	r0, [fp, #-24]
 310:../kernel/os_core/os_q.c ****     OS_Q      *pq;
 311:../kernel/os_core/os_q.c **** #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register  
 312:../kernel/os_core/os_q.c ****     OS_CPU_SR  cpu_sr;
 313:../kernel/os_core/os_q.c **** 
 314:../kernel/os_core/os_q.c **** 
 315:../kernel/os_core/os_q.c **** 
 316:../kernel/os_core/os_q.c ****     cpu_sr = 0;                                       /* Prevent compiler warning                  
 317:../kernel/os_core/os_q.c **** #endif    
 318:../kernel/os_core/os_q.c **** #if OS_ARG_CHK_EN > 0
 319:../kernel/os_core/os_q.c ****     if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                         
 2253              		.loc 1 319 0
 2254 057c 18301BE5 		ldr	r3, [fp, #-24]
 2255 0580 000053E3 		cmp	r3, #0
 2256 0584 0100001A 		bne	.L35
 320:../kernel/os_core/os_q.c ****         return (OS_ERR_PEVENT_NULL);
 2257              		.loc 1 320 0
 2258 0588 0430A0E3 		mov	r3, #4
 2259 058c 1A0000EA 		b	.L36
 2260              	.L35:
 321:../kernel/os_core/os_q.c ****     }
 322:../kernel/os_core/os_q.c ****     if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                 
 2261              		.loc 1 322 0
 2262 0590 18301BE5 		ldr	r3, [fp, #-24]
 2263 0594 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2264 0598 020053E3 		cmp	r3, #2
 2265 059c 0100000A 		beq	.L37
 323:../kernel/os_core/os_q.c ****         return (OS_ERR_EVENT_TYPE);
 2266              		.loc 1 323 0
 2267 05a0 0130A0E3 		mov	r3, #1
 2268 05a4 140000EA 		b	.L36
 2269              	.L37:
 324:../kernel/os_core/os_q.c ****     }
 325:../kernel/os_core/os_q.c **** #endif
 326:../kernel/os_core/os_q.c ****     OS_ENTER_CRITICAL();
 2270              		.loc 1 326 0
 2271              	@ 326 "../kernel/os_core/os_q.c" 1
 2272 05a8 00000FE1 		mrs   r0, cpsr
 2273              	@ 0 "" 2
 2274              	@ 326 "../kernel/os_core/os_q.c" 1
 2275 05ac 04002DE5 		stmfd sp!, {r0}
 2276              	@ 0 "" 2
 2277              	@ 326 "../kernel/os_core/os_q.c" 1
 2278 05b0 C00080E3 		orr   r0, r0, #0b11000000
 2279              	@ 0 "" 2
 2280              	@ 326 "../kernel/os_core/os_q.c" 1
 2281 05b4 00F021E1 		msr   cpsr_c, r0
 2282              	@ 0 "" 2
 327:../kernel/os_core/os_q.c ****     pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure          
 2283              		.loc 1 327 0
 2284 05b8 18301BE5 		ldr	r3, [fp, #-24]
 2285 05bc 043093E5 		ldr	r3, [r3, #4]
 2286 05c0 10300BE5 		str	r3, [fp, #-16]
 328:../kernel/os_core/os_q.c ****     pq->OSQIn      = pq->OSQStart;
 2287              		.loc 1 328 0
 2288 05c4 10301BE5 		ldr	r3, [fp, #-16]
 2289 05c8 042093E5 		ldr	r2, [r3, #4]
 2290 05cc 10301BE5 		ldr	r3, [fp, #-16]
 2291 05d0 0C2083E5 		str	r2, [r3, #12]
 329:../kernel/os_core/os_q.c ****     pq->OSQOut     = pq->OSQStart;
 2292              		.loc 1 329 0
 2293 05d4 10301BE5 		ldr	r3, [fp, #-16]
 2294 05d8 042093E5 		ldr	r2, [r3, #4]
 2295 05dc 10301BE5 		ldr	r3, [fp, #-16]
 2296 05e0 102083E5 		str	r2, [r3, #16]
 330:../kernel/os_core/os_q.c ****     pq->OSQEntries = 0;
 2297              		.loc 1 330 0
 2298 05e4 10301BE5 		ldr	r3, [fp, #-16]
 2299 05e8 0020A0E3 		mov	r2, #0
 2300 05ec B621C3E1 		strh	r2, [r3, #22]	@ movhi
 331:../kernel/os_core/os_q.c ****     OS_EXIT_CRITICAL();
 2301              		.loc 1 331 0
 2302              	@ 331 "../kernel/os_core/os_q.c" 1
 2303 05f0 04009DE4 		ldmfd sp!, {r0}
 2304              	@ 0 "" 2
 2305              	@ 331 "../kernel/os_core/os_q.c" 1
 2306 05f4 00F021E1 		msr   cpsr_c, r0
 2307              	@ 0 "" 2
 332:../kernel/os_core/os_q.c ****     return (OS_NO_ERR);
 2308              		.loc 1 332 0
 2309 05f8 0030A0E3 		mov	r3, #0
 2310              	.L36:
 333:../kernel/os_core/os_q.c **** }
 2311              		.loc 1 333 0
 2312 05fc 0300A0E1 		mov	r0, r3
 2313 0600 0CD04BE2 		sub	sp, fp, #12
 2314 0604 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2315 0608 1EFF2FE1 		bx	lr
 2316              		.cfi_endproc
 2317              	.LFE3:
 2319              		.align	2
 2320              		.global	OSQPend
 2322              	OSQPend:
 2323              	.LFB4:
 334:../kernel/os_core/os_q.c **** #endif
 335:../kernel/os_core/os_q.c **** 
 336:../kernel/os_core/os_q.c **** /*$PAGE*/
 337:../kernel/os_core/os_q.c **** /*
 338:../kernel/os_core/os_q.c **** ***************************************************************************************************
 339:../kernel/os_core/os_q.c **** *                                     PEND ON A QUEUE FOR A MESSAGE
 340:../kernel/os_core/os_q.c **** *
 341:../kernel/os_core/os_q.c **** * Description: This function waits for a message to be sent to a queue
 342:../kernel/os_core/os_q.c **** *
 343:../kernel/os_core/os_q.c **** * Arguments  : pevent        is a pointer to the event control block associated with the desired qu
 344:../kernel/os_core/os_q.c **** *
 345:../kernel/os_core/os_q.c **** *              timeout       is an optional timeout period (in clock ticks).  If non-zero, your tas
 346:../kernel/os_core/os_q.c **** *                            wait for a message to arrive at the queue up to the amount of time
 347:../kernel/os_core/os_q.c **** *                            specified by this argument.  If you specify 0, however, your task will
 348:../kernel/os_core/os_q.c **** *                            forever at the specified queue or, until a message arrives.
 349:../kernel/os_core/os_q.c **** *
 350:../kernel/os_core/os_q.c **** *              err           is a pointer to where an error message will be deposited.  Possible er
 351:../kernel/os_core/os_q.c **** *                            messages are:
 352:../kernel/os_core/os_q.c **** *
 353:../kernel/os_core/os_q.c **** *                            OS_NO_ERR           The call was successful and your task received a
 354:../kernel/os_core/os_q.c **** *                                                message.
 355:../kernel/os_core/os_q.c **** *                            OS_TIMEOUT          A message was not received within the specified ti
 356:../kernel/os_core/os_q.c **** *                            OS_ERR_EVENT_TYPE   You didn't pass a pointer to a queue
 357:../kernel/os_core/os_q.c **** *                            OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer
 358:../kernel/os_core/os_q.c **** *                            OS_ERR_PEND_ISR     If you called this function from an ISR and the re
 359:../kernel/os_core/os_q.c **** *                                                would lead to a suspension.
 360:../kernel/os_core/os_q.c **** *
 361:../kernel/os_core/os_q.c **** * Returns    : != (void *)0  is a pointer to the message received
 362:../kernel/os_core/os_q.c **** *              == (void *)0  if you received a NULL pointer message or,
 363:../kernel/os_core/os_q.c **** *                            if no message was received or,
 364:../kernel/os_core/os_q.c **** *                            if 'pevent' is a NULL pointer or,
 365:../kernel/os_core/os_q.c **** *                            if you didn't pass a pointer to a queue.
 366:../kernel/os_core/os_q.c **** *
 367:../kernel/os_core/os_q.c **** * Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
 368:../kernel/os_core/os_q.c **** ***************************************************************************************************
 369:../kernel/os_core/os_q.c **** */
 370:../kernel/os_core/os_q.c **** 
 371:../kernel/os_core/os_q.c **** void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *err)
 372:../kernel/os_core/os_q.c **** {
 2324              		.loc 1 372 0
 2325              		.cfi_startproc
 2326              		@ Function supports interworking.
 2327              		@ args = 0, pretend = 0, frame = 24
 2328              		@ frame_needed = 1, uses_anonymous_args = 0
 2329 060c 0DC0A0E1 		mov	ip, sp
 2330              	.LCFI8:
 2331              		.cfi_def_cfa_register 12
 2332 0610 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2333 0614 04B04CE2 		sub	fp, ip, #4
 2334              		.cfi_offset 14, -8
 2335              		.cfi_offset 13, -12
 2336              		.cfi_offset 11, -16
 2337              	.LCFI9:
 2338              		.cfi_def_cfa 11, 4
 2339 0618 18D04DE2 		sub	sp, sp, #24
 2340 061c 18000BE5 		str	r0, [fp, #-24]
 2341 0620 0130A0E1 		mov	r3, r1
 2342 0624 20200BE5 		str	r2, [fp, #-32]
 2343 0628 BA314BE1 		strh	r3, [fp, #-26]	@ movhi
 373:../kernel/os_core/os_q.c ****     void      *msg;
 374:../kernel/os_core/os_q.c ****     OS_Q      *pq;
 375:../kernel/os_core/os_q.c **** #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register       
 376:../kernel/os_core/os_q.c ****     OS_CPU_SR  cpu_sr;
 377:../kernel/os_core/os_q.c **** 
 378:../kernel/os_core/os_q.c **** 
 379:../kernel/os_core/os_q.c **** 
 380:../kernel/os_core/os_q.c ****     cpu_sr = 0;                                  /* Prevent compiler warning                       
 381:../kernel/os_core/os_q.c **** #endif    
 382:../kernel/os_core/os_q.c ****     if (OSIntNesting > 0) {                      /* See if called from ISR ...                     
 2344              		.loc 1 382 0
 2345 062c 0C329FE5 		ldr	r3, .L46
 2346 0630 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2347 0634 000053E3 		cmp	r3, #0
 2348 0638 0400000A 		beq	.L39
 383:../kernel/os_core/os_q.c ****         *err = OS_ERR_PEND_ISR;                  /* ... can't PEND from an ISR                     
 2349              		.loc 1 383 0
 2350 063c 20301BE5 		ldr	r3, [fp, #-32]
 2351 0640 0220A0E3 		mov	r2, #2
 2352 0644 0020C3E5 		strb	r2, [r3, #0]
 384:../kernel/os_core/os_q.c ****         return ((void *)0);
 2353              		.loc 1 384 0
 2354 0648 0030A0E3 		mov	r3, #0
 2355 064c 770000EA 		b	.L40
 2356              	.L39:
 385:../kernel/os_core/os_q.c ****     }
 386:../kernel/os_core/os_q.c **** #if OS_ARG_CHK_EN > 0
 387:../kernel/os_core/os_q.c ****     if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                              
 2357              		.loc 1 387 0
 2358 0650 18301BE5 		ldr	r3, [fp, #-24]
 2359 0654 000053E3 		cmp	r3, #0
 2360 0658 0400001A 		bne	.L41
 388:../kernel/os_core/os_q.c ****         *err = OS_ERR_PEVENT_NULL;
 2361              		.loc 1 388 0
 2362 065c 20301BE5 		ldr	r3, [fp, #-32]
 2363 0660 0420A0E3 		mov	r2, #4
 2364 0664 0020C3E5 		strb	r2, [r3, #0]
 389:../kernel/os_core/os_q.c ****         return ((void *)0);
 2365              		.loc 1 389 0
 2366 0668 0030A0E3 		mov	r3, #0
 2367 066c 6F0000EA 		b	.L40
 2368              	.L41:
 390:../kernel/os_core/os_q.c ****     }
 391:../kernel/os_core/os_q.c ****     if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                      
 2369              		.loc 1 391 0
 2370 0670 18301BE5 		ldr	r3, [fp, #-24]
 2371 0674 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2372 0678 020053E3 		cmp	r3, #2
 2373 067c 0400000A 		beq	.L42
 392:../kernel/os_core/os_q.c ****         *err = OS_ERR_EVENT_TYPE;
 2374              		.loc 1 392 0
 2375 0680 20301BE5 		ldr	r3, [fp, #-32]
 2376 0684 0120A0E3 		mov	r2, #1
 2377 0688 0020C3E5 		strb	r2, [r3, #0]
 393:../kernel/os_core/os_q.c ****         return ((void *)0);
 2378              		.loc 1 393 0
 2379 068c 0030A0E3 		mov	r3, #0
 2380 0690 660000EA 		b	.L40
 2381              	.L42:
 394:../kernel/os_core/os_q.c ****     }
 395:../kernel/os_core/os_q.c **** #endif
 396:../kernel/os_core/os_q.c ****     OS_ENTER_CRITICAL();
 2382              		.loc 1 396 0
 2383              	@ 396 "../kernel/os_core/os_q.c" 1
 2384 0694 00000FE1 		mrs   r0, cpsr
 2385              	@ 0 "" 2
 2386              	@ 396 "../kernel/os_core/os_q.c" 1
 2387 0698 04002DE5 		stmfd sp!, {r0}
 2388              	@ 0 "" 2
 2389              	@ 396 "../kernel/os_core/os_q.c" 1
 2390 069c C00080E3 		orr   r0, r0, #0b11000000
 2391              	@ 0 "" 2
 2392              	@ 396 "../kernel/os_core/os_q.c" 1
 2393 06a0 00F021E1 		msr   cpsr_c, r0
 2394              	@ 0 "" 2
 397:../kernel/os_core/os_q.c ****     pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                   
 2395              		.loc 1 397 0
 2396 06a4 18301BE5 		ldr	r3, [fp, #-24]
 2397 06a8 043093E5 		ldr	r3, [r3, #4]
 2398 06ac 10300BE5 		str	r3, [fp, #-16]
 398:../kernel/os_core/os_q.c ****     if (pq->OSQEntries > 0) {                    /* See if any messages in the queue               
 2399              		.loc 1 398 0
 2400 06b0 10301BE5 		ldr	r3, [fp, #-16]
 2401 06b4 B631D3E1 		ldrh	r3, [r3, #22]
 2402 06b8 000053E3 		cmp	r3, #0
 2403 06bc 1E00000A 		beq	.L43
 399:../kernel/os_core/os_q.c ****         msg = *pq->OSQOut++;                     /* Yes, extract oldest message from the queue     
 2404              		.loc 1 399 0
 2405 06c0 10301BE5 		ldr	r3, [fp, #-16]
 2406 06c4 103093E5 		ldr	r3, [r3, #16]
 2407 06c8 002093E5 		ldr	r2, [r3, #0]
 2408 06cc 14200BE5 		str	r2, [fp, #-20]
 2409 06d0 042083E2 		add	r2, r3, #4
 2410 06d4 10301BE5 		ldr	r3, [fp, #-16]
 2411 06d8 102083E5 		str	r2, [r3, #16]
 400:../kernel/os_core/os_q.c ****         pq->OSQEntries--;                        /* Update the number of entries in the queue      
 2412              		.loc 1 400 0
 2413 06dc 10301BE5 		ldr	r3, [fp, #-16]
 2414 06e0 B631D3E1 		ldrh	r3, [r3, #22]
 2415 06e4 013043E2 		sub	r3, r3, #1
 2416 06e8 0338A0E1 		mov	r3, r3, asl #16
 2417 06ec 2328A0E1 		mov	r2, r3, lsr #16
 2418 06f0 10301BE5 		ldr	r3, [fp, #-16]
 2419 06f4 B621C3E1 		strh	r2, [r3, #22]	@ movhi
 401:../kernel/os_core/os_q.c ****         if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the qu
 2420              		.loc 1 401 0
 2421 06f8 10301BE5 		ldr	r3, [fp, #-16]
 2422 06fc 102093E5 		ldr	r2, [r3, #16]
 2423 0700 10301BE5 		ldr	r3, [fp, #-16]
 2424 0704 083093E5 		ldr	r3, [r3, #8]
 2425 0708 030052E1 		cmp	r2, r3
 2426 070c 0300001A 		bne	.L44
 402:../kernel/os_core/os_q.c ****             pq->OSQOut = pq->OSQStart;
 2427              		.loc 1 402 0
 2428 0710 10301BE5 		ldr	r3, [fp, #-16]
 2429 0714 042093E5 		ldr	r2, [r3, #4]
 2430 0718 10301BE5 		ldr	r3, [fp, #-16]
 2431 071c 102083E5 		str	r2, [r3, #16]
 2432              	.L44:
 403:../kernel/os_core/os_q.c ****         }
 404:../kernel/os_core/os_q.c ****         OS_EXIT_CRITICAL();
 2433              		.loc 1 404 0
 2434              	@ 404 "../kernel/os_core/os_q.c" 1
 2435 0720 04009DE4 		ldmfd sp!, {r0}
 2436              	@ 0 "" 2
 2437              	@ 404 "../kernel/os_core/os_q.c" 1
 2438 0724 00F021E1 		msr   cpsr_c, r0
 2439              	@ 0 "" 2
 405:../kernel/os_core/os_q.c ****         *err = OS_NO_ERR;
 2440              		.loc 1 405 0
 2441 0728 20301BE5 		ldr	r3, [fp, #-32]
 2442 072c 0020A0E3 		mov	r2, #0
 2443 0730 0020C3E5 		strb	r2, [r3, #0]
 406:../kernel/os_core/os_q.c ****         return (msg);                            /* Return message received                        
 2444              		.loc 1 406 0
 2445 0734 14301BE5 		ldr	r3, [fp, #-20]
 2446 0738 3C0000EA 		b	.L40
 2447              	.L43:
 407:../kernel/os_core/os_q.c ****     }
 408:../kernel/os_core/os_q.c ****     OSTCBCur->OSTCBStat   |= OS_STAT_Q;          /* Task will have to pend for a message to be post
 2448              		.loc 1 408 0
 2449 073c 00319FE5 		ldr	r3, .L46+4
 2450 0740 003093E5 		ldr	r3, [r3, #0]
 2451 0744 F8209FE5 		ldr	r2, .L46+4
 2452 0748 002092E5 		ldr	r2, [r2, #0]
 2453 074c 2C20D2E5 		ldrb	r2, [r2, #44]	@ zero_extendqisi2
 2454 0750 042082E3 		orr	r2, r2, #4
 2455 0754 FF2002E2 		and	r2, r2, #255
 2456 0758 2C20C3E5 		strb	r2, [r3, #44]
 409:../kernel/os_core/os_q.c ****     OSTCBCur->OSTCBPendTO  = FALSE;
 2457              		.loc 1 409 0
 2458 075c E0309FE5 		ldr	r3, .L46+4
 2459 0760 003093E5 		ldr	r3, [r3, #0]
 2460 0764 0020A0E3 		mov	r2, #0
 2461 0768 2D20C3E5 		strb	r2, [r3, #45]
 410:../kernel/os_core/os_q.c ****     OSTCBCur->OSTCBDly     = timeout;            /* Load timeout into TCB                          
 2462              		.loc 1 410 0
 2463 076c D0309FE5 		ldr	r3, .L46+4
 2464 0770 003093E5 		ldr	r3, [r3, #0]
 2465 0774 BA215BE1 		ldrh	r2, [fp, #-26]	@ movhi
 2466 0778 BA22C3E1 		strh	r2, [r3, #42]	@ movhi
 411:../kernel/os_core/os_q.c ****     OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs     
 2467              		.loc 1 411 0
 2468 077c 18001BE5 		ldr	r0, [fp, #-24]
 2469 0780 FEFFFFEB 		bl	OS_EventTaskWait
 412:../kernel/os_core/os_q.c ****     OS_EXIT_CRITICAL();
 2470              		.loc 1 412 0
 2471              	@ 412 "../kernel/os_core/os_q.c" 1
 2472 0784 04009DE4 		ldmfd sp!, {r0}
 2473              	@ 0 "" 2
 2474              	@ 412 "../kernel/os_core/os_q.c" 1
 2475 0788 00F021E1 		msr   cpsr_c, r0
 2476              	@ 0 "" 2
 413:../kernel/os_core/os_q.c ****     OS_Sched();                                  /* Find next highest priority task ready to run   
 2477              		.loc 1 413 0
 2478 078c FEFFFFEB 		bl	OS_Sched
 414:../kernel/os_core/os_q.c ****     OS_ENTER_CRITICAL();
 2479              		.loc 1 414 0
 2480              	@ 414 "../kernel/os_core/os_q.c" 1
 2481 0790 00000FE1 		mrs   r0, cpsr
 2482              	@ 0 "" 2
 2483              	@ 414 "../kernel/os_core/os_q.c" 1
 2484 0794 04002DE5 		stmfd sp!, {r0}
 2485              	@ 0 "" 2
 2486              	@ 414 "../kernel/os_core/os_q.c" 1
 2487 0798 C00080E3 		orr   r0, r0, #0b11000000
 2488              	@ 0 "" 2
 2489              	@ 414 "../kernel/os_core/os_q.c" 1
 2490 079c 00F021E1 		msr   cpsr_c, r0
 2491              	@ 0 "" 2
 415:../kernel/os_core/os_q.c ****     if (OSTCBCur->OSTCBPendTO == TRUE) {         /* Was task readied because of a timeout?         
 2492              		.loc 1 415 0
 2493 07a0 9C309FE5 		ldr	r3, .L46+4
 2494 07a4 003093E5 		ldr	r3, [r3, #0]
 2495 07a8 2D30D3E5 		ldrb	r3, [r3, #45]	@ zero_extendqisi2
 2496 07ac 010053E3 		cmp	r3, #1
 2497 07b0 0800001A 		bne	.L45
 416:../kernel/os_core/os_q.c ****         OS_EventTO(pevent);                      /* Yes                                            
 2498              		.loc 1 416 0
 2499 07b4 18001BE5 		ldr	r0, [fp, #-24]
 2500 07b8 FEFFFFEB 		bl	OS_EventTO
 417:../kernel/os_core/os_q.c ****         OS_EXIT_CRITICAL();
 2501              		.loc 1 417 0
 2502              	@ 417 "../kernel/os_core/os_q.c" 1
 2503 07bc 04009DE4 		ldmfd sp!, {r0}
 2504              	@ 0 "" 2
 2505              	@ 417 "../kernel/os_core/os_q.c" 1
 2506 07c0 00F021E1 		msr   cpsr_c, r0
 2507              	@ 0 "" 2
 418:../kernel/os_core/os_q.c ****         *err = OS_TIMEOUT;                       /*     Indicate a timeout occured                 
 2508              		.loc 1 418 0
 2509 07c4 20301BE5 		ldr	r3, [fp, #-32]
 2510 07c8 0A20A0E3 		mov	r2, #10
 2511 07cc 0020C3E5 		strb	r2, [r3, #0]
 419:../kernel/os_core/os_q.c ****         return ((void *)0);                      /*     No message received                        
 2512              		.loc 1 419 0
 2513 07d0 0030A0E3 		mov	r3, #0
 2514 07d4 150000EA 		b	.L40
 2515              	.L45:
 420:../kernel/os_core/os_q.c ****     }
 421:../kernel/os_core/os_q.c ****     msg                     = OSTCBCur->OSTCBMsg;/* No, Extract message from TCB (Put there by QPos
 2516              		.loc 1 421 0
 2517 07d8 64309FE5 		ldr	r3, .L46+4
 2518 07dc 003093E5 		ldr	r3, [r3, #0]
 2519 07e0 203093E5 		ldr	r3, [r3, #32]
 2520 07e4 14300BE5 		str	r3, [fp, #-20]
 422:../kernel/os_core/os_q.c ****     OSTCBCur->OSTCBMsg      = (void *)0;
 2521              		.loc 1 422 0
 2522 07e8 54309FE5 		ldr	r3, .L46+4
 2523 07ec 003093E5 		ldr	r3, [r3, #0]
 2524 07f0 0020A0E3 		mov	r2, #0
 2525 07f4 202083E5 		str	r2, [r3, #32]
 423:../kernel/os_core/os_q.c ****     OSTCBCur->OSTCBStat     = OS_STAT_RDY;
 2526              		.loc 1 423 0
 2527 07f8 44309FE5 		ldr	r3, .L46+4
 2528 07fc 003093E5 		ldr	r3, [r3, #0]
 2529 0800 0020A0E3 		mov	r2, #0
 2530 0804 2C20C3E5 		strb	r2, [r3, #44]
 424:../kernel/os_core/os_q.c ****     OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;     /*     No longer waiting for event                
 2531              		.loc 1 424 0
 2532 0808 34309FE5 		ldr	r3, .L46+4
 2533 080c 003093E5 		ldr	r3, [r3, #0]
 2534 0810 0020A0E3 		mov	r2, #0
 2535 0814 1C2083E5 		str	r2, [r3, #28]
 425:../kernel/os_core/os_q.c ****     OS_EXIT_CRITICAL();
 2536              		.loc 1 425 0
 2537              	@ 425 "../kernel/os_core/os_q.c" 1
 2538 0818 04009DE4 		ldmfd sp!, {r0}
 2539              	@ 0 "" 2
 2540              	@ 425 "../kernel/os_core/os_q.c" 1
 2541 081c 00F021E1 		msr   cpsr_c, r0
 2542              	@ 0 "" 2
 426:../kernel/os_core/os_q.c ****     *err                    = OS_NO_ERR;
 2543              		.loc 1 426 0
 2544 0820 20301BE5 		ldr	r3, [fp, #-32]
 2545 0824 0020A0E3 		mov	r2, #0
 2546 0828 0020C3E5 		strb	r2, [r3, #0]
 427:../kernel/os_core/os_q.c ****     return (msg);                                /*     Return message received                    
 2547              		.loc 1 427 0
 2548 082c 14301BE5 		ldr	r3, [fp, #-20]
 2549              	.L40:
 428:../kernel/os_core/os_q.c **** }
 2550              		.loc 1 428 0
 2551 0830 0300A0E1 		mov	r0, r3
 2552 0834 0CD04BE2 		sub	sp, fp, #12
 2553 0838 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2554 083c 1EFF2FE1 		bx	lr
 2555              	.L47:
 2556              		.align	2
 2557              	.L46:
 2558 0840 00000000 		.word	OSIntNesting
 2559 0844 00000000 		.word	OSTCBCur
 2560              		.cfi_endproc
 2561              	.LFE4:
 2563              		.align	2
 2564              		.global	OSQPost
 2566              	OSQPost:
 2567              	.LFB5:
 429:../kernel/os_core/os_q.c **** /*$PAGE*/
 430:../kernel/os_core/os_q.c **** /*
 431:../kernel/os_core/os_q.c **** ***************************************************************************************************
 432:../kernel/os_core/os_q.c **** *                                        POST MESSAGE TO A QUEUE
 433:../kernel/os_core/os_q.c **** *
 434:../kernel/os_core/os_q.c **** * Description: This function sends a message to a queue
 435:../kernel/os_core/os_q.c **** *
 436:../kernel/os_core/os_q.c **** * Arguments  : pevent        is a pointer to the event control block associated with the desired qu
 437:../kernel/os_core/os_q.c **** *
 438:../kernel/os_core/os_q.c **** *              msg           is a pointer to the message to send.
 439:../kernel/os_core/os_q.c **** *
 440:../kernel/os_core/os_q.c **** * Returns    : OS_NO_ERR             The call was successful and the message was sent
 441:../kernel/os_core/os_q.c **** *              OS_Q_FULL             If the queue cannot accept any more messages because it is ful
 442:../kernel/os_core/os_q.c **** *              OS_ERR_EVENT_TYPE     If you didn't pass a pointer to a queue.
 443:../kernel/os_core/os_q.c **** *              OS_ERR_PEVENT_NULL    If 'pevent' is a NULL pointer
 444:../kernel/os_core/os_q.c **** *
 445:../kernel/os_core/os_q.c **** * Note(s)    : As of V2.60, this function allows you to send NULL pointer messages.
 446:../kernel/os_core/os_q.c **** ***************************************************************************************************
 447:../kernel/os_core/os_q.c **** */
 448:../kernel/os_core/os_q.c **** 
 449:../kernel/os_core/os_q.c **** #if OS_Q_POST_EN > 0
 450:../kernel/os_core/os_q.c **** INT8U  OSQPost (OS_EVENT *pevent, void *msg)
 451:../kernel/os_core/os_q.c **** {
 2568              		.loc 1 451 0
 2569              		.cfi_startproc
 2570              		@ Function supports interworking.
 2571              		@ args = 0, pretend = 0, frame = 16
 2572              		@ frame_needed = 1, uses_anonymous_args = 0
 2573 0848 0DC0A0E1 		mov	ip, sp
 2574              	.LCFI10:
 2575              		.cfi_def_cfa_register 12
 2576 084c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2577 0850 04B04CE2 		sub	fp, ip, #4
 2578              		.cfi_offset 14, -8
 2579              		.cfi_offset 13, -12
 2580              		.cfi_offset 11, -16
 2581              	.LCFI11:
 2582              		.cfi_def_cfa 11, 4
 2583 0854 10D04DE2 		sub	sp, sp, #16
 2584 0858 18000BE5 		str	r0, [fp, #-24]
 2585 085c 1C100BE5 		str	r1, [fp, #-28]
 452:../kernel/os_core/os_q.c ****     OS_Q      *pq;
 453:../kernel/os_core/os_q.c **** #if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register 
 454:../kernel/os_core/os_q.c ****     OS_CPU_SR  cpu_sr;
 455:../kernel/os_core/os_q.c **** 
 456:../kernel/os_core/os_q.c **** 
 457:../kernel/os_core/os_q.c **** 
 458:../kernel/os_core/os_q.c ****     cpu_sr = 0;                                        /* Prevent compiler warning                 
 459:../kernel/os_core/os_q.c **** #endif    
 460:../kernel/os_core/os_q.c **** #if OS_ARG_CHK_EN > 0
 461:../kernel/os_core/os_q.c ****     if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                        
 2586              		.loc 1 461 0
 2587 0860 18301BE5 		ldr	r3, [fp, #-24]
 2588 0864 000053E3 		cmp	r3, #0
 2589 0868 0100001A 		bne	.L49
 462:../kernel/os_core/os_q.c ****         return (OS_ERR_PEVENT_NULL);
 2590              		.loc 1 462 0
 2591 086c 0430A0E3 		mov	r3, #4
 2592 0870 3E0000EA 		b	.L50
 2593              	.L49:
 463:../kernel/os_core/os_q.c ****     }
 464:../kernel/os_core/os_q.c **** #endif
 465:../kernel/os_core/os_q.c ****     if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                
 2594              		.loc 1 465 0
 2595 0874 18301BE5 		ldr	r3, [fp, #-24]
 2596 0878 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2597 087c 020053E3 		cmp	r3, #2
 2598 0880 0100000A 		beq	.L51
 466:../kernel/os_core/os_q.c ****         return (OS_ERR_EVENT_TYPE);
 2599              		.loc 1 466 0
 2600 0884 0130A0E3 		mov	r3, #1
 2601 0888 380000EA 		b	.L50
 2602              	.L51:
 467:../kernel/os_core/os_q.c ****     }
 468:../kernel/os_core/os_q.c ****     OS_ENTER_CRITICAL();
 2603              		.loc 1 468 0
 2604              	@ 468 "../kernel/os_core/os_q.c" 1
 2605 088c 00000FE1 		mrs   r0, cpsr
 2606              	@ 0 "" 2
 2607              	@ 468 "../kernel/os_core/os_q.c" 1
 2608 0890 04002DE5 		stmfd sp!, {r0}
 2609              	@ 0 "" 2
 2610              	@ 468 "../kernel/os_core/os_q.c" 1
 2611 0894 C00080E3 		orr   r0, r0, #0b11000000
 2612              	@ 0 "" 2
 2613              	@ 468 "../kernel/os_core/os_q.c" 1
 2614 0898 00F021E1 		msr   cpsr_c, r0
 2615              	@ 0 "" 2
 469:../kernel/os_core/os_q.c ****     if (pevent->OSEventGrp != 0x00) {                  /* See if any task pending on queue         
 2616              		.loc 1 469 0
 2617 089c 18301BE5 		ldr	r3, [fp, #-24]
 2618 08a0 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2619 08a4 000053E3 		cmp	r3, #0
 2620 08a8 0800000A 		beq	.L52
 470:../kernel/os_core/os_q.c ****         (void)OS_EventTaskRdy(pevent, msg, OS_STAT_Q); /* Ready highest priority task waiting on ev
 2621              		.loc 1 470 0
 2622 08ac 18001BE5 		ldr	r0, [fp, #-24]
 2623 08b0 1C101BE5 		ldr	r1, [fp, #-28]
 2624 08b4 0420A0E3 		mov	r2, #4
 2625 08b8 FEFFFFEB 		bl	OS_EventTaskRdy
 471:../kernel/os_core/os_q.c ****         OS_EXIT_CRITICAL();
 2626              		.loc 1 471 0
 2627              	@ 471 "../kernel/os_core/os_q.c" 1
 2628 08bc 04009DE4 		ldmfd sp!, {r0}
 2629              	@ 0 "" 2
 2630              	@ 471 "../kernel/os_core/os_q.c" 1
 2631 08c0 00F021E1 		msr   cpsr_c, r0
 2632              	@ 0 "" 2
 472:../kernel/os_core/os_q.c ****         OS_Sched();                                    /* Find highest priority task ready to run  
 2633              		.loc 1 472 0
 2634 08c4 FEFFFFEB 		bl	OS_Sched
 473:../kernel/os_core/os_q.c ****         return (OS_NO_ERR);
 2635              		.loc 1 473 0
 2636 08c8 0030A0E3 		mov	r3, #0
 2637 08cc 270000EA 		b	.L50
 2638              	.L52:
 474:../kernel/os_core/os_q.c ****     }
 475:../kernel/os_core/os_q.c ****     pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block             
 2639              		.loc 1 475 0
 2640 08d0 18301BE5 		ldr	r3, [fp, #-24]
 2641 08d4 043093E5 		ldr	r3, [r3, #4]
 2642 08d8 10300BE5 		str	r3, [fp, #-16]
 476:../kernel/os_core/os_q.c ****     if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full              
 2643              		.loc 1 476 0
 2644 08dc 10301BE5 		ldr	r3, [fp, #-16]
 2645 08e0 B621D3E1 		ldrh	r2, [r3, #22]
 2646 08e4 10301BE5 		ldr	r3, [fp, #-16]
 2647 08e8 B431D3E1 		ldrh	r3, [r3, #20]
 2648 08ec 030052E1 		cmp	r2, r3
 2649 08f0 0300003A 		bcc	.L53
 477:../kernel/os_core/os_q.c ****         OS_EXIT_CRITICAL();
 2650              		.loc 1 477 0
 2651              	@ 477 "../kernel/os_core/os_q.c" 1
 2652 08f4 04009DE4 		ldmfd sp!, {r0}
 2653              	@ 0 "" 2
 2654              	@ 477 "../kernel/os_core/os_q.c" 1
 2655 08f8 00F021E1 		msr   cpsr_c, r0
 2656              	@ 0 "" 2
 478:../kernel/os_core/os_q.c ****         return (OS_Q_FULL);
 2657              		.loc 1 478 0
 2658 08fc 1E30A0E3 		mov	r3, #30
 2659 0900 1A0000EA 		b	.L50
 2660              	.L53:
 479:../kernel/os_core/os_q.c ****     }
 480:../kernel/os_core/os_q.c ****     *pq->OSQIn++ = msg;                                /* Insert message into queue                
 2661              		.loc 1 480 0
 2662 0904 10301BE5 		ldr	r3, [fp, #-16]
 2663 0908 0C3093E5 		ldr	r3, [r3, #12]
 2664 090c 1C201BE5 		ldr	r2, [fp, #-28]
 2665 0910 002083E5 		str	r2, [r3, #0]
 2666 0914 042083E2 		add	r2, r3, #4
 2667 0918 10301BE5 		ldr	r3, [fp, #-16]
 2668 091c 0C2083E5 		str	r2, [r3, #12]
 481:../kernel/os_core/os_q.c ****     pq->OSQEntries++;                                  /* Update the nbr of entries in the queue   
 2669              		.loc 1 481 0
 2670 0920 10301BE5 		ldr	r3, [fp, #-16]
 2671 0924 B631D3E1 		ldrh	r3, [r3, #22]
 2672 0928 013083E2 		add	r3, r3, #1
 2673 092c 0338A0E1 		mov	r3, r3, asl #16
 2674 0930 2328A0E1 		mov	r2, r3, lsr #16
 2675 0934 10301BE5 		ldr	r3, [fp, #-16]
 2676 0938 B621C3E1 		strh	r2, [r3, #22]	@ movhi
 482:../kernel/os_core/os_q.c ****     if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue    
 2677              		.loc 1 482 0
 2678 093c 10301BE5 		ldr	r3, [fp, #-16]
 2679 0940 0C2093E5 		ldr	r2, [r3, #12]
 2680 0944 10301BE5 		ldr	r3, [fp, #-16]
 2681 0948 083093E5 		ldr	r3, [r3, #8]
 2682 094c 030052E1 		cmp	r2, r3
 2683 0950 0300001A 		bne	.L54
 483:../kernel/os_core/os_q.c ****         pq->OSQIn = pq->OSQStart;
 2684              		.loc 1 483 0
 2685 0954 10301BE5 		ldr	r3, [fp, #-16]
 2686 0958 042093E5 		ldr	r2, [r3, #4]
 2687 095c 10301BE5 		ldr	r3, [fp, #-16]
 2688 0960 0C2083E5 		str	r2, [r3, #12]
 2689              	.L54:
 484:../kernel/os_core/os_q.c ****     }
 485:../kernel/os_core/os_q.c ****     OS_EXIT_CRITICAL();
 2690              		.loc 1 485 0
 2691              	@ 485 "../kernel/os_core/os_q.c" 1
 2692 0964 04009DE4 		ldmfd sp!, {r0}
 2693              	@ 0 "" 2
 2694              	@ 485 "../kernel/os_core/os_q.c" 1
 2695 0968 00F021E1 		msr   cpsr_c, r0
 2696              	@ 0 "" 2
 486:../kernel/os_core/os_q.c ****     return (OS_NO_ERR);
 2697              		.loc 1 486 0
 2698 096c 0030A0E3 		mov	r3, #0
 2699              	.L50:
 487:../kernel/os_core/os_q.c **** }
 2700              		.loc 1 487 0
 2701 0970 0300A0E1 		mov	r0, r3
 2702 0974 0CD04BE2 		sub	sp, fp, #12
 2703 0978 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2704 097c 1EFF2FE1 		bx	lr
 2705              		.cfi_endproc
 2706              	.LFE5:
 2708              		.align	2
 2709              		.global	OSQPostFront
 2711              	OSQPostFront:
 2712              	.LFB6:
 488:../kernel/os_core/os_q.c **** #endif
 489:../kernel/os_core/os_q.c **** /*$PAGE*/
 490:../kernel/os_core/os_q.c **** /*
 491:../kernel/os_core/os_q.c **** ***************************************************************************************************
 492:../kernel/os_core/os_q.c **** *                                   POST MESSAGE TO THE FRONT OF A QUEUE
 493:../kernel/os_core/os_q.c **** *
 494:../kernel/os_core/os_q.c **** * Description: This function sends a message to a queue but unlike OSQPost(), the message is posted
 495:../kernel/os_core/os_q.c **** *              the front instead of the end of the queue.  Using OSQPostFront() allows you to send
 496:../kernel/os_core/os_q.c **** *              'priority' messages.
 497:../kernel/os_core/os_q.c **** *
 498:../kernel/os_core/os_q.c **** * Arguments  : pevent        is a pointer to the event control block associated with the desired qu
 499:../kernel/os_core/os_q.c **** *
 500:../kernel/os_core/os_q.c **** *              msg           is a pointer to the message to send.
 501:../kernel/os_core/os_q.c **** *
 502:../kernel/os_core/os_q.c **** * Returns    : OS_NO_ERR             The call was successful and the message was sent
 503:../kernel/os_core/os_q.c **** *              OS_Q_FULL             If the queue cannot accept any more messages because it is ful
 504:../kernel/os_core/os_q.c **** *              OS_ERR_EVENT_TYPE     If you didn't pass a pointer to a queue.
 505:../kernel/os_core/os_q.c **** *              OS_ERR_PEVENT_NULL    If 'pevent' is a NULL pointer
 506:../kernel/os_core/os_q.c **** *
 507:../kernel/os_core/os_q.c **** * Note(s)    : As of V2.60, this function allows you to send NULL pointer messages.
 508:../kernel/os_core/os_q.c **** ***************************************************************************************************
 509:../kernel/os_core/os_q.c **** */
 510:../kernel/os_core/os_q.c **** 
 511:../kernel/os_core/os_q.c **** #if OS_Q_POST_FRONT_EN > 0
 512:../kernel/os_core/os_q.c **** INT8U  OSQPostFront (OS_EVENT *pevent, void *msg)
 513:../kernel/os_core/os_q.c **** {
 2713              		.loc 1 513 0
 2714              		.cfi_startproc
 2715              		@ Function supports interworking.
 2716              		@ args = 0, pretend = 0, frame = 16
 2717              		@ frame_needed = 1, uses_anonymous_args = 0
 2718 0980 0DC0A0E1 		mov	ip, sp
 2719              	.LCFI12:
 2720              		.cfi_def_cfa_register 12
 2721 0984 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2722 0988 04B04CE2 		sub	fp, ip, #4
 2723              		.cfi_offset 14, -8
 2724              		.cfi_offset 13, -12
 2725              		.cfi_offset 11, -16
 2726              	.LCFI13:
 2727              		.cfi_def_cfa 11, 4
 2728 098c 10D04DE2 		sub	sp, sp, #16
 2729 0990 18000BE5 		str	r0, [fp, #-24]
 2730 0994 1C100BE5 		str	r1, [fp, #-28]
 514:../kernel/os_core/os_q.c ****     OS_Q      *pq;
 515:../kernel/os_core/os_q.c **** #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register  
 516:../kernel/os_core/os_q.c ****     OS_CPU_SR  cpu_sr;
 517:../kernel/os_core/os_q.c **** 
 518:../kernel/os_core/os_q.c **** 
 519:../kernel/os_core/os_q.c **** 
 520:../kernel/os_core/os_q.c ****     cpu_sr = 0;                                       /* Prevent compiler warning                  
 521:../kernel/os_core/os_q.c **** #endif    
 522:../kernel/os_core/os_q.c **** #if OS_ARG_CHK_EN > 0
 523:../kernel/os_core/os_q.c ****     if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                         
 2731              		.loc 1 523 0
 2732 0998 18301BE5 		ldr	r3, [fp, #-24]
 2733 099c 000053E3 		cmp	r3, #0
 2734 09a0 0100001A 		bne	.L56
 524:../kernel/os_core/os_q.c ****         return (OS_ERR_PEVENT_NULL);
 2735              		.loc 1 524 0
 2736 09a4 0430A0E3 		mov	r3, #4
 2737 09a8 400000EA 		b	.L57
 2738              	.L56:
 525:../kernel/os_core/os_q.c ****     }
 526:../kernel/os_core/os_q.c **** #endif
 527:../kernel/os_core/os_q.c ****     if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                 
 2739              		.loc 1 527 0
 2740 09ac 18301BE5 		ldr	r3, [fp, #-24]
 2741 09b0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2742 09b4 020053E3 		cmp	r3, #2
 2743 09b8 0100000A 		beq	.L58
 528:../kernel/os_core/os_q.c ****         return (OS_ERR_EVENT_TYPE);
 2744              		.loc 1 528 0
 2745 09bc 0130A0E3 		mov	r3, #1
 2746 09c0 3A0000EA 		b	.L57
 2747              	.L58:
 529:../kernel/os_core/os_q.c ****     }
 530:../kernel/os_core/os_q.c ****     OS_ENTER_CRITICAL();
 2748              		.loc 1 530 0
 2749              	@ 530 "../kernel/os_core/os_q.c" 1
 2750 09c4 00000FE1 		mrs   r0, cpsr
 2751              	@ 0 "" 2
 2752              	@ 530 "../kernel/os_core/os_q.c" 1
 2753 09c8 04002DE5 		stmfd sp!, {r0}
 2754              	@ 0 "" 2
 2755              	@ 530 "../kernel/os_core/os_q.c" 1
 2756 09cc C00080E3 		orr   r0, r0, #0b11000000
 2757              	@ 0 "" 2
 2758              	@ 530 "../kernel/os_core/os_q.c" 1
 2759 09d0 00F021E1 		msr   cpsr_c, r0
 2760              	@ 0 "" 2
 531:../kernel/os_core/os_q.c ****     if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue          
 2761              		.loc 1 531 0
 2762 09d4 18301BE5 		ldr	r3, [fp, #-24]
 2763 09d8 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2764 09dc 000053E3 		cmp	r3, #0
 2765 09e0 0800000A 		beq	.L59
 532:../kernel/os_core/os_q.c ****         (void)OS_EventTaskRdy(pevent, msg, OS_STAT_Q);/* Ready highest priority task waiting on eve
 2766              		.loc 1 532 0
 2767 09e4 18001BE5 		ldr	r0, [fp, #-24]
 2768 09e8 1C101BE5 		ldr	r1, [fp, #-28]
 2769 09ec 0420A0E3 		mov	r2, #4
 2770 09f0 FEFFFFEB 		bl	OS_EventTaskRdy
 533:../kernel/os_core/os_q.c ****         OS_EXIT_CRITICAL();
 2771              		.loc 1 533 0
 2772              	@ 533 "../kernel/os_core/os_q.c" 1
 2773 09f4 04009DE4 		ldmfd sp!, {r0}
 2774              	@ 0 "" 2
 2775              	@ 533 "../kernel/os_core/os_q.c" 1
 2776 09f8 00F021E1 		msr   cpsr_c, r0
 2777              	@ 0 "" 2
 534:../kernel/os_core/os_q.c ****         OS_Sched();                                   /* Find highest priority task ready to run   
 2778              		.loc 1 534 0
 2779 09fc FEFFFFEB 		bl	OS_Sched
 535:../kernel/os_core/os_q.c ****         return (OS_NO_ERR);
 2780              		.loc 1 535 0
 2781 0a00 0030A0E3 		mov	r3, #0
 2782 0a04 290000EA 		b	.L57
 2783              	.L59:
 536:../kernel/os_core/os_q.c ****     }
 537:../kernel/os_core/os_q.c ****     pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block              
 2784              		.loc 1 537 0
 2785 0a08 18301BE5 		ldr	r3, [fp, #-24]
 2786 0a0c 043093E5 		ldr	r3, [r3, #4]
 2787 0a10 10300BE5 		str	r3, [fp, #-16]
 538:../kernel/os_core/os_q.c ****     if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full               
 2788              		.loc 1 538 0
 2789 0a14 10301BE5 		ldr	r3, [fp, #-16]
 2790 0a18 B621D3E1 		ldrh	r2, [r3, #22]
 2791 0a1c 10301BE5 		ldr	r3, [fp, #-16]
 2792 0a20 B431D3E1 		ldrh	r3, [r3, #20]
 2793 0a24 030052E1 		cmp	r2, r3
 2794 0a28 0300003A 		bcc	.L60
 539:../kernel/os_core/os_q.c ****         OS_EXIT_CRITICAL();
 2795              		.loc 1 539 0
 2796              	@ 539 "../kernel/os_core/os_q.c" 1
 2797 0a2c 04009DE4 		ldmfd sp!, {r0}
 2798              	@ 0 "" 2
 2799              	@ 539 "../kernel/os_core/os_q.c" 1
 2800 0a30 00F021E1 		msr   cpsr_c, r0
 2801              	@ 0 "" 2
 540:../kernel/os_core/os_q.c ****         return (OS_Q_FULL);
 2802              		.loc 1 540 0
 2803 0a34 1E30A0E3 		mov	r3, #30
 2804 0a38 1C0000EA 		b	.L57
 2805              	.L60:
 541:../kernel/os_core/os_q.c ****     }
 542:../kernel/os_core/os_q.c ****     if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue en
 2806              		.loc 1 542 0
 2807 0a3c 10301BE5 		ldr	r3, [fp, #-16]
 2808 0a40 102093E5 		ldr	r2, [r3, #16]
 2809 0a44 10301BE5 		ldr	r3, [fp, #-16]
 2810 0a48 043093E5 		ldr	r3, [r3, #4]
 2811 0a4c 030052E1 		cmp	r2, r3
 2812 0a50 0300001A 		bne	.L61
 543:../kernel/os_core/os_q.c ****         pq->OSQOut = pq->OSQEnd;
 2813              		.loc 1 543 0
 2814 0a54 10301BE5 		ldr	r3, [fp, #-16]
 2815 0a58 082093E5 		ldr	r2, [r3, #8]
 2816 0a5c 10301BE5 		ldr	r3, [fp, #-16]
 2817 0a60 102083E5 		str	r2, [r3, #16]
 2818              	.L61:
 544:../kernel/os_core/os_q.c ****     }
 545:../kernel/os_core/os_q.c ****     pq->OSQOut--;
 2819              		.loc 1 545 0
 2820 0a64 10301BE5 		ldr	r3, [fp, #-16]
 2821 0a68 103093E5 		ldr	r3, [r3, #16]
 2822 0a6c 042043E2 		sub	r2, r3, #4
 2823 0a70 10301BE5 		ldr	r3, [fp, #-16]
 2824 0a74 102083E5 		str	r2, [r3, #16]
 546:../kernel/os_core/os_q.c ****     *pq->OSQOut = msg;                                /* Insert message into queue                 
 2825              		.loc 1 546 0
 2826 0a78 10301BE5 		ldr	r3, [fp, #-16]
 2827 0a7c 103093E5 		ldr	r3, [r3, #16]
 2828 0a80 1C201BE5 		ldr	r2, [fp, #-28]
 2829 0a84 002083E5 		str	r2, [r3, #0]
 547:../kernel/os_core/os_q.c ****     pq->OSQEntries++;                                 /* Update the nbr of entries in the queue    
 2830              		.loc 1 547 0
 2831 0a88 10301BE5 		ldr	r3, [fp, #-16]
 2832 0a8c B631D3E1 		ldrh	r3, [r3, #22]
 2833 0a90 013083E2 		add	r3, r3, #1
 2834 0a94 0338A0E1 		mov	r3, r3, asl #16
 2835 0a98 2328A0E1 		mov	r2, r3, lsr #16
 2836 0a9c 10301BE5 		ldr	r3, [fp, #-16]
 2837 0aa0 B621C3E1 		strh	r2, [r3, #22]	@ movhi
 548:../kernel/os_core/os_q.c ****     OS_EXIT_CRITICAL();
 2838              		.loc 1 548 0
 2839              	@ 548 "../kernel/os_core/os_q.c" 1
 2840 0aa4 04009DE4 		ldmfd sp!, {r0}
 2841              	@ 0 "" 2
 2842              	@ 548 "../kernel/os_core/os_q.c" 1
 2843 0aa8 00F021E1 		msr   cpsr_c, r0
 2844              	@ 0 "" 2
 549:../kernel/os_core/os_q.c ****     return (OS_NO_ERR);
 2845              		.loc 1 549 0
 2846 0aac 0030A0E3 		mov	r3, #0
 2847              	.L57:
 550:../kernel/os_core/os_q.c **** }
 2848              		.loc 1 550 0
 2849 0ab0 0300A0E1 		mov	r0, r3
 2850 0ab4 0CD04BE2 		sub	sp, fp, #12
 2851 0ab8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2852 0abc 1EFF2FE1 		bx	lr
 2853              		.cfi_endproc
 2854              	.LFE6:
 2856              		.align	2
 2857              		.global	OSQPostOpt
 2859              	OSQPostOpt:
 2860              	.LFB7:
 551:../kernel/os_core/os_q.c **** #endif
 552:../kernel/os_core/os_q.c **** /*$PAGE*/
 553:../kernel/os_core/os_q.c **** /*
 554:../kernel/os_core/os_q.c **** ***************************************************************************************************
 555:../kernel/os_core/os_q.c **** *                                        POST MESSAGE TO A QUEUE
 556:../kernel/os_core/os_q.c **** *
 557:../kernel/os_core/os_q.c **** * Description: This function sends a message to a queue.  This call has been added to reduce code s
 558:../kernel/os_core/os_q.c **** *              since it can replace both OSQPost() and OSQPostFront().  Also, this function adds th
 559:../kernel/os_core/os_q.c **** *              capability to broadcast a message to ALL tasks waiting on the message queue.
 560:../kernel/os_core/os_q.c **** *
 561:../kernel/os_core/os_q.c **** * Arguments  : pevent        is a pointer to the event control block associated with the desired qu
 562:../kernel/os_core/os_q.c **** *
 563:../kernel/os_core/os_q.c **** *              msg           is a pointer to the message to send.
 564:../kernel/os_core/os_q.c **** *
 565:../kernel/os_core/os_q.c **** *              opt           determines the type of POST performed:
 566:../kernel/os_core/os_q.c **** *                            OS_POST_OPT_NONE         POST to a single waiting task
 567:../kernel/os_core/os_q.c **** *                                                     (Identical to OSQPost())
 568:../kernel/os_core/os_q.c **** *                            OS_POST_OPT_BROADCAST    POST to ALL tasks that are waiting on the que
 569:../kernel/os_core/os_q.c **** *                            OS_POST_OPT_FRONT        POST as LIFO (Simulates OSQPostFront())
 570:../kernel/os_core/os_q.c **** *
 571:../kernel/os_core/os_q.c **** *                            Below is a list of ALL the possible combination of these flags:
 572:../kernel/os_core/os_q.c **** *
 573:../kernel/os_core/os_q.c **** *                                 1) OS_POST_OPT_NONE
 574:../kernel/os_core/os_q.c **** *                                    identical to OSQPost()
 575:../kernel/os_core/os_q.c **** *
 576:../kernel/os_core/os_q.c **** *                                 2) OS_POST_OPT_FRONT
 577:../kernel/os_core/os_q.c **** *                                    identical to OSQPostFront()
 578:../kernel/os_core/os_q.c **** *
 579:../kernel/os_core/os_q.c **** *                                 3) OS_POST_OPT_BROADCAST
 580:../kernel/os_core/os_q.c **** *                                    identical to OSQPost() but will broadcast 'msg' to ALL waiting
 581:../kernel/os_core/os_q.c **** *
 582:../kernel/os_core/os_q.c **** *                                 4) OS_POST_OPT_FRONT + OS_POST_OPT_BROADCAST  is identical to
 583:../kernel/os_core/os_q.c **** *                                    OSQPostFront() except that will broadcast 'msg' to ALL waiting
 584:../kernel/os_core/os_q.c **** *
 585:../kernel/os_core/os_q.c **** * Returns    : OS_NO_ERR             The call was successful and the message was sent
 586:../kernel/os_core/os_q.c **** *              OS_Q_FULL             If the queue cannot accept any more messages because it is ful
 587:../kernel/os_core/os_q.c **** *              OS_ERR_EVENT_TYPE     If you didn't pass a pointer to a queue.
 588:../kernel/os_core/os_q.c **** *              OS_ERR_PEVENT_NULL    If 'pevent' is a NULL pointer
 589:../kernel/os_core/os_q.c **** *
 590:../kernel/os_core/os_q.c **** * Warning    : Interrupts can be disabled for a long time if you do a 'broadcast'.  In fact, the
 591:../kernel/os_core/os_q.c **** *              interrupt disable time is proportional to the number of tasks waiting on the queue.
 592:../kernel/os_core/os_q.c **** ***************************************************************************************************
 593:../kernel/os_core/os_q.c **** */
 594:../kernel/os_core/os_q.c **** 
 595:../kernel/os_core/os_q.c **** #if OS_Q_POST_OPT_EN > 0
 596:../kernel/os_core/os_q.c **** INT8U  OSQPostOpt (OS_EVENT *pevent, void *msg, INT8U opt)
 597:../kernel/os_core/os_q.c **** {
 2861              		.loc 1 597 0
 2862              		.cfi_startproc
 2863              		@ Function supports interworking.
 2864              		@ args = 0, pretend = 0, frame = 24
 2865              		@ frame_needed = 1, uses_anonymous_args = 0
 2866 0ac0 0DC0A0E1 		mov	ip, sp
 2867              	.LCFI14:
 2868              		.cfi_def_cfa_register 12
 2869 0ac4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2870 0ac8 04B04CE2 		sub	fp, ip, #4
 2871              		.cfi_offset 14, -8
 2872              		.cfi_offset 13, -12
 2873              		.cfi_offset 11, -16
 2874              	.LCFI15:
 2875              		.cfi_def_cfa 11, 4
 2876 0acc 18D04DE2 		sub	sp, sp, #24
 2877 0ad0 18000BE5 		str	r0, [fp, #-24]
 2878 0ad4 1C100BE5 		str	r1, [fp, #-28]
 2879 0ad8 0230A0E1 		mov	r3, r2
 2880 0adc 1D304BE5 		strb	r3, [fp, #-29]
 598:../kernel/os_core/os_q.c ****     OS_Q      *pq;
 599:../kernel/os_core/os_q.c **** #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register  
 600:../kernel/os_core/os_q.c ****     OS_CPU_SR  cpu_sr;
 601:../kernel/os_core/os_q.c ****                      
 602:../kernel/os_core/os_q.c **** 
 603:../kernel/os_core/os_q.c **** 
 604:../kernel/os_core/os_q.c ****     cpu_sr = 0;                                       /* Prevent compiler warning                  
 605:../kernel/os_core/os_q.c **** #endif    
 606:../kernel/os_core/os_q.c **** #if OS_ARG_CHK_EN > 0
 607:../kernel/os_core/os_q.c ****     if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                         
 2881              		.loc 1 607 0
 2882 0ae0 18301BE5 		ldr	r3, [fp, #-24]
 2883 0ae4 000053E3 		cmp	r3, #0
 2884 0ae8 0100001A 		bne	.L63
 608:../kernel/os_core/os_q.c ****         return (OS_ERR_PEVENT_NULL);
 2885              		.loc 1 608 0
 2886 0aec 0430A0E3 		mov	r3, #4
 2887 0af0 650000EA 		b	.L64
 2888              	.L63:
 609:../kernel/os_core/os_q.c ****     }
 610:../kernel/os_core/os_q.c **** #endif
 611:../kernel/os_core/os_q.c ****     if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                 
 2889              		.loc 1 611 0
 2890 0af4 18301BE5 		ldr	r3, [fp, #-24]
 2891 0af8 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2892 0afc 020053E3 		cmp	r3, #2
 2893 0b00 0100000A 		beq	.L65
 612:../kernel/os_core/os_q.c ****         return (OS_ERR_EVENT_TYPE);
 2894              		.loc 1 612 0
 2895 0b04 0130A0E3 		mov	r3, #1
 2896 0b08 5F0000EA 		b	.L64
 2897              	.L65:
 613:../kernel/os_core/os_q.c ****     }
 614:../kernel/os_core/os_q.c ****     OS_ENTER_CRITICAL();
 2898              		.loc 1 614 0
 2899              	@ 614 "../kernel/os_core/os_q.c" 1
 2900 0b0c 00000FE1 		mrs   r0, cpsr
 2901              	@ 0 "" 2
 2902              	@ 614 "../kernel/os_core/os_q.c" 1
 2903 0b10 04002DE5 		stmfd sp!, {r0}
 2904              	@ 0 "" 2
 2905              	@ 614 "../kernel/os_core/os_q.c" 1
 2906 0b14 C00080E3 		orr   r0, r0, #0b11000000
 2907              	@ 0 "" 2
 2908              	@ 614 "../kernel/os_core/os_q.c" 1
 2909 0b18 00F021E1 		msr   cpsr_c, r0
 2910              	@ 0 "" 2
 615:../kernel/os_core/os_q.c ****     if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue          
 2911              		.loc 1 615 0
 2912 0b1c 18301BE5 		ldr	r3, [fp, #-24]
 2913 0b20 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2914 0b24 000053E3 		cmp	r3, #0
 2915 0b28 1700000A 		beq	.L66
 616:../kernel/os_core/os_q.c ****         if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting task
 2916              		.loc 1 616 0
 2917 0b2c 1D305BE5 		ldrb	r3, [fp, #-29]	@ zero_extendqisi2
 2918 0b30 013003E2 		and	r3, r3, #1
 2919 0b34 FF3003E2 		and	r3, r3, #255
 2920 0b38 000053E3 		cmp	r3, #0
 2921 0b3c 0900000A 		beq	.L67
 617:../kernel/os_core/os_q.c ****             while (pevent->OSEventGrp != 0x00) {      /* Yes, Post to ALL tasks waiting on queue   
 2922              		.loc 1 617 0
 2923 0b40 030000EA 		b	.L68
 2924              	.L69:
 618:../kernel/os_core/os_q.c ****                 (void)OS_EventTaskRdy(pevent, msg, OS_STAT_Q);
 2925              		.loc 1 618 0
 2926 0b44 18001BE5 		ldr	r0, [fp, #-24]
 2927 0b48 1C101BE5 		ldr	r1, [fp, #-28]
 2928 0b4c 0420A0E3 		mov	r2, #4
 2929 0b50 FEFFFFEB 		bl	OS_EventTaskRdy
 2930              	.L68:
 617:../kernel/os_core/os_q.c ****             while (pevent->OSEventGrp != 0x00) {      /* Yes, Post to ALL tasks waiting on queue   
 2931              		.loc 1 617 0 discriminator 1
 2932 0b54 18301BE5 		ldr	r3, [fp, #-24]
 2933 0b58 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2934 0b5c 000053E3 		cmp	r3, #0
 2935 0b60 F7FFFF1A 		bne	.L69
 617:../kernel/os_core/os_q.c ****             while (pevent->OSEventGrp != 0x00) {      /* Yes, Post to ALL tasks waiting on queue   
 2936              		.loc 1 617 0 is_stmt 0
 2937 0b64 030000EA 		b	.L70
 2938              	.L67:
 619:../kernel/os_core/os_q.c ****             }
 620:../kernel/os_core/os_q.c ****         } else {
 621:../kernel/os_core/os_q.c ****             (void)OS_EventTaskRdy(pevent, msg, OS_STAT_Q);  /* No,  Post to HPT waiting on queue   
 2939              		.loc 1 621 0 is_stmt 1
 2940 0b68 18001BE5 		ldr	r0, [fp, #-24]
 2941 0b6c 1C101BE5 		ldr	r1, [fp, #-28]
 2942 0b70 0420A0E3 		mov	r2, #4
 2943 0b74 FEFFFFEB 		bl	OS_EventTaskRdy
 2944              	.L70:
 622:../kernel/os_core/os_q.c ****         }
 623:../kernel/os_core/os_q.c ****         OS_EXIT_CRITICAL();
 2945              		.loc 1 623 0
 2946              	@ 623 "../kernel/os_core/os_q.c" 1
 2947 0b78 04009DE4 		ldmfd sp!, {r0}
 2948              	@ 0 "" 2
 2949              	@ 623 "../kernel/os_core/os_q.c" 1
 2950 0b7c 00F021E1 		msr   cpsr_c, r0
 2951              	@ 0 "" 2
 624:../kernel/os_core/os_q.c ****         OS_Sched();                                         /* Find highest priority task ready to 
 2952              		.loc 1 624 0
 2953 0b80 FEFFFFEB 		bl	OS_Sched
 625:../kernel/os_core/os_q.c ****         return (OS_NO_ERR);
 2954              		.loc 1 625 0
 2955 0b84 0030A0E3 		mov	r3, #0
 2956 0b88 3F0000EA 		b	.L64
 2957              	.L66:
 626:../kernel/os_core/os_q.c ****     }
 627:../kernel/os_core/os_q.c ****     pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block              
 2958              		.loc 1 627 0
 2959 0b8c 18301BE5 		ldr	r3, [fp, #-24]
 2960 0b90 043093E5 		ldr	r3, [r3, #4]
 2961 0b94 10300BE5 		str	r3, [fp, #-16]
 628:../kernel/os_core/os_q.c ****     if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full               
 2962              		.loc 1 628 0
 2963 0b98 10301BE5 		ldr	r3, [fp, #-16]
 2964 0b9c B621D3E1 		ldrh	r2, [r3, #22]
 2965 0ba0 10301BE5 		ldr	r3, [fp, #-16]
 2966 0ba4 B431D3E1 		ldrh	r3, [r3, #20]
 2967 0ba8 030052E1 		cmp	r2, r3
 2968 0bac 0300003A 		bcc	.L71
 629:../kernel/os_core/os_q.c ****         OS_EXIT_CRITICAL();
 2969              		.loc 1 629 0
 2970              	@ 629 "../kernel/os_core/os_q.c" 1
 2971 0bb0 04009DE4 		ldmfd sp!, {r0}
 2972              	@ 0 "" 2
 2973              	@ 629 "../kernel/os_core/os_q.c" 1
 2974 0bb4 00F021E1 		msr   cpsr_c, r0
 2975              	@ 0 "" 2
 630:../kernel/os_core/os_q.c ****         return (OS_Q_FULL);
 2976              		.loc 1 630 0
 2977 0bb8 1E30A0E3 		mov	r3, #30
 2978 0bbc 320000EA 		b	.L64
 2979              	.L71:
 631:../kernel/os_core/os_q.c ****     }
 632:../kernel/os_core/os_q.c ****     if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?     
 2980              		.loc 1 632 0
 2981 0bc0 1D305BE5 		ldrb	r3, [fp, #-29]	@ zero_extendqisi2
 2982 0bc4 023003E2 		and	r3, r3, #2
 2983 0bc8 000053E3 		cmp	r3, #0
 2984 0bcc 1300000A 		beq	.L72
 633:../kernel/os_core/os_q.c ****         if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we 
 2985              		.loc 1 633 0
 2986 0bd0 10301BE5 		ldr	r3, [fp, #-16]
 2987 0bd4 102093E5 		ldr	r2, [r3, #16]
 2988 0bd8 10301BE5 		ldr	r3, [fp, #-16]
 2989 0bdc 043093E5 		ldr	r3, [r3, #4]
 2990 0be0 030052E1 		cmp	r2, r3
 2991 0be4 0300001A 		bne	.L73
 634:../kernel/os_core/os_q.c ****             pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry       
 2992              		.loc 1 634 0
 2993 0be8 10301BE5 		ldr	r3, [fp, #-16]
 2994 0bec 082093E5 		ldr	r2, [r3, #8]
 2995 0bf0 10301BE5 		ldr	r3, [fp, #-16]
 2996 0bf4 102083E5 		str	r2, [r3, #16]
 2997              	.L73:
 635:../kernel/os_core/os_q.c ****         }
 636:../kernel/os_core/os_q.c ****         pq->OSQOut--;
 2998              		.loc 1 636 0
 2999 0bf8 10301BE5 		ldr	r3, [fp, #-16]
 3000 0bfc 103093E5 		ldr	r3, [r3, #16]
 3001 0c00 042043E2 		sub	r2, r3, #4
 3002 0c04 10301BE5 		ldr	r3, [fp, #-16]
 3003 0c08 102083E5 		str	r2, [r3, #16]
 637:../kernel/os_core/os_q.c ****         *pq->OSQOut = msg;                            /*      Insert message into queue            
 3004              		.loc 1 637 0
 3005 0c0c 10301BE5 		ldr	r3, [fp, #-16]
 3006 0c10 103093E5 		ldr	r3, [r3, #16]
 3007 0c14 1C201BE5 		ldr	r2, [fp, #-28]
 3008 0c18 002083E5 		str	r2, [r3, #0]
 3009 0c1c 100000EA 		b	.L74
 3010              	.L72:
 638:../kernel/os_core/os_q.c ****     } else {                                          /* No,  Post as FIFO                         
 639:../kernel/os_core/os_q.c ****         *pq->OSQIn++ = msg;                           /*      Insert message into queue            
 3011              		.loc 1 639 0
 3012 0c20 10301BE5 		ldr	r3, [fp, #-16]
 3013 0c24 0C3093E5 		ldr	r3, [r3, #12]
 3014 0c28 1C201BE5 		ldr	r2, [fp, #-28]
 3015 0c2c 002083E5 		str	r2, [r3, #0]
 3016 0c30 042083E2 		add	r2, r3, #4
 3017 0c34 10301BE5 		ldr	r3, [fp, #-16]
 3018 0c38 0C2083E5 		str	r2, [r3, #12]
 640:../kernel/os_core/os_q.c ****         if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue
 3019              		.loc 1 640 0
 3020 0c3c 10301BE5 		ldr	r3, [fp, #-16]
 3021 0c40 0C2093E5 		ldr	r2, [r3, #12]
 3022 0c44 10301BE5 		ldr	r3, [fp, #-16]
 3023 0c48 083093E5 		ldr	r3, [r3, #8]
 3024 0c4c 030052E1 		cmp	r2, r3
 3025 0c50 0300001A 		bne	.L74
 641:../kernel/os_core/os_q.c ****             pq->OSQIn = pq->OSQStart;
 3026              		.loc 1 641 0
 3027 0c54 10301BE5 		ldr	r3, [fp, #-16]
 3028 0c58 042093E5 		ldr	r2, [r3, #4]
 3029 0c5c 10301BE5 		ldr	r3, [fp, #-16]
 3030 0c60 0C2083E5 		str	r2, [r3, #12]
 3031              	.L74:
 642:../kernel/os_core/os_q.c ****         }
 643:../kernel/os_core/os_q.c ****     }
 644:../kernel/os_core/os_q.c ****     pq->OSQEntries++;                                 /* Update the nbr of entries in the queue    
 3032              		.loc 1 644 0
 3033 0c64 10301BE5 		ldr	r3, [fp, #-16]
 3034 0c68 B631D3E1 		ldrh	r3, [r3, #22]
 3035 0c6c 013083E2 		add	r3, r3, #1
 3036 0c70 0338A0E1 		mov	r3, r3, asl #16
 3037 0c74 2328A0E1 		mov	r2, r3, lsr #16
 3038 0c78 10301BE5 		ldr	r3, [fp, #-16]
 3039 0c7c B621C3E1 		strh	r2, [r3, #22]	@ movhi
 645:../kernel/os_core/os_q.c ****     OS_EXIT_CRITICAL();
 3040              		.loc 1 645 0
 3041              	@ 645 "../kernel/os_core/os_q.c" 1
 3042 0c80 04009DE4 		ldmfd sp!, {r0}
 3043              	@ 0 "" 2
 3044              	@ 645 "../kernel/os_core/os_q.c" 1
 3045 0c84 00F021E1 		msr   cpsr_c, r0
 3046              	@ 0 "" 2
 646:../kernel/os_core/os_q.c ****     return (OS_NO_ERR);
 3047              		.loc 1 646 0
 3048 0c88 0030A0E3 		mov	r3, #0
 3049              	.L64:
 647:../kernel/os_core/os_q.c **** }
 3050              		.loc 1 647 0
 3051 0c8c 0300A0E1 		mov	r0, r3
 3052 0c90 0CD04BE2 		sub	sp, fp, #12
 3053 0c94 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3054 0c98 1EFF2FE1 		bx	lr
 3055              		.cfi_endproc
 3056              	.LFE7:
 3058              		.align	2
 3059              		.global	OSQQuery
 3061              	OSQQuery:
 3062              	.LFB8:
 648:../kernel/os_core/os_q.c **** #endif
 649:../kernel/os_core/os_q.c **** /*$PAGE*/
 650:../kernel/os_core/os_q.c **** /*
 651:../kernel/os_core/os_q.c **** ***************************************************************************************************
 652:../kernel/os_core/os_q.c **** *                                        QUERY A MESSAGE QUEUE
 653:../kernel/os_core/os_q.c **** *
 654:../kernel/os_core/os_q.c **** * Description: This function obtains information about a message queue.
 655:../kernel/os_core/os_q.c **** *
 656:../kernel/os_core/os_q.c **** * Arguments  : pevent        is a pointer to the event control block associated with the desired qu
 657:../kernel/os_core/os_q.c **** *
 658:../kernel/os_core/os_q.c **** *              p_q_data      is a pointer to a structure that will contain information about the me
 659:../kernel/os_core/os_q.c **** *                            queue.
 660:../kernel/os_core/os_q.c **** *
 661:../kernel/os_core/os_q.c **** * Returns    : OS_NO_ERR           The call was successful and the message was sent
 662:../kernel/os_core/os_q.c **** *              OS_ERR_EVENT_TYPE   If you are attempting to obtain data from a non queue.
 663:../kernel/os_core/os_q.c **** *              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer
 664:../kernel/os_core/os_q.c **** ***************************************************************************************************
 665:../kernel/os_core/os_q.c **** */
 666:../kernel/os_core/os_q.c **** 
 667:../kernel/os_core/os_q.c **** #if OS_Q_QUERY_EN > 0
 668:../kernel/os_core/os_q.c **** INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
 669:../kernel/os_core/os_q.c **** {
 3063              		.loc 1 669 0
 3064              		.cfi_startproc
 3065              		@ Function supports interworking.
 3066              		@ args = 0, pretend = 0, frame = 24
 3067              		@ frame_needed = 1, uses_anonymous_args = 0
 3068 0c9c 0DC0A0E1 		mov	ip, sp
 3069              	.LCFI16:
 3070              		.cfi_def_cfa_register 12
 3071 0ca0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3072 0ca4 04B04CE2 		sub	fp, ip, #4
 3073              		.cfi_offset 14, -8
 3074              		.cfi_offset 13, -12
 3075              		.cfi_offset 11, -16
 3076              	.LCFI17:
 3077              		.cfi_def_cfa 11, 4
 3078 0ca8 18D04DE2 		sub	sp, sp, #24
 3079 0cac 20000BE5 		str	r0, [fp, #-32]
 3080 0cb0 24100BE5 		str	r1, [fp, #-36]
 670:../kernel/os_core/os_q.c ****     OS_Q      *pq;
 671:../kernel/os_core/os_q.c ****     INT8U     *psrc;
 672:../kernel/os_core/os_q.c ****     INT8U     *pdest;
 673:../kernel/os_core/os_q.c **** #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register       
 674:../kernel/os_core/os_q.c ****     OS_CPU_SR  cpu_sr;
 675:../kernel/os_core/os_q.c **** 
 676:../kernel/os_core/os_q.c **** 
 677:../kernel/os_core/os_q.c **** 
 678:../kernel/os_core/os_q.c ****     cpu_sr = 0;                                            /* Prevent compiler warning             
 679:../kernel/os_core/os_q.c **** #endif    
 680:../kernel/os_core/os_q.c **** #if OS_ARG_CHK_EN > 0
 681:../kernel/os_core/os_q.c ****     if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                    
 3081              		.loc 1 681 0
 3082 0cb4 20301BE5 		ldr	r3, [fp, #-32]
 3083 0cb8 000053E3 		cmp	r3, #0
 3084 0cbc 0100001A 		bne	.L76
 682:../kernel/os_core/os_q.c ****         return (OS_ERR_PEVENT_NULL);
 3085              		.loc 1 682 0
 3086 0cc0 0430A0E3 		mov	r3, #4
 3087 0cc4 780000EA 		b	.L77
 3088              	.L76:
 683:../kernel/os_core/os_q.c ****     }
 684:../kernel/os_core/os_q.c **** #endif
 685:../kernel/os_core/os_q.c ****     if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type            
 3089              		.loc 1 685 0
 3090 0cc8 20301BE5 		ldr	r3, [fp, #-32]
 3091 0ccc 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3092 0cd0 020053E3 		cmp	r3, #2
 3093 0cd4 0100000A 		beq	.L78
 686:../kernel/os_core/os_q.c ****         return (OS_ERR_EVENT_TYPE);
 3094              		.loc 1 686 0
 3095 0cd8 0130A0E3 		mov	r3, #1
 3096 0cdc 720000EA 		b	.L77
 3097              	.L78:
 687:../kernel/os_core/os_q.c ****     }
 688:../kernel/os_core/os_q.c ****     OS_ENTER_CRITICAL();
 3098              		.loc 1 688 0
 3099              	@ 688 "../kernel/os_core/os_q.c" 1
 3100 0ce0 00000FE1 		mrs   r0, cpsr
 3101              	@ 0 "" 2
 3102              	@ 688 "../kernel/os_core/os_q.c" 1
 3103 0ce4 04002DE5 		stmfd sp!, {r0}
 3104              	@ 0 "" 2
 3105              	@ 688 "../kernel/os_core/os_q.c" 1
 3106 0ce8 C00080E3 		orr   r0, r0, #0b11000000
 3107              	@ 0 "" 2
 3108              	@ 688 "../kernel/os_core/os_q.c" 1
 3109 0cec 00F021E1 		msr   cpsr_c, r0
 3110              	@ 0 "" 2
 689:../kernel/os_core/os_q.c ****     p_q_data->OSEventGrp = pevent->OSEventGrp;             /* Copy message queue wait list         
 3111              		.loc 1 689 0
 3112 0cf0 20301BE5 		ldr	r3, [fp, #-32]
 3113 0cf4 0120D3E5 		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 3114 0cf8 24301BE5 		ldr	r3, [fp, #-36]
 3115 0cfc 1020C3E5 		strb	r2, [r3, #16]
 690:../kernel/os_core/os_q.c ****     psrc                 = &pevent->OSEventTbl[0];
 3116              		.loc 1 690 0
 3117 0d00 20301BE5 		ldr	r3, [fp, #-32]
 3118 0d04 083083E2 		add	r3, r3, #8
 3119 0d08 10300BE5 		str	r3, [fp, #-16]
 691:../kernel/os_core/os_q.c ****     pdest                = &p_q_data->OSEventTbl[0];
 3120              		.loc 1 691 0
 3121 0d0c 24301BE5 		ldr	r3, [fp, #-36]
 3122 0d10 083083E2 		add	r3, r3, #8
 3123 0d14 14300BE5 		str	r3, [fp, #-20]
 692:../kernel/os_core/os_q.c **** #if OS_EVENT_TBL_SIZE > 0
 693:../kernel/os_core/os_q.c ****     *pdest++ = *psrc++;
 3124              		.loc 1 693 0
 3125 0d18 10301BE5 		ldr	r3, [fp, #-16]
 3126 0d1c 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 3127 0d20 14301BE5 		ldr	r3, [fp, #-20]
 3128 0d24 0020C3E5 		strb	r2, [r3, #0]
 3129 0d28 14301BE5 		ldr	r3, [fp, #-20]
 3130 0d2c 013083E2 		add	r3, r3, #1
 3131 0d30 14300BE5 		str	r3, [fp, #-20]
 3132 0d34 10301BE5 		ldr	r3, [fp, #-16]
 3133 0d38 013083E2 		add	r3, r3, #1
 3134 0d3c 10300BE5 		str	r3, [fp, #-16]
 694:../kernel/os_core/os_q.c **** #endif
 695:../kernel/os_core/os_q.c **** 
 696:../kernel/os_core/os_q.c **** #if OS_EVENT_TBL_SIZE > 1
 697:../kernel/os_core/os_q.c ****     *pdest++ = *psrc++;
 3135              		.loc 1 697 0
 3136 0d40 10301BE5 		ldr	r3, [fp, #-16]
 3137 0d44 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 3138 0d48 14301BE5 		ldr	r3, [fp, #-20]
 3139 0d4c 0020C3E5 		strb	r2, [r3, #0]
 3140 0d50 14301BE5 		ldr	r3, [fp, #-20]
 3141 0d54 013083E2 		add	r3, r3, #1
 3142 0d58 14300BE5 		str	r3, [fp, #-20]
 3143 0d5c 10301BE5 		ldr	r3, [fp, #-16]
 3144 0d60 013083E2 		add	r3, r3, #1
 3145 0d64 10300BE5 		str	r3, [fp, #-16]
 698:../kernel/os_core/os_q.c **** #endif
 699:../kernel/os_core/os_q.c **** 
 700:../kernel/os_core/os_q.c **** #if OS_EVENT_TBL_SIZE > 2
 701:../kernel/os_core/os_q.c ****     *pdest++ = *psrc++;
 3146              		.loc 1 701 0
 3147 0d68 10301BE5 		ldr	r3, [fp, #-16]
 3148 0d6c 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 3149 0d70 14301BE5 		ldr	r3, [fp, #-20]
 3150 0d74 0020C3E5 		strb	r2, [r3, #0]
 3151 0d78 14301BE5 		ldr	r3, [fp, #-20]
 3152 0d7c 013083E2 		add	r3, r3, #1
 3153 0d80 14300BE5 		str	r3, [fp, #-20]
 3154 0d84 10301BE5 		ldr	r3, [fp, #-16]
 3155 0d88 013083E2 		add	r3, r3, #1
 3156 0d8c 10300BE5 		str	r3, [fp, #-16]
 702:../kernel/os_core/os_q.c **** #endif
 703:../kernel/os_core/os_q.c **** 
 704:../kernel/os_core/os_q.c **** #if OS_EVENT_TBL_SIZE > 3
 705:../kernel/os_core/os_q.c ****     *pdest++ = *psrc++;
 3157              		.loc 1 705 0
 3158 0d90 10301BE5 		ldr	r3, [fp, #-16]
 3159 0d94 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 3160 0d98 14301BE5 		ldr	r3, [fp, #-20]
 3161 0d9c 0020C3E5 		strb	r2, [r3, #0]
 3162 0da0 14301BE5 		ldr	r3, [fp, #-20]
 3163 0da4 013083E2 		add	r3, r3, #1
 3164 0da8 14300BE5 		str	r3, [fp, #-20]
 3165 0dac 10301BE5 		ldr	r3, [fp, #-16]
 3166 0db0 013083E2 		add	r3, r3, #1
 3167 0db4 10300BE5 		str	r3, [fp, #-16]
 706:../kernel/os_core/os_q.c **** #endif
 707:../kernel/os_core/os_q.c **** 
 708:../kernel/os_core/os_q.c **** #if OS_EVENT_TBL_SIZE > 4
 709:../kernel/os_core/os_q.c ****     *pdest++ = *psrc++;
 3168              		.loc 1 709 0
 3169 0db8 10301BE5 		ldr	r3, [fp, #-16]
 3170 0dbc 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 3171 0dc0 14301BE5 		ldr	r3, [fp, #-20]
 3172 0dc4 0020C3E5 		strb	r2, [r3, #0]
 3173 0dc8 14301BE5 		ldr	r3, [fp, #-20]
 3174 0dcc 013083E2 		add	r3, r3, #1
 3175 0dd0 14300BE5 		str	r3, [fp, #-20]
 3176 0dd4 10301BE5 		ldr	r3, [fp, #-16]
 3177 0dd8 013083E2 		add	r3, r3, #1
 3178 0ddc 10300BE5 		str	r3, [fp, #-16]
 710:../kernel/os_core/os_q.c **** #endif
 711:../kernel/os_core/os_q.c **** 
 712:../kernel/os_core/os_q.c **** #if OS_EVENT_TBL_SIZE > 5
 713:../kernel/os_core/os_q.c ****     *pdest++ = *psrc++;
 3179              		.loc 1 713 0
 3180 0de0 10301BE5 		ldr	r3, [fp, #-16]
 3181 0de4 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 3182 0de8 14301BE5 		ldr	r3, [fp, #-20]
 3183 0dec 0020C3E5 		strb	r2, [r3, #0]
 3184 0df0 14301BE5 		ldr	r3, [fp, #-20]
 3185 0df4 013083E2 		add	r3, r3, #1
 3186 0df8 14300BE5 		str	r3, [fp, #-20]
 3187 0dfc 10301BE5 		ldr	r3, [fp, #-16]
 3188 0e00 013083E2 		add	r3, r3, #1
 3189 0e04 10300BE5 		str	r3, [fp, #-16]
 714:../kernel/os_core/os_q.c **** #endif
 715:../kernel/os_core/os_q.c **** 
 716:../kernel/os_core/os_q.c **** #if OS_EVENT_TBL_SIZE > 6
 717:../kernel/os_core/os_q.c ****     *pdest++ = *psrc++;
 3190              		.loc 1 717 0
 3191 0e08 10301BE5 		ldr	r3, [fp, #-16]
 3192 0e0c 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 3193 0e10 14301BE5 		ldr	r3, [fp, #-20]
 3194 0e14 0020C3E5 		strb	r2, [r3, #0]
 3195 0e18 14301BE5 		ldr	r3, [fp, #-20]
 3196 0e1c 013083E2 		add	r3, r3, #1
 3197 0e20 14300BE5 		str	r3, [fp, #-20]
 3198 0e24 10301BE5 		ldr	r3, [fp, #-16]
 3199 0e28 013083E2 		add	r3, r3, #1
 3200 0e2c 10300BE5 		str	r3, [fp, #-16]
 718:../kernel/os_core/os_q.c **** #endif
 719:../kernel/os_core/os_q.c **** 
 720:../kernel/os_core/os_q.c **** #if OS_EVENT_TBL_SIZE > 7
 721:../kernel/os_core/os_q.c ****     *pdest   = *psrc;
 3201              		.loc 1 721 0
 3202 0e30 10301BE5 		ldr	r3, [fp, #-16]
 3203 0e34 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 3204 0e38 14301BE5 		ldr	r3, [fp, #-20]
 3205 0e3c 0020C3E5 		strb	r2, [r3, #0]
 722:../kernel/os_core/os_q.c **** #endif
 723:../kernel/os_core/os_q.c ****     pq = (OS_Q *)pevent->OSEventPtr;
 3206              		.loc 1 723 0
 3207 0e40 20301BE5 		ldr	r3, [fp, #-32]
 3208 0e44 043093E5 		ldr	r3, [r3, #4]
 3209 0e48 18300BE5 		str	r3, [fp, #-24]
 724:../kernel/os_core/os_q.c ****     if (pq->OSQEntries > 0) {
 3210              		.loc 1 724 0
 3211 0e4c 18301BE5 		ldr	r3, [fp, #-24]
 3212 0e50 B631D3E1 		ldrh	r3, [r3, #22]
 3213 0e54 000053E3 		cmp	r3, #0
 3214 0e58 0500000A 		beq	.L79
 725:../kernel/os_core/os_q.c ****         p_q_data->OSMsg = *pq->OSQOut;                     /* Get next message to return if availab
 3215              		.loc 1 725 0
 3216 0e5c 18301BE5 		ldr	r3, [fp, #-24]
 3217 0e60 103093E5 		ldr	r3, [r3, #16]
 3218 0e64 002093E5 		ldr	r2, [r3, #0]
 3219 0e68 24301BE5 		ldr	r3, [fp, #-36]
 3220 0e6c 002083E5 		str	r2, [r3, #0]
 3221 0e70 020000EA 		b	.L80
 3222              	.L79:
 726:../kernel/os_core/os_q.c ****     } else {
 727:../kernel/os_core/os_q.c ****         p_q_data->OSMsg = (void *)0;
 3223              		.loc 1 727 0
 3224 0e74 24301BE5 		ldr	r3, [fp, #-36]
 3225 0e78 0020A0E3 		mov	r2, #0
 3226 0e7c 002083E5 		str	r2, [r3, #0]
 3227              	.L80:
 728:../kernel/os_core/os_q.c ****     }
 729:../kernel/os_core/os_q.c ****     p_q_data->OSNMsgs = pq->OSQEntries;
 3228              		.loc 1 729 0
 3229 0e80 18301BE5 		ldr	r3, [fp, #-24]
 3230 0e84 B621D3E1 		ldrh	r2, [r3, #22]
 3231 0e88 24301BE5 		ldr	r3, [fp, #-36]
 3232 0e8c B420C3E1 		strh	r2, [r3, #4]	@ movhi
 730:../kernel/os_core/os_q.c ****     p_q_data->OSQSize = pq->OSQSize;
 3233              		.loc 1 730 0
 3234 0e90 18301BE5 		ldr	r3, [fp, #-24]
 3235 0e94 B421D3E1 		ldrh	r2, [r3, #20]
 3236 0e98 24301BE5 		ldr	r3, [fp, #-36]
 3237 0e9c B620C3E1 		strh	r2, [r3, #6]	@ movhi
 731:../kernel/os_core/os_q.c ****     OS_EXIT_CRITICAL();
 3238              		.loc 1 731 0
 3239              	@ 731 "../kernel/os_core/os_q.c" 1
 3240 0ea0 04009DE4 		ldmfd sp!, {r0}
 3241              	@ 0 "" 2
 3242              	@ 731 "../kernel/os_core/os_q.c" 1
 3243 0ea4 00F021E1 		msr   cpsr_c, r0
 3244              	@ 0 "" 2
 732:../kernel/os_core/os_q.c ****     return (OS_NO_ERR);
 3245              		.loc 1 732 0
 3246 0ea8 0030A0E3 		mov	r3, #0
 3247              	.L77:
 733:../kernel/os_core/os_q.c **** }
 3248              		.loc 1 733 0
 3249 0eac 0300A0E1 		mov	r0, r3
 3250 0eb0 0CD04BE2 		sub	sp, fp, #12
 3251 0eb4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3252 0eb8 1EFF2FE1 		bx	lr
 3253              		.cfi_endproc
 3254              	.LFE8:
 3256              		.align	2
 3257              		.global	OS_QInit
 3259              	OS_QInit:
 3260              	.LFB9:
 734:../kernel/os_core/os_q.c **** #endif                                                     /* OS_Q_QUERY_EN                        
 735:../kernel/os_core/os_q.c **** 
 736:../kernel/os_core/os_q.c **** /*$PAGE*/
 737:../kernel/os_core/os_q.c **** /*
 738:../kernel/os_core/os_q.c **** ***************************************************************************************************
 739:../kernel/os_core/os_q.c **** *                                      QUEUE MODULE INITIALIZATION
 740:../kernel/os_core/os_q.c **** *
 741:../kernel/os_core/os_q.c **** * Description : This function is called by uC/OS-II to initialize the message queue module.  Your
 742:../kernel/os_core/os_q.c **** *               application MUST NOT call this function.
 743:../kernel/os_core/os_q.c **** *
 744:../kernel/os_core/os_q.c **** * Arguments   :  none
 745:../kernel/os_core/os_q.c **** *
 746:../kernel/os_core/os_q.c **** * Returns     : none
 747:../kernel/os_core/os_q.c **** *
 748:../kernel/os_core/os_q.c **** * Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
 749:../kernel/os_core/os_q.c **** ***************************************************************************************************
 750:../kernel/os_core/os_q.c **** */
 751:../kernel/os_core/os_q.c **** 
 752:../kernel/os_core/os_q.c **** void  OS_QInit (void)
 753:../kernel/os_core/os_q.c **** {
 3261              		.loc 1 753 0
 3262              		.cfi_startproc
 3263              		@ Function supports interworking.
 3264              		@ args = 0, pretend = 0, frame = 16
 3265              		@ frame_needed = 1, uses_anonymous_args = 0
 3266 0ebc 0DC0A0E1 		mov	ip, sp
 3267              	.LCFI18:
 3268              		.cfi_def_cfa_register 12
 3269 0ec0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3270 0ec4 04B04CE2 		sub	fp, ip, #4
 3271              		.cfi_offset 14, -8
 3272              		.cfi_offset 13, -12
 3273              		.cfi_offset 11, -16
 3274              	.LCFI19:
 3275              		.cfi_def_cfa 11, 4
 3276 0ec8 10D04DE2 		sub	sp, sp, #16
 754:../kernel/os_core/os_q.c **** #if OS_MAX_QS == 1
 755:../kernel/os_core/os_q.c ****     OSQFreeList         = &OSQTbl[0];                /* Only ONE queue!                            
 756:../kernel/os_core/os_q.c ****     OSQFreeList->OSQPtr = (OS_Q *)0;
 757:../kernel/os_core/os_q.c **** #endif
 758:../kernel/os_core/os_q.c **** 
 759:../kernel/os_core/os_q.c **** #if OS_MAX_QS >= 2
 760:../kernel/os_core/os_q.c ****     INT16U  i;
 761:../kernel/os_core/os_q.c ****     OS_Q   *pq1;
 762:../kernel/os_core/os_q.c ****     OS_Q   *pq2;
 763:../kernel/os_core/os_q.c **** 
 764:../kernel/os_core/os_q.c **** 
 765:../kernel/os_core/os_q.c **** 
 766:../kernel/os_core/os_q.c ****     OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                      
 3277              		.loc 1 766 0
 3278 0ecc 84309FE5 		ldr	r3, .L84
 3279 0ed0 0300A0E1 		mov	r0, r3
 3280 0ed4 6010A0E3 		mov	r1, #96
 3281 0ed8 FEFFFFEB 		bl	OS_MemClr
 767:../kernel/os_core/os_q.c ****     pq1 = &OSQTbl[0];
 3282              		.loc 1 767 0
 3283 0edc 74309FE5 		ldr	r3, .L84
 3284 0ee0 14300BE5 		str	r3, [fp, #-20]
 768:../kernel/os_core/os_q.c ****     pq2 = &OSQTbl[1];
 3285              		.loc 1 768 0
 3286 0ee4 70309FE5 		ldr	r3, .L84+4
 3287 0ee8 18300BE5 		str	r3, [fp, #-24]
 769:../kernel/os_core/os_q.c ****     for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks    
 3288              		.loc 1 769 0
 3289 0eec 0030A0E3 		mov	r3, #0
 3290 0ef0 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 3291 0ef4 0B0000EA 		b	.L82
 3292              	.L83:
 770:../kernel/os_core/os_q.c ****         pq1->OSQPtr = pq2;
 3293              		.loc 1 770 0 discriminator 2
 3294 0ef8 14301BE5 		ldr	r3, [fp, #-20]
 3295 0efc 18201BE5 		ldr	r2, [fp, #-24]
 3296 0f00 002083E5 		str	r2, [r3, #0]
 771:../kernel/os_core/os_q.c ****         pq1++;
 3297              		.loc 1 771 0 discriminator 2
 3298 0f04 14301BE5 		ldr	r3, [fp, #-20]
 3299 0f08 183083E2 		add	r3, r3, #24
 3300 0f0c 14300BE5 		str	r3, [fp, #-20]
 772:../kernel/os_core/os_q.c ****         pq2++;
 3301              		.loc 1 772 0 discriminator 2
 3302 0f10 18301BE5 		ldr	r3, [fp, #-24]
 3303 0f14 183083E2 		add	r3, r3, #24
 3304 0f18 18300BE5 		str	r3, [fp, #-24]
 769:../kernel/os_core/os_q.c ****     for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks    
 3305              		.loc 1 769 0 discriminator 2
 3306 0f1c BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 3307 0f20 013083E2 		add	r3, r3, #1
 3308 0f24 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 3309              	.L82:
 769:../kernel/os_core/os_q.c ****     for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks    
 3310              		.loc 1 769 0 is_stmt 0 discriminator 1
 3311 0f28 BE305BE1 		ldrh	r3, [fp, #-14]
 3312 0f2c 020053E3 		cmp	r3, #2
 3313 0f30 F0FFFF9A 		bls	.L83
 773:../kernel/os_core/os_q.c ****     }
 774:../kernel/os_core/os_q.c ****     pq1->OSQPtr = (OS_Q *)0;
 3314              		.loc 1 774 0 is_stmt 1
 3315 0f34 14301BE5 		ldr	r3, [fp, #-20]
 3316 0f38 0020A0E3 		mov	r2, #0
 3317 0f3c 002083E5 		str	r2, [r3, #0]
 775:../kernel/os_core/os_q.c ****     OSQFreeList = &OSQTbl[0];
 3318              		.loc 1 775 0
 3319 0f40 18309FE5 		ldr	r3, .L84+8
 3320 0f44 0C209FE5 		ldr	r2, .L84
 3321 0f48 002083E5 		str	r2, [r3, #0]
 776:../kernel/os_core/os_q.c **** #endif
 777:../kernel/os_core/os_q.c **** }
 3322              		.loc 1 777 0
 3323 0f4c 0CD04BE2 		sub	sp, fp, #12
 3324 0f50 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3325 0f54 1EFF2FE1 		bx	lr
 3326              	.L85:
 3327              		.align	2
 3328              	.L84:
 3329 0f58 00000000 		.word	OSQTbl
 3330 0f5c 18000000 		.word	OSQTbl+24
 3331 0f60 00000000 		.word	OSQFreeList
 3332              		.cfi_endproc
 3333              	.LFE9:
 3335              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 os_q.c
C:\Users\Pedro\AppData\Local\Temp\ccEhIJgi.s:1630   .text:00000000 $a
C:\Users\Pedro\AppData\Local\Temp\ccEhIJgi.s:1633   .text:00000000 OSQAccept
C:\Users\Pedro\AppData\Local\Temp\ccEhIJgi.s:1764   .text:00000128 OSQCreate
C:\Users\Pedro\AppData\Local\Temp\ccEhIJgi.s:1952   .text:000002d4 $d
C:\Users\Pedro\AppData\Local\Temp\ccEhIJgi.s:1958   .text:000002e0 $a
C:\Users\Pedro\AppData\Local\Temp\ccEhIJgi.s:1961   .text:000002e0 OSQDel
C:\Users\Pedro\AppData\Local\Temp\ccEhIJgi.s:2225   .text:0000055c $d
C:\Users\Pedro\AppData\Local\Temp\ccEhIJgi.s:2231   .text:00000568 $a
C:\Users\Pedro\AppData\Local\Temp\ccEhIJgi.s:2234   .text:00000568 OSQFlush
C:\Users\Pedro\AppData\Local\Temp\ccEhIJgi.s:2322   .text:0000060c OSQPend
C:\Users\Pedro\AppData\Local\Temp\ccEhIJgi.s:2558   .text:00000840 $d
C:\Users\Pedro\AppData\Local\Temp\ccEhIJgi.s:2563   .text:00000848 $a
C:\Users\Pedro\AppData\Local\Temp\ccEhIJgi.s:2566   .text:00000848 OSQPost
C:\Users\Pedro\AppData\Local\Temp\ccEhIJgi.s:2711   .text:00000980 OSQPostFront
C:\Users\Pedro\AppData\Local\Temp\ccEhIJgi.s:2859   .text:00000ac0 OSQPostOpt
C:\Users\Pedro\AppData\Local\Temp\ccEhIJgi.s:3061   .text:00000c9c OSQQuery
C:\Users\Pedro\AppData\Local\Temp\ccEhIJgi.s:3259   .text:00000ebc OS_QInit
C:\Users\Pedro\AppData\Local\Temp\ccEhIJgi.s:3329   .text:00000f58 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
OS_EventWaitListInit
OSIntNesting
OSEventFreeList
OSQFreeList
OS_EventTaskRdy
OS_Sched
OS_EventTaskWait
OS_EventTO
OSTCBCur
OS_MemClr
OSQTbl

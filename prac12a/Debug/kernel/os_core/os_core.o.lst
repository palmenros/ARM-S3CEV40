   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"os_core.c"
  21              	.Ltext0:
  22              		.file 1 "../kernel/os_core/os_core.c"
 1666              		.align	2
 1669              	OSMapTbl:
 1670 0000 01       		.byte	1
 1671 0001 02       		.byte	2
 1672 0002 04       		.byte	4
 1673 0003 08       		.byte	8
 1674 0004 10       		.byte	16
 1675 0005 20       		.byte	32
 1676 0006 40       		.byte	64
 1677 0007 80       		.byte	-128
 1678              		.global	OSUnMapTbl
 1679              		.align	2
 1682              	OSUnMapTbl:
 1683 0008 00       		.byte	0
 1684 0009 00       		.byte	0
 1685 000a 01       		.byte	1
 1686 000b 00       		.byte	0
 1687 000c 02       		.byte	2
 1688 000d 00       		.byte	0
 1689 000e 01       		.byte	1
 1690 000f 00       		.byte	0
 1691 0010 03       		.byte	3
 1692 0011 00       		.byte	0
 1693 0012 01       		.byte	1
 1694 0013 00       		.byte	0
 1695 0014 02       		.byte	2
 1696 0015 00       		.byte	0
 1697 0016 01       		.byte	1
 1698 0017 00       		.byte	0
 1699 0018 04       		.byte	4
 1700 0019 00       		.byte	0
 1701 001a 01       		.byte	1
 1702 001b 00       		.byte	0
 1703 001c 02       		.byte	2
 1704 001d 00       		.byte	0
 1705 001e 01       		.byte	1
 1706 001f 00       		.byte	0
 1707 0020 03       		.byte	3
 1708 0021 00       		.byte	0
 1709 0022 01       		.byte	1
 1710 0023 00       		.byte	0
 1711 0024 02       		.byte	2
 1712 0025 00       		.byte	0
 1713 0026 01       		.byte	1
 1714 0027 00       		.byte	0
 1715 0028 05       		.byte	5
 1716 0029 00       		.byte	0
 1717 002a 01       		.byte	1
 1718 002b 00       		.byte	0
 1719 002c 02       		.byte	2
 1720 002d 00       		.byte	0
 1721 002e 01       		.byte	1
 1722 002f 00       		.byte	0
 1723 0030 03       		.byte	3
 1724 0031 00       		.byte	0
 1725 0032 01       		.byte	1
 1726 0033 00       		.byte	0
 1727 0034 02       		.byte	2
 1728 0035 00       		.byte	0
 1729 0036 01       		.byte	1
 1730 0037 00       		.byte	0
 1731 0038 04       		.byte	4
 1732 0039 00       		.byte	0
 1733 003a 01       		.byte	1
 1734 003b 00       		.byte	0
 1735 003c 02       		.byte	2
 1736 003d 00       		.byte	0
 1737 003e 01       		.byte	1
 1738 003f 00       		.byte	0
 1739 0040 03       		.byte	3
 1740 0041 00       		.byte	0
 1741 0042 01       		.byte	1
 1742 0043 00       		.byte	0
 1743 0044 02       		.byte	2
 1744 0045 00       		.byte	0
 1745 0046 01       		.byte	1
 1746 0047 00       		.byte	0
 1747 0048 06       		.byte	6
 1748 0049 00       		.byte	0
 1749 004a 01       		.byte	1
 1750 004b 00       		.byte	0
 1751 004c 02       		.byte	2
 1752 004d 00       		.byte	0
 1753 004e 01       		.byte	1
 1754 004f 00       		.byte	0
 1755 0050 03       		.byte	3
 1756 0051 00       		.byte	0
 1757 0052 01       		.byte	1
 1758 0053 00       		.byte	0
 1759 0054 02       		.byte	2
 1760 0055 00       		.byte	0
 1761 0056 01       		.byte	1
 1762 0057 00       		.byte	0
 1763 0058 04       		.byte	4
 1764 0059 00       		.byte	0
 1765 005a 01       		.byte	1
 1766 005b 00       		.byte	0
 1767 005c 02       		.byte	2
 1768 005d 00       		.byte	0
 1769 005e 01       		.byte	1
 1770 005f 00       		.byte	0
 1771 0060 03       		.byte	3
 1772 0061 00       		.byte	0
 1773 0062 01       		.byte	1
 1774 0063 00       		.byte	0
 1775 0064 02       		.byte	2
 1776 0065 00       		.byte	0
 1777 0066 01       		.byte	1
 1778 0067 00       		.byte	0
 1779 0068 05       		.byte	5
 1780 0069 00       		.byte	0
 1781 006a 01       		.byte	1
 1782 006b 00       		.byte	0
 1783 006c 02       		.byte	2
 1784 006d 00       		.byte	0
 1785 006e 01       		.byte	1
 1786 006f 00       		.byte	0
 1787 0070 03       		.byte	3
 1788 0071 00       		.byte	0
 1789 0072 01       		.byte	1
 1790 0073 00       		.byte	0
 1791 0074 02       		.byte	2
 1792 0075 00       		.byte	0
 1793 0076 01       		.byte	1
 1794 0077 00       		.byte	0
 1795 0078 04       		.byte	4
 1796 0079 00       		.byte	0
 1797 007a 01       		.byte	1
 1798 007b 00       		.byte	0
 1799 007c 02       		.byte	2
 1800 007d 00       		.byte	0
 1801 007e 01       		.byte	1
 1802 007f 00       		.byte	0
 1803 0080 03       		.byte	3
 1804 0081 00       		.byte	0
 1805 0082 01       		.byte	1
 1806 0083 00       		.byte	0
 1807 0084 02       		.byte	2
 1808 0085 00       		.byte	0
 1809 0086 01       		.byte	1
 1810 0087 00       		.byte	0
 1811 0088 07       		.byte	7
 1812 0089 00       		.byte	0
 1813 008a 01       		.byte	1
 1814 008b 00       		.byte	0
 1815 008c 02       		.byte	2
 1816 008d 00       		.byte	0
 1817 008e 01       		.byte	1
 1818 008f 00       		.byte	0
 1819 0090 03       		.byte	3
 1820 0091 00       		.byte	0
 1821 0092 01       		.byte	1
 1822 0093 00       		.byte	0
 1823 0094 02       		.byte	2
 1824 0095 00       		.byte	0
 1825 0096 01       		.byte	1
 1826 0097 00       		.byte	0
 1827 0098 04       		.byte	4
 1828 0099 00       		.byte	0
 1829 009a 01       		.byte	1
 1830 009b 00       		.byte	0
 1831 009c 02       		.byte	2
 1832 009d 00       		.byte	0
 1833 009e 01       		.byte	1
 1834 009f 00       		.byte	0
 1835 00a0 03       		.byte	3
 1836 00a1 00       		.byte	0
 1837 00a2 01       		.byte	1
 1838 00a3 00       		.byte	0
 1839 00a4 02       		.byte	2
 1840 00a5 00       		.byte	0
 1841 00a6 01       		.byte	1
 1842 00a7 00       		.byte	0
 1843 00a8 05       		.byte	5
 1844 00a9 00       		.byte	0
 1845 00aa 01       		.byte	1
 1846 00ab 00       		.byte	0
 1847 00ac 02       		.byte	2
 1848 00ad 00       		.byte	0
 1849 00ae 01       		.byte	1
 1850 00af 00       		.byte	0
 1851 00b0 03       		.byte	3
 1852 00b1 00       		.byte	0
 1853 00b2 01       		.byte	1
 1854 00b3 00       		.byte	0
 1855 00b4 02       		.byte	2
 1856 00b5 00       		.byte	0
 1857 00b6 01       		.byte	1
 1858 00b7 00       		.byte	0
 1859 00b8 04       		.byte	4
 1860 00b9 00       		.byte	0
 1861 00ba 01       		.byte	1
 1862 00bb 00       		.byte	0
 1863 00bc 02       		.byte	2
 1864 00bd 00       		.byte	0
 1865 00be 01       		.byte	1
 1866 00bf 00       		.byte	0
 1867 00c0 03       		.byte	3
 1868 00c1 00       		.byte	0
 1869 00c2 01       		.byte	1
 1870 00c3 00       		.byte	0
 1871 00c4 02       		.byte	2
 1872 00c5 00       		.byte	0
 1873 00c6 01       		.byte	1
 1874 00c7 00       		.byte	0
 1875 00c8 06       		.byte	6
 1876 00c9 00       		.byte	0
 1877 00ca 01       		.byte	1
 1878 00cb 00       		.byte	0
 1879 00cc 02       		.byte	2
 1880 00cd 00       		.byte	0
 1881 00ce 01       		.byte	1
 1882 00cf 00       		.byte	0
 1883 00d0 03       		.byte	3
 1884 00d1 00       		.byte	0
 1885 00d2 01       		.byte	1
 1886 00d3 00       		.byte	0
 1887 00d4 02       		.byte	2
 1888 00d5 00       		.byte	0
 1889 00d6 01       		.byte	1
 1890 00d7 00       		.byte	0
 1891 00d8 04       		.byte	4
 1892 00d9 00       		.byte	0
 1893 00da 01       		.byte	1
 1894 00db 00       		.byte	0
 1895 00dc 02       		.byte	2
 1896 00dd 00       		.byte	0
 1897 00de 01       		.byte	1
 1898 00df 00       		.byte	0
 1899 00e0 03       		.byte	3
 1900 00e1 00       		.byte	0
 1901 00e2 01       		.byte	1
 1902 00e3 00       		.byte	0
 1903 00e4 02       		.byte	2
 1904 00e5 00       		.byte	0
 1905 00e6 01       		.byte	1
 1906 00e7 00       		.byte	0
 1907 00e8 05       		.byte	5
 1908 00e9 00       		.byte	0
 1909 00ea 01       		.byte	1
 1910 00eb 00       		.byte	0
 1911 00ec 02       		.byte	2
 1912 00ed 00       		.byte	0
 1913 00ee 01       		.byte	1
 1914 00ef 00       		.byte	0
 1915 00f0 03       		.byte	3
 1916 00f1 00       		.byte	0
 1917 00f2 01       		.byte	1
 1918 00f3 00       		.byte	0
 1919 00f4 02       		.byte	2
 1920 00f5 00       		.byte	0
 1921 00f6 01       		.byte	1
 1922 00f7 00       		.byte	0
 1923 00f8 04       		.byte	4
 1924 00f9 00       		.byte	0
 1925 00fa 01       		.byte	1
 1926 00fb 00       		.byte	0
 1927 00fc 02       		.byte	2
 1928 00fd 00       		.byte	0
 1929 00fe 01       		.byte	1
 1930 00ff 00       		.byte	0
 1931 0100 03       		.byte	3
 1932 0101 00       		.byte	0
 1933 0102 01       		.byte	1
 1934 0103 00       		.byte	0
 1935 0104 02       		.byte	2
 1936 0105 00       		.byte	0
 1937 0106 01       		.byte	1
 1938 0107 00       		.byte	0
 1939              		.text
 1940              		.align	2
 1941              		.global	OSEventNameGet
 1943              	OSEventNameGet:
 1944              	.LFB0:
   1:../kernel/os_core/os_core.c **** /*
   2:../kernel/os_core/os_core.c **** ***************************************************************************************************
   3:../kernel/os_core/os_core.c **** *                                                uC/OS-II
   4:../kernel/os_core/os_core.c **** *                                          The Real-Time Kernel
   5:../kernel/os_core/os_core.c **** *                                             CORE FUNCTIONS
   6:../kernel/os_core/os_core.c **** *
   7:../kernel/os_core/os_core.c **** *                          (c) Copyright 1992-2003, Jean J. Labrosse, Weston, FL
   8:../kernel/os_core/os_core.c **** *                                           All Rights Reserved
   9:../kernel/os_core/os_core.c **** *
  10:../kernel/os_core/os_core.c **** * File    : OS_CORE.C
  11:../kernel/os_core/os_core.c **** * By      : Jean J. Labrosse
  12:../kernel/os_core/os_core.c **** * Version : V2.76
  13:../kernel/os_core/os_core.c **** ***************************************************************************************************
  14:../kernel/os_core/os_core.c **** */
  15:../kernel/os_core/os_core.c **** 
  16:../kernel/os_core/os_core.c **** #ifndef  OS_MASTER_FILE
  17:../kernel/os_core/os_core.c **** #define  OS_GLOBALS
  18:../kernel/os_core/os_core.c **** #include "ucos_ii.h"
  19:../kernel/os_core/os_core.c **** #endif
  20:../kernel/os_core/os_core.c **** 
  21:../kernel/os_core/os_core.c **** /*
  22:../kernel/os_core/os_core.c **** ***************************************************************************************************
  23:../kernel/os_core/os_core.c **** *                              MAPPING TABLE TO MAP BIT POSITION TO BIT MASK
  24:../kernel/os_core/os_core.c **** *
  25:../kernel/os_core/os_core.c **** * Note: Index into table is desired bit position, 0..7
  26:../kernel/os_core/os_core.c **** *       Indexed value corresponds to bit mask
  27:../kernel/os_core/os_core.c **** ***************************************************************************************************
  28:../kernel/os_core/os_core.c **** */
  29:../kernel/os_core/os_core.c **** 
  30:../kernel/os_core/os_core.c **** INT8U  const  OSMapTbl[8]   = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80};
  31:../kernel/os_core/os_core.c **** 
  32:../kernel/os_core/os_core.c **** /*
  33:../kernel/os_core/os_core.c **** ***************************************************************************************************
  34:../kernel/os_core/os_core.c **** *                                       PRIORITY RESOLUTION TABLE
  35:../kernel/os_core/os_core.c **** *
  36:../kernel/os_core/os_core.c **** * Note: Index into table is bit pattern to resolve highest priority
  37:../kernel/os_core/os_core.c **** *       Indexed value corresponds to highest priority bit position (i.e. 0..7)
  38:../kernel/os_core/os_core.c **** ***************************************************************************************************
  39:../kernel/os_core/os_core.c **** */
  40:../kernel/os_core/os_core.c **** 
  41:../kernel/os_core/os_core.c **** INT8U  const  OSUnMapTbl[256] = {
  42:../kernel/os_core/os_core.c ****     0, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0x00 to 0x0F                          
  43:../kernel/os_core/os_core.c ****     4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0x10 to 0x1F                          
  44:../kernel/os_core/os_core.c ****     5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0x20 to 0x2F                          
  45:../kernel/os_core/os_core.c ****     4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0x30 to 0x3F                          
  46:../kernel/os_core/os_core.c ****     6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0x40 to 0x4F                          
  47:../kernel/os_core/os_core.c ****     4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0x50 to 0x5F                          
  48:../kernel/os_core/os_core.c ****     5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0x60 to 0x6F                          
  49:../kernel/os_core/os_core.c ****     4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0x70 to 0x7F                          
  50:../kernel/os_core/os_core.c ****     7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0x80 to 0x8F                          
  51:../kernel/os_core/os_core.c ****     4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0x90 to 0x9F                          
  52:../kernel/os_core/os_core.c ****     5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0xA0 to 0xAF                          
  53:../kernel/os_core/os_core.c ****     4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0xB0 to 0xBF                          
  54:../kernel/os_core/os_core.c ****     6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0xC0 to 0xCF                          
  55:../kernel/os_core/os_core.c ****     4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0xD0 to 0xDF                          
  56:../kernel/os_core/os_core.c ****     5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,       /* 0xE0 to 0xEF                          
  57:../kernel/os_core/os_core.c ****     4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0        /* 0xF0 to 0xFF                          
  58:../kernel/os_core/os_core.c **** };
  59:../kernel/os_core/os_core.c **** 
  60:../kernel/os_core/os_core.c **** /*$PAGE*/
  61:../kernel/os_core/os_core.c **** /*
  62:../kernel/os_core/os_core.c **** ***************************************************************************************************
  63:../kernel/os_core/os_core.c **** *                                       FUNCTION PROTOTYPES
  64:../kernel/os_core/os_core.c **** ***************************************************************************************************
  65:../kernel/os_core/os_core.c **** */
  66:../kernel/os_core/os_core.c **** static  void  OS_InitEventList(void);
  67:../kernel/os_core/os_core.c **** static  void  OS_InitMisc(void);
  68:../kernel/os_core/os_core.c **** static  void  OS_InitRdyList(void);
  69:../kernel/os_core/os_core.c **** static  void  OS_InitTaskIdle(void);
  70:../kernel/os_core/os_core.c **** #if OS_TASK_STAT_EN > 0
  71:../kernel/os_core/os_core.c **** static  void  OS_InitTaskStat(void);
  72:../kernel/os_core/os_core.c **** #endif
  73:../kernel/os_core/os_core.c **** static  void  OS_InitTCBList(void);
  74:../kernel/os_core/os_core.c ****   
  75:../kernel/os_core/os_core.c **** /*$PAGE*/
  76:../kernel/os_core/os_core.c **** /*
  77:../kernel/os_core/os_core.c **** ***************************************************************************************************
  78:../kernel/os_core/os_core.c **** *                         GET THE NAME OF A SEMAPHORE, MUTEX, MAILBOX or QUEUE
  79:../kernel/os_core/os_core.c **** *
  80:../kernel/os_core/os_core.c **** * Description: This function is used to obtain the name assigned to a semaphore, mutex, mailbox or 
  81:../kernel/os_core/os_core.c **** *
  82:../kernel/os_core/os_core.c **** * Arguments  : pevent    is a pointer to the event group.  'pevent' can point either to a semaphore
  83:../kernel/os_core/os_core.c **** *                        a mutex, a mailbox or a queue.  Where this function is concerned, the actu
  84:../kernel/os_core/os_core.c **** *                        type is irrelevant.
  85:../kernel/os_core/os_core.c **** *
  86:../kernel/os_core/os_core.c **** *              pname     is a pointer to an ASCII string that will receive the name of the semaphor
  87:../kernel/os_core/os_core.c **** *                        mutex, mailbox or queue.  The string must be able to hold at least 
  88:../kernel/os_core/os_core.c **** *                        OS_EVENT_NAME_SIZE characters.
  89:../kernel/os_core/os_core.c **** *
  90:../kernel/os_core/os_core.c **** *              err       is a pointer to an error code that can contain one of the following values
  91:../kernel/os_core/os_core.c **** *
  92:../kernel/os_core/os_core.c **** *                        OS_NO_ERR                  if the name was copied to 'pname'
  93:../kernel/os_core/os_core.c **** *                        OS_ERR_EVENT_TYPE          if 'pevent' is not pointing to the proper event
  94:../kernel/os_core/os_core.c **** *                                                   control block type.
  95:../kernel/os_core/os_core.c **** *                        OS_ERR_PNAME_NULL          You passed a NULL pointer for 'pname'
  96:../kernel/os_core/os_core.c **** *                        OS_ERR_PEVENT_NULL         if you passed a NULL pointer for 'pevent'
  97:../kernel/os_core/os_core.c **** *
  98:../kernel/os_core/os_core.c **** * Returns    : The length of the string or 0 if the 'pevent' is a NULL pointer.
  99:../kernel/os_core/os_core.c **** ***************************************************************************************************
 100:../kernel/os_core/os_core.c **** */
 101:../kernel/os_core/os_core.c **** 
 102:../kernel/os_core/os_core.c **** #if OS_EVENT_EN && (OS_EVENT_NAME_SIZE > 1)
 103:../kernel/os_core/os_core.c **** INT8U  OSEventNameGet (OS_EVENT *pevent, char *pname, INT8U *err)
 104:../kernel/os_core/os_core.c **** {
 1945              		.loc 1 104 0
 1946              		.cfi_startproc
 1947              		@ Function supports interworking.
 1948              		@ args = 0, pretend = 0, frame = 24
 1949              		@ frame_needed = 1, uses_anonymous_args = 0
 1950 0000 0DC0A0E1 		mov	ip, sp
 1951              	.LCFI0:
 1952              		.cfi_def_cfa_register 12
 1953 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1954 0008 04B04CE2 		sub	fp, ip, #4
 1955              		.cfi_offset 14, -8
 1956              		.cfi_offset 13, -12
 1957              		.cfi_offset 11, -16
 1958              	.LCFI1:
 1959              		.cfi_def_cfa 11, 4
 1960 000c 18D04DE2 		sub	sp, sp, #24
 1961 0010 18000BE5 		str	r0, [fp, #-24]
 1962 0014 1C100BE5 		str	r1, [fp, #-28]
 1963 0018 20200BE5 		str	r2, [fp, #-32]
 105:../kernel/os_core/os_core.c ****     INT8U      len;
 106:../kernel/os_core/os_core.c **** #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register       
 107:../kernel/os_core/os_core.c ****     OS_CPU_SR  cpu_sr;
 108:../kernel/os_core/os_core.c **** 
 109:../kernel/os_core/os_core.c **** 
 110:../kernel/os_core/os_core.c **** 
 111:../kernel/os_core/os_core.c ****     cpu_sr = 0;                                  /* Prevent compiler warning                       
 112:../kernel/os_core/os_core.c **** #endif    
 113:../kernel/os_core/os_core.c ****     OS_ENTER_CRITICAL();
 1964              		.loc 1 113 0
 1965              	@ 113 "../kernel/os_core/os_core.c" 1
 1966 001c 00000FE1 		mrs   r0, cpsr
 1967              	@ 0 "" 2
 1968              	@ 113 "../kernel/os_core/os_core.c" 1
 1969 0020 04002DE5 		stmfd sp!, {r0}
 1970              	@ 0 "" 2
 1971              	@ 113 "../kernel/os_core/os_core.c" 1
 1972 0024 C00080E3 		orr   r0, r0, #0b11000000
 1973              	@ 0 "" 2
 1974              	@ 113 "../kernel/os_core/os_core.c" 1
 1975 0028 00F021E1 		msr   cpsr_c, r0
 1976              	@ 0 "" 2
 114:../kernel/os_core/os_core.c **** #if OS_ARG_CHK_EN > 0
 115:../kernel/os_core/os_core.c ****     if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                    
 1977              		.loc 1 115 0
 1978 002c 18301BE5 		ldr	r3, [fp, #-24]
 1979 0030 000053E3 		cmp	r3, #0
 1980 0034 0600001A 		bne	.L2
 116:../kernel/os_core/os_core.c ****         OS_EXIT_CRITICAL();                      /* Yes                                            
 1981              		.loc 1 116 0
 1982              	@ 116 "../kernel/os_core/os_core.c" 1
 1983 0038 04009DE4 		ldmfd sp!, {r0}
 1984              	@ 0 "" 2
 1985              	@ 116 "../kernel/os_core/os_core.c" 1
 1986 003c 00F021E1 		msr   cpsr_c, r0
 1987              	@ 0 "" 2
 117:../kernel/os_core/os_core.c ****         *err = OS_ERR_PEVENT_NULL;
 1988              		.loc 1 117 0
 1989 0040 20301BE5 		ldr	r3, [fp, #-32]
 1990 0044 0420A0E3 		mov	r2, #4
 1991 0048 0020C3E5 		strb	r2, [r3, #0]
 118:../kernel/os_core/os_core.c ****         return (0);
 1992              		.loc 1 118 0
 1993 004c 0030A0E3 		mov	r3, #0
 1994 0050 220000EA 		b	.L3
 1995              	.L2:
 119:../kernel/os_core/os_core.c ****     }
 120:../kernel/os_core/os_core.c ****     if (pname == (char *)0) {                    /* Is 'pname' a NULL pointer?                     
 1996              		.loc 1 120 0
 1997 0054 1C301BE5 		ldr	r3, [fp, #-28]
 1998 0058 000053E3 		cmp	r3, #0
 1999 005c 0600001A 		bne	.L4
 121:../kernel/os_core/os_core.c ****         OS_EXIT_CRITICAL();                      /* Yes                                            
 2000              		.loc 1 121 0
 2001              	@ 121 "../kernel/os_core/os_core.c" 1
 2002 0060 04009DE4 		ldmfd sp!, {r0}
 2003              	@ 0 "" 2
 2004              	@ 121 "../kernel/os_core/os_core.c" 1
 2005 0064 00F021E1 		msr   cpsr_c, r0
 2006              	@ 0 "" 2
 122:../kernel/os_core/os_core.c ****         *err = OS_ERR_PNAME_NULL;
 2007              		.loc 1 122 0
 2008 0068 20301BE5 		ldr	r3, [fp, #-32]
 2009 006c 0F20A0E3 		mov	r2, #15
 2010 0070 0020C3E5 		strb	r2, [r3, #0]
 123:../kernel/os_core/os_core.c ****         return (0);
 2011              		.loc 1 123 0
 2012 0074 0030A0E3 		mov	r3, #0
 2013 0078 180000EA 		b	.L3
 2014              	.L4:
 124:../kernel/os_core/os_core.c ****     }
 125:../kernel/os_core/os_core.c **** #endif
 126:../kernel/os_core/os_core.c ****     switch (pevent->OSEventType) {
 2015              		.loc 1 126 0
 2016 007c 18301BE5 		ldr	r3, [fp, #-24]
 2017 0080 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2018 0084 013043E2 		sub	r3, r3, #1
 2019 0088 030053E3 		cmp	r3, #3
 2020 008c 0D00008A 		bhi	.L5
 127:../kernel/os_core/os_core.c ****         case OS_EVENT_TYPE_SEM:
 128:../kernel/os_core/os_core.c ****         case OS_EVENT_TYPE_MUTEX:
 129:../kernel/os_core/os_core.c ****         case OS_EVENT_TYPE_MBOX:
 130:../kernel/os_core/os_core.c ****         case OS_EVENT_TYPE_Q:
 131:../kernel/os_core/os_core.c ****              break;
 132:../kernel/os_core/os_core.c **** 
 133:../kernel/os_core/os_core.c ****         default:
 134:../kernel/os_core/os_core.c ****              OS_EXIT_CRITICAL();
 135:../kernel/os_core/os_core.c ****              *err = OS_ERR_EVENT_TYPE;
 136:../kernel/os_core/os_core.c ****              return (0);
 137:../kernel/os_core/os_core.c ****     }
 138:../kernel/os_core/os_core.c ****     len  = OS_StrCopy(pname, pevent->OSEventName);    /* Copy name from OS_EVENT                   
 2021              		.loc 1 138 0
 2022 0090 18301BE5 		ldr	r3, [fp, #-24]
 2023 0094 103083E2 		add	r3, r3, #16
 2024 0098 1C001BE5 		ldr	r0, [fp, #-28]
 2025 009c 0310A0E1 		mov	r1, r3
 2026 00a0 FEFFFFEB 		bl	OS_StrCopy
 2027 00a4 0030A0E1 		mov	r3, r0
 2028 00a8 0D304BE5 		strb	r3, [fp, #-13]
 139:../kernel/os_core/os_core.c ****     OS_EXIT_CRITICAL();
 2029              		.loc 1 139 0
 2030              	@ 139 "../kernel/os_core/os_core.c" 1
 2031 00ac 04009DE4 		ldmfd sp!, {r0}
 2032              	@ 0 "" 2
 2033              	@ 139 "../kernel/os_core/os_core.c" 1
 2034 00b0 00F021E1 		msr   cpsr_c, r0
 2035              	@ 0 "" 2
 140:../kernel/os_core/os_core.c ****     *err = OS_NO_ERR;
 2036              		.loc 1 140 0
 2037 00b4 20301BE5 		ldr	r3, [fp, #-32]
 2038 00b8 0020A0E3 		mov	r2, #0
 2039 00bc 0020C3E5 		strb	r2, [r3, #0]
 141:../kernel/os_core/os_core.c ****     return (len);
 2040              		.loc 1 141 0
 2041 00c0 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2042 00c4 050000EA 		b	.L3
 2043              	.L5:
 134:../kernel/os_core/os_core.c ****              OS_EXIT_CRITICAL();
 2044              		.loc 1 134 0
 2045              	@ 134 "../kernel/os_core/os_core.c" 1
 2046 00c8 04009DE4 		ldmfd sp!, {r0}
 2047              	@ 0 "" 2
 2048              	@ 134 "../kernel/os_core/os_core.c" 1
 2049 00cc 00F021E1 		msr   cpsr_c, r0
 2050              	@ 0 "" 2
 135:../kernel/os_core/os_core.c ****              *err = OS_ERR_EVENT_TYPE;
 2051              		.loc 1 135 0
 2052 00d0 20301BE5 		ldr	r3, [fp, #-32]
 2053 00d4 0120A0E3 		mov	r2, #1
 2054 00d8 0020C3E5 		strb	r2, [r3, #0]
 136:../kernel/os_core/os_core.c ****              return (0);
 2055              		.loc 1 136 0
 2056 00dc 0030A0E3 		mov	r3, #0
 2057              	.L3:
 142:../kernel/os_core/os_core.c **** }
 2058              		.loc 1 142 0
 2059 00e0 0300A0E1 		mov	r0, r3
 2060 00e4 0CD04BE2 		sub	sp, fp, #12
 2061 00e8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2062 00ec 1EFF2FE1 		bx	lr
 2063              		.cfi_endproc
 2064              	.LFE0:
 2066              		.align	2
 2067              		.global	OSEventNameSet
 2069              	OSEventNameSet:
 2070              	.LFB1:
 143:../kernel/os_core/os_core.c **** #endif
 144:../kernel/os_core/os_core.c **** 
 145:../kernel/os_core/os_core.c **** /*$PAGE*/
 146:../kernel/os_core/os_core.c **** /*
 147:../kernel/os_core/os_core.c **** ***************************************************************************************************
 148:../kernel/os_core/os_core.c **** *                         ASSIGN A NAME TO A SEMAPHORE, MUTEX, MAILBOX or QUEUE
 149:../kernel/os_core/os_core.c **** *
 150:../kernel/os_core/os_core.c **** * Description: This function assigns a name to a semaphore, mutex, mailbox or queue.
 151:../kernel/os_core/os_core.c **** *
 152:../kernel/os_core/os_core.c **** * Arguments  : pevent    is a pointer to the event group.  'pevent' can point either to a semaphore
 153:../kernel/os_core/os_core.c **** *                        a mutex, a mailbox or a queue.  Where this function is concerned, it doesn
 154:../kernel/os_core/os_core.c **** *                        matter the actual type.
 155:../kernel/os_core/os_core.c **** *
 156:../kernel/os_core/os_core.c **** *              pname     is a pointer to an ASCII string that will be used as the name of the semap
 157:../kernel/os_core/os_core.c **** *                        mutex, mailbox or queue.  The string must be able to hold at least 
 158:../kernel/os_core/os_core.c **** *                        OS_EVENT_NAME_SIZE characters.
 159:../kernel/os_core/os_core.c **** *
 160:../kernel/os_core/os_core.c **** *              err       is a pointer to an error code that can contain one of the following values
 161:../kernel/os_core/os_core.c **** *
 162:../kernel/os_core/os_core.c **** *                        OS_NO_ERR                  if the requested task is resumed
 163:../kernel/os_core/os_core.c **** *                        OS_ERR_EVENT_TYPE          if 'pevent' is not pointing to the proper event
 164:../kernel/os_core/os_core.c **** *                                                   control block type.
 165:../kernel/os_core/os_core.c **** *                        OS_ERR_PNAME_NULL          You passed a NULL pointer for 'pname'
 166:../kernel/os_core/os_core.c **** *                        OS_ERR_PEVENT_NULL         if you passed a NULL pointer for 'pevent'
 167:../kernel/os_core/os_core.c **** *
 168:../kernel/os_core/os_core.c **** * Returns    : None
 169:../kernel/os_core/os_core.c **** ***************************************************************************************************
 170:../kernel/os_core/os_core.c **** */
 171:../kernel/os_core/os_core.c **** 
 172:../kernel/os_core/os_core.c **** #if OS_EVENT_EN && (OS_EVENT_NAME_SIZE > 1)
 173:../kernel/os_core/os_core.c **** void  OSEventNameSet (OS_EVENT *pevent, char *pname, INT8U *err)
 174:../kernel/os_core/os_core.c **** {
 2071              		.loc 1 174 0
 2072              		.cfi_startproc
 2073              		@ Function supports interworking.
 2074              		@ args = 0, pretend = 0, frame = 24
 2075              		@ frame_needed = 1, uses_anonymous_args = 0
 2076 00f0 0DC0A0E1 		mov	ip, sp
 2077              	.LCFI2:
 2078              		.cfi_def_cfa_register 12
 2079 00f4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2080 00f8 04B04CE2 		sub	fp, ip, #4
 2081              		.cfi_offset 14, -8
 2082              		.cfi_offset 13, -12
 2083              		.cfi_offset 11, -16
 2084              	.LCFI3:
 2085              		.cfi_def_cfa 11, 4
 2086 00fc 18D04DE2 		sub	sp, sp, #24
 2087 0100 18000BE5 		str	r0, [fp, #-24]
 2088 0104 1C100BE5 		str	r1, [fp, #-28]
 2089 0108 20200BE5 		str	r2, [fp, #-32]
 175:../kernel/os_core/os_core.c ****     INT8U      len;
 176:../kernel/os_core/os_core.c **** #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register       
 177:../kernel/os_core/os_core.c ****     OS_CPU_SR  cpu_sr;
 178:../kernel/os_core/os_core.c **** 
 179:../kernel/os_core/os_core.c **** 
 180:../kernel/os_core/os_core.c **** 
 181:../kernel/os_core/os_core.c ****     cpu_sr = 0;                                  /* Prevent compiler warning                       
 182:../kernel/os_core/os_core.c **** #endif    
 183:../kernel/os_core/os_core.c ****     OS_ENTER_CRITICAL();
 2090              		.loc 1 183 0
 2091              	@ 183 "../kernel/os_core/os_core.c" 1
 2092 010c 00000FE1 		mrs   r0, cpsr
 2093              	@ 0 "" 2
 2094              	@ 183 "../kernel/os_core/os_core.c" 1
 2095 0110 04002DE5 		stmfd sp!, {r0}
 2096              	@ 0 "" 2
 2097              	@ 183 "../kernel/os_core/os_core.c" 1
 2098 0114 C00080E3 		orr   r0, r0, #0b11000000
 2099              	@ 0 "" 2
 2100              	@ 183 "../kernel/os_core/os_core.c" 1
 2101 0118 00F021E1 		msr   cpsr_c, r0
 2102              	@ 0 "" 2
 184:../kernel/os_core/os_core.c **** #if OS_ARG_CHK_EN > 0
 185:../kernel/os_core/os_core.c ****     if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                    
 2103              		.loc 1 185 0
 2104 011c 18301BE5 		ldr	r3, [fp, #-24]
 2105 0120 000053E3 		cmp	r3, #0
 2106 0124 0500001A 		bne	.L8
 186:../kernel/os_core/os_core.c ****         OS_EXIT_CRITICAL();                      /* Yes                                            
 2107              		.loc 1 186 0
 2108              	@ 186 "../kernel/os_core/os_core.c" 1
 2109 0128 04009DE4 		ldmfd sp!, {r0}
 2110              	@ 0 "" 2
 2111              	@ 186 "../kernel/os_core/os_core.c" 1
 2112 012c 00F021E1 		msr   cpsr_c, r0
 2113              	@ 0 "" 2
 187:../kernel/os_core/os_core.c ****         *err = OS_ERR_PEVENT_NULL;
 2114              		.loc 1 187 0
 2115 0130 20301BE5 		ldr	r3, [fp, #-32]
 2116 0134 0420A0E3 		mov	r2, #4
 2117 0138 0020C3E5 		strb	r2, [r3, #0]
 188:../kernel/os_core/os_core.c ****         return;
 2118              		.loc 1 188 0
 2119 013c 2B0000EA 		b	.L7
 2120              	.L8:
 189:../kernel/os_core/os_core.c ****     }
 190:../kernel/os_core/os_core.c ****     if (pname == (char *)0) {                    /* Is 'pname' a NULL pointer?                     
 2121              		.loc 1 190 0
 2122 0140 1C301BE5 		ldr	r3, [fp, #-28]
 2123 0144 000053E3 		cmp	r3, #0
 2124 0148 0500001A 		bne	.L10
 191:../kernel/os_core/os_core.c ****         OS_EXIT_CRITICAL();                      /* Yes                                            
 2125              		.loc 1 191 0
 2126              	@ 191 "../kernel/os_core/os_core.c" 1
 2127 014c 04009DE4 		ldmfd sp!, {r0}
 2128              	@ 0 "" 2
 2129              	@ 191 "../kernel/os_core/os_core.c" 1
 2130 0150 00F021E1 		msr   cpsr_c, r0
 2131              	@ 0 "" 2
 192:../kernel/os_core/os_core.c ****         *err = OS_ERR_PNAME_NULL;
 2132              		.loc 1 192 0
 2133 0154 20301BE5 		ldr	r3, [fp, #-32]
 2134 0158 0F20A0E3 		mov	r2, #15
 2135 015c 0020C3E5 		strb	r2, [r3, #0]
 193:../kernel/os_core/os_core.c ****         return;
 2136              		.loc 1 193 0
 2137 0160 220000EA 		b	.L7
 2138              	.L10:
 194:../kernel/os_core/os_core.c ****     }
 195:../kernel/os_core/os_core.c **** #endif
 196:../kernel/os_core/os_core.c ****     switch (pevent->OSEventType) {
 2139              		.loc 1 196 0
 2140 0164 18301BE5 		ldr	r3, [fp, #-24]
 2141 0168 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2142 016c 013043E2 		sub	r3, r3, #1
 2143 0170 030053E3 		cmp	r3, #3
 2144 0174 0700008A 		bhi	.L11
 197:../kernel/os_core/os_core.c ****         case OS_EVENT_TYPE_SEM:
 198:../kernel/os_core/os_core.c ****         case OS_EVENT_TYPE_MUTEX:
 199:../kernel/os_core/os_core.c ****         case OS_EVENT_TYPE_MBOX:
 200:../kernel/os_core/os_core.c ****         case OS_EVENT_TYPE_Q:
 201:../kernel/os_core/os_core.c ****              break;
 202:../kernel/os_core/os_core.c **** 
 203:../kernel/os_core/os_core.c ****         default:
 204:../kernel/os_core/os_core.c ****              OS_EXIT_CRITICAL();
 205:../kernel/os_core/os_core.c ****              *err = OS_ERR_EVENT_TYPE;
 206:../kernel/os_core/os_core.c ****              return;
 207:../kernel/os_core/os_core.c ****     }
 208:../kernel/os_core/os_core.c ****     len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?
 2145              		.loc 1 208 0
 2146 0178 1C001BE5 		ldr	r0, [fp, #-28]
 2147 017c FEFFFFEB 		bl	OS_StrLen
 2148 0180 0030A0E1 		mov	r3, r0
 2149 0184 0D304BE5 		strb	r3, [fp, #-13]
 209:../kernel/os_core/os_core.c ****     if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                        
 2150              		.loc 1 209 0
 2151 0188 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2152 018c 1F0053E3 		cmp	r3, #31
 2153 0190 0600008A 		bhi	.L13
 2154 0194 0B0000EA 		b	.L15
 2155              	.L11:
 204:../kernel/os_core/os_core.c ****              OS_EXIT_CRITICAL();
 2156              		.loc 1 204 0
 2157              	@ 204 "../kernel/os_core/os_core.c" 1
 2158 0198 04009DE4 		ldmfd sp!, {r0}
 2159              	@ 0 "" 2
 2160              	@ 204 "../kernel/os_core/os_core.c" 1
 2161 019c 00F021E1 		msr   cpsr_c, r0
 2162              	@ 0 "" 2
 205:../kernel/os_core/os_core.c ****              *err = OS_ERR_EVENT_TYPE;
 2163              		.loc 1 205 0
 2164 01a0 20301BE5 		ldr	r3, [fp, #-32]
 2165 01a4 0120A0E3 		mov	r2, #1
 2166 01a8 0020C3E5 		strb	r2, [r3, #0]
 206:../kernel/os_core/os_core.c ****              return;
 2167              		.loc 1 206 0
 2168 01ac 0F0000EA 		b	.L7
 2169              	.L13:
 210:../kernel/os_core/os_core.c ****         OS_EXIT_CRITICAL();
 2170              		.loc 1 210 0
 2171              	@ 210 "../kernel/os_core/os_core.c" 1
 2172 01b0 04009DE4 		ldmfd sp!, {r0}
 2173              	@ 0 "" 2
 2174              	@ 210 "../kernel/os_core/os_core.c" 1
 2175 01b4 00F021E1 		msr   cpsr_c, r0
 2176              	@ 0 "" 2
 211:../kernel/os_core/os_core.c ****         *err = OS_ERR_EVENT_NAME_TOO_LONG;
 2177              		.loc 1 211 0
 2178 01b8 20301BE5 		ldr	r3, [fp, #-32]
 2179 01bc 0C20A0E3 		mov	r2, #12
 2180 01c0 0020C3E5 		strb	r2, [r3, #0]
 212:../kernel/os_core/os_core.c ****         return;
 2181              		.loc 1 212 0
 2182 01c4 090000EA 		b	.L7
 2183              	.L15:
 213:../kernel/os_core/os_core.c ****     } 
 214:../kernel/os_core/os_core.c ****     (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block 
 2184              		.loc 1 214 0
 2185 01c8 18301BE5 		ldr	r3, [fp, #-24]
 2186 01cc 103083E2 		add	r3, r3, #16
 2187 01d0 0300A0E1 		mov	r0, r3
 2188 01d4 1C101BE5 		ldr	r1, [fp, #-28]
 2189 01d8 FEFFFFEB 		bl	OS_StrCopy
 215:../kernel/os_core/os_core.c ****     OS_EXIT_CRITICAL();
 2190              		.loc 1 215 0
 2191              	@ 215 "../kernel/os_core/os_core.c" 1
 2192 01dc 04009DE4 		ldmfd sp!, {r0}
 2193              	@ 0 "" 2
 2194              	@ 215 "../kernel/os_core/os_core.c" 1
 2195 01e0 00F021E1 		msr   cpsr_c, r0
 2196              	@ 0 "" 2
 216:../kernel/os_core/os_core.c ****     *err = OS_NO_ERR;
 2197              		.loc 1 216 0
 2198 01e4 20301BE5 		ldr	r3, [fp, #-32]
 2199 01e8 0020A0E3 		mov	r2, #0
 2200 01ec 0020C3E5 		strb	r2, [r3, #0]
 2201              	.L7:
 217:../kernel/os_core/os_core.c **** }
 2202              		.loc 1 217 0
 2203 01f0 0CD04BE2 		sub	sp, fp, #12
 2204 01f4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2205 01f8 1EFF2FE1 		bx	lr
 2206              		.cfi_endproc
 2207              	.LFE1:
 2209              		.align	2
 2210              		.global	OSInit
 2212              	OSInit:
 2213              	.LFB2:
 218:../kernel/os_core/os_core.c **** #endif
 219:../kernel/os_core/os_core.c **** 
 220:../kernel/os_core/os_core.c **** /*$PAGE*/
 221:../kernel/os_core/os_core.c **** /*
 222:../kernel/os_core/os_core.c **** ***************************************************************************************************
 223:../kernel/os_core/os_core.c **** *                                             INITIALIZATION
 224:../kernel/os_core/os_core.c **** *
 225:../kernel/os_core/os_core.c **** * Description: This function is used to initialize the internals of uC/OS-II and MUST be called pri
 226:../kernel/os_core/os_core.c **** *              creating any uC/OS-II object and, prior to calling OSStart().
 227:../kernel/os_core/os_core.c **** *
 228:../kernel/os_core/os_core.c **** * Arguments  : none
 229:../kernel/os_core/os_core.c **** *
 230:../kernel/os_core/os_core.c **** * Returns    : none
 231:../kernel/os_core/os_core.c **** ***************************************************************************************************
 232:../kernel/os_core/os_core.c **** */
 233:../kernel/os_core/os_core.c **** 
 234:../kernel/os_core/os_core.c **** void  OSInit (void)
 235:../kernel/os_core/os_core.c **** {
 2214              		.loc 1 235 0
 2215              		.cfi_startproc
 2216              		@ Function supports interworking.
 2217              		@ args = 0, pretend = 0, frame = 0
 2218              		@ frame_needed = 1, uses_anonymous_args = 0
 2219 01fc 0DC0A0E1 		mov	ip, sp
 2220              	.LCFI4:
 2221              		.cfi_def_cfa_register 12
 2222 0200 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2223 0204 04B04CE2 		sub	fp, ip, #4
 2224              		.cfi_offset 14, -8
 2225              		.cfi_offset 13, -12
 2226              		.cfi_offset 11, -16
 2227              	.LCFI5:
 2228              		.cfi_def_cfa 11, 4
 236:../kernel/os_core/os_core.c **** #if OS_VERSION >= 204
 237:../kernel/os_core/os_core.c ****     OSInitHookBegin();                                           /* Call port specific initializati
 2229              		.loc 1 237 0
 2230 0208 FEFFFFEB 		bl	OSInitHookBegin
 238:../kernel/os_core/os_core.c **** #endif
 239:../kernel/os_core/os_core.c **** 
 240:../kernel/os_core/os_core.c ****     OS_InitMisc();                                               /* Initialize miscellaneous variab
 2231              		.loc 1 240 0
 2232 020c 480300EB 		bl	OS_InitMisc
 241:../kernel/os_core/os_core.c **** 
 242:../kernel/os_core/os_core.c ****     OS_InitRdyList();                                            /* Initialize the Ready List      
 2233              		.loc 1 242 0
 2234 0210 750300EB 		bl	OS_InitRdyList
 243:../kernel/os_core/os_core.c **** 
 244:../kernel/os_core/os_core.c ****     OS_InitTCBList();                                            /* Initialize the free list of OS_
 2235              		.loc 1 244 0
 2236 0214 D50300EB 		bl	OS_InitTCBList
 245:../kernel/os_core/os_core.c **** 
 246:../kernel/os_core/os_core.c ****     OS_InitEventList();                                          /* Initialize the free list of OS_
 2237              		.loc 1 246 0
 2238 0218 090300EB 		bl	OS_InitEventList
 247:../kernel/os_core/os_core.c **** 
 248:../kernel/os_core/os_core.c **** #if (OS_VERSION >= 251) && (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
 249:../kernel/os_core/os_core.c ****     OS_FlagInit();                                               /* Initialize the event flag struc
 2239              		.loc 1 249 0
 2240 021c FEFFFFEB 		bl	OS_FlagInit
 250:../kernel/os_core/os_core.c **** #endif
 251:../kernel/os_core/os_core.c **** 
 252:../kernel/os_core/os_core.c **** #if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
 253:../kernel/os_core/os_core.c ****     OS_MemInit();                                                /* Initialize the memory manager  
 2241              		.loc 1 253 0
 2242 0220 FEFFFFEB 		bl	OS_MemInit
 254:../kernel/os_core/os_core.c **** #endif
 255:../kernel/os_core/os_core.c **** 
 256:../kernel/os_core/os_core.c **** #if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
 257:../kernel/os_core/os_core.c ****     OS_QInit();                                                  /* Initialize the message queue st
 2243              		.loc 1 257 0
 2244 0224 FEFFFFEB 		bl	OS_QInit
 258:../kernel/os_core/os_core.c **** #endif
 259:../kernel/os_core/os_core.c **** 
 260:../kernel/os_core/os_core.c ****     OS_InitTaskIdle();                                           /* Create the Idle Task           
 2245              		.loc 1 260 0
 2246 0228 9C0300EB 		bl	OS_InitTaskIdle
 261:../kernel/os_core/os_core.c **** #if OS_TASK_STAT_EN > 0
 262:../kernel/os_core/os_core.c ****     OS_InitTaskStat();                                           /* Create the Statistic Task      
 2247              		.loc 1 262 0
 2248 022c B50300EB 		bl	OS_InitTaskStat
 263:../kernel/os_core/os_core.c **** #endif
 264:../kernel/os_core/os_core.c **** 
 265:../kernel/os_core/os_core.c **** #if OS_VERSION >= 204
 266:../kernel/os_core/os_core.c ****     OSInitHookEnd();                                             /* Call port specific init. code  
 2249              		.loc 1 266 0
 2250 0230 FEFFFFEB 		bl	OSInitHookEnd
 267:../kernel/os_core/os_core.c **** #endif
 268:../kernel/os_core/os_core.c **** 
 269:../kernel/os_core/os_core.c **** #if OS_VERSION >= 270 && OS_DEBUG_EN > 0
 270:../kernel/os_core/os_core.c ****     OSDebugInit();
 2251              		.loc 1 270 0
 2252 0234 FEFFFFEB 		bl	OSDebugInit
 271:../kernel/os_core/os_core.c **** #endif
 272:../kernel/os_core/os_core.c **** }
 2253              		.loc 1 272 0
 2254 0238 0CD04BE2 		sub	sp, fp, #12
 2255 023c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2256 0240 1EFF2FE1 		bx	lr
 2257              		.cfi_endproc
 2258              	.LFE2:
 2260              		.align	2
 2261              		.global	OSIntEnter
 2263              	OSIntEnter:
 2264              	.LFB3:
 273:../kernel/os_core/os_core.c **** /*$PAGE*/
 274:../kernel/os_core/os_core.c **** /*
 275:../kernel/os_core/os_core.c **** ***************************************************************************************************
 276:../kernel/os_core/os_core.c **** *                                              ENTER ISR
 277:../kernel/os_core/os_core.c **** *
 278:../kernel/os_core/os_core.c **** * Description: This function is used to notify uC/OS-II that you are about to service an interrupt
 279:../kernel/os_core/os_core.c **** *              service routine (ISR).  This allows uC/OS-II to keep track of interrupt nesting and 
 280:../kernel/os_core/os_core.c **** *              only perform rescheduling at the last nested ISR.
 281:../kernel/os_core/os_core.c **** *
 282:../kernel/os_core/os_core.c **** * Arguments  : none
 283:../kernel/os_core/os_core.c **** *
 284:../kernel/os_core/os_core.c **** * Returns    : none
 285:../kernel/os_core/os_core.c **** *
 286:../kernel/os_core/os_core.c **** * Notes      : 1) This function should be called ith interrupts already disabled
 287:../kernel/os_core/os_core.c **** *              2) Your ISR can directly increment OSIntNesting without calling this function becaus
 288:../kernel/os_core/os_core.c **** *                 OSIntNesting has been declared 'global'.  
 289:../kernel/os_core/os_core.c **** *              3) You MUST still call OSIntExit() even though you increment OSIntNesting directly.
 290:../kernel/os_core/os_core.c **** *              4) You MUST invoke OSIntEnter() and OSIntExit() in pair.  In other words, for every 
 291:../kernel/os_core/os_core.c **** *                 to OSIntEnter() at the beginning of the ISR you MUST have a call to OSIntExit() a
 292:../kernel/os_core/os_core.c **** *                 end of the ISR.
 293:../kernel/os_core/os_core.c **** *              5) You are allowed to nest interrupts up to 255 levels deep.
 294:../kernel/os_core/os_core.c **** *              6) I removed the OS_ENTER_CRITICAL() and OS_EXIT_CRITICAL() around the increment bec
 295:../kernel/os_core/os_core.c **** *                 OSIntEnter() is always called with interrupts disabled.
 296:../kernel/os_core/os_core.c **** ***************************************************************************************************
 297:../kernel/os_core/os_core.c **** */
 298:../kernel/os_core/os_core.c **** 
 299:../kernel/os_core/os_core.c **** void  OSIntEnter (void)
 300:../kernel/os_core/os_core.c **** {
 2265              		.loc 1 300 0
 2266              		.cfi_startproc
 2267              		@ Function supports interworking.
 2268              		@ args = 0, pretend = 0, frame = 0
 2269              		@ frame_needed = 1, uses_anonymous_args = 0
 2270 0244 0DC0A0E1 		mov	ip, sp
 2271              	.LCFI6:
 2272              		.cfi_def_cfa_register 12
 2273 0248 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2274 024c 04B04CE2 		sub	fp, ip, #4
 2275              		.cfi_offset 14, -8
 2276              		.cfi_offset 13, -12
 2277              		.cfi_offset 11, -16
 2278              	.LCFI7:
 2279              		.cfi_def_cfa 11, 4
 301:../kernel/os_core/os_core.c ****     if (OSRunning == TRUE) {
 2280              		.loc 1 301 0
 2281 0250 3C309FE5 		ldr	r3, .L19
 2282 0254 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2283 0258 010053E3 		cmp	r3, #1
 2284 025c 0900001A 		bne	.L17
 302:../kernel/os_core/os_core.c ****         if (OSIntNesting < 255u) {
 2285              		.loc 1 302 0
 2286 0260 30309FE5 		ldr	r3, .L19+4
 2287 0264 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2288 0268 FF0053E3 		cmp	r3, #255
 2289 026c 0500000A 		beq	.L17
 303:../kernel/os_core/os_core.c ****             OSIntNesting++;                      /* Increment ISR nesting level                    
 2290              		.loc 1 303 0
 2291 0270 20309FE5 		ldr	r3, .L19+4
 2292 0274 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2293 0278 013083E2 		add	r3, r3, #1
 2294 027c FF2003E2 		and	r2, r3, #255
 2295 0280 10309FE5 		ldr	r3, .L19+4
 2296 0284 0020C3E5 		strb	r2, [r3, #0]
 2297              	.L17:
 304:../kernel/os_core/os_core.c ****         }
 305:../kernel/os_core/os_core.c ****     }
 306:../kernel/os_core/os_core.c **** }
 2298              		.loc 1 306 0
 2299 0288 0CD04BE2 		sub	sp, fp, #12
 2300 028c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2301 0290 1EFF2FE1 		bx	lr
 2302              	.L20:
 2303              		.align	2
 2304              	.L19:
 2305 0294 00000000 		.word	OSRunning
 2306 0298 00000000 		.word	OSIntNesting
 2307              		.cfi_endproc
 2308              	.LFE3:
 2310              		.align	2
 2311              		.global	OSIntExit
 2313              	OSIntExit:
 2314              	.LFB4:
 307:../kernel/os_core/os_core.c **** /*$PAGE*/
 308:../kernel/os_core/os_core.c **** /*
 309:../kernel/os_core/os_core.c **** ***************************************************************************************************
 310:../kernel/os_core/os_core.c **** *                                               EXIT ISR
 311:../kernel/os_core/os_core.c **** *
 312:../kernel/os_core/os_core.c **** * Description: This function is used to notify uC/OS-II that you have completed serviving an ISR.  
 313:../kernel/os_core/os_core.c **** *              the last nested ISR has completed, uC/OS-II will call the scheduler to determine whe
 314:../kernel/os_core/os_core.c **** *              a new, high-priority task, is ready to run.
 315:../kernel/os_core/os_core.c **** *
 316:../kernel/os_core/os_core.c **** * Arguments  : none
 317:../kernel/os_core/os_core.c **** *
 318:../kernel/os_core/os_core.c **** * Returns    : none
 319:../kernel/os_core/os_core.c **** *
 320:../kernel/os_core/os_core.c **** * Notes      : 1) You MUST invoke OSIntEnter() and OSIntExit() in pair.  In other words, for every 
 321:../kernel/os_core/os_core.c **** *                 to OSIntEnter() at the beginning of the ISR you MUST have a call to OSIntExit() a
 322:../kernel/os_core/os_core.c **** *                 end of the ISR.
 323:../kernel/os_core/os_core.c **** *              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
 324:../kernel/os_core/os_core.c **** ***************************************************************************************************
 325:../kernel/os_core/os_core.c **** */
 326:../kernel/os_core/os_core.c **** 
 327:../kernel/os_core/os_core.c **** void  OSIntExit (void)
 328:../kernel/os_core/os_core.c **** {
 2315              		.loc 1 328 0
 2316              		.cfi_startproc
 2317              		@ Function supports interworking.
 2318              		@ args = 0, pretend = 0, frame = 8
 2319              		@ frame_needed = 1, uses_anonymous_args = 0
 2320 029c 0DC0A0E1 		mov	ip, sp
 2321              	.LCFI8:
 2322              		.cfi_def_cfa_register 12
 2323 02a0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2324 02a4 04B04CE2 		sub	fp, ip, #4
 2325              		.cfi_offset 14, -8
 2326              		.cfi_offset 13, -12
 2327              		.cfi_offset 11, -16
 2328              	.LCFI9:
 2329              		.cfi_def_cfa 11, 4
 2330 02a8 08D04DE2 		sub	sp, sp, #8
 329:../kernel/os_core/os_core.c ****     INT8U      y;
 330:../kernel/os_core/os_core.c **** #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status regis
 331:../kernel/os_core/os_core.c ****     OS_CPU_SR  cpu_sr;
 332:../kernel/os_core/os_core.c ****     
 333:../kernel/os_core/os_core.c ****     
 334:../kernel/os_core/os_core.c **** 
 335:../kernel/os_core/os_core.c ****     cpu_sr = 0;                                            /* Prevent compiler warning             
 336:../kernel/os_core/os_core.c **** #endif    
 337:../kernel/os_core/os_core.c ****     if (OSRunning == TRUE) {
 2331              		.loc 1 337 0
 2332 02ac 18319FE5 		ldr	r3, .L25
 2333 02b0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2334 02b4 010053E3 		cmp	r3, #1
 2335 02b8 4000001A 		bne	.L21
 338:../kernel/os_core/os_core.c ****         OS_ENTER_CRITICAL();
 2336              		.loc 1 338 0
 2337              	@ 338 "../kernel/os_core/os_core.c" 1
 2338 02bc 00000FE1 		mrs   r0, cpsr
 2339              	@ 0 "" 2
 2340              	@ 338 "../kernel/os_core/os_core.c" 1
 2341 02c0 04002DE5 		stmfd sp!, {r0}
 2342              	@ 0 "" 2
 2343              	@ 338 "../kernel/os_core/os_core.c" 1
 2344 02c4 C00080E3 		orr   r0, r0, #0b11000000
 2345              	@ 0 "" 2
 2346              	@ 338 "../kernel/os_core/os_core.c" 1
 2347 02c8 00F021E1 		msr   cpsr_c, r0
 2348              	@ 0 "" 2
 339:../kernel/os_core/os_core.c ****         if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping   
 2349              		.loc 1 339 0
 2350 02cc FC309FE5 		ldr	r3, .L25+4
 2351 02d0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2352 02d4 000053E3 		cmp	r3, #0
 2353 02d8 0500000A 		beq	.L23
 340:../kernel/os_core/os_core.c ****             OSIntNesting--;
 2354              		.loc 1 340 0
 2355 02dc EC309FE5 		ldr	r3, .L25+4
 2356 02e0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2357 02e4 013043E2 		sub	r3, r3, #1
 2358 02e8 FF2003E2 		and	r2, r3, #255
 2359 02ec DC309FE5 		ldr	r3, .L25+4
 2360 02f0 0020C3E5 		strb	r2, [r3, #0]
 2361              	.L23:
 341:../kernel/os_core/os_core.c ****         }
 342:../kernel/os_core/os_core.c ****         if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete 
 2362              		.loc 1 342 0
 2363 02f4 D4309FE5 		ldr	r3, .L25+4
 2364 02f8 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2365 02fc 000053E3 		cmp	r3, #0
 2366 0300 2C00001A 		bne	.L24
 343:../kernel/os_core/os_core.c ****             if (OSLockNesting == 0) {                      /* ... and not locked.                  
 2367              		.loc 1 343 0
 2368 0304 C8309FE5 		ldr	r3, .L25+8
 2369 0308 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2370 030c 000053E3 		cmp	r3, #0
 2371 0310 2800001A 		bne	.L24
 344:../kernel/os_core/os_core.c ****                 y             = OSUnMapTbl[OSRdyGrp];          
 2372              		.loc 1 344 0
 2373 0314 BC309FE5 		ldr	r3, .L25+12
 2374 0318 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2375 031c B8209FE5 		ldr	r2, .L25+16
 2376 0320 0330D2E7 		ldrb	r3, [r2, r3]
 2377 0324 0D304BE5 		strb	r3, [fp, #-13]
 345:../kernel/os_core/os_core.c ****                 OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 2378              		.loc 1 345 0
 2379 0328 0D305BE5 		ldrb	r3, [fp, #-13]
 2380 032c 8331A0E1 		mov	r3, r3, asl #3
 2381 0330 FF2003E2 		and	r2, r3, #255
 2382 0334 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2383 0338 A0109FE5 		ldr	r1, .L25+20
 2384 033c 0330D1E7 		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 2385 0340 94109FE5 		ldr	r1, .L25+16
 2386 0344 0330D1E7 		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 2387 0348 033082E0 		add	r3, r2, r3
 2388 034c FF2003E2 		and	r2, r3, #255
 2389 0350 8C309FE5 		ldr	r3, .L25+24
 2390 0354 0020C3E5 		strb	r2, [r3, #0]
 346:../kernel/os_core/os_core.c ****                 if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest 
 2391              		.loc 1 346 0
 2392 0358 84309FE5 		ldr	r3, .L25+24
 2393 035c 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2394 0360 80309FE5 		ldr	r3, .L25+28
 2395 0364 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2396 0368 030052E1 		cmp	r2, r3
 2397 036c 1100000A 		beq	.L24
 347:../kernel/os_core/os_core.c ****                     OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 2398              		.loc 1 347 0
 2399 0370 6C309FE5 		ldr	r3, .L25+24
 2400 0374 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2401 0378 0320A0E1 		mov	r2, r3
 2402 037c 68309FE5 		ldr	r3, .L25+32
 2403 0380 022193E7 		ldr	r2, [r3, r2, asl #2]
 2404 0384 64309FE5 		ldr	r3, .L25+36
 2405 0388 002083E5 		str	r2, [r3, #0]
 348:../kernel/os_core/os_core.c **** #if OS_TASK_PROFILE_EN > 0
 349:../kernel/os_core/os_core.c ****                     OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this ta
 2406              		.loc 1 349 0
 2407 038c 5C309FE5 		ldr	r3, .L25+36
 2408 0390 003093E5 		ldr	r3, [r3, #0]
 2409 0394 342093E5 		ldr	r2, [r3, #52]
 2410 0398 012082E2 		add	r2, r2, #1
 2411 039c 342083E5 		str	r2, [r3, #52]
 350:../kernel/os_core/os_core.c **** #endif
 351:../kernel/os_core/os_core.c ****                     OSCtxSwCtr++;                          /* Keep track of the number of ctx switc
 2412              		.loc 1 351 0
 2413 03a0 4C309FE5 		ldr	r3, .L25+40
 2414 03a4 003093E5 		ldr	r3, [r3, #0]
 2415 03a8 012083E2 		add	r2, r3, #1
 2416 03ac 40309FE5 		ldr	r3, .L25+40
 2417 03b0 002083E5 		str	r2, [r3, #0]
 352:../kernel/os_core/os_core.c ****                     OSIntCtxSw();                          /* Perform interrupt level ctx switch   
 2418              		.loc 1 352 0
 2419 03b4 FEFFFFEB 		bl	OSIntCtxSw
 2420              	.L24:
 353:../kernel/os_core/os_core.c ****                 }
 354:../kernel/os_core/os_core.c ****             }
 355:../kernel/os_core/os_core.c ****         }
 356:../kernel/os_core/os_core.c ****         OS_EXIT_CRITICAL();
 2421              		.loc 1 356 0
 2422              	@ 356 "../kernel/os_core/os_core.c" 1
 2423 03b8 04009DE4 		ldmfd sp!, {r0}
 2424              	@ 0 "" 2
 2425              	@ 356 "../kernel/os_core/os_core.c" 1
 2426 03bc 00F021E1 		msr   cpsr_c, r0
 2427              	@ 0 "" 2
 2428              	.L21:
 357:../kernel/os_core/os_core.c ****     }
 358:../kernel/os_core/os_core.c **** }
 2429              		.loc 1 358 0
 2430 03c0 0CD04BE2 		sub	sp, fp, #12
 2431 03c4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2432 03c8 1EFF2FE1 		bx	lr
 2433              	.L26:
 2434              		.align	2
 2435              	.L25:
 2436 03cc 00000000 		.word	OSRunning
 2437 03d0 00000000 		.word	OSIntNesting
 2438 03d4 00000000 		.word	OSLockNesting
 2439 03d8 00000000 		.word	OSRdyGrp
 2440 03dc 00000000 		.word	OSUnMapTbl
 2441 03e0 00000000 		.word	OSRdyTbl
 2442 03e4 00000000 		.word	OSPrioHighRdy
 2443 03e8 00000000 		.word	OSPrioCur
 2444 03ec 00000000 		.word	OSTCBPrioTbl
 2445 03f0 00000000 		.word	OSTCBHighRdy
 2446 03f4 00000000 		.word	OSCtxSwCtr
 2447              		.cfi_endproc
 2448              	.LFE4:
 2450              		.align	2
 2451              		.global	OSSchedLock
 2453              	OSSchedLock:
 2454              	.LFB5:
 359:../kernel/os_core/os_core.c **** /*$PAGE*/
 360:../kernel/os_core/os_core.c **** /*
 361:../kernel/os_core/os_core.c **** ***************************************************************************************************
 362:../kernel/os_core/os_core.c **** *                                          PREVENT SCHEDULING
 363:../kernel/os_core/os_core.c **** *
 364:../kernel/os_core/os_core.c **** * Description: This function is used to prevent rescheduling to take place.  This allows your appli
 365:../kernel/os_core/os_core.c **** *              to prevent context switches until you are ready to permit context switching.
 366:../kernel/os_core/os_core.c **** *
 367:../kernel/os_core/os_core.c **** * Arguments  : none
 368:../kernel/os_core/os_core.c **** *
 369:../kernel/os_core/os_core.c **** * Returns    : none
 370:../kernel/os_core/os_core.c **** *
 371:../kernel/os_core/os_core.c **** * Notes      : 1) You MUST invoke OSSchedLock() and OSSchedUnlock() in pair.  In other words, for e
 372:../kernel/os_core/os_core.c **** *                 call to OSSchedLock() you MUST have a call to OSSchedUnlock().
 373:../kernel/os_core/os_core.c **** ***************************************************************************************************
 374:../kernel/os_core/os_core.c **** */
 375:../kernel/os_core/os_core.c **** 
 376:../kernel/os_core/os_core.c **** #if OS_SCHED_LOCK_EN > 0
 377:../kernel/os_core/os_core.c **** void  OSSchedLock (void)
 378:../kernel/os_core/os_core.c **** {
 2455              		.loc 1 378 0
 2456              		.cfi_startproc
 2457              		@ Function supports interworking.
 2458              		@ args = 0, pretend = 0, frame = 0
 2459              		@ frame_needed = 1, uses_anonymous_args = 0
 2460 03f8 0DC0A0E1 		mov	ip, sp
 2461              	.LCFI10:
 2462              		.cfi_def_cfa_register 12
 2463 03fc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2464 0400 04B04CE2 		sub	fp, ip, #4
 2465              		.cfi_offset 14, -8
 2466              		.cfi_offset 13, -12
 2467              		.cfi_offset 11, -16
 2468              	.LCFI11:
 2469              		.cfi_def_cfa 11, 4
 379:../kernel/os_core/os_core.c **** #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register       
 380:../kernel/os_core/os_core.c ****     OS_CPU_SR  cpu_sr;
 381:../kernel/os_core/os_core.c ****     
 382:../kernel/os_core/os_core.c ****     
 383:../kernel/os_core/os_core.c **** 
 384:../kernel/os_core/os_core.c ****     cpu_sr = 0;                                  /* Prevent compiler warning                       
 385:../kernel/os_core/os_core.c **** #endif    
 386:../kernel/os_core/os_core.c ****     if (OSRunning == TRUE) {                     /* Make sure multitasking is running              
 2470              		.loc 1 386 0
 2471 0404 54309FE5 		ldr	r3, .L30
 2472 0408 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2473 040c 010053E3 		cmp	r3, #1
 2474 0410 0F00001A 		bne	.L27
 387:../kernel/os_core/os_core.c ****         OS_ENTER_CRITICAL();
 2475              		.loc 1 387 0
 2476              	@ 387 "../kernel/os_core/os_core.c" 1
 2477 0414 00000FE1 		mrs   r0, cpsr
 2478              	@ 0 "" 2
 2479              	@ 387 "../kernel/os_core/os_core.c" 1
 2480 0418 04002DE5 		stmfd sp!, {r0}
 2481              	@ 0 "" 2
 2482              	@ 387 "../kernel/os_core/os_core.c" 1
 2483 041c C00080E3 		orr   r0, r0, #0b11000000
 2484              	@ 0 "" 2
 2485              	@ 387 "../kernel/os_core/os_core.c" 1
 2486 0420 00F021E1 		msr   cpsr_c, r0
 2487              	@ 0 "" 2
 388:../kernel/os_core/os_core.c ****         if (OSLockNesting < 255u) {              /* Prevent OSLockNesting from wrapping back to 0  
 2488              		.loc 1 388 0
 2489 0424 38309FE5 		ldr	r3, .L30+4
 2490 0428 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2491 042c FF0053E3 		cmp	r3, #255
 2492 0430 0500000A 		beq	.L29
 389:../kernel/os_core/os_core.c ****             OSLockNesting++;                     /* Increment lock nesting level                   
 2493              		.loc 1 389 0
 2494 0434 28309FE5 		ldr	r3, .L30+4
 2495 0438 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2496 043c 013083E2 		add	r3, r3, #1
 2497 0440 FF2003E2 		and	r2, r3, #255
 2498 0444 18309FE5 		ldr	r3, .L30+4
 2499 0448 0020C3E5 		strb	r2, [r3, #0]
 2500              	.L29:
 390:../kernel/os_core/os_core.c ****         }
 391:../kernel/os_core/os_core.c ****         OS_EXIT_CRITICAL();
 2501              		.loc 1 391 0
 2502              	@ 391 "../kernel/os_core/os_core.c" 1
 2503 044c 04009DE4 		ldmfd sp!, {r0}
 2504              	@ 0 "" 2
 2505              	@ 391 "../kernel/os_core/os_core.c" 1
 2506 0450 00F021E1 		msr   cpsr_c, r0
 2507              	@ 0 "" 2
 2508              	.L27:
 392:../kernel/os_core/os_core.c ****     }
 393:../kernel/os_core/os_core.c **** }
 2509              		.loc 1 393 0
 2510 0454 0CD04BE2 		sub	sp, fp, #12
 2511 0458 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2512 045c 1EFF2FE1 		bx	lr
 2513              	.L31:
 2514              		.align	2
 2515              	.L30:
 2516 0460 00000000 		.word	OSRunning
 2517 0464 00000000 		.word	OSLockNesting
 2518              		.cfi_endproc
 2519              	.LFE5:
 2521              		.align	2
 2522              		.global	OSSchedUnlock
 2524              	OSSchedUnlock:
 2525              	.LFB6:
 394:../kernel/os_core/os_core.c **** #endif    
 395:../kernel/os_core/os_core.c **** 
 396:../kernel/os_core/os_core.c **** /*$PAGE*/
 397:../kernel/os_core/os_core.c **** /*
 398:../kernel/os_core/os_core.c **** ***************************************************************************************************
 399:../kernel/os_core/os_core.c **** *                                          ENABLE SCHEDULING
 400:../kernel/os_core/os_core.c **** *
 401:../kernel/os_core/os_core.c **** * Description: This function is used to re-allow rescheduling.
 402:../kernel/os_core/os_core.c **** *
 403:../kernel/os_core/os_core.c **** * Arguments  : none
 404:../kernel/os_core/os_core.c **** *
 405:../kernel/os_core/os_core.c **** * Returns    : none
 406:../kernel/os_core/os_core.c **** *
 407:../kernel/os_core/os_core.c **** * Notes      : 1) You MUST invoke OSSchedLock() and OSSchedUnlock() in pair.  In other words, for e
 408:../kernel/os_core/os_core.c **** *                 call to OSSchedLock() you MUST have a call to OSSchedUnlock().
 409:../kernel/os_core/os_core.c **** ***************************************************************************************************
 410:../kernel/os_core/os_core.c **** */
 411:../kernel/os_core/os_core.c **** 
 412:../kernel/os_core/os_core.c **** #if OS_SCHED_LOCK_EN > 0
 413:../kernel/os_core/os_core.c **** void  OSSchedUnlock (void)
 414:../kernel/os_core/os_core.c **** {
 2526              		.loc 1 414 0
 2527              		.cfi_startproc
 2528              		@ Function supports interworking.
 2529              		@ args = 0, pretend = 0, frame = 0
 2530              		@ frame_needed = 1, uses_anonymous_args = 0
 2531 0468 0DC0A0E1 		mov	ip, sp
 2532              	.LCFI12:
 2533              		.cfi_def_cfa_register 12
 2534 046c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2535 0470 04B04CE2 		sub	fp, ip, #4
 2536              		.cfi_offset 14, -8
 2537              		.cfi_offset 13, -12
 2538              		.cfi_offset 11, -16
 2539              	.LCFI13:
 2540              		.cfi_def_cfa 11, 4
 415:../kernel/os_core/os_core.c **** #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status regis
 416:../kernel/os_core/os_core.c ****     OS_CPU_SR  cpu_sr;
 417:../kernel/os_core/os_core.c ****     
 418:../kernel/os_core/os_core.c ****     
 419:../kernel/os_core/os_core.c **** 
 420:../kernel/os_core/os_core.c ****     cpu_sr = 0;                                            /* Prevent compiler warning             
 421:../kernel/os_core/os_core.c **** #endif    
 422:../kernel/os_core/os_core.c ****     if (OSRunning == TRUE) {                               /* Make sure multitasking is running    
 2541              		.loc 1 422 0
 2542 0474 9C309FE5 		ldr	r3, .L37
 2543 0478 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2544 047c 010053E3 		cmp	r3, #1
 2545 0480 2100001A 		bne	.L32
 423:../kernel/os_core/os_core.c ****         OS_ENTER_CRITICAL();
 2546              		.loc 1 423 0
 2547              	@ 423 "../kernel/os_core/os_core.c" 1
 2548 0484 00000FE1 		mrs   r0, cpsr
 2549              	@ 0 "" 2
 2550              	@ 423 "../kernel/os_core/os_core.c" 1
 2551 0488 04002DE5 		stmfd sp!, {r0}
 2552              	@ 0 "" 2
 2553              	@ 423 "../kernel/os_core/os_core.c" 1
 2554 048c C00080E3 		orr   r0, r0, #0b11000000
 2555              	@ 0 "" 2
 2556              	@ 423 "../kernel/os_core/os_core.c" 1
 2557 0490 00F021E1 		msr   cpsr_c, r0
 2558              	@ 0 "" 2
 424:../kernel/os_core/os_core.c ****         if (OSLockNesting > 0) {                           /* Do not decrement if already 0        
 2559              		.loc 1 424 0
 2560 0494 80309FE5 		ldr	r3, .L37+4
 2561 0498 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2562 049c 000053E3 		cmp	r3, #0
 2563 04a0 1700000A 		beq	.L34
 425:../kernel/os_core/os_core.c ****             OSLockNesting--;                               /* Decrement lock nesting level         
 2564              		.loc 1 425 0
 2565 04a4 70309FE5 		ldr	r3, .L37+4
 2566 04a8 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2567 04ac 013043E2 		sub	r3, r3, #1
 2568 04b0 FF2003E2 		and	r2, r3, #255
 2569 04b4 60309FE5 		ldr	r3, .L37+4
 2570 04b8 0020C3E5 		strb	r2, [r3, #0]
 426:../kernel/os_core/os_core.c ****             if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...  
 2571              		.loc 1 426 0
 2572 04bc 58309FE5 		ldr	r3, .L37+4
 2573 04c0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2574 04c4 000053E3 		cmp	r3, #0
 2575 04c8 0A00001A 		bne	.L35
 427:../kernel/os_core/os_core.c ****                 if (OSIntNesting == 0) {                   /* ... not in an ISR                    
 2576              		.loc 1 427 0
 2577 04cc 4C309FE5 		ldr	r3, .L37+8
 2578 04d0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2579 04d4 000053E3 		cmp	r3, #0
 2580 04d8 0300001A 		bne	.L36
 428:../kernel/os_core/os_core.c ****                     OS_EXIT_CRITICAL();
 2581              		.loc 1 428 0
 2582              	@ 428 "../kernel/os_core/os_core.c" 1
 2583 04dc 04009DE4 		ldmfd sp!, {r0}
 2584              	@ 0 "" 2
 2585              	@ 428 "../kernel/os_core/os_core.c" 1
 2586 04e0 00F021E1 		msr   cpsr_c, r0
 2587              	@ 0 "" 2
 429:../kernel/os_core/os_core.c ****                     OS_Sched();                            /* See if a HPT is ready                
 2588              		.loc 1 429 0
 2589 04e4 FEFFFFEB 		bl	OS_Sched
 2590 04e8 070000EA 		b	.L32
 2591              	.L36:
 430:../kernel/os_core/os_core.c ****                 } else {
 431:../kernel/os_core/os_core.c ****                     OS_EXIT_CRITICAL();
 2592              		.loc 1 431 0
 2593              	@ 431 "../kernel/os_core/os_core.c" 1
 2594 04ec 04009DE4 		ldmfd sp!, {r0}
 2595              	@ 0 "" 2
 2596              	@ 431 "../kernel/os_core/os_core.c" 1
 2597 04f0 00F021E1 		msr   cpsr_c, r0
 2598              	@ 0 "" 2
 2599 04f4 040000EA 		b	.L32
 2600              	.L35:
 432:../kernel/os_core/os_core.c ****                 }
 433:../kernel/os_core/os_core.c ****             } else {
 434:../kernel/os_core/os_core.c ****                 OS_EXIT_CRITICAL();
 2601              		.loc 1 434 0
 2602              	@ 434 "../kernel/os_core/os_core.c" 1
 2603 04f8 04009DE4 		ldmfd sp!, {r0}
 2604              	@ 0 "" 2
 2605              	@ 434 "../kernel/os_core/os_core.c" 1
 2606 04fc 00F021E1 		msr   cpsr_c, r0
 2607              	@ 0 "" 2
 2608 0500 010000EA 		b	.L32
 2609              	.L34:
 435:../kernel/os_core/os_core.c ****             }
 436:../kernel/os_core/os_core.c ****         } else {
 437:../kernel/os_core/os_core.c ****             OS_EXIT_CRITICAL();
 2610              		.loc 1 437 0
 2611              	@ 437 "../kernel/os_core/os_core.c" 1
 2612 0504 04009DE4 		ldmfd sp!, {r0}
 2613              	@ 0 "" 2
 2614              	@ 437 "../kernel/os_core/os_core.c" 1
 2615 0508 00F021E1 		msr   cpsr_c, r0
 2616              	@ 0 "" 2
 2617              	.L32:
 438:../kernel/os_core/os_core.c ****         }
 439:../kernel/os_core/os_core.c ****     }
 440:../kernel/os_core/os_core.c **** }
 2618              		.loc 1 440 0
 2619 050c 0CD04BE2 		sub	sp, fp, #12
 2620 0510 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2621 0514 1EFF2FE1 		bx	lr
 2622              	.L38:
 2623              		.align	2
 2624              	.L37:
 2625 0518 00000000 		.word	OSRunning
 2626 051c 00000000 		.word	OSLockNesting
 2627 0520 00000000 		.word	OSIntNesting
 2628              		.cfi_endproc
 2629              	.LFE6:
 2631              		.align	2
 2632              		.global	OSStart
 2634              	OSStart:
 2635              	.LFB7:
 441:../kernel/os_core/os_core.c **** #endif    
 442:../kernel/os_core/os_core.c **** 
 443:../kernel/os_core/os_core.c **** /*$PAGE*/
 444:../kernel/os_core/os_core.c **** /*
 445:../kernel/os_core/os_core.c **** ***************************************************************************************************
 446:../kernel/os_core/os_core.c **** *                                          START MULTITASKING
 447:../kernel/os_core/os_core.c **** *
 448:../kernel/os_core/os_core.c **** * Description: This function is used to start the multitasking process which lets uC/OS-II manages 
 449:../kernel/os_core/os_core.c **** *              task that you have created.  Before you can call OSStart(), you MUST have called OSI
 450:../kernel/os_core/os_core.c **** *              and you MUST have created at least one task.
 451:../kernel/os_core/os_core.c **** *
 452:../kernel/os_core/os_core.c **** * Arguments  : none
 453:../kernel/os_core/os_core.c **** *
 454:../kernel/os_core/os_core.c **** * Returns    : none
 455:../kernel/os_core/os_core.c **** *
 456:../kernel/os_core/os_core.c **** * Note       : OSStartHighRdy() MUST:
 457:../kernel/os_core/os_core.c **** *                 a) Call OSTaskSwHook() then,
 458:../kernel/os_core/os_core.c **** *                 b) Set OSRunning to TRUE.
 459:../kernel/os_core/os_core.c **** *                 c) Load the context of the task pointed to by OSTCBHighRdy.
 460:../kernel/os_core/os_core.c **** *                 d_ Execute the task.
 461:../kernel/os_core/os_core.c **** ***************************************************************************************************
 462:../kernel/os_core/os_core.c **** */
 463:../kernel/os_core/os_core.c **** 
 464:../kernel/os_core/os_core.c **** void  OSStart (void)
 465:../kernel/os_core/os_core.c **** {
 2636              		.loc 1 465 0
 2637              		.cfi_startproc
 2638              		@ Function supports interworking.
 2639              		@ args = 0, pretend = 0, frame = 8
 2640              		@ frame_needed = 1, uses_anonymous_args = 0
 2641 0524 0DC0A0E1 		mov	ip, sp
 2642              	.LCFI14:
 2643              		.cfi_def_cfa_register 12
 2644 0528 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2645 052c 04B04CE2 		sub	fp, ip, #4
 2646              		.cfi_offset 14, -8
 2647              		.cfi_offset 13, -12
 2648              		.cfi_offset 11, -16
 2649              	.LCFI15:
 2650              		.cfi_def_cfa 11, 4
 2651 0530 08D04DE2 		sub	sp, sp, #8
 466:../kernel/os_core/os_core.c ****     INT8U y;
 467:../kernel/os_core/os_core.c ****     INT8U x;
 468:../kernel/os_core/os_core.c **** 
 469:../kernel/os_core/os_core.c **** 
 470:../kernel/os_core/os_core.c ****     if (OSRunning == FALSE) {
 2652              		.loc 1 470 0
 2653 0534 A0309FE5 		ldr	r3, .L41
 2654 0538 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2655 053c 000053E3 		cmp	r3, #0
 2656 0540 2200001A 		bne	.L39
 471:../kernel/os_core/os_core.c ****         y             = OSUnMapTbl[OSRdyGrp];        /* Find highest priority's task priority numbe
 2657              		.loc 1 471 0
 2658 0544 94309FE5 		ldr	r3, .L41+4
 2659 0548 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2660 054c 90209FE5 		ldr	r2, .L41+8
 2661 0550 0330D2E7 		ldrb	r3, [r2, r3]
 2662 0554 0D304BE5 		strb	r3, [fp, #-13]
 472:../kernel/os_core/os_core.c ****         x             = OSUnMapTbl[OSRdyTbl[y]];
 2663              		.loc 1 472 0
 2664 0558 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2665 055c 84209FE5 		ldr	r2, .L41+12
 2666 0560 0330D2E7 		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2667 0564 78209FE5 		ldr	r2, .L41+8
 2668 0568 0330D2E7 		ldrb	r3, [r2, r3]
 2669 056c 0E304BE5 		strb	r3, [fp, #-14]
 473:../kernel/os_core/os_core.c ****         OSPrioHighRdy = (INT8U)((y << 3) + x);
 2670              		.loc 1 473 0
 2671 0570 0D305BE5 		ldrb	r3, [fp, #-13]
 2672 0574 8331A0E1 		mov	r3, r3, asl #3
 2673 0578 FF2003E2 		and	r2, r3, #255
 2674 057c 0E305BE5 		ldrb	r3, [fp, #-14]
 2675 0580 033082E0 		add	r3, r2, r3
 2676 0584 FF2003E2 		and	r2, r3, #255
 2677 0588 5C309FE5 		ldr	r3, .L41+16
 2678 058c 0020C3E5 		strb	r2, [r3, #0]
 474:../kernel/os_core/os_core.c ****         OSPrioCur     = OSPrioHighRdy;
 2679              		.loc 1 474 0
 2680 0590 54309FE5 		ldr	r3, .L41+16
 2681 0594 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 2682 0598 50309FE5 		ldr	r3, .L41+20
 2683 059c 0020C3E5 		strb	r2, [r3, #0]
 475:../kernel/os_core/os_core.c ****         OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run
 2684              		.loc 1 475 0
 2685 05a0 44309FE5 		ldr	r3, .L41+16
 2686 05a4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2687 05a8 0320A0E1 		mov	r2, r3
 2688 05ac 40309FE5 		ldr	r3, .L41+24
 2689 05b0 022193E7 		ldr	r2, [r3, r2, asl #2]
 2690 05b4 3C309FE5 		ldr	r3, .L41+28
 2691 05b8 002083E5 		str	r2, [r3, #0]
 476:../kernel/os_core/os_core.c ****         OSTCBCur      = OSTCBHighRdy;
 2692              		.loc 1 476 0
 2693 05bc 34309FE5 		ldr	r3, .L41+28
 2694 05c0 002093E5 		ldr	r2, [r3, #0]
 2695 05c4 30309FE5 		ldr	r3, .L41+32
 2696 05c8 002083E5 		str	r2, [r3, #0]
 477:../kernel/os_core/os_core.c ****         OSStartHighRdy();                            /* Execute target specific code to start task 
 2697              		.loc 1 477 0
 2698 05cc FEFFFFEB 		bl	OSStartHighRdy
 2699              	.L39:
 478:../kernel/os_core/os_core.c ****     }
 479:../kernel/os_core/os_core.c **** }
 2700              		.loc 1 479 0
 2701 05d0 0CD04BE2 		sub	sp, fp, #12
 2702 05d4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2703 05d8 1EFF2FE1 		bx	lr
 2704              	.L42:
 2705              		.align	2
 2706              	.L41:
 2707 05dc 00000000 		.word	OSRunning
 2708 05e0 00000000 		.word	OSRdyGrp
 2709 05e4 00000000 		.word	OSUnMapTbl
 2710 05e8 00000000 		.word	OSRdyTbl
 2711 05ec 00000000 		.word	OSPrioHighRdy
 2712 05f0 00000000 		.word	OSPrioCur
 2713 05f4 00000000 		.word	OSTCBPrioTbl
 2714 05f8 00000000 		.word	OSTCBHighRdy
 2715 05fc 00000000 		.word	OSTCBCur
 2716              		.cfi_endproc
 2717              	.LFE7:
 2719              		.align	2
 2720              		.global	OSStatInit
 2722              	OSStatInit:
 2723              	.LFB8:
 480:../kernel/os_core/os_core.c **** /*$PAGE*/
 481:../kernel/os_core/os_core.c **** /*
 482:../kernel/os_core/os_core.c **** ***************************************************************************************************
 483:../kernel/os_core/os_core.c **** *                                        STATISTICS INITIALIZATION
 484:../kernel/os_core/os_core.c **** *
 485:../kernel/os_core/os_core.c **** * Description: This function is called by your application to establish CPU usage by first determin
 486:../kernel/os_core/os_core.c **** *              how high a 32-bit counter would count to in 1 second if no other tasks were to execu
 487:../kernel/os_core/os_core.c **** *              during that time.  CPU usage is then determined by a low priority task which keeps t
 488:../kernel/os_core/os_core.c **** *              of this 32-bit counter every second but this time, with other tasks running.  CPU us
 489:../kernel/os_core/os_core.c **** *              determined by:
 490:../kernel/os_core/os_core.c **** *
 491:../kernel/os_core/os_core.c **** *                                             OSIdleCtr
 492:../kernel/os_core/os_core.c **** *                 CPU Usage (%) = 100 * (1 - ------------)
 493:../kernel/os_core/os_core.c **** *                                            OSIdleCtrMax
 494:../kernel/os_core/os_core.c **** *
 495:../kernel/os_core/os_core.c **** * Arguments  : none
 496:../kernel/os_core/os_core.c **** *
 497:../kernel/os_core/os_core.c **** * Returns    : none
 498:../kernel/os_core/os_core.c **** ***************************************************************************************************
 499:../kernel/os_core/os_core.c **** */
 500:../kernel/os_core/os_core.c **** 
 501:../kernel/os_core/os_core.c **** #if OS_TASK_STAT_EN > 0
 502:../kernel/os_core/os_core.c **** void  OSStatInit (void)
 503:../kernel/os_core/os_core.c **** {
 2724              		.loc 1 503 0
 2725              		.cfi_startproc
 2726              		@ Function supports interworking.
 2727              		@ args = 0, pretend = 0, frame = 0
 2728              		@ frame_needed = 1, uses_anonymous_args = 0
 2729 0600 0DC0A0E1 		mov	ip, sp
 2730              	.LCFI16:
 2731              		.cfi_def_cfa_register 12
 2732 0604 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2733 0608 04B04CE2 		sub	fp, ip, #4
 2734              		.cfi_offset 14, -8
 2735              		.cfi_offset 13, -12
 2736              		.cfi_offset 11, -16
 2737              	.LCFI17:
 2738              		.cfi_def_cfa 11, 4
 504:../kernel/os_core/os_core.c **** #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register       
 505:../kernel/os_core/os_core.c ****     OS_CPU_SR  cpu_sr;
 506:../kernel/os_core/os_core.c ****     
 507:../kernel/os_core/os_core.c ****     
 508:../kernel/os_core/os_core.c **** 
 509:../kernel/os_core/os_core.c ****     cpu_sr = 0;                                  /* Prevent compiler warning                       
 510:../kernel/os_core/os_core.c **** #endif    
 511:../kernel/os_core/os_core.c ****     OSTimeDly(2);                                /* Synchronize with clock tick                    
 2739              		.loc 1 511 0
 2740 060c 0200A0E3 		mov	r0, #2
 2741 0610 FEFFFFEB 		bl	OSTimeDly
 512:../kernel/os_core/os_core.c ****     OS_ENTER_CRITICAL();
 2742              		.loc 1 512 0
 2743              	@ 512 "../kernel/os_core/os_core.c" 1
 2744 0614 00000FE1 		mrs   r0, cpsr
 2745              	@ 0 "" 2
 2746              	@ 512 "../kernel/os_core/os_core.c" 1
 2747 0618 04002DE5 		stmfd sp!, {r0}
 2748              	@ 0 "" 2
 2749              	@ 512 "../kernel/os_core/os_core.c" 1
 2750 061c C00080E3 		orr   r0, r0, #0b11000000
 2751              	@ 0 "" 2
 2752              	@ 512 "../kernel/os_core/os_core.c" 1
 2753 0620 00F021E1 		msr   cpsr_c, r0
 2754              	@ 0 "" 2
 513:../kernel/os_core/os_core.c ****     OSIdleCtr    = 0L;                           /* Clear idle counter                             
 2755              		.loc 1 513 0
 2756 0624 54309FE5 		ldr	r3, .L44
 2757 0628 0020A0E3 		mov	r2, #0
 2758 062c 002083E5 		str	r2, [r3, #0]
 514:../kernel/os_core/os_core.c ****     OS_EXIT_CRITICAL();
 2759              		.loc 1 514 0
 2760              	@ 514 "../kernel/os_core/os_core.c" 1
 2761 0630 04009DE4 		ldmfd sp!, {r0}
 2762              	@ 0 "" 2
 2763              	@ 514 "../kernel/os_core/os_core.c" 1
 2764 0634 00F021E1 		msr   cpsr_c, r0
 2765              	@ 0 "" 2
 515:../kernel/os_core/os_core.c ****     OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 seco
 2766              		.loc 1 515 0
 2767 0638 0A00A0E3 		mov	r0, #10
 2768 063c FEFFFFEB 		bl	OSTimeDly
 516:../kernel/os_core/os_core.c ****     OS_ENTER_CRITICAL();
 2769              		.loc 1 516 0
 2770              	@ 516 "../kernel/os_core/os_core.c" 1
 2771 0640 00000FE1 		mrs   r0, cpsr
 2772              	@ 0 "" 2
 2773              	@ 516 "../kernel/os_core/os_core.c" 1
 2774 0644 04002DE5 		stmfd sp!, {r0}
 2775              	@ 0 "" 2
 2776              	@ 516 "../kernel/os_core/os_core.c" 1
 2777 0648 C00080E3 		orr   r0, r0, #0b11000000
 2778              	@ 0 "" 2
 2779              	@ 516 "../kernel/os_core/os_core.c" 1
 2780 064c 00F021E1 		msr   cpsr_c, r0
 2781              	@ 0 "" 2
 517:../kernel/os_core/os_core.c ****     OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second
 2782              		.loc 1 517 0
 2783 0650 28309FE5 		ldr	r3, .L44
 2784 0654 002093E5 		ldr	r2, [r3, #0]
 2785 0658 24309FE5 		ldr	r3, .L44+4
 2786 065c 002083E5 		str	r2, [r3, #0]
 518:../kernel/os_core/os_core.c ****     OSStatRdy    = TRUE;
 2787              		.loc 1 518 0
 2788 0660 20309FE5 		ldr	r3, .L44+8
 2789 0664 0120A0E3 		mov	r2, #1
 2790 0668 0020C3E5 		strb	r2, [r3, #0]
 519:../kernel/os_core/os_core.c ****     OS_EXIT_CRITICAL();
 2791              		.loc 1 519 0
 2792              	@ 519 "../kernel/os_core/os_core.c" 1
 2793 066c 04009DE4 		ldmfd sp!, {r0}
 2794              	@ 0 "" 2
 2795              	@ 519 "../kernel/os_core/os_core.c" 1
 2796 0670 00F021E1 		msr   cpsr_c, r0
 2797              	@ 0 "" 2
 520:../kernel/os_core/os_core.c **** }
 2798              		.loc 1 520 0
 2799 0674 0CD04BE2 		sub	sp, fp, #12
 2800 0678 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2801 067c 1EFF2FE1 		bx	lr
 2802              	.L45:
 2803              		.align	2
 2804              	.L44:
 2805 0680 00000000 		.word	OSIdleCtr
 2806 0684 00000000 		.word	OSIdleCtrMax
 2807 0688 00000000 		.word	OSStatRdy
 2808              		.cfi_endproc
 2809              	.LFE8:
 2811              		.align	2
 2812              		.global	OSTimeTick
 2814              	OSTimeTick:
 2815              	.LFB9:
 521:../kernel/os_core/os_core.c **** #endif
 522:../kernel/os_core/os_core.c **** /*$PAGE*/
 523:../kernel/os_core/os_core.c **** /*
 524:../kernel/os_core/os_core.c **** ***************************************************************************************************
 525:../kernel/os_core/os_core.c **** *                                         PROCESS SYSTEM TICK
 526:../kernel/os_core/os_core.c **** *
 527:../kernel/os_core/os_core.c **** * Description: This function is used to signal to uC/OS-II the occurrence of a 'system tick' (also 
 528:../kernel/os_core/os_core.c **** *              as a 'clock tick').  This function should be called by the ticker ISR but, can also 
 529:../kernel/os_core/os_core.c **** *              called by a high priority task.
 530:../kernel/os_core/os_core.c **** *
 531:../kernel/os_core/os_core.c **** * Arguments  : none
 532:../kernel/os_core/os_core.c **** *
 533:../kernel/os_core/os_core.c **** * Returns    : none
 534:../kernel/os_core/os_core.c **** ***************************************************************************************************
 535:../kernel/os_core/os_core.c **** */
 536:../kernel/os_core/os_core.c **** 
 537:../kernel/os_core/os_core.c **** void  OSTimeTick (void)
 538:../kernel/os_core/os_core.c **** {
 2816              		.loc 1 538 0
 2817              		.cfi_startproc
 2818              		@ Function supports interworking.
 2819              		@ args = 0, pretend = 0, frame = 8
 2820              		@ frame_needed = 1, uses_anonymous_args = 0
 2821 068c 0DC0A0E1 		mov	ip, sp
 2822              	.LCFI18:
 2823              		.cfi_def_cfa_register 12
 2824 0690 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2825 0694 04B04CE2 		sub	fp, ip, #4
 2826              		.cfi_offset 14, -8
 2827              		.cfi_offset 13, -12
 2828              		.cfi_offset 11, -16
 2829              	.LCFI19:
 2830              		.cfi_def_cfa 11, 4
 2831 0698 08D04DE2 		sub	sp, sp, #8
 539:../kernel/os_core/os_core.c ****     OS_TCB    *ptcb;
 540:../kernel/os_core/os_core.c **** #if OS_TICK_STEP_EN > 0
 541:../kernel/os_core/os_core.c ****     BOOLEAN    step;
 542:../kernel/os_core/os_core.c **** #endif
 543:../kernel/os_core/os_core.c **** #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status regis
 544:../kernel/os_core/os_core.c ****     OS_CPU_SR  cpu_sr;
 545:../kernel/os_core/os_core.c **** 
 546:../kernel/os_core/os_core.c **** 
 547:../kernel/os_core/os_core.c **** 
 548:../kernel/os_core/os_core.c ****     cpu_sr = 0;                                            /* Prevent compiler warning             
 549:../kernel/os_core/os_core.c **** #endif
 550:../kernel/os_core/os_core.c **** #if OS_TIME_TICK_HOOK_EN > 0
 551:../kernel/os_core/os_core.c ****     OSTimeTickHook();                                      /* Call user definable hook             
 2832              		.loc 1 551 0
 2833 069c FEFFFFEB 		bl	OSTimeTickHook
 552:../kernel/os_core/os_core.c **** #endif
 553:../kernel/os_core/os_core.c **** #if OS_TIME_GET_SET_EN > 0
 554:../kernel/os_core/os_core.c ****     OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter       
 2834              		.loc 1 554 0
 2835              	@ 554 "../kernel/os_core/os_core.c" 1
 2836 06a0 00000FE1 		mrs   r0, cpsr
 2837              	@ 0 "" 2
 2838              	@ 554 "../kernel/os_core/os_core.c" 1
 2839 06a4 04002DE5 		stmfd sp!, {r0}
 2840              	@ 0 "" 2
 2841              	@ 554 "../kernel/os_core/os_core.c" 1
 2842 06a8 C00080E3 		orr   r0, r0, #0b11000000
 2843              	@ 0 "" 2
 2844              	@ 554 "../kernel/os_core/os_core.c" 1
 2845 06ac 00F021E1 		msr   cpsr_c, r0
 2846              	@ 0 "" 2
 555:../kernel/os_core/os_core.c ****     OSTime++;
 2847              		.loc 1 555 0
 2848 06b0 D8319FE5 		ldr	r3, .L61
 2849 06b4 003093E5 		ldr	r3, [r3, #0]
 2850 06b8 012083E2 		add	r2, r3, #1
 2851 06bc CC319FE5 		ldr	r3, .L61
 2852 06c0 002083E5 		str	r2, [r3, #0]
 556:../kernel/os_core/os_core.c ****     OS_EXIT_CRITICAL();
 2853              		.loc 1 556 0
 2854              	@ 556 "../kernel/os_core/os_core.c" 1
 2855 06c4 04009DE4 		ldmfd sp!, {r0}
 2856              	@ 0 "" 2
 2857              	@ 556 "../kernel/os_core/os_core.c" 1
 2858 06c8 00F021E1 		msr   cpsr_c, r0
 2859              	@ 0 "" 2
 557:../kernel/os_core/os_core.c **** #endif
 558:../kernel/os_core/os_core.c ****     if (OSRunning == TRUE) {
 2860              		.loc 1 558 0
 2861 06cc C0319FE5 		ldr	r3, .L61+4
 2862 06d0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2863 06d4 010053E3 		cmp	r3, #1
 2864 06d8 6900001A 		bne	.L46
 559:../kernel/os_core/os_core.c **** #if OS_TICK_STEP_EN > 0
 560:../kernel/os_core/os_core.c ****         switch (OSTickStepState) {                         /* Determine whether we need to process 
 2865              		.loc 1 560 0
 2866 06dc B4319FE5 		ldr	r3, .L61+8
 2867 06e0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2868 06e4 010053E3 		cmp	r3, #1
 2869 06e8 0600000A 		beq	.L50
 2870 06ec 020053E3 		cmp	r3, #2
 2871 06f0 0700000A 		beq	.L51
 2872 06f4 000053E3 		cmp	r3, #0
 2873 06f8 0B00001A 		bne	.L59
 2874              	.L49:
 561:../kernel/os_core/os_core.c ****             case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled            
 562:../kernel/os_core/os_core.c ****                  step = TRUE;
 2875              		.loc 1 562 0
 2876 06fc 0130A0E3 		mov	r3, #1
 2877 0700 11304BE5 		strb	r3, [fp, #-17]
 563:../kernel/os_core/os_core.c ****                  break;
 2878              		.loc 1 563 0
 2879 0704 0E0000EA 		b	.L52
 2880              	.L50:
 564:../kernel/os_core/os_core.c **** 
 565:../kernel/os_core/os_core.c ****             case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ..
 566:../kernel/os_core/os_core.c ****                  step = FALSE;                             /*      .. OSTickStepState to OS_TICK_ST
 2881              		.loc 1 566 0
 2882 0708 0030A0E3 		mov	r3, #0
 2883 070c 11304BE5 		strb	r3, [fp, #-17]
 567:../kernel/os_core/os_core.c ****                  break;
 2884              		.loc 1 567 0
 2885 0710 0B0000EA 		b	.L52
 2886              	.L51:
 568:../kernel/os_core/os_core.c **** 
 569:../kernel/os_core/os_core.c ****             case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for n
 570:../kernel/os_core/os_core.c ****                  step            = TRUE;                   /*      ... step command from uC/OS-View
 2887              		.loc 1 570 0
 2888 0714 0130A0E3 		mov	r3, #1
 2889 0718 11304BE5 		strb	r3, [fp, #-17]
 571:../kernel/os_core/os_core.c ****                  OSTickStepState = OS_TICK_STEP_WAIT;
 2890              		.loc 1 571 0
 2891 071c 74319FE5 		ldr	r3, .L61+8
 2892 0720 0120A0E3 		mov	r2, #1
 2893 0724 0020C3E5 		strb	r2, [r3, #0]
 572:../kernel/os_core/os_core.c ****                  break;
 2894              		.loc 1 572 0
 2895 0728 050000EA 		b	.L52
 2896              	.L59:
 573:../kernel/os_core/os_core.c **** 
 574:../kernel/os_core/os_core.c ****             default:                                       /* Invalid case, correct situation      
 575:../kernel/os_core/os_core.c ****                  step            = TRUE;
 2897              		.loc 1 575 0
 2898 072c 0130A0E3 		mov	r3, #1
 2899 0730 11304BE5 		strb	r3, [fp, #-17]
 576:../kernel/os_core/os_core.c ****                  OSTickStepState = OS_TICK_STEP_DIS;
 2900              		.loc 1 576 0
 2901 0734 5C319FE5 		ldr	r3, .L61+8
 2902 0738 0020A0E3 		mov	r2, #0
 2903 073c 0020C3E5 		strb	r2, [r3, #0]
 577:../kernel/os_core/os_core.c ****                  break;
 2904              		.loc 1 577 0
 2905 0740 0000A0E1 		mov	r0, r0	@ nop
 2906              	.L52:
 578:../kernel/os_core/os_core.c ****         }
 579:../kernel/os_core/os_core.c ****         if (step == FALSE) {                               /* Return if waiting for step command   
 2907              		.loc 1 579 0
 2908 0744 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 2909 0748 000053E3 		cmp	r3, #0
 2910 074c 4B00000A 		beq	.L60
 2911              	.L53:
 580:../kernel/os_core/os_core.c ****             return;
 581:../kernel/os_core/os_core.c ****         }
 582:../kernel/os_core/os_core.c **** #endif
 583:../kernel/os_core/os_core.c ****         ptcb = OSTCBList;                                  /* Point at first TCB in TCB list       
 2912              		.loc 1 583 0
 2913 0750 44319FE5 		ldr	r3, .L61+12
 2914 0754 003093E5 		ldr	r3, [r3, #0]
 2915 0758 10300BE5 		str	r3, [fp, #-16]
 584:../kernel/os_core/os_core.c ****         while (ptcb->OSTCBPrio != OS_IDLE_PRIO) {          /* Go through all TCBs in TCB list      
 2916              		.loc 1 584 0
 2917 075c 420000EA 		b	.L54
 2918              	.L58:
 585:../kernel/os_core/os_core.c ****             OS_ENTER_CRITICAL();
 2919              		.loc 1 585 0
 2920              	@ 585 "../kernel/os_core/os_core.c" 1
 2921 0760 00000FE1 		mrs   r0, cpsr
 2922              	@ 0 "" 2
 2923              	@ 585 "../kernel/os_core/os_core.c" 1
 2924 0764 04002DE5 		stmfd sp!, {r0}
 2925              	@ 0 "" 2
 2926              	@ 585 "../kernel/os_core/os_core.c" 1
 2927 0768 C00080E3 		orr   r0, r0, #0b11000000
 2928              	@ 0 "" 2
 2929              	@ 585 "../kernel/os_core/os_core.c" 1
 2930 076c 00F021E1 		msr   cpsr_c, r0
 2931              	@ 0 "" 2
 586:../kernel/os_core/os_core.c ****             if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with
 2932              		.loc 1 586 0
 2933 0770 10301BE5 		ldr	r3, [fp, #-16]
 2934 0774 BA32D3E1 		ldrh	r3, [r3, #42]
 2935 0778 000053E3 		cmp	r3, #0
 2936 077c 3500000A 		beq	.L55
 587:../kernel/os_core/os_core.c ****                 if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of dela
 2937              		.loc 1 587 0
 2938 0780 10301BE5 		ldr	r3, [fp, #-16]
 2939 0784 BA32D3E1 		ldrh	r3, [r3, #42]
 2940 0788 013043E2 		sub	r3, r3, #1
 2941 078c 0338A0E1 		mov	r3, r3, asl #16
 2942 0790 2328A0E1 		mov	r2, r3, lsr #16
 2943 0794 10301BE5 		ldr	r3, [fp, #-16]
 2944 0798 BA22C3E1 		strh	r2, [r3, #42]	@ movhi
 2945 079c 10301BE5 		ldr	r3, [fp, #-16]
 2946 07a0 BA32D3E1 		ldrh	r3, [r3, #42]
 2947 07a4 000053E3 		cmp	r3, #0
 2948 07a8 2A00001A 		bne	.L55
 588:../kernel/os_core/os_core.c ****                                                            /* Check for timeout                    
 589:../kernel/os_core/os_core.c ****                     if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 2949              		.loc 1 589 0
 2950 07ac 10301BE5 		ldr	r3, [fp, #-16]
 2951 07b0 2C30D3E5 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 2952 07b4 373003E2 		and	r3, r3, #55
 2953 07b8 000053E3 		cmp	r3, #0
 2954 07bc 0900000A 		beq	.L56
 590:../kernel/os_core/os_core.c ****                         ptcb->OSTCBStat   &= ~OS_STAT_PEND_ANY;                /* Yes, Clear status
 2955              		.loc 1 590 0
 2956 07c0 10301BE5 		ldr	r3, [fp, #-16]
 2957 07c4 2C30D3E5 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 2958 07c8 3730C3E3 		bic	r3, r3, #55
 2959 07cc FF2003E2 		and	r2, r3, #255
 2960 07d0 10301BE5 		ldr	r3, [fp, #-16]
 2961 07d4 2C20C3E5 		strb	r2, [r3, #44]
 591:../kernel/os_core/os_core.c ****                         ptcb->OSTCBPendTO  = TRUE;                             /* Indicate PEND tim
 2962              		.loc 1 591 0
 2963 07d8 10301BE5 		ldr	r3, [fp, #-16]
 2964 07dc 0120A0E3 		mov	r2, #1
 2965 07e0 2D20C3E5 		strb	r2, [r3, #45]
 2966 07e4 020000EA 		b	.L57
 2967              	.L56:
 592:../kernel/os_core/os_core.c ****                     } else {
 593:../kernel/os_core/os_core.c ****                         ptcb->OSTCBPendTO  = FALSE;
 2968              		.loc 1 593 0
 2969 07e8 10301BE5 		ldr	r3, [fp, #-16]
 2970 07ec 0020A0E3 		mov	r2, #0
 2971 07f0 2D20C3E5 		strb	r2, [r3, #45]
 2972              	.L57:
 594:../kernel/os_core/os_core.c ****                     }
 595:../kernel/os_core/os_core.c **** 
 596:../kernel/os_core/os_core.c ****                     if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended
 2973              		.loc 1 596 0
 2974 07f4 10301BE5 		ldr	r3, [fp, #-16]
 2975 07f8 2C30D3E5 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 2976 07fc 083003E2 		and	r3, r3, #8
 2977 0800 000053E3 		cmp	r3, #0
 2978 0804 1300001A 		bne	.L55
 597:../kernel/os_core/os_core.c ****                         OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready  
 2979              		.loc 1 597 0
 2980 0808 10301BE5 		ldr	r3, [fp, #-16]
 2981 080c 3220D3E5 		ldrb	r2, [r3, #50]	@ zero_extendqisi2
 2982 0810 88309FE5 		ldr	r3, .L61+16
 2983 0814 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2984 0818 033082E1 		orr	r3, r2, r3
 2985 081c FF2003E2 		and	r2, r3, #255
 2986 0820 78309FE5 		ldr	r3, .L61+16
 2987 0824 0020C3E5 		strb	r2, [r3, #0]
 598:../kernel/os_core/os_core.c ****                         OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2988              		.loc 1 598 0
 2989 0828 10301BE5 		ldr	r3, [fp, #-16]
 2990 082c 3030D3E5 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 2991 0830 10201BE5 		ldr	r2, [fp, #-16]
 2992 0834 3020D2E5 		ldrb	r2, [r2, #48]	@ zero_extendqisi2
 2993 0838 64109FE5 		ldr	r1, .L61+20
 2994 083c 0210D1E7 		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 2995 0840 10201BE5 		ldr	r2, [fp, #-16]
 2996 0844 3120D2E5 		ldrb	r2, [r2, #49]	@ zero_extendqisi2
 2997 0848 022081E1 		orr	r2, r1, r2
 2998 084c FF1002E2 		and	r1, r2, #255
 2999 0850 4C209FE5 		ldr	r2, .L61+20
 3000 0854 0310C2E7 		strb	r1, [r2, r3]
 3001              	.L55:
 599:../kernel/os_core/os_core.c ****                     }
 600:../kernel/os_core/os_core.c ****                 }
 601:../kernel/os_core/os_core.c ****             }
 602:../kernel/os_core/os_core.c ****             ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list        
 3002              		.loc 1 602 0
 3003 0858 10301BE5 		ldr	r3, [fp, #-16]
 3004 085c 143093E5 		ldr	r3, [r3, #20]
 3005 0860 10300BE5 		str	r3, [fp, #-16]
 603:../kernel/os_core/os_core.c ****             OS_EXIT_CRITICAL();
 3006              		.loc 1 603 0
 3007              	@ 603 "../kernel/os_core/os_core.c" 1
 3008 0864 04009DE4 		ldmfd sp!, {r0}
 3009              	@ 0 "" 2
 3010              	@ 603 "../kernel/os_core/os_core.c" 1
 3011 0868 00F021E1 		msr   cpsr_c, r0
 3012              	@ 0 "" 2
 3013              	.L54:
 584:../kernel/os_core/os_core.c ****         while (ptcb->OSTCBPrio != OS_IDLE_PRIO) {          /* Go through all TCBs in TCB list      
 3014              		.loc 1 584 0 discriminator 1
 3015 086c 10301BE5 		ldr	r3, [fp, #-16]
 3016 0870 2E30D3E5 		ldrb	r3, [r3, #46]	@ zero_extendqisi2
 3017 0874 3F0053E3 		cmp	r3, #63
 3018 0878 B8FFFF1A 		bne	.L58
 3019 087c 000000EA 		b	.L46
 3020              	.L60:
 580:../kernel/os_core/os_core.c ****             return;
 3021              		.loc 1 580 0
 3022 0880 0000A0E1 		mov	r0, r0	@ nop
 3023              	.L46:
 604:../kernel/os_core/os_core.c ****         }
 605:../kernel/os_core/os_core.c ****     }
 606:../kernel/os_core/os_core.c **** }
 3024              		.loc 1 606 0
 3025 0884 0CD04BE2 		sub	sp, fp, #12
 3026 0888 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3027 088c 1EFF2FE1 		bx	lr
 3028              	.L62:
 3029              		.align	2
 3030              	.L61:
 3031 0890 00000000 		.word	OSTime
 3032 0894 00000000 		.word	OSRunning
 3033 0898 00000000 		.word	OSTickStepState
 3034 089c 00000000 		.word	OSTCBList
 3035 08a0 00000000 		.word	OSRdyGrp
 3036 08a4 00000000 		.word	OSRdyTbl
 3037              		.cfi_endproc
 3038              	.LFE9:
 3040              		.align	2
 3041              		.global	OSVersion
 3043              	OSVersion:
 3044              	.LFB10:
 607:../kernel/os_core/os_core.c **** /*$PAGE*/
 608:../kernel/os_core/os_core.c **** /*
 609:../kernel/os_core/os_core.c **** ***************************************************************************************************
 610:../kernel/os_core/os_core.c **** *                                             GET VERSION
 611:../kernel/os_core/os_core.c **** *
 612:../kernel/os_core/os_core.c **** * Description: This function is used to return the version number of uC/OS-II.  The returned value
 613:../kernel/os_core/os_core.c **** *              corresponds to uC/OS-II's version number multiplied by 100.  In other words, version
 614:../kernel/os_core/os_core.c **** *              would be returned as 200.
 615:../kernel/os_core/os_core.c **** *
 616:../kernel/os_core/os_core.c **** * Arguments  : none
 617:../kernel/os_core/os_core.c **** *
 618:../kernel/os_core/os_core.c **** * Returns    : the version number of uC/OS-II multiplied by 100.
 619:../kernel/os_core/os_core.c **** ***************************************************************************************************
 620:../kernel/os_core/os_core.c **** */
 621:../kernel/os_core/os_core.c **** 
 622:../kernel/os_core/os_core.c **** INT16U  OSVersion (void)
 623:../kernel/os_core/os_core.c **** {
 3045              		.loc 1 623 0
 3046              		.cfi_startproc
 3047              		@ Function supports interworking.
 3048              		@ args = 0, pretend = 0, frame = 0
 3049              		@ frame_needed = 1, uses_anonymous_args = 0
 3050 08a8 0DC0A0E1 		mov	ip, sp
 3051              	.LCFI20:
 3052              		.cfi_def_cfa_register 12
 3053 08ac 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3054 08b0 04B04CE2 		sub	fp, ip, #4
 3055              		.cfi_offset 14, -8
 3056              		.cfi_offset 13, -12
 3057              		.cfi_offset 11, -16
 3058              	.LCFI21:
 3059              		.cfi_def_cfa 11, 4
 624:../kernel/os_core/os_core.c ****     return (OS_VERSION);
 3060              		.loc 1 624 0
 3061 08b4 453FA0E3 		mov	r3, #276
 625:../kernel/os_core/os_core.c **** }
 3062              		.loc 1 625 0
 3063 08b8 0300A0E1 		mov	r0, r3
 3064 08bc 0CD04BE2 		sub	sp, fp, #12
 3065 08c0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3066 08c4 1EFF2FE1 		bx	lr
 3067              		.cfi_endproc
 3068              	.LFE10:
 3070              		.align	2
 3071              		.global	OS_Dummy
 3073              	OS_Dummy:
 3074              	.LFB11:
 626:../kernel/os_core/os_core.c **** 
 627:../kernel/os_core/os_core.c **** /*$PAGE*/
 628:../kernel/os_core/os_core.c **** /*
 629:../kernel/os_core/os_core.c **** ***************************************************************************************************
 630:../kernel/os_core/os_core.c **** *                                            DUMMY FUNCTION
 631:../kernel/os_core/os_core.c **** *
 632:../kernel/os_core/os_core.c **** * Description: This function doesn't do anything.  It is called by OSTaskDel().
 633:../kernel/os_core/os_core.c **** *
 634:../kernel/os_core/os_core.c **** * Arguments  : none
 635:../kernel/os_core/os_core.c **** *
 636:../kernel/os_core/os_core.c **** * Returns    : none
 637:../kernel/os_core/os_core.c **** ***************************************************************************************************
 638:../kernel/os_core/os_core.c **** */
 639:../kernel/os_core/os_core.c **** 
 640:../kernel/os_core/os_core.c **** #if OS_TASK_DEL_EN > 0
 641:../kernel/os_core/os_core.c **** void  OS_Dummy (void)
 642:../kernel/os_core/os_core.c **** {
 3075              		.loc 1 642 0
 3076              		.cfi_startproc
 3077              		@ Function supports interworking.
 3078              		@ args = 0, pretend = 0, frame = 0
 3079              		@ frame_needed = 1, uses_anonymous_args = 0
 3080 08c8 0DC0A0E1 		mov	ip, sp
 3081              	.LCFI22:
 3082              		.cfi_def_cfa_register 12
 3083 08cc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3084 08d0 04B04CE2 		sub	fp, ip, #4
 3085              		.cfi_offset 14, -8
 3086              		.cfi_offset 13, -12
 3087              		.cfi_offset 11, -16
 3088              	.LCFI23:
 3089              		.cfi_def_cfa 11, 4
 643:../kernel/os_core/os_core.c **** }
 3090              		.loc 1 643 0
 3091 08d4 0CD04BE2 		sub	sp, fp, #12
 3092 08d8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3093 08dc 1EFF2FE1 		bx	lr
 3094              		.cfi_endproc
 3095              	.LFE11:
 3097              		.align	2
 3098              		.global	OS_EventTaskRdy
 3100              	OS_EventTaskRdy:
 3101              	.LFB12:
 644:../kernel/os_core/os_core.c **** #endif
 645:../kernel/os_core/os_core.c **** 
 646:../kernel/os_core/os_core.c **** /*$PAGE*/
 647:../kernel/os_core/os_core.c **** /*
 648:../kernel/os_core/os_core.c **** ***************************************************************************************************
 649:../kernel/os_core/os_core.c **** *                             MAKE TASK READY TO RUN BASED ON EVENT OCCURING
 650:../kernel/os_core/os_core.c **** *
 651:../kernel/os_core/os_core.c **** * Description: This function is called by other uC/OS-II services and is used to ready a task that 
 652:../kernel/os_core/os_core.c **** *              waiting for an event to occur.
 653:../kernel/os_core/os_core.c **** *
 654:../kernel/os_core/os_core.c **** * Arguments  : pevent    is a pointer to the event control block corresponding to the event.
 655:../kernel/os_core/os_core.c **** *
 656:../kernel/os_core/os_core.c **** *              msg       is a pointer to a message.  This pointer is used by message oriented servi
 657:../kernel/os_core/os_core.c **** *                        such as MAILBOXEs and QUEUEs.  The pointer is not used when called by othe
 658:../kernel/os_core/os_core.c **** *                        service functions.
 659:../kernel/os_core/os_core.c **** *
 660:../kernel/os_core/os_core.c **** *              msk       is a mask that is used to clear the status byte of the TCB.  For example,
 661:../kernel/os_core/os_core.c **** *                        OSSemPost() will pass OS_STAT_SEM, OSMboxPost() will pass OS_STAT_MBOX etc
 662:../kernel/os_core/os_core.c **** *
 663:../kernel/os_core/os_core.c **** * Returns    : none
 664:../kernel/os_core/os_core.c **** *
 665:../kernel/os_core/os_core.c **** * Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
 666:../kernel/os_core/os_core.c **** ***************************************************************************************************
 667:../kernel/os_core/os_core.c **** */
 668:../kernel/os_core/os_core.c **** #if OS_EVENT_EN
 669:../kernel/os_core/os_core.c **** INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *msg, INT8U msk)
 670:../kernel/os_core/os_core.c **** {
 3102              		.loc 1 670 0
 3103              		.cfi_startproc
 3104              		@ Function supports interworking.
 3105              		@ args = 0, pretend = 0, frame = 32
 3106              		@ frame_needed = 1, uses_anonymous_args = 0
 3107 08e0 0DC0A0E1 		mov	ip, sp
 3108              	.LCFI24:
 3109              		.cfi_def_cfa_register 12
 3110 08e4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3111 08e8 04B04CE2 		sub	fp, ip, #4
 3112              		.cfi_offset 14, -8
 3113              		.cfi_offset 13, -12
 3114              		.cfi_offset 11, -16
 3115              	.LCFI25:
 3116              		.cfi_def_cfa 11, 4
 3117 08ec 20D04DE2 		sub	sp, sp, #32
 3118 08f0 20000BE5 		str	r0, [fp, #-32]
 3119 08f4 24100BE5 		str	r1, [fp, #-36]
 3120 08f8 0230A0E1 		mov	r3, r2
 3121 08fc 25304BE5 		strb	r3, [fp, #-37]
 671:../kernel/os_core/os_core.c ****     OS_TCB *ptcb;
 672:../kernel/os_core/os_core.c ****     INT8U   x;
 673:../kernel/os_core/os_core.c ****     INT8U   y;
 674:../kernel/os_core/os_core.c ****     INT8U   bitx;
 675:../kernel/os_core/os_core.c ****     INT8U   bity;
 676:../kernel/os_core/os_core.c ****     INT8U   prio;
 677:../kernel/os_core/os_core.c **** 
 678:../kernel/os_core/os_core.c **** 
 679:../kernel/os_core/os_core.c ****     y                      = OSUnMapTbl[pevent->OSEventGrp];   /* Find HPT waiting for message     
 3122              		.loc 1 679 0
 3123 0900 20301BE5 		ldr	r3, [fp, #-32]
 3124 0904 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3125 0908 C8219FE5 		ldr	r2, .L68
 3126 090c 0330D2E7 		ldrb	r3, [r2, r3]
 3127 0910 0D304BE5 		strb	r3, [fp, #-13]
 680:../kernel/os_core/os_core.c ****     bity                   = OSMapTbl[y];
 3128              		.loc 1 680 0
 3129 0914 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3130 0918 BC219FE5 		ldr	r2, .L68+4
 3131 091c 0330D2E7 		ldrb	r3, [r2, r3]
 3132 0920 0E304BE5 		strb	r3, [fp, #-14]
 681:../kernel/os_core/os_core.c ****     x                      = OSUnMapTbl[pevent->OSEventTbl[y]];
 3133              		.loc 1 681 0
 3134 0924 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 3135 0928 20101BE5 		ldr	r1, [fp, #-32]
 3136 092c 0830A0E3 		mov	r3, #8
 3137 0930 022081E0 		add	r2, r1, r2
 3138 0934 033082E0 		add	r3, r2, r3
 3139 0938 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3140 093c 94219FE5 		ldr	r2, .L68
 3141 0940 0330D2E7 		ldrb	r3, [r2, r3]
 3142 0944 0F304BE5 		strb	r3, [fp, #-15]
 682:../kernel/os_core/os_core.c ****     bitx                   = OSMapTbl[x];
 3143              		.loc 1 682 0
 3144 0948 0F305BE5 		ldrb	r3, [fp, #-15]	@ zero_extendqisi2
 3145 094c 88219FE5 		ldr	r2, .L68+4
 3146 0950 0330D2E7 		ldrb	r3, [r2, r3]
 3147 0954 10304BE5 		strb	r3, [fp, #-16]
 683:../kernel/os_core/os_core.c ****     prio                   = (INT8U)((y << 3) + x);     /* Find priority of task getting the msg   
 3148              		.loc 1 683 0
 3149 0958 0D305BE5 		ldrb	r3, [fp, #-13]
 3150 095c 8331A0E1 		mov	r3, r3, asl #3
 3151 0960 FF2003E2 		and	r2, r3, #255
 3152 0964 0F305BE5 		ldrb	r3, [fp, #-15]
 3153 0968 033082E0 		add	r3, r2, r3
 3154 096c 11304BE5 		strb	r3, [fp, #-17]
 684:../kernel/os_core/os_core.c ****     pevent->OSEventTbl[y] &= ~bitx;                     /* Remove this task from the waiting list  
 3155              		.loc 1 684 0
 3156 0970 0D105BE5 		ldrb	r1, [fp, #-13]	@ zero_extendqisi2
 3157 0974 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 3158 0978 20001BE5 		ldr	r0, [fp, #-32]
 3159 097c 0830A0E3 		mov	r3, #8
 3160 0980 022080E0 		add	r2, r0, r2
 3161 0984 033082E0 		add	r3, r2, r3
 3162 0988 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3163 098c FF2003E2 		and	r2, r3, #255
 3164 0990 10305BE5 		ldrb	r3, [fp, #-16]	@ zero_extendqisi2
 3165 0994 0330E0E1 		mvn	r3, r3
 3166 0998 FF3003E2 		and	r3, r3, #255
 3167 099c 033002E0 		and	r3, r2, r3
 3168 09a0 FF3003E2 		and	r3, r3, #255
 3169 09a4 FF2003E2 		and	r2, r3, #255
 3170 09a8 20001BE5 		ldr	r0, [fp, #-32]
 3171 09ac 0830A0E3 		mov	r3, #8
 3172 09b0 011080E0 		add	r1, r0, r1
 3173 09b4 033081E0 		add	r3, r1, r3
 3174 09b8 0020C3E5 		strb	r2, [r3, #0]
 685:../kernel/os_core/os_core.c ****     if (pevent->OSEventTbl[y] == 0x00) {                
 3175              		.loc 1 685 0
 3176 09bc 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 3177 09c0 20101BE5 		ldr	r1, [fp, #-32]
 3178 09c4 0830A0E3 		mov	r3, #8
 3179 09c8 022081E0 		add	r2, r1, r2
 3180 09cc 033082E0 		add	r3, r2, r3
 3181 09d0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3182 09d4 000053E3 		cmp	r3, #0
 3183 09d8 0A00001A 		bne	.L66
 686:../kernel/os_core/os_core.c ****         pevent->OSEventGrp &= ~bity;                    /* Clr group bit if this was only task pend
 3184              		.loc 1 686 0
 3185 09dc 20301BE5 		ldr	r3, [fp, #-32]
 3186 09e0 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3187 09e4 FF2003E2 		and	r2, r3, #255
 3188 09e8 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 3189 09ec 0330E0E1 		mvn	r3, r3
 3190 09f0 FF3003E2 		and	r3, r3, #255
 3191 09f4 033002E0 		and	r3, r2, r3
 3192 09f8 FF3003E2 		and	r3, r3, #255
 3193 09fc FF2003E2 		and	r2, r3, #255
 3194 0a00 20301BE5 		ldr	r3, [fp, #-32]
 3195 0a04 0120C3E5 		strb	r2, [r3, #1]
 3196              	.L66:
 687:../kernel/os_core/os_core.c ****     }
 688:../kernel/os_core/os_core.c ****     ptcb                 =  OSTCBPrioTbl[prio];         /* Point to this task's OS_TCB             
 3197              		.loc 1 688 0
 3198 0a08 11205BE5 		ldrb	r2, [fp, #-17]	@ zero_extendqisi2
 3199 0a0c CC309FE5 		ldr	r3, .L68+8
 3200 0a10 023193E7 		ldr	r3, [r3, r2, asl #2]
 3201 0a14 18300BE5 		str	r3, [fp, #-24]
 689:../kernel/os_core/os_core.c ****     ptcb->OSTCBDly       =  0;                          /* Prevent OSTimeTick() from readying task 
 3202              		.loc 1 689 0
 3203 0a18 18301BE5 		ldr	r3, [fp, #-24]
 3204 0a1c 0020A0E3 		mov	r2, #0
 3205 0a20 BA22C3E1 		strh	r2, [r3, #42]	@ movhi
 690:../kernel/os_core/os_core.c ****     ptcb->OSTCBEventPtr  = (OS_EVENT *)0;               /* Unlink ECB from this task               
 3206              		.loc 1 690 0
 3207 0a24 18301BE5 		ldr	r3, [fp, #-24]
 3208 0a28 0020A0E3 		mov	r2, #0
 3209 0a2c 1C2083E5 		str	r2, [r3, #28]
 691:../kernel/os_core/os_core.c **** #if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
 692:../kernel/os_core/os_core.c ****     ptcb->OSTCBMsg       = msg;                         /* Send message directly to waiting task   
 3210              		.loc 1 692 0
 3211 0a30 18301BE5 		ldr	r3, [fp, #-24]
 3212 0a34 24201BE5 		ldr	r2, [fp, #-36]
 3213 0a38 202083E5 		str	r2, [r3, #32]
 693:../kernel/os_core/os_core.c **** #else
 694:../kernel/os_core/os_core.c ****     msg                  = msg;                         /* Prevent compiler warning if not used    
 695:../kernel/os_core/os_core.c **** #endif
 696:../kernel/os_core/os_core.c ****     ptcb->OSTCBPendTO    = FALSE;                       /* Cancel 'any' timeout because of post    
 3214              		.loc 1 696 0
 3215 0a3c 18301BE5 		ldr	r3, [fp, #-24]
 3216 0a40 0020A0E3 		mov	r2, #0
 3217 0a44 2D20C3E5 		strb	r2, [r3, #45]
 697:../kernel/os_core/os_core.c ****     ptcb->OSTCBStat     &= ~msk;                        /* Clear bit associated with event type    
 3218              		.loc 1 697 0
 3219 0a48 18301BE5 		ldr	r3, [fp, #-24]
 3220 0a4c 2C30D3E5 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 3221 0a50 FF2003E2 		and	r2, r3, #255
 3222 0a54 25305BE5 		ldrb	r3, [fp, #-37]	@ zero_extendqisi2
 3223 0a58 0330E0E1 		mvn	r3, r3
 3224 0a5c FF3003E2 		and	r3, r3, #255
 3225 0a60 033002E0 		and	r3, r2, r3
 3226 0a64 FF3003E2 		and	r3, r3, #255
 3227 0a68 FF2003E2 		and	r2, r3, #255
 3228 0a6c 18301BE5 		ldr	r3, [fp, #-24]
 3229 0a70 2C20C3E5 		strb	r2, [r3, #44]
 698:../kernel/os_core/os_core.c ****     if (ptcb->OSTCBStat == OS_STAT_RDY) {               /* See if task is ready (could be susp'd)  
 3230              		.loc 1 698 0
 3231 0a74 18301BE5 		ldr	r3, [fp, #-24]
 3232 0a78 2C30D3E5 		ldrb	r3, [r3, #44]	@ zero_extendqisi2
 3233 0a7c 000053E3 		cmp	r3, #0
 3234 0a80 0F00001A 		bne	.L67
 699:../kernel/os_core/os_core.c ****         OSRdyGrp        |=  bity;                       /* Put task in the ready to run list       
 3235              		.loc 1 699 0
 3236 0a84 58309FE5 		ldr	r3, .L68+12
 3237 0a88 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 3238 0a8c 0E305BE5 		ldrb	r3, [fp, #-14]
 3239 0a90 033082E1 		orr	r3, r2, r3
 3240 0a94 FF2003E2 		and	r2, r3, #255
 3241 0a98 44309FE5 		ldr	r3, .L68+12
 3242 0a9c 0020C3E5 		strb	r2, [r3, #0]
 700:../kernel/os_core/os_core.c ****         OSRdyTbl[y]     |=  bitx;
 3243              		.loc 1 700 0
 3244 0aa0 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3245 0aa4 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 3246 0aa8 38109FE5 		ldr	r1, .L68+16
 3247 0aac 0210D1E7 		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 3248 0ab0 10205BE5 		ldrb	r2, [fp, #-16]
 3249 0ab4 022081E1 		orr	r2, r1, r2
 3250 0ab8 FF1002E2 		and	r1, r2, #255
 3251 0abc 24209FE5 		ldr	r2, .L68+16
 3252 0ac0 0310C2E7 		strb	r1, [r2, r3]
 3253              	.L67:
 701:../kernel/os_core/os_core.c ****     }
 702:../kernel/os_core/os_core.c ****     return (prio);
 3254              		.loc 1 702 0
 3255 0ac4 11305BE5 		ldrb	r3, [fp, #-17]	@ zero_extendqisi2
 703:../kernel/os_core/os_core.c **** }
 3256              		.loc 1 703 0
 3257 0ac8 0300A0E1 		mov	r0, r3
 3258 0acc 0CD04BE2 		sub	sp, fp, #12
 3259 0ad0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3260 0ad4 1EFF2FE1 		bx	lr
 3261              	.L69:
 3262              		.align	2
 3263              	.L68:
 3264 0ad8 00000000 		.word	OSUnMapTbl
 3265 0adc 00000000 		.word	OSMapTbl
 3266 0ae0 00000000 		.word	OSTCBPrioTbl
 3267 0ae4 00000000 		.word	OSRdyGrp
 3268 0ae8 00000000 		.word	OSRdyTbl
 3269              		.cfi_endproc
 3270              	.LFE12:
 3272              		.align	2
 3273              		.global	OS_EventTaskWait
 3275              	OS_EventTaskWait:
 3276              	.LFB13:
 704:../kernel/os_core/os_core.c **** #endif
 705:../kernel/os_core/os_core.c **** /*$PAGE*/
 706:../kernel/os_core/os_core.c **** /*
 707:../kernel/os_core/os_core.c **** ***************************************************************************************************
 708:../kernel/os_core/os_core.c **** *                                   MAKE TASK WAIT FOR EVENT TO OCCUR
 709:../kernel/os_core/os_core.c **** *
 710:../kernel/os_core/os_core.c **** * Description: This function is called by other uC/OS-II services to suspend a task because an even
 711:../kernel/os_core/os_core.c **** *              not occurred.
 712:../kernel/os_core/os_core.c **** *
 713:../kernel/os_core/os_core.c **** * Arguments  : pevent   is a pointer to the event control block for which the task will be waiting 
 714:../kernel/os_core/os_core.c **** *
 715:../kernel/os_core/os_core.c **** * Returns    : none
 716:../kernel/os_core/os_core.c **** *
 717:../kernel/os_core/os_core.c **** * Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
 718:../kernel/os_core/os_core.c **** ***************************************************************************************************
 719:../kernel/os_core/os_core.c **** */
 720:../kernel/os_core/os_core.c **** #if OS_EVENT_EN
 721:../kernel/os_core/os_core.c **** void  OS_EventTaskWait (OS_EVENT *pevent)
 722:../kernel/os_core/os_core.c **** {
 3277              		.loc 1 722 0
 3278              		.cfi_startproc
 3279              		@ Function supports interworking.
 3280              		@ args = 0, pretend = 0, frame = 16
 3281              		@ frame_needed = 1, uses_anonymous_args = 0
 3282 0aec 0DC0A0E1 		mov	ip, sp
 3283              	.LCFI26:
 3284              		.cfi_def_cfa_register 12
 3285 0af0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3286 0af4 04B04CE2 		sub	fp, ip, #4
 3287              		.cfi_offset 14, -8
 3288              		.cfi_offset 13, -12
 3289              		.cfi_offset 11, -16
 3290              	.LCFI27:
 3291              		.cfi_def_cfa 11, 4
 3292 0af8 10D04DE2 		sub	sp, sp, #16
 3293 0afc 18000BE5 		str	r0, [fp, #-24]
 723:../kernel/os_core/os_core.c ****     INT8U  y;
 724:../kernel/os_core/os_core.c **** 
 725:../kernel/os_core/os_core.c **** 
 726:../kernel/os_core/os_core.c ****     OSTCBCur->OSTCBEventPtr = pevent;             /* Store pointer to event control block in TCB   
 3294              		.loc 1 726 0
 3295 0b00 30319FE5 		ldr	r3, .L72
 3296 0b04 003093E5 		ldr	r3, [r3, #0]
 3297 0b08 18201BE5 		ldr	r2, [fp, #-24]
 3298 0b0c 1C2083E5 		str	r2, [r3, #28]
 727:../kernel/os_core/os_core.c ****     y                       = OSTCBCur->OSTCBY;   /* Task no longer ready                          
 3299              		.loc 1 727 0
 3300 0b10 20319FE5 		ldr	r3, .L72
 3301 0b14 003093E5 		ldr	r3, [r3, #0]
 3302 0b18 3030D3E5 		ldrb	r3, [r3, #48]
 3303 0b1c 0D304BE5 		strb	r3, [fp, #-13]
 728:../kernel/os_core/os_core.c ****     OSRdyTbl[y]            &= ~OSTCBCur->OSTCBBitX;
 3304              		.loc 1 728 0
 3305 0b20 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3306 0b24 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 3307 0b28 0C119FE5 		ldr	r1, .L72+4
 3308 0b2c 0220D1E7 		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 3309 0b30 FF1002E2 		and	r1, r2, #255
 3310 0b34 FC209FE5 		ldr	r2, .L72
 3311 0b38 002092E5 		ldr	r2, [r2, #0]
 3312 0b3c 3120D2E5 		ldrb	r2, [r2, #49]	@ zero_extendqisi2
 3313 0b40 FF2002E2 		and	r2, r2, #255
 3314 0b44 0220E0E1 		mvn	r2, r2
 3315 0b48 FF2002E2 		and	r2, r2, #255
 3316 0b4c 022001E0 		and	r2, r1, r2
 3317 0b50 FF2002E2 		and	r2, r2, #255
 3318 0b54 FF1002E2 		and	r1, r2, #255
 3319 0b58 DC209FE5 		ldr	r2, .L72+4
 3320 0b5c 0310C2E7 		strb	r1, [r2, r3]
 729:../kernel/os_core/os_core.c ****     if (OSRdyTbl[y] == 0x00) {                   
 3321              		.loc 1 729 0
 3322 0b60 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3323 0b64 D0209FE5 		ldr	r2, .L72+4
 3324 0b68 0330D2E7 		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 3325 0b6c 000053E3 		cmp	r3, #0
 3326 0b70 0D00001A 		bne	.L71
 730:../kernel/os_core/os_core.c ****         OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pend
 3327              		.loc 1 730 0
 3328 0b74 BC309FE5 		ldr	r3, .L72
 3329 0b78 003093E5 		ldr	r3, [r3, #0]
 3330 0b7c 3230D3E5 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 3331 0b80 FF3003E2 		and	r3, r3, #255
 3332 0b84 0330E0E1 		mvn	r3, r3
 3333 0b88 FF2003E2 		and	r2, r3, #255
 3334 0b8c AC309FE5 		ldr	r3, .L72+8
 3335 0b90 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3336 0b94 FF3003E2 		and	r3, r3, #255
 3337 0b98 033002E0 		and	r3, r2, r3
 3338 0b9c FF3003E2 		and	r3, r3, #255
 3339 0ba0 FF2003E2 		and	r2, r3, #255
 3340 0ba4 94309FE5 		ldr	r3, .L72+8
 3341 0ba8 0020C3E5 		strb	r2, [r3, #0]
 3342              	.L71:
 731:../kernel/os_core/os_core.c ****     }
 732:../kernel/os_core/os_core.c ****     pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;          /* Put task in waiting li
 3343              		.loc 1 732 0
 3344 0bac 84309FE5 		ldr	r3, .L72
 3345 0bb0 003093E5 		ldr	r3, [r3, #0]
 3346 0bb4 3030D3E5 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 3347 0bb8 0310A0E1 		mov	r1, r3
 3348 0bbc 74309FE5 		ldr	r3, .L72
 3349 0bc0 003093E5 		ldr	r3, [r3, #0]
 3350 0bc4 3030D3E5 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 3351 0bc8 0320A0E1 		mov	r2, r3
 3352 0bcc 18001BE5 		ldr	r0, [fp, #-24]
 3353 0bd0 0830A0E3 		mov	r3, #8
 3354 0bd4 022080E0 		add	r2, r0, r2
 3355 0bd8 033082E0 		add	r3, r2, r3
 3356 0bdc 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 3357 0be0 50309FE5 		ldr	r3, .L72
 3358 0be4 003093E5 		ldr	r3, [r3, #0]
 3359 0be8 3130D3E5 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 3360 0bec 033082E1 		orr	r3, r2, r3
 3361 0bf0 FF2003E2 		and	r2, r3, #255
 3362 0bf4 18001BE5 		ldr	r0, [fp, #-24]
 3363 0bf8 0830A0E3 		mov	r3, #8
 3364 0bfc 011080E0 		add	r1, r0, r1
 3365 0c00 033081E0 		add	r3, r1, r3
 3366 0c04 0020C3E5 		strb	r2, [r3, #0]
 733:../kernel/os_core/os_core.c ****     pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 3367              		.loc 1 733 0
 3368 0c08 18301BE5 		ldr	r3, [fp, #-24]
 3369 0c0c 0120D3E5 		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 3370 0c10 20309FE5 		ldr	r3, .L72
 3371 0c14 003093E5 		ldr	r3, [r3, #0]
 3372 0c18 3230D3E5 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 3373 0c1c 033082E1 		orr	r3, r2, r3
 3374 0c20 FF2003E2 		and	r2, r3, #255
 3375 0c24 18301BE5 		ldr	r3, [fp, #-24]
 3376 0c28 0120C3E5 		strb	r2, [r3, #1]
 734:../kernel/os_core/os_core.c **** }
 3377              		.loc 1 734 0
 3378 0c2c 0CD04BE2 		sub	sp, fp, #12
 3379 0c30 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3380 0c34 1EFF2FE1 		bx	lr
 3381              	.L73:
 3382              		.align	2
 3383              	.L72:
 3384 0c38 00000000 		.word	OSTCBCur
 3385 0c3c 00000000 		.word	OSRdyTbl
 3386 0c40 00000000 		.word	OSRdyGrp
 3387              		.cfi_endproc
 3388              	.LFE13:
 3390              		.align	2
 3391              		.global	OS_EventTO
 3393              	OS_EventTO:
 3394              	.LFB14:
 735:../kernel/os_core/os_core.c **** #endif
 736:../kernel/os_core/os_core.c **** /*$PAGE*/
 737:../kernel/os_core/os_core.c **** /*
 738:../kernel/os_core/os_core.c **** ***************************************************************************************************
 739:../kernel/os_core/os_core.c **** *                              MAKE TASK READY TO RUN BASED ON EVENT TIMEOUT
 740:../kernel/os_core/os_core.c **** *
 741:../kernel/os_core/os_core.c **** * Description: This function is called by other uC/OS-II services to make a task ready to run becau
 742:../kernel/os_core/os_core.c **** *              timeout occurred.
 743:../kernel/os_core/os_core.c **** *
 744:../kernel/os_core/os_core.c **** * Arguments  : pevent   is a pointer to the event control block which is readying a task.
 745:../kernel/os_core/os_core.c **** *
 746:../kernel/os_core/os_core.c **** * Returns    : none
 747:../kernel/os_core/os_core.c **** *
 748:../kernel/os_core/os_core.c **** * Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
 749:../kernel/os_core/os_core.c **** ***************************************************************************************************
 750:../kernel/os_core/os_core.c **** */
 751:../kernel/os_core/os_core.c **** #if OS_EVENT_EN
 752:../kernel/os_core/os_core.c **** void  OS_EventTO (OS_EVENT *pevent)
 753:../kernel/os_core/os_core.c **** {
 3395              		.loc 1 753 0
 3396              		.cfi_startproc
 3397              		@ Function supports interworking.
 3398              		@ args = 0, pretend = 0, frame = 16
 3399              		@ frame_needed = 1, uses_anonymous_args = 0
 3400 0c44 0DC0A0E1 		mov	ip, sp
 3401              	.LCFI28:
 3402              		.cfi_def_cfa_register 12
 3403 0c48 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3404 0c4c 04B04CE2 		sub	fp, ip, #4
 3405              		.cfi_offset 14, -8
 3406              		.cfi_offset 13, -12
 3407              		.cfi_offset 11, -16
 3408              	.LCFI29:
 3409              		.cfi_def_cfa 11, 4
 3410 0c50 10D04DE2 		sub	sp, sp, #16
 3411 0c54 18000BE5 		str	r0, [fp, #-24]
 754:../kernel/os_core/os_core.c ****     INT8U  y;
 755:../kernel/os_core/os_core.c **** 
 756:../kernel/os_core/os_core.c **** 
 757:../kernel/os_core/os_core.c ****     y                      = OSTCBCur->OSTCBY;
 3412              		.loc 1 757 0
 3413 0c58 F4309FE5 		ldr	r3, .L76
 3414 0c5c 003093E5 		ldr	r3, [r3, #0]
 3415 0c60 3030D3E5 		ldrb	r3, [r3, #48]
 3416 0c64 0D304BE5 		strb	r3, [fp, #-13]
 758:../kernel/os_core/os_core.c ****     pevent->OSEventTbl[y] &= ~OSTCBCur->OSTCBBitX;     /* Remove task from wait list               
 3417              		.loc 1 758 0
 3418 0c68 0D105BE5 		ldrb	r1, [fp, #-13]	@ zero_extendqisi2
 3419 0c6c 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 3420 0c70 18001BE5 		ldr	r0, [fp, #-24]
 3421 0c74 0830A0E3 		mov	r3, #8
 3422 0c78 022080E0 		add	r2, r0, r2
 3423 0c7c 033082E0 		add	r3, r2, r3
 3424 0c80 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3425 0c84 FF2003E2 		and	r2, r3, #255
 3426 0c88 C4309FE5 		ldr	r3, .L76
 3427 0c8c 003093E5 		ldr	r3, [r3, #0]
 3428 0c90 3130D3E5 		ldrb	r3, [r3, #49]	@ zero_extendqisi2
 3429 0c94 FF3003E2 		and	r3, r3, #255
 3430 0c98 0330E0E1 		mvn	r3, r3
 3431 0c9c FF3003E2 		and	r3, r3, #255
 3432 0ca0 033002E0 		and	r3, r2, r3
 3433 0ca4 FF3003E2 		and	r3, r3, #255
 3434 0ca8 FF2003E2 		and	r2, r3, #255
 3435 0cac 18001BE5 		ldr	r0, [fp, #-24]
 3436 0cb0 0830A0E3 		mov	r3, #8
 3437 0cb4 011080E0 		add	r1, r0, r1
 3438 0cb8 033081E0 		add	r3, r1, r3
 3439 0cbc 0020C3E5 		strb	r2, [r3, #0]
 759:../kernel/os_core/os_core.c ****     if (pevent->OSEventTbl[y] == 0x00) {
 3440              		.loc 1 759 0
 3441 0cc0 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 3442 0cc4 18101BE5 		ldr	r1, [fp, #-24]
 3443 0cc8 0830A0E3 		mov	r3, #8
 3444 0ccc 022081E0 		add	r2, r1, r2
 3445 0cd0 033082E0 		add	r3, r2, r3
 3446 0cd4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3447 0cd8 000053E3 		cmp	r3, #0
 3448 0cdc 0D00001A 		bne	.L75
 760:../kernel/os_core/os_core.c ****         pevent->OSEventGrp &= ~OSTCBCur->OSTCBBitY;
 3449              		.loc 1 760 0
 3450 0ce0 18301BE5 		ldr	r3, [fp, #-24]
 3451 0ce4 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3452 0ce8 FF2003E2 		and	r2, r3, #255
 3453 0cec 60309FE5 		ldr	r3, .L76
 3454 0cf0 003093E5 		ldr	r3, [r3, #0]
 3455 0cf4 3230D3E5 		ldrb	r3, [r3, #50]	@ zero_extendqisi2
 3456 0cf8 FF3003E2 		and	r3, r3, #255
 3457 0cfc 0330E0E1 		mvn	r3, r3
 3458 0d00 FF3003E2 		and	r3, r3, #255
 3459 0d04 033002E0 		and	r3, r2, r3
 3460 0d08 FF3003E2 		and	r3, r3, #255
 3461 0d0c FF2003E2 		and	r2, r3, #255
 3462 0d10 18301BE5 		ldr	r3, [fp, #-24]
 3463 0d14 0120C3E5 		strb	r2, [r3, #1]
 3464              	.L75:
 761:../kernel/os_core/os_core.c ****     }
 762:../kernel/os_core/os_core.c ****     OSTCBCur->OSTCBPendTO   = FALSE;                   /* Clear the Pend Timeout flag              
 3465              		.loc 1 762 0
 3466 0d18 34309FE5 		ldr	r3, .L76
 3467 0d1c 003093E5 		ldr	r3, [r3, #0]
 3468 0d20 0020A0E3 		mov	r2, #0
 3469 0d24 2D20C3E5 		strb	r2, [r3, #45]
 763:../kernel/os_core/os_core.c ****     OSTCBCur->OSTCBStat     = OS_STAT_RDY;             /* Set status to ready                      
 3470              		.loc 1 763 0
 3471 0d28 24309FE5 		ldr	r3, .L76
 3472 0d2c 003093E5 		ldr	r3, [r3, #0]
 3473 0d30 0020A0E3 		mov	r2, #0
 3474 0d34 2C20C3E5 		strb	r2, [r3, #44]
 764:../kernel/os_core/os_core.c ****     OSTCBCur->OSTCBEventPtr = (OS_EVENT *)0;           /* No longer waiting for event              
 3475              		.loc 1 764 0
 3476 0d38 14309FE5 		ldr	r3, .L76
 3477 0d3c 003093E5 		ldr	r3, [r3, #0]
 3478 0d40 0020A0E3 		mov	r2, #0
 3479 0d44 1C2083E5 		str	r2, [r3, #28]
 765:../kernel/os_core/os_core.c **** }
 3480              		.loc 1 765 0
 3481 0d48 0CD04BE2 		sub	sp, fp, #12
 3482 0d4c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3483 0d50 1EFF2FE1 		bx	lr
 3484              	.L77:
 3485              		.align	2
 3486              	.L76:
 3487 0d54 00000000 		.word	OSTCBCur
 3488              		.cfi_endproc
 3489              	.LFE14:
 3491              		.align	2
 3492              		.global	OS_EventWaitListInit
 3494              	OS_EventWaitListInit:
 3495              	.LFB15:
 766:../kernel/os_core/os_core.c **** #endif
 767:../kernel/os_core/os_core.c **** /*$PAGE*/
 768:../kernel/os_core/os_core.c **** /*
 769:../kernel/os_core/os_core.c **** ***************************************************************************************************
 770:../kernel/os_core/os_core.c **** *                                 INITIALIZE EVENT CONTROL BLOCK'S WAIT LIST
 771:../kernel/os_core/os_core.c **** *
 772:../kernel/os_core/os_core.c **** * Description: This function is called by other uC/OS-II services to initialize the event wait list
 773:../kernel/os_core/os_core.c **** *
 774:../kernel/os_core/os_core.c **** * Arguments  : pevent    is a pointer to the event control block allocated to the event.
 775:../kernel/os_core/os_core.c **** *
 776:../kernel/os_core/os_core.c **** * Returns    : none
 777:../kernel/os_core/os_core.c **** *
 778:../kernel/os_core/os_core.c **** * Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
 779:../kernel/os_core/os_core.c **** ***************************************************************************************************
 780:../kernel/os_core/os_core.c **** */
 781:../kernel/os_core/os_core.c **** #if OS_EVENT_EN
 782:../kernel/os_core/os_core.c **** void  OS_EventWaitListInit (OS_EVENT *pevent)
 783:../kernel/os_core/os_core.c **** {
 3496              		.loc 1 783 0
 3497              		.cfi_startproc
 3498              		@ Function supports interworking.
 3499              		@ args = 0, pretend = 0, frame = 16
 3500              		@ frame_needed = 1, uses_anonymous_args = 0
 3501 0d58 0DC0A0E1 		mov	ip, sp
 3502              	.LCFI30:
 3503              		.cfi_def_cfa_register 12
 3504 0d5c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3505 0d60 04B04CE2 		sub	fp, ip, #4
 3506              		.cfi_offset 14, -8
 3507              		.cfi_offset 13, -12
 3508              		.cfi_offset 11, -16
 3509              	.LCFI31:
 3510              		.cfi_def_cfa 11, 4
 3511 0d64 10D04DE2 		sub	sp, sp, #16
 3512 0d68 18000BE5 		str	r0, [fp, #-24]
 784:../kernel/os_core/os_core.c ****     INT8U  *ptbl;
 785:../kernel/os_core/os_core.c **** 
 786:../kernel/os_core/os_core.c **** 
 787:../kernel/os_core/os_core.c ****     pevent->OSEventGrp = 0x00;                   /* No task waiting on event                       
 3513              		.loc 1 787 0
 3514 0d6c 18301BE5 		ldr	r3, [fp, #-24]
 3515 0d70 0020A0E3 		mov	r2, #0
 3516 0d74 0120C3E5 		strb	r2, [r3, #1]
 788:../kernel/os_core/os_core.c ****     ptbl               = &pevent->OSEventTbl[0];
 3517              		.loc 1 788 0
 3518 0d78 18301BE5 		ldr	r3, [fp, #-24]
 3519 0d7c 083083E2 		add	r3, r3, #8
 3520 0d80 10300BE5 		str	r3, [fp, #-16]
 789:../kernel/os_core/os_core.c **** 
 790:../kernel/os_core/os_core.c **** #if OS_EVENT_TBL_SIZE > 0
 791:../kernel/os_core/os_core.c ****     *ptbl++            = 0x00;
 3521              		.loc 1 791 0
 3522 0d84 10301BE5 		ldr	r3, [fp, #-16]
 3523 0d88 0020A0E3 		mov	r2, #0
 3524 0d8c 0020C3E5 		strb	r2, [r3, #0]
 3525 0d90 10301BE5 		ldr	r3, [fp, #-16]
 3526 0d94 013083E2 		add	r3, r3, #1
 3527 0d98 10300BE5 		str	r3, [fp, #-16]
 792:../kernel/os_core/os_core.c **** #endif
 793:../kernel/os_core/os_core.c **** 
 794:../kernel/os_core/os_core.c **** #if OS_EVENT_TBL_SIZE > 1
 795:../kernel/os_core/os_core.c ****     *ptbl++            = 0x00;
 3528              		.loc 1 795 0
 3529 0d9c 10301BE5 		ldr	r3, [fp, #-16]
 3530 0da0 0020A0E3 		mov	r2, #0
 3531 0da4 0020C3E5 		strb	r2, [r3, #0]
 3532 0da8 10301BE5 		ldr	r3, [fp, #-16]
 3533 0dac 013083E2 		add	r3, r3, #1
 3534 0db0 10300BE5 		str	r3, [fp, #-16]
 796:../kernel/os_core/os_core.c **** #endif
 797:../kernel/os_core/os_core.c **** 
 798:../kernel/os_core/os_core.c **** #if OS_EVENT_TBL_SIZE > 2
 799:../kernel/os_core/os_core.c ****     *ptbl++            = 0x00;
 3535              		.loc 1 799 0
 3536 0db4 10301BE5 		ldr	r3, [fp, #-16]
 3537 0db8 0020A0E3 		mov	r2, #0
 3538 0dbc 0020C3E5 		strb	r2, [r3, #0]
 3539 0dc0 10301BE5 		ldr	r3, [fp, #-16]
 3540 0dc4 013083E2 		add	r3, r3, #1
 3541 0dc8 10300BE5 		str	r3, [fp, #-16]
 800:../kernel/os_core/os_core.c **** #endif
 801:../kernel/os_core/os_core.c **** 
 802:../kernel/os_core/os_core.c **** #if OS_EVENT_TBL_SIZE > 3
 803:../kernel/os_core/os_core.c ****     *ptbl++            = 0x00;
 3542              		.loc 1 803 0
 3543 0dcc 10301BE5 		ldr	r3, [fp, #-16]
 3544 0dd0 0020A0E3 		mov	r2, #0
 3545 0dd4 0020C3E5 		strb	r2, [r3, #0]
 3546 0dd8 10301BE5 		ldr	r3, [fp, #-16]
 3547 0ddc 013083E2 		add	r3, r3, #1
 3548 0de0 10300BE5 		str	r3, [fp, #-16]
 804:../kernel/os_core/os_core.c **** #endif
 805:../kernel/os_core/os_core.c **** 
 806:../kernel/os_core/os_core.c **** #if OS_EVENT_TBL_SIZE > 4
 807:../kernel/os_core/os_core.c ****     *ptbl++            = 0x00;
 3549              		.loc 1 807 0
 3550 0de4 10301BE5 		ldr	r3, [fp, #-16]
 3551 0de8 0020A0E3 		mov	r2, #0
 3552 0dec 0020C3E5 		strb	r2, [r3, #0]
 3553 0df0 10301BE5 		ldr	r3, [fp, #-16]
 3554 0df4 013083E2 		add	r3, r3, #1
 3555 0df8 10300BE5 		str	r3, [fp, #-16]
 808:../kernel/os_core/os_core.c **** #endif
 809:../kernel/os_core/os_core.c **** 
 810:../kernel/os_core/os_core.c **** #if OS_EVENT_TBL_SIZE > 5
 811:../kernel/os_core/os_core.c ****     *ptbl++            = 0x00;
 3556              		.loc 1 811 0
 3557 0dfc 10301BE5 		ldr	r3, [fp, #-16]
 3558 0e00 0020A0E3 		mov	r2, #0
 3559 0e04 0020C3E5 		strb	r2, [r3, #0]
 3560 0e08 10301BE5 		ldr	r3, [fp, #-16]
 3561 0e0c 013083E2 		add	r3, r3, #1
 3562 0e10 10300BE5 		str	r3, [fp, #-16]
 812:../kernel/os_core/os_core.c **** #endif
 813:../kernel/os_core/os_core.c **** 
 814:../kernel/os_core/os_core.c **** #if OS_EVENT_TBL_SIZE > 6
 815:../kernel/os_core/os_core.c ****     *ptbl++            = 0x00;
 3563              		.loc 1 815 0
 3564 0e14 10301BE5 		ldr	r3, [fp, #-16]
 3565 0e18 0020A0E3 		mov	r2, #0
 3566 0e1c 0020C3E5 		strb	r2, [r3, #0]
 3567 0e20 10301BE5 		ldr	r3, [fp, #-16]
 3568 0e24 013083E2 		add	r3, r3, #1
 3569 0e28 10300BE5 		str	r3, [fp, #-16]
 816:../kernel/os_core/os_core.c **** #endif
 817:../kernel/os_core/os_core.c **** 
 818:../kernel/os_core/os_core.c **** #if OS_EVENT_TBL_SIZE > 7
 819:../kernel/os_core/os_core.c ****     *ptbl              = 0x00;
 3570              		.loc 1 819 0
 3571 0e2c 10301BE5 		ldr	r3, [fp, #-16]
 3572 0e30 0020A0E3 		mov	r2, #0
 3573 0e34 0020C3E5 		strb	r2, [r3, #0]
 820:../kernel/os_core/os_core.c **** #endif
 821:../kernel/os_core/os_core.c **** }
 3574              		.loc 1 821 0
 3575 0e38 0CD04BE2 		sub	sp, fp, #12
 3576 0e3c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3577 0e40 1EFF2FE1 		bx	lr
 3578              		.cfi_endproc
 3579              	.LFE15:
 3581              		.align	2
 3583              	OS_InitEventList:
 3584              	.LFB16:
 822:../kernel/os_core/os_core.c **** #endif
 823:../kernel/os_core/os_core.c **** /*$PAGE*/
 824:../kernel/os_core/os_core.c **** /*
 825:../kernel/os_core/os_core.c **** ***************************************************************************************************
 826:../kernel/os_core/os_core.c **** *                                             INITIALIZATION
 827:../kernel/os_core/os_core.c **** *                           INITIALIZE THE FREE LIST OF EVENT CONTROL BLOCKS
 828:../kernel/os_core/os_core.c **** *
 829:../kernel/os_core/os_core.c **** * Description: This function is called by OSInit() to initialize the free list of event control blo
 830:../kernel/os_core/os_core.c **** *
 831:../kernel/os_core/os_core.c **** * Arguments  : none
 832:../kernel/os_core/os_core.c **** *
 833:../kernel/os_core/os_core.c **** * Returns    : none
 834:../kernel/os_core/os_core.c **** ***************************************************************************************************
 835:../kernel/os_core/os_core.c **** */
 836:../kernel/os_core/os_core.c **** 
 837:../kernel/os_core/os_core.c **** static  void  OS_InitEventList (void)
 838:../kernel/os_core/os_core.c **** {
 3585              		.loc 1 838 0
 3586              		.cfi_startproc
 3587              		@ Function supports interworking.
 3588              		@ args = 0, pretend = 0, frame = 16
 3589              		@ frame_needed = 1, uses_anonymous_args = 0
 3590 0e44 0DC0A0E1 		mov	ip, sp
 3591              	.LCFI32:
 3592              		.cfi_def_cfa_register 12
 3593 0e48 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3594 0e4c 04B04CE2 		sub	fp, ip, #4
 3595              		.cfi_offset 14, -8
 3596              		.cfi_offset 13, -12
 3597              		.cfi_offset 11, -16
 3598              	.LCFI33:
 3599              		.cfi_def_cfa 11, 4
 3600 0e50 10D04DE2 		sub	sp, sp, #16
 839:../kernel/os_core/os_core.c **** #if OS_EVENT_EN && (OS_MAX_EVENTS > 0)
 840:../kernel/os_core/os_core.c **** #if (OS_MAX_EVENTS > 1)
 841:../kernel/os_core/os_core.c ****     INT16U     i;
 842:../kernel/os_core/os_core.c ****     OS_EVENT  *pevent1;
 843:../kernel/os_core/os_core.c ****     OS_EVENT  *pevent2;
 844:../kernel/os_core/os_core.c **** 
 845:../kernel/os_core/os_core.c **** 
 846:../kernel/os_core/os_core.c ****     OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table               
 3601              		.loc 1 846 0
 3602 0e54 CC309FE5 		ldr	r3, .L82
 3603 0e58 0300A0E1 		mov	r0, r3
 3604 0e5c 1E1EA0E3 		mov	r1, #480
 3605 0e60 FEFFFFEB 		bl	OS_MemClr
 847:../kernel/os_core/os_core.c ****     pevent1 = &OSEventTbl[0];
 3606              		.loc 1 847 0
 3607 0e64 BC309FE5 		ldr	r3, .L82
 3608 0e68 14300BE5 		str	r3, [fp, #-20]
 848:../kernel/os_core/os_core.c ****     pevent2 = &OSEventTbl[1];
 3609              		.loc 1 848 0
 3610 0e6c B8309FE5 		ldr	r3, .L82+4
 3611 0e70 18300BE5 		str	r3, [fp, #-24]
 849:../kernel/os_core/os_core.c ****     for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blo
 3612              		.loc 1 849 0
 3613 0e74 0030A0E3 		mov	r3, #0
 3614 0e78 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 3615 0e7c 140000EA 		b	.L80
 3616              	.L81:
 850:../kernel/os_core/os_core.c ****         pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 3617              		.loc 1 850 0 discriminator 2
 3618 0e80 14301BE5 		ldr	r3, [fp, #-20]
 3619 0e84 0020A0E3 		mov	r2, #0
 3620 0e88 0020C3E5 		strb	r2, [r3, #0]
 851:../kernel/os_core/os_core.c ****         pevent1->OSEventPtr     = pevent2;
 3621              		.loc 1 851 0 discriminator 2
 3622 0e8c 14301BE5 		ldr	r3, [fp, #-20]
 3623 0e90 18201BE5 		ldr	r2, [fp, #-24]
 3624 0e94 042083E5 		str	r2, [r3, #4]
 852:../kernel/os_core/os_core.c **** #if OS_EVENT_NAME_SIZE > 1
 853:../kernel/os_core/os_core.c ****         pevent1->OSEventName[0] = '?';                      /* Unknown name                        
 3625              		.loc 1 853 0 discriminator 2
 3626 0e98 14301BE5 		ldr	r3, [fp, #-20]
 3627 0e9c 3F20A0E3 		mov	r2, #63
 3628 0ea0 1020C3E5 		strb	r2, [r3, #16]
 854:../kernel/os_core/os_core.c ****         pevent1->OSEventName[1] = OS_ASCII_NUL;
 3629              		.loc 1 854 0 discriminator 2
 3630 0ea4 14301BE5 		ldr	r3, [fp, #-20]
 3631 0ea8 0020A0E3 		mov	r2, #0
 3632 0eac 1120C3E5 		strb	r2, [r3, #17]
 855:../kernel/os_core/os_core.c **** #endif
 856:../kernel/os_core/os_core.c ****         pevent1++;
 3633              		.loc 1 856 0 discriminator 2
 3634 0eb0 14301BE5 		ldr	r3, [fp, #-20]
 3635 0eb4 303083E2 		add	r3, r3, #48
 3636 0eb8 14300BE5 		str	r3, [fp, #-20]
 857:../kernel/os_core/os_core.c ****         pevent2++;
 3637              		.loc 1 857 0 discriminator 2
 3638 0ebc 18301BE5 		ldr	r3, [fp, #-24]
 3639 0ec0 303083E2 		add	r3, r3, #48
 3640 0ec4 18300BE5 		str	r3, [fp, #-24]
 849:../kernel/os_core/os_core.c ****     for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blo
 3641              		.loc 1 849 0 discriminator 2
 3642 0ec8 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 3643 0ecc 013083E2 		add	r3, r3, #1
 3644 0ed0 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 3645              	.L80:
 849:../kernel/os_core/os_core.c ****     for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blo
 3646              		.loc 1 849 0 is_stmt 0 discriminator 1
 3647 0ed4 BE305BE1 		ldrh	r3, [fp, #-14]
 3648 0ed8 080053E3 		cmp	r3, #8
 3649 0edc E7FFFF9A 		bls	.L81
 858:../kernel/os_core/os_core.c ****     }
 859:../kernel/os_core/os_core.c ****     pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 3650              		.loc 1 859 0 is_stmt 1
 3651 0ee0 14301BE5 		ldr	r3, [fp, #-20]
 3652 0ee4 0020A0E3 		mov	r2, #0
 3653 0ee8 0020C3E5 		strb	r2, [r3, #0]
 860:../kernel/os_core/os_core.c ****     pevent1->OSEventPtr             = (OS_EVENT *)0;
 3654              		.loc 1 860 0
 3655 0eec 14301BE5 		ldr	r3, [fp, #-20]
 3656 0ef0 0020A0E3 		mov	r2, #0
 3657 0ef4 042083E5 		str	r2, [r3, #4]
 861:../kernel/os_core/os_core.c **** #if OS_EVENT_NAME_SIZE > 1
 862:../kernel/os_core/os_core.c ****     pevent1->OSEventName[0]         = '?';                  
 3658              		.loc 1 862 0
 3659 0ef8 14301BE5 		ldr	r3, [fp, #-20]
 3660 0efc 3F20A0E3 		mov	r2, #63
 3661 0f00 1020C3E5 		strb	r2, [r3, #16]
 863:../kernel/os_core/os_core.c ****     pevent1->OSEventName[1]         = OS_ASCII_NUL;
 3662              		.loc 1 863 0
 3663 0f04 14301BE5 		ldr	r3, [fp, #-20]
 3664 0f08 0020A0E3 		mov	r2, #0
 3665 0f0c 1120C3E5 		strb	r2, [r3, #17]
 864:../kernel/os_core/os_core.c **** #endif
 865:../kernel/os_core/os_core.c ****     OSEventFreeList                 = &OSEventTbl[0];
 3666              		.loc 1 865 0
 3667 0f10 18309FE5 		ldr	r3, .L82+8
 3668 0f14 0C209FE5 		ldr	r2, .L82
 3669 0f18 002083E5 		str	r2, [r3, #0]
 866:../kernel/os_core/os_core.c **** #else
 867:../kernel/os_core/os_core.c ****     OSEventFreeList                 = &OSEventTbl[0];       /* Only have ONE event control block   
 868:../kernel/os_core/os_core.c ****     OSEventFreeList->OSEventType    = OS_EVENT_TYPE_UNUSED;
 869:../kernel/os_core/os_core.c ****     OSEventFreeList->OSEventPtr     = (OS_EVENT *)0;
 870:../kernel/os_core/os_core.c **** #if OS_EVENT_NAME_SIZE > 1
 871:../kernel/os_core/os_core.c ****     OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                        
 872:../kernel/os_core/os_core.c ****     OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
 873:../kernel/os_core/os_core.c **** #endif
 874:../kernel/os_core/os_core.c **** #endif
 875:../kernel/os_core/os_core.c **** #endif
 876:../kernel/os_core/os_core.c **** }
 3670              		.loc 1 876 0
 3671 0f1c 0CD04BE2 		sub	sp, fp, #12
 3672 0f20 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3673 0f24 1EFF2FE1 		bx	lr
 3674              	.L83:
 3675              		.align	2
 3676              	.L82:
 3677 0f28 00000000 		.word	OSEventTbl
 3678 0f2c 30000000 		.word	OSEventTbl+48
 3679 0f30 00000000 		.word	OSEventFreeList
 3680              		.cfi_endproc
 3681              	.LFE16:
 3683              		.align	2
 3685              	OS_InitMisc:
 3686              	.LFB17:
 877:../kernel/os_core/os_core.c **** /*$PAGE*/
 878:../kernel/os_core/os_core.c **** /*
 879:../kernel/os_core/os_core.c **** ***************************************************************************************************
 880:../kernel/os_core/os_core.c **** *                                             INITIALIZATION
 881:../kernel/os_core/os_core.c **** *                                    INITIALIZE MISCELLANEOUS VARIABLES
 882:../kernel/os_core/os_core.c **** *
 883:../kernel/os_core/os_core.c **** * Description: This function is called by OSInit() to initialize miscellaneous variables.
 884:../kernel/os_core/os_core.c **** *
 885:../kernel/os_core/os_core.c **** * Arguments  : none
 886:../kernel/os_core/os_core.c **** *
 887:../kernel/os_core/os_core.c **** * Returns    : none
 888:../kernel/os_core/os_core.c **** ***************************************************************************************************
 889:../kernel/os_core/os_core.c **** */
 890:../kernel/os_core/os_core.c **** 
 891:../kernel/os_core/os_core.c **** static  void  OS_InitMisc (void)
 892:../kernel/os_core/os_core.c **** {
 3687              		.loc 1 892 0
 3688              		.cfi_startproc
 3689              		@ Function supports interworking.
 3690              		@ args = 0, pretend = 0, frame = 0
 3691              		@ frame_needed = 1, uses_anonymous_args = 0
 3692 0f34 0DC0A0E1 		mov	ip, sp
 3693              	.LCFI34:
 3694              		.cfi_def_cfa_register 12
 3695 0f38 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3696 0f3c 04B04CE2 		sub	fp, ip, #4
 3697              		.cfi_offset 14, -8
 3698              		.cfi_offset 13, -12
 3699              		.cfi_offset 11, -16
 3700              	.LCFI35:
 3701              		.cfi_def_cfa 11, 4
 893:../kernel/os_core/os_core.c **** #if OS_TIME_GET_SET_EN > 0   
 894:../kernel/os_core/os_core.c ****     OSTime        = 0L;                                    /* Clear the 32-bit system clock        
 3702              		.loc 1 894 0
 3703 0f40 7C309FE5 		ldr	r3, .L85
 3704 0f44 0020A0E3 		mov	r2, #0
 3705 0f48 002083E5 		str	r2, [r3, #0]
 895:../kernel/os_core/os_core.c **** #endif
 896:../kernel/os_core/os_core.c **** 
 897:../kernel/os_core/os_core.c ****     OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter  
 3706              		.loc 1 897 0
 3707 0f4c 74309FE5 		ldr	r3, .L85+4
 3708 0f50 0020A0E3 		mov	r2, #0
 3709 0f54 0020C3E5 		strb	r2, [r3, #0]
 898:../kernel/os_core/os_core.c ****     OSLockNesting = 0;                                     /* Clear the scheduling lock counter    
 3710              		.loc 1 898 0
 3711 0f58 6C309FE5 		ldr	r3, .L85+8
 3712 0f5c 0020A0E3 		mov	r2, #0
 3713 0f60 0020C3E5 		strb	r2, [r3, #0]
 899:../kernel/os_core/os_core.c **** 
 900:../kernel/os_core/os_core.c ****     OSTaskCtr     = 0;                                     /* Clear the number of tasks            
 3714              		.loc 1 900 0
 3715 0f64 64309FE5 		ldr	r3, .L85+12
 3716 0f68 0020A0E3 		mov	r2, #0
 3717 0f6c 0020C3E5 		strb	r2, [r3, #0]
 901:../kernel/os_core/os_core.c **** 
 902:../kernel/os_core/os_core.c ****     OSRunning     = FALSE;                                 /* Indicate that multitasking not starte
 3718              		.loc 1 902 0
 3719 0f70 5C309FE5 		ldr	r3, .L85+16
 3720 0f74 0020A0E3 		mov	r2, #0
 3721 0f78 0020C3E5 		strb	r2, [r3, #0]
 903:../kernel/os_core/os_core.c ****     
 904:../kernel/os_core/os_core.c ****     OSCtxSwCtr    = 0;                                     /* Clear the context switch counter     
 3722              		.loc 1 904 0
 3723 0f7c 54309FE5 		ldr	r3, .L85+20
 3724 0f80 0020A0E3 		mov	r2, #0
 3725 0f84 002083E5 		str	r2, [r3, #0]
 905:../kernel/os_core/os_core.c ****     OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter        
 3726              		.loc 1 905 0
 3727 0f88 4C309FE5 		ldr	r3, .L85+24
 3728 0f8c 0020A0E3 		mov	r2, #0
 3729 0f90 002083E5 		str	r2, [r3, #0]
 906:../kernel/os_core/os_core.c **** 
 907:../kernel/os_core/os_core.c **** #if OS_TASK_STAT_EN > 0
 908:../kernel/os_core/os_core.c ****     OSIdleCtrRun  = 0L;
 3730              		.loc 1 908 0
 3731 0f94 44309FE5 		ldr	r3, .L85+28
 3732 0f98 0020A0E3 		mov	r2, #0
 3733 0f9c 002083E5 		str	r2, [r3, #0]
 909:../kernel/os_core/os_core.c ****     OSIdleCtrMax  = 0L;
 3734              		.loc 1 909 0
 3735 0fa0 3C309FE5 		ldr	r3, .L85+32
 3736 0fa4 0020A0E3 		mov	r2, #0
 3737 0fa8 002083E5 		str	r2, [r3, #0]
 910:../kernel/os_core/os_core.c ****     OSStatRdy     = FALSE;                                 /* Statistic task is not ready          
 3738              		.loc 1 910 0
 3739 0fac 34309FE5 		ldr	r3, .L85+36
 3740 0fb0 0020A0E3 		mov	r2, #0
 3741 0fb4 0020C3E5 		strb	r2, [r3, #0]
 911:../kernel/os_core/os_core.c **** #endif
 912:../kernel/os_core/os_core.c **** }
 3742              		.loc 1 912 0
 3743 0fb8 0CD04BE2 		sub	sp, fp, #12
 3744 0fbc 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3745 0fc0 1EFF2FE1 		bx	lr
 3746              	.L86:
 3747              		.align	2
 3748              	.L85:
 3749 0fc4 00000000 		.word	OSTime
 3750 0fc8 00000000 		.word	OSIntNesting
 3751 0fcc 00000000 		.word	OSLockNesting
 3752 0fd0 00000000 		.word	OSTaskCtr
 3753 0fd4 00000000 		.word	OSRunning
 3754 0fd8 00000000 		.word	OSCtxSwCtr
 3755 0fdc 00000000 		.word	OSIdleCtr
 3756 0fe0 00000000 		.word	OSIdleCtrRun
 3757 0fe4 00000000 		.word	OSIdleCtrMax
 3758 0fe8 00000000 		.word	OSStatRdy
 3759              		.cfi_endproc
 3760              	.LFE17:
 3762              		.align	2
 3764              	OS_InitRdyList:
 3765              	.LFB18:
 913:../kernel/os_core/os_core.c **** /*$PAGE*/
 914:../kernel/os_core/os_core.c **** /*
 915:../kernel/os_core/os_core.c **** ***************************************************************************************************
 916:../kernel/os_core/os_core.c **** *                                             INITIALIZATION
 917:../kernel/os_core/os_core.c **** *                                       INITIALIZE THE READY LIST
 918:../kernel/os_core/os_core.c **** *
 919:../kernel/os_core/os_core.c **** * Description: This function is called by OSInit() to initialize the Ready List.
 920:../kernel/os_core/os_core.c **** *
 921:../kernel/os_core/os_core.c **** * Arguments  : none
 922:../kernel/os_core/os_core.c **** *
 923:../kernel/os_core/os_core.c **** * Returns    : none
 924:../kernel/os_core/os_core.c **** ***************************************************************************************************
 925:../kernel/os_core/os_core.c **** */
 926:../kernel/os_core/os_core.c **** 
 927:../kernel/os_core/os_core.c **** static  void  OS_InitRdyList (void)
 928:../kernel/os_core/os_core.c **** {
 3766              		.loc 1 928 0
 3767              		.cfi_startproc
 3768              		@ Function supports interworking.
 3769              		@ args = 0, pretend = 0, frame = 8
 3770              		@ frame_needed = 1, uses_anonymous_args = 0
 3771 0fec 0DC0A0E1 		mov	ip, sp
 3772              	.LCFI36:
 3773              		.cfi_def_cfa_register 12
 3774 0ff0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3775 0ff4 04B04CE2 		sub	fp, ip, #4
 3776              		.cfi_offset 14, -8
 3777              		.cfi_offset 13, -12
 3778              		.cfi_offset 11, -16
 3779              	.LCFI37:
 3780              		.cfi_def_cfa 11, 4
 3781 0ff8 08D04DE2 		sub	sp, sp, #8
 929:../kernel/os_core/os_core.c ****     INT8U    i;
 930:../kernel/os_core/os_core.c ****     INT8U   *prdytbl;
 931:../kernel/os_core/os_core.c **** 
 932:../kernel/os_core/os_core.c **** 
 933:../kernel/os_core/os_core.c ****     OSRdyGrp      = 0x00;                                  /* Clear the ready list                 
 3782              		.loc 1 933 0
 3783 0ffc 84309FE5 		ldr	r3, .L90
 3784 1000 0020A0E3 		mov	r2, #0
 3785 1004 0020C3E5 		strb	r2, [r3, #0]
 934:../kernel/os_core/os_core.c ****     prdytbl       = &OSRdyTbl[0];
 3786              		.loc 1 934 0
 3787 1008 7C309FE5 		ldr	r3, .L90+4
 3788 100c 14300BE5 		str	r3, [fp, #-20]
 935:../kernel/os_core/os_core.c ****     for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 3789              		.loc 1 935 0
 3790 1010 0030A0E3 		mov	r3, #0
 3791 1014 0D304BE5 		strb	r3, [fp, #-13]
 3792 1018 080000EA 		b	.L88
 3793              	.L89:
 936:../kernel/os_core/os_core.c ****         *prdytbl++ = 0x00;
 3794              		.loc 1 936 0 discriminator 2
 3795 101c 14301BE5 		ldr	r3, [fp, #-20]
 3796 1020 0020A0E3 		mov	r2, #0
 3797 1024 0020C3E5 		strb	r2, [r3, #0]
 3798 1028 14301BE5 		ldr	r3, [fp, #-20]
 3799 102c 013083E2 		add	r3, r3, #1
 3800 1030 14300BE5 		str	r3, [fp, #-20]
 935:../kernel/os_core/os_core.c ****     for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 3801              		.loc 1 935 0 discriminator 2
 3802 1034 0D305BE5 		ldrb	r3, [fp, #-13]
 3803 1038 013083E2 		add	r3, r3, #1
 3804 103c 0D304BE5 		strb	r3, [fp, #-13]
 3805              	.L88:
 935:../kernel/os_core/os_core.c ****     for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 3806              		.loc 1 935 0 is_stmt 0 discriminator 1
 3807 1040 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 3808 1044 070053E3 		cmp	r3, #7
 3809 1048 F3FFFF9A 		bls	.L89
 937:../kernel/os_core/os_core.c ****     }
 938:../kernel/os_core/os_core.c **** 
 939:../kernel/os_core/os_core.c ****     OSPrioCur     = 0;
 3810              		.loc 1 939 0 is_stmt 1
 3811 104c 3C309FE5 		ldr	r3, .L90+8
 3812 1050 0020A0E3 		mov	r2, #0
 3813 1054 0020C3E5 		strb	r2, [r3, #0]
 940:../kernel/os_core/os_core.c ****     OSPrioHighRdy = 0;
 3814              		.loc 1 940 0
 3815 1058 34309FE5 		ldr	r3, .L90+12
 3816 105c 0020A0E3 		mov	r2, #0
 3817 1060 0020C3E5 		strb	r2, [r3, #0]
 941:../kernel/os_core/os_core.c **** 
 942:../kernel/os_core/os_core.c ****     OSTCBHighRdy  = (OS_TCB *)0;                                 
 3818              		.loc 1 942 0
 3819 1064 2C309FE5 		ldr	r3, .L90+16
 3820 1068 0020A0E3 		mov	r2, #0
 3821 106c 002083E5 		str	r2, [r3, #0]
 943:../kernel/os_core/os_core.c ****     OSTCBCur      = (OS_TCB *)0;
 3822              		.loc 1 943 0
 3823 1070 24309FE5 		ldr	r3, .L90+20
 3824 1074 0020A0E3 		mov	r2, #0
 3825 1078 002083E5 		str	r2, [r3, #0]
 944:../kernel/os_core/os_core.c **** }
 3826              		.loc 1 944 0
 3827 107c 0CD04BE2 		sub	sp, fp, #12
 3828 1080 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3829 1084 1EFF2FE1 		bx	lr
 3830              	.L91:
 3831              		.align	2
 3832              	.L90:
 3833 1088 00000000 		.word	OSRdyGrp
 3834 108c 00000000 		.word	OSRdyTbl
 3835 1090 00000000 		.word	OSPrioCur
 3836 1094 00000000 		.word	OSPrioHighRdy
 3837 1098 00000000 		.word	OSTCBHighRdy
 3838 109c 00000000 		.word	OSTCBCur
 3839              		.cfi_endproc
 3840              	.LFE18:
 3842              		.align	2
 3844              	OS_InitTaskIdle:
 3845              	.LFB19:
 945:../kernel/os_core/os_core.c **** 
 946:../kernel/os_core/os_core.c **** /*$PAGE*/
 947:../kernel/os_core/os_core.c **** /*
 948:../kernel/os_core/os_core.c **** ***************************************************************************************************
 949:../kernel/os_core/os_core.c **** *                                             INITIALIZATION
 950:../kernel/os_core/os_core.c **** *                                         CREATING THE IDLE TASK
 951:../kernel/os_core/os_core.c **** *
 952:../kernel/os_core/os_core.c **** * Description: This function creates the Idle Task.
 953:../kernel/os_core/os_core.c **** *
 954:../kernel/os_core/os_core.c **** * Arguments  : none
 955:../kernel/os_core/os_core.c **** *
 956:../kernel/os_core/os_core.c **** * Returns    : none
 957:../kernel/os_core/os_core.c **** ***************************************************************************************************
 958:../kernel/os_core/os_core.c **** */
 959:../kernel/os_core/os_core.c **** 
 960:../kernel/os_core/os_core.c **** static  void  OS_InitTaskIdle (void)
 961:../kernel/os_core/os_core.c **** {
 3846              		.loc 1 961 0
 3847              		.cfi_startproc
 3848              		@ Function supports interworking.
 3849              		@ args = 0, pretend = 0, frame = 0
 3850              		@ frame_needed = 1, uses_anonymous_args = 0
 3851 10a0 0DC0A0E1 		mov	ip, sp
 3852              	.LCFI38:
 3853              		.cfi_def_cfa_register 12
 3854 10a4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3855 10a8 04B04CE2 		sub	fp, ip, #4
 3856              		.cfi_offset 14, -8
 3857              		.cfi_offset 13, -12
 3858              		.cfi_offset 11, -16
 3859              	.LCFI39:
 3860              		.cfi_def_cfa 11, 4
 3861 10ac 18D04DE2 		sub	sp, sp, #24
 962:../kernel/os_core/os_core.c **** #if OS_TASK_CREATE_EXT_EN > 0
 963:../kernel/os_core/os_core.c ****     #if OS_STK_GROWTH == 1
 964:../kernel/os_core/os_core.c ****     (void)OSTaskCreateExt(OS_TaskIdle,
 3862              		.loc 1 964 0
 3863 10b0 40309FE5 		ldr	r3, .L93
 3864 10b4 00308DE5 		str	r3, [sp, #0]
 3865 10b8 3C309FE5 		ldr	r3, .L93+4
 3866 10bc 04308DE5 		str	r3, [sp, #4]
 3867 10c0 023CA0E3 		mov	r3, #512
 3868 10c4 08308DE5 		str	r3, [sp, #8]
 3869 10c8 0030A0E3 		mov	r3, #0
 3870 10cc 0C308DE5 		str	r3, [sp, #12]
 3871 10d0 0330A0E3 		mov	r3, #3
 3872 10d4 10308DE5 		str	r3, [sp, #16]
 3873 10d8 20009FE5 		ldr	r0, .L93+8
 3874 10dc 0010A0E3 		mov	r1, #0
 3875 10e0 1C209FE5 		ldr	r2, .L93+12
 3876 10e4 3F30A0E3 		mov	r3, #63
 3877 10e8 FEFFFFEB 		bl	OSTaskCreateExt
 965:../kernel/os_core/os_core.c ****                           (void *)0,                                 /* No arguments passed to OS_T
 966:../kernel/os_core/os_core.c ****                           &OSTaskIdleStk[OS_TASK_IDLE_STK_SIZE - 1], /* Set Top-Of-Stack           
 967:../kernel/os_core/os_core.c ****                           OS_IDLE_PRIO,                              /* Lowest priority level      
 968:../kernel/os_core/os_core.c ****                           OS_TASK_IDLE_ID,
 969:../kernel/os_core/os_core.c ****                           &OSTaskIdleStk[0],                         /* Set Bottom-Of-Stack        
 970:../kernel/os_core/os_core.c ****                           OS_TASK_IDLE_STK_SIZE,
 971:../kernel/os_core/os_core.c ****                           (void *)0,                                 /* No TCB extension           
 972:../kernel/os_core/os_core.c ****                           OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);/* Enable stack checking + cle
 973:../kernel/os_core/os_core.c ****     #else
 974:../kernel/os_core/os_core.c ****     (void)OSTaskCreateExt(OS_TaskIdle,
 975:../kernel/os_core/os_core.c ****                           (void *)0,                                 /* No arguments passed to OS_T
 976:../kernel/os_core/os_core.c ****                           &OSTaskIdleStk[0],                         /* Set Top-Of-Stack           
 977:../kernel/os_core/os_core.c ****                           OS_IDLE_PRIO,                              /* Lowest priority level      
 978:../kernel/os_core/os_core.c ****                           OS_TASK_IDLE_ID,
 979:../kernel/os_core/os_core.c ****                           &OSTaskIdleStk[OS_TASK_IDLE_STK_SIZE - 1], /* Set Bottom-Of-Stack        
 980:../kernel/os_core/os_core.c ****                           OS_TASK_IDLE_STK_SIZE,
 981:../kernel/os_core/os_core.c ****                           (void *)0,                                 /* No TCB extension           
 982:../kernel/os_core/os_core.c ****                           OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);/* Enable stack checking + cle
 983:../kernel/os_core/os_core.c ****     #endif
 984:../kernel/os_core/os_core.c **** #else
 985:../kernel/os_core/os_core.c ****     #if OS_STK_GROWTH == 1
 986:../kernel/os_core/os_core.c ****     (void)OSTaskCreate(OS_TaskIdle,
 987:../kernel/os_core/os_core.c ****                        (void *)0,
 988:../kernel/os_core/os_core.c ****                        &OSTaskIdleStk[OS_TASK_IDLE_STK_SIZE - 1],
 989:../kernel/os_core/os_core.c ****                        OS_IDLE_PRIO);
 990:../kernel/os_core/os_core.c ****     #else
 991:../kernel/os_core/os_core.c ****     (void)OSTaskCreate(OS_TaskIdle,
 992:../kernel/os_core/os_core.c ****                        (void *)0,
 993:../kernel/os_core/os_core.c ****                        &OSTaskIdleStk[0],
 994:../kernel/os_core/os_core.c ****                        OS_IDLE_PRIO);
 995:../kernel/os_core/os_core.c ****     #endif
 996:../kernel/os_core/os_core.c **** #endif
 997:../kernel/os_core/os_core.c **** }
 3878              		.loc 1 997 0
 3879 10ec 0CD04BE2 		sub	sp, fp, #12
 3880 10f0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3881 10f4 1EFF2FE1 		bx	lr
 3882              	.L94:
 3883              		.align	2
 3884              	.L93:
 3885 10f8 FFFF0000 		.word	65535
 3886 10fc 00000000 		.word	OSTaskIdleStk
 3887 1100 00000000 		.word	OS_TaskIdle
 3888 1104 FC070000 		.word	OSTaskIdleStk+2044
 3889              		.cfi_endproc
 3890              	.LFE19:
 3892              		.align	2
 3894              	OS_InitTaskStat:
 3895              	.LFB20:
 998:../kernel/os_core/os_core.c **** /*$PAGE*/
 999:../kernel/os_core/os_core.c **** /*
1000:../kernel/os_core/os_core.c **** ***************************************************************************************************
1001:../kernel/os_core/os_core.c **** *                                             INITIALIZATION
1002:../kernel/os_core/os_core.c **** *                                      CREATING THE STATISTIC TASK
1003:../kernel/os_core/os_core.c **** *
1004:../kernel/os_core/os_core.c **** * Description: This function creates the Statistic Task.
1005:../kernel/os_core/os_core.c **** *
1006:../kernel/os_core/os_core.c **** * Arguments  : none
1007:../kernel/os_core/os_core.c **** *
1008:../kernel/os_core/os_core.c **** * Returns    : none
1009:../kernel/os_core/os_core.c **** ***************************************************************************************************
1010:../kernel/os_core/os_core.c **** */
1011:../kernel/os_core/os_core.c **** 
1012:../kernel/os_core/os_core.c **** #if OS_TASK_STAT_EN > 0
1013:../kernel/os_core/os_core.c **** static  void  OS_InitTaskStat (void)
1014:../kernel/os_core/os_core.c **** {
 3896              		.loc 1 1014 0
 3897              		.cfi_startproc
 3898              		@ Function supports interworking.
 3899              		@ args = 0, pretend = 0, frame = 0
 3900              		@ frame_needed = 1, uses_anonymous_args = 0
 3901 1108 0DC0A0E1 		mov	ip, sp
 3902              	.LCFI40:
 3903              		.cfi_def_cfa_register 12
 3904 110c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3905 1110 04B04CE2 		sub	fp, ip, #4
 3906              		.cfi_offset 14, -8
 3907              		.cfi_offset 13, -12
 3908              		.cfi_offset 11, -16
 3909              	.LCFI41:
 3910              		.cfi_def_cfa 11, 4
 3911 1114 18D04DE2 		sub	sp, sp, #24
1015:../kernel/os_core/os_core.c **** #if OS_TASK_CREATE_EXT_EN > 0
1016:../kernel/os_core/os_core.c ****     #if OS_STK_GROWTH == 1
1017:../kernel/os_core/os_core.c ****     (void)OSTaskCreateExt(OS_TaskStat,
 3912              		.loc 1 1017 0
 3913 1118 40309FE5 		ldr	r3, .L96
 3914 111c 00308DE5 		str	r3, [sp, #0]
 3915 1120 3C309FE5 		ldr	r3, .L96+4
 3916 1124 04308DE5 		str	r3, [sp, #4]
 3917 1128 023CA0E3 		mov	r3, #512
 3918 112c 08308DE5 		str	r3, [sp, #8]
 3919 1130 0030A0E3 		mov	r3, #0
 3920 1134 0C308DE5 		str	r3, [sp, #12]
 3921 1138 0330A0E3 		mov	r3, #3
 3922 113c 10308DE5 		str	r3, [sp, #16]
 3923 1140 20009FE5 		ldr	r0, .L96+8
 3924 1144 0010A0E3 		mov	r1, #0
 3925 1148 1C209FE5 		ldr	r2, .L96+12
 3926 114c 3E30A0E3 		mov	r3, #62
 3927 1150 FEFFFFEB 		bl	OSTaskCreateExt
1018:../kernel/os_core/os_core.c ****                           (void *)0,                                   /* No args passed to OS_Task
1019:../kernel/os_core/os_core.c ****                           &OSTaskStatStk[OS_TASK_STAT_STK_SIZE - 1],   /* Set Top-Of-Stack         
1020:../kernel/os_core/os_core.c ****                           OS_STAT_PRIO,                                /* One higher than the idle 
1021:../kernel/os_core/os_core.c ****                           OS_TASK_STAT_ID,
1022:../kernel/os_core/os_core.c ****                           &OSTaskStatStk[0],                           /* Set Bottom-Of-Stack      
1023:../kernel/os_core/os_core.c ****                           OS_TASK_STAT_STK_SIZE,
1024:../kernel/os_core/os_core.c ****                           (void *)0,                                   /* No TCB extension         
1025:../kernel/os_core/os_core.c ****                           OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);  /* Enable stack checking + c
1026:../kernel/os_core/os_core.c ****     #else
1027:../kernel/os_core/os_core.c ****     (void)OSTaskCreateExt(OS_TaskStat,
1028:../kernel/os_core/os_core.c ****                           (void *)0,                                   /* No args passed to OS_Task
1029:../kernel/os_core/os_core.c ****                           &OSTaskStatStk[0],                           /* Set Top-Of-Stack         
1030:../kernel/os_core/os_core.c ****                           OS_STAT_PRIO,                                /* One higher than the idle 
1031:../kernel/os_core/os_core.c ****                           OS_TASK_STAT_ID,
1032:../kernel/os_core/os_core.c ****                           &OSTaskStatStk[OS_TASK_STAT_STK_SIZE - 1],   /* Set Bottom-Of-Stack      
1033:../kernel/os_core/os_core.c ****                           OS_TASK_STAT_STK_SIZE,
1034:../kernel/os_core/os_core.c ****                           (void *)0,                                   /* No TCB extension         
1035:../kernel/os_core/os_core.c ****                           OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);  /* Enable stack checking + c
1036:../kernel/os_core/os_core.c ****     #endif
1037:../kernel/os_core/os_core.c **** #else
1038:../kernel/os_core/os_core.c ****     #if OS_STK_GROWTH == 1
1039:../kernel/os_core/os_core.c ****     (void)OSTaskCreate(OS_TaskStat,
1040:../kernel/os_core/os_core.c ****                        (void *)0,                                      /* No args passed to OS_Task
1041:../kernel/os_core/os_core.c ****                        &OSTaskStatStk[OS_TASK_STAT_STK_SIZE - 1],      /* Set Top-Of-Stack         
1042:../kernel/os_core/os_core.c ****                        OS_STAT_PRIO);                                  /* One higher than the idle 
1043:../kernel/os_core/os_core.c ****     #else
1044:../kernel/os_core/os_core.c ****     (void)OSTaskCreate(OS_TaskStat,
1045:../kernel/os_core/os_core.c ****                        (void *)0,                                      /* No args passed to OS_Task
1046:../kernel/os_core/os_core.c ****                        &OSTaskStatStk[0],                              /* Set Top-Of-Stack         
1047:../kernel/os_core/os_core.c ****                        OS_STAT_PRIO);                                  /* One higher than the idle 
1048:../kernel/os_core/os_core.c ****     #endif
1049:../kernel/os_core/os_core.c **** #endif
1050:../kernel/os_core/os_core.c **** }
 3928              		.loc 1 1050 0
 3929 1154 0CD04BE2 		sub	sp, fp, #12
 3930 1158 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3931 115c 1EFF2FE1 		bx	lr
 3932              	.L97:
 3933              		.align	2
 3934              	.L96:
 3935 1160 FEFF0000 		.word	65534
 3936 1164 00000000 		.word	OSTaskStatStk
 3937 1168 00000000 		.word	OS_TaskStat
 3938 116c FC070000 		.word	OSTaskStatStk+2044
 3939              		.cfi_endproc
 3940              	.LFE20:
 3942              		.align	2
 3944              	OS_InitTCBList:
 3945              	.LFB21:
1051:../kernel/os_core/os_core.c **** #endif
1052:../kernel/os_core/os_core.c **** /*$PAGE*/
1053:../kernel/os_core/os_core.c **** /*
1054:../kernel/os_core/os_core.c **** ***************************************************************************************************
1055:../kernel/os_core/os_core.c **** *                                             INITIALIZATION
1056:../kernel/os_core/os_core.c **** *                            INITIALIZE THE FREE LIST OF TASK CONTROL BLOCKS
1057:../kernel/os_core/os_core.c **** *
1058:../kernel/os_core/os_core.c **** * Description: This function is called by OSInit() to initialize the free list of OS_TCBs.
1059:../kernel/os_core/os_core.c **** *
1060:../kernel/os_core/os_core.c **** * Arguments  : none
1061:../kernel/os_core/os_core.c **** *
1062:../kernel/os_core/os_core.c **** * Returns    : none
1063:../kernel/os_core/os_core.c **** ***************************************************************************************************
1064:../kernel/os_core/os_core.c **** */
1065:../kernel/os_core/os_core.c **** 
1066:../kernel/os_core/os_core.c **** static  void  OS_InitTCBList (void)
1067:../kernel/os_core/os_core.c **** {
 3946              		.loc 1 1067 0
 3947              		.cfi_startproc
 3948              		@ Function supports interworking.
 3949              		@ args = 0, pretend = 0, frame = 16
 3950              		@ frame_needed = 1, uses_anonymous_args = 0
 3951 1170 0DC0A0E1 		mov	ip, sp
 3952              	.LCFI42:
 3953              		.cfi_def_cfa_register 12
 3954 1174 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3955 1178 04B04CE2 		sub	fp, ip, #4
 3956              		.cfi_offset 14, -8
 3957              		.cfi_offset 13, -12
 3958              		.cfi_offset 11, -16
 3959              	.LCFI43:
 3960              		.cfi_def_cfa 11, 4
 3961 117c 10D04DE2 		sub	sp, sp, #16
1068:../kernel/os_core/os_core.c ****     INT8U    i;
1069:../kernel/os_core/os_core.c ****     OS_TCB  *ptcb1;
1070:../kernel/os_core/os_core.c ****     OS_TCB  *ptcb2;
1071:../kernel/os_core/os_core.c **** 
1072:../kernel/os_core/os_core.c **** 
1073:../kernel/os_core/os_core.c ****     OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs             
 3962              		.loc 1 1073 0
 3963 1180 D0309FE5 		ldr	r3, .L101
 3964 1184 0300A0E1 		mov	r0, r3
 3965 1188 8F1EA0E3 		mov	r1, #2288
 3966 118c FEFFFFEB 		bl	OS_MemClr
1074:../kernel/os_core/os_core.c ****     OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table       
 3967              		.loc 1 1074 0
 3968 1190 C4309FE5 		ldr	r3, .L101+4
 3969 1194 0300A0E1 		mov	r0, r3
 3970 1198 011CA0E3 		mov	r1, #256
 3971 119c FEFFFFEB 		bl	OS_MemClr
1075:../kernel/os_core/os_core.c ****     ptcb1 = &OSTCBTbl[0];
 3972              		.loc 1 1075 0
 3973 11a0 B0309FE5 		ldr	r3, .L101
 3974 11a4 14300BE5 		str	r3, [fp, #-20]
1076:../kernel/os_core/os_core.c ****     ptcb2 = &OSTCBTbl[1];
 3975              		.loc 1 1076 0
 3976 11a8 B0309FE5 		ldr	r3, .L101+8
 3977 11ac 18300BE5 		str	r3, [fp, #-24]
1077:../kernel/os_core/os_core.c ****     for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs        
 3978              		.loc 1 1077 0
 3979 11b0 0030A0E3 		mov	r3, #0
 3980 11b4 0D304BE5 		strb	r3, [fp, #-13]
 3981 11b8 110000EA 		b	.L99
 3982              	.L100:
1078:../kernel/os_core/os_core.c ****         ptcb1->OSTCBNext = ptcb2;
 3983              		.loc 1 1078 0 discriminator 2
 3984 11bc 14301BE5 		ldr	r3, [fp, #-20]
 3985 11c0 18201BE5 		ldr	r2, [fp, #-24]
 3986 11c4 142083E5 		str	r2, [r3, #20]
1079:../kernel/os_core/os_core.c **** #if OS_TASK_NAME_SIZE > 1
1080:../kernel/os_core/os_core.c ****         ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                   
 3987              		.loc 1 1080 0 discriminator 2
 3988 11c8 14301BE5 		ldr	r3, [fp, #-20]
 3989 11cc 3F20A0E3 		mov	r2, #63
 3990 11d0 4820C3E5 		strb	r2, [r3, #72]
1081:../kernel/os_core/os_core.c ****         ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 3991              		.loc 1 1081 0 discriminator 2
 3992 11d4 14301BE5 		ldr	r3, [fp, #-20]
 3993 11d8 0020A0E3 		mov	r2, #0
 3994 11dc 4920C3E5 		strb	r2, [r3, #73]
1082:../kernel/os_core/os_core.c **** #endif
1083:../kernel/os_core/os_core.c ****         ptcb1++;
 3995              		.loc 1 1083 0 discriminator 2
 3996 11e0 14301BE5 		ldr	r3, [fp, #-20]
 3997 11e4 683083E2 		add	r3, r3, #104
 3998 11e8 14300BE5 		str	r3, [fp, #-20]
1084:../kernel/os_core/os_core.c ****         ptcb2++;
 3999              		.loc 1 1084 0 discriminator 2
 4000 11ec 18301BE5 		ldr	r3, [fp, #-24]
 4001 11f0 683083E2 		add	r3, r3, #104
 4002 11f4 18300BE5 		str	r3, [fp, #-24]
1077:../kernel/os_core/os_core.c ****     for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs        
 4003              		.loc 1 1077 0 discriminator 2
 4004 11f8 0D305BE5 		ldrb	r3, [fp, #-13]
 4005 11fc 013083E2 		add	r3, r3, #1
 4006 1200 0D304BE5 		strb	r3, [fp, #-13]
 4007              	.L99:
1077:../kernel/os_core/os_core.c ****     for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs        
 4008              		.loc 1 1077 0 is_stmt 0 discriminator 1
 4009 1204 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 4010 1208 140053E3 		cmp	r3, #20
 4011 120c EAFFFF9A 		bls	.L100
1085:../kernel/os_core/os_core.c ****     }
1086:../kernel/os_core/os_core.c ****     ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                    
 4012              		.loc 1 1086 0 is_stmt 1
 4013 1210 14301BE5 		ldr	r3, [fp, #-20]
 4014 1214 0020A0E3 		mov	r2, #0
 4015 1218 142083E5 		str	r2, [r3, #20]
1087:../kernel/os_core/os_core.c **** #if OS_TASK_NAME_SIZE > 1
1088:../kernel/os_core/os_core.c ****     ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                   
 4016              		.loc 1 1088 0
 4017 121c 14301BE5 		ldr	r3, [fp, #-20]
 4018 1220 3F20A0E3 		mov	r2, #63
 4019 1224 4820C3E5 		strb	r2, [r3, #72]
1089:../kernel/os_core/os_core.c ****     ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 4020              		.loc 1 1089 0
 4021 1228 14301BE5 		ldr	r3, [fp, #-20]
 4022 122c 0020A0E3 		mov	r2, #0
 4023 1230 4920C3E5 		strb	r2, [r3, #73]
1090:../kernel/os_core/os_core.c **** #endif
1091:../kernel/os_core/os_core.c ****     OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations      
 4024              		.loc 1 1091 0
 4025 1234 28309FE5 		ldr	r3, .L101+12
 4026 1238 0020A0E3 		mov	r2, #0
 4027 123c 002083E5 		str	r2, [r3, #0]
1092:../kernel/os_core/os_core.c ****     OSTCBFreeList           = &OSTCBTbl[0];
 4028              		.loc 1 1092 0
 4029 1240 20309FE5 		ldr	r3, .L101+16
 4030 1244 0C209FE5 		ldr	r2, .L101
 4031 1248 002083E5 		str	r2, [r3, #0]
1093:../kernel/os_core/os_core.c **** }
 4032              		.loc 1 1093 0
 4033 124c 0CD04BE2 		sub	sp, fp, #12
 4034 1250 00689DE8 		ldmfd	sp, {fp, sp, lr}
 4035 1254 1EFF2FE1 		bx	lr
 4036              	.L102:
 4037              		.align	2
 4038              	.L101:
 4039 1258 00000000 		.word	OSTCBTbl
 4040 125c 00000000 		.word	OSTCBPrioTbl
 4041 1260 68000000 		.word	OSTCBTbl+104
 4042 1264 00000000 		.word	OSTCBList
 4043 1268 00000000 		.word	OSTCBFreeList
 4044              		.cfi_endproc
 4045              	.LFE21:
 4047              		.align	2
 4048              		.global	OS_MemClr
 4050              	OS_MemClr:
 4051              	.LFB22:
1094:../kernel/os_core/os_core.c **** /*$PAGE*/
1095:../kernel/os_core/os_core.c **** /*
1096:../kernel/os_core/os_core.c **** ***************************************************************************************************
1097:../kernel/os_core/os_core.c **** *                                        CLEAR A SECTION OF MEMORY
1098:../kernel/os_core/os_core.c **** *
1099:../kernel/os_core/os_core.c **** * Description: This function is called by other uC/OS-II services to clear a contiguous block of RA
1100:../kernel/os_core/os_core.c **** *
1101:../kernel/os_core/os_core.c **** * Arguments  : pdest    is the start of the RAM to clear (i.e. write 0x00 to)
1102:../kernel/os_core/os_core.c **** *
1103:../kernel/os_core/os_core.c **** *              size     is the number of bytes to clear.  
1104:../kernel/os_core/os_core.c **** *
1105:../kernel/os_core/os_core.c **** * Returns    : none
1106:../kernel/os_core/os_core.c **** *
1107:../kernel/os_core/os_core.c **** * Notes      : 1) This function is INTERNAL to uC/OS-II and your application should not call it.
1108:../kernel/os_core/os_core.c **** *              2) Note that we can only clear up to 64K bytes of RAM.  This is not an issue because
1109:../kernel/os_core/os_core.c **** *                 of the uses of this function gets close to this limit.
1110:../kernel/os_core/os_core.c **** *              3) The clear is done one byte at a time since this will work on any processor irresp
1111:../kernel/os_core/os_core.c **** *                 of the alignment of the destination.
1112:../kernel/os_core/os_core.c **** ***************************************************************************************************
1113:../kernel/os_core/os_core.c **** */
1114:../kernel/os_core/os_core.c **** 
1115:../kernel/os_core/os_core.c **** void  OS_MemClr (INT8U *pdest, INT16U size)
1116:../kernel/os_core/os_core.c **** {
 4052              		.loc 1 1116 0
 4053              		.cfi_startproc
 4054              		@ Function supports interworking.
 4055              		@ args = 0, pretend = 0, frame = 8
 4056              		@ frame_needed = 1, uses_anonymous_args = 0
 4057 126c 0DC0A0E1 		mov	ip, sp
 4058              	.LCFI44:
 4059              		.cfi_def_cfa_register 12
 4060 1270 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 4061 1274 04B04CE2 		sub	fp, ip, #4
 4062              		.cfi_offset 14, -8
 4063              		.cfi_offset 13, -12
 4064              		.cfi_offset 11, -16
 4065              	.LCFI45:
 4066              		.cfi_def_cfa 11, 4
 4067 1278 08D04DE2 		sub	sp, sp, #8
 4068 127c 10000BE5 		str	r0, [fp, #-16]
 4069 1280 0130A0E1 		mov	r3, r1
 4070 1284 B2314BE1 		strh	r3, [fp, #-18]	@ movhi
1117:../kernel/os_core/os_core.c ****     while (size > 0) {
 4071              		.loc 1 1117 0
 4072 1288 080000EA 		b	.L104
 4073              	.L105:
1118:../kernel/os_core/os_core.c ****         *pdest++ = (INT8U)0;
 4074              		.loc 1 1118 0
 4075 128c 10301BE5 		ldr	r3, [fp, #-16]
 4076 1290 0020A0E3 		mov	r2, #0
 4077 1294 0020C3E5 		strb	r2, [r3, #0]
 4078 1298 10301BE5 		ldr	r3, [fp, #-16]
 4079 129c 013083E2 		add	r3, r3, #1
 4080 12a0 10300BE5 		str	r3, [fp, #-16]
1119:../kernel/os_core/os_core.c ****         size--;
 4081              		.loc 1 1119 0
 4082 12a4 B2315BE1 		ldrh	r3, [fp, #-18]	@ movhi
 4083 12a8 013043E2 		sub	r3, r3, #1
 4084 12ac B2314BE1 		strh	r3, [fp, #-18]	@ movhi
 4085              	.L104:
1117:../kernel/os_core/os_core.c ****     while (size > 0) {
 4086              		.loc 1 1117 0 discriminator 1
 4087 12b0 B2315BE1 		ldrh	r3, [fp, #-18]
 4088 12b4 000053E3 		cmp	r3, #0
 4089 12b8 F3FFFF1A 		bne	.L105
1120:../kernel/os_core/os_core.c ****     }
1121:../kernel/os_core/os_core.c **** }
 4090              		.loc 1 1121 0
 4091 12bc 0CD04BE2 		sub	sp, fp, #12
 4092 12c0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 4093 12c4 1EFF2FE1 		bx	lr
 4094              		.cfi_endproc
 4095              	.LFE22:
 4097              		.align	2
 4098              		.global	OS_MemCopy
 4100              	OS_MemCopy:
 4101              	.LFB23:
1122:../kernel/os_core/os_core.c **** /*$PAGE*/
1123:../kernel/os_core/os_core.c **** /*
1124:../kernel/os_core/os_core.c **** ***************************************************************************************************
1125:../kernel/os_core/os_core.c **** *                                        COPY A BLOCK OF MEMORY
1126:../kernel/os_core/os_core.c **** *
1127:../kernel/os_core/os_core.c **** * Description: This function is called by other uC/OS-II services to copy a block of memory from on
1128:../kernel/os_core/os_core.c **** *              location to another.
1129:../kernel/os_core/os_core.c **** *
1130:../kernel/os_core/os_core.c **** * Arguments  : pdest    is a pointer to the 'destination' memory block
1131:../kernel/os_core/os_core.c **** *
1132:../kernel/os_core/os_core.c **** *              psrc     is a pointer to the 'source'      memory block
1133:../kernel/os_core/os_core.c **** *
1134:../kernel/os_core/os_core.c **** *              size     is the number of bytes to copy.  
1135:../kernel/os_core/os_core.c **** *
1136:../kernel/os_core/os_core.c **** * Returns    : none
1137:../kernel/os_core/os_core.c **** *
1138:../kernel/os_core/os_core.c **** * Notes      : 1) This function is INTERNAL to uC/OS-II and your application should not call it.  T
1139:../kernel/os_core/os_core.c **** *                 no provision to handle overlapping memory copy.  However, that's not a problem si
1140:../kernel/os_core/os_core.c **** *                 is not a situation that will happen.
1141:../kernel/os_core/os_core.c **** *              2) Note that we can only copy up to 64K bytes of RAM
1142:../kernel/os_core/os_core.c **** *              3) The copy is done one byte at a time since this will work on any processor irrespe
1143:../kernel/os_core/os_core.c **** *                 of the alignment of the source and destination.
1144:../kernel/os_core/os_core.c **** ***************************************************************************************************
1145:../kernel/os_core/os_core.c **** */
1146:../kernel/os_core/os_core.c **** 
1147:../kernel/os_core/os_core.c **** void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
1148:../kernel/os_core/os_core.c **** {
 4102              		.loc 1 1148 0
 4103              		.cfi_startproc
 4104              		@ Function supports interworking.
 4105              		@ args = 0, pretend = 0, frame = 16
 4106              		@ frame_needed = 1, uses_anonymous_args = 0
 4107 12c8 0DC0A0E1 		mov	ip, sp
 4108              	.LCFI46:
 4109              		.cfi_def_cfa_register 12
 4110 12cc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 4111 12d0 04B04CE2 		sub	fp, ip, #4
 4112              		.cfi_offset 14, -8
 4113              		.cfi_offset 13, -12
 4114              		.cfi_offset 11, -16
 4115              	.LCFI47:
 4116              		.cfi_def_cfa 11, 4
 4117 12d4 10D04DE2 		sub	sp, sp, #16
 4118 12d8 10000BE5 		str	r0, [fp, #-16]
 4119 12dc 14100BE5 		str	r1, [fp, #-20]
 4120 12e0 0230A0E1 		mov	r3, r2
 4121 12e4 B6314BE1 		strh	r3, [fp, #-22]	@ movhi
1149:../kernel/os_core/os_core.c ****     while (size > 0) {
 4122              		.loc 1 1149 0
 4123 12e8 0C0000EA 		b	.L107
 4124              	.L108:
1150:../kernel/os_core/os_core.c ****         *pdest++ = *psrc++;
 4125              		.loc 1 1150 0
 4126 12ec 14301BE5 		ldr	r3, [fp, #-20]
 4127 12f0 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4128 12f4 10301BE5 		ldr	r3, [fp, #-16]
 4129 12f8 0020C3E5 		strb	r2, [r3, #0]
 4130 12fc 10301BE5 		ldr	r3, [fp, #-16]
 4131 1300 013083E2 		add	r3, r3, #1
 4132 1304 10300BE5 		str	r3, [fp, #-16]
 4133 1308 14301BE5 		ldr	r3, [fp, #-20]
 4134 130c 013083E2 		add	r3, r3, #1
 4135 1310 14300BE5 		str	r3, [fp, #-20]
1151:../kernel/os_core/os_core.c ****         size--;
 4136              		.loc 1 1151 0
 4137 1314 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 4138 1318 013043E2 		sub	r3, r3, #1
 4139 131c B6314BE1 		strh	r3, [fp, #-22]	@ movhi
 4140              	.L107:
1149:../kernel/os_core/os_core.c ****     while (size > 0) {
 4141              		.loc 1 1149 0 discriminator 1
 4142 1320 B6315BE1 		ldrh	r3, [fp, #-22]
 4143 1324 000053E3 		cmp	r3, #0
 4144 1328 EFFFFF1A 		bne	.L108
1152:../kernel/os_core/os_core.c ****     }
1153:../kernel/os_core/os_core.c **** }
 4145              		.loc 1 1153 0
 4146 132c 0CD04BE2 		sub	sp, fp, #12
 4147 1330 00689DE8 		ldmfd	sp, {fp, sp, lr}
 4148 1334 1EFF2FE1 		bx	lr
 4149              		.cfi_endproc
 4150              	.LFE23:
 4152              		.align	2
 4153              		.global	OS_Sched
 4155              	OS_Sched:
 4156              	.LFB24:
1154:../kernel/os_core/os_core.c **** /*$PAGE*/
1155:../kernel/os_core/os_core.c **** /*
1156:../kernel/os_core/os_core.c **** ***************************************************************************************************
1157:../kernel/os_core/os_core.c **** *                                              SCHEDULER
1158:../kernel/os_core/os_core.c **** *
1159:../kernel/os_core/os_core.c **** * Description: This function is called by other uC/OS-II services to determine whether a new, high
1160:../kernel/os_core/os_core.c **** *              priority task has been made ready to run.  This function is invoked by TASK level co
1161:../kernel/os_core/os_core.c **** *              and is not used to reschedule tasks from ISRs (see OSIntExit() for ISR rescheduling)
1162:../kernel/os_core/os_core.c **** *
1163:../kernel/os_core/os_core.c **** * Arguments  : none
1164:../kernel/os_core/os_core.c **** *
1165:../kernel/os_core/os_core.c **** * Returns    : none
1166:../kernel/os_core/os_core.c **** *
1167:../kernel/os_core/os_core.c **** * Notes      : 1) This function is INTERNAL to uC/OS-II and your application should not call it.
1168:../kernel/os_core/os_core.c **** *              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
1169:../kernel/os_core/os_core.c **** ***************************************************************************************************
1170:../kernel/os_core/os_core.c **** */
1171:../kernel/os_core/os_core.c **** 
1172:../kernel/os_core/os_core.c **** void  OS_Sched (void)
1173:../kernel/os_core/os_core.c **** {
 4157              		.loc 1 1173 0
 4158              		.cfi_startproc
 4159              		@ Function supports interworking.
 4160              		@ args = 0, pretend = 0, frame = 8
 4161              		@ frame_needed = 1, uses_anonymous_args = 0
 4162 1338 0DC0A0E1 		mov	ip, sp
 4163              	.LCFI48:
 4164              		.cfi_def_cfa_register 12
 4165 133c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 4166 1340 04B04CE2 		sub	fp, ip, #4
 4167              		.cfi_offset 14, -8
 4168              		.cfi_offset 13, -12
 4169              		.cfi_offset 11, -16
 4170              	.LCFI49:
 4171              		.cfi_def_cfa 11, 4
 4172 1344 08D04DE2 		sub	sp, sp, #8
1174:../kernel/os_core/os_core.c ****     INT8U      y;
1175:../kernel/os_core/os_core.c **** #if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register 
1176:../kernel/os_core/os_core.c ****     OS_CPU_SR  cpu_sr;
1177:../kernel/os_core/os_core.c **** 
1178:../kernel/os_core/os_core.c **** 
1179:../kernel/os_core/os_core.c **** 
1180:../kernel/os_core/os_core.c ****     cpu_sr = 0;                                        /* Prevent compiler warning                 
1181:../kernel/os_core/os_core.c **** #endif    
1182:../kernel/os_core/os_core.c ****     OS_ENTER_CRITICAL();
 4173              		.loc 1 1182 0
 4174              	@ 1182 "../kernel/os_core/os_core.c" 1
 4175 1348 00000FE1 		mrs   r0, cpsr
 4176              	@ 0 "" 2
 4177              	@ 1182 "../kernel/os_core/os_core.c" 1
 4178 134c 04002DE5 		stmfd sp!, {r0}
 4179              	@ 0 "" 2
 4180              	@ 1182 "../kernel/os_core/os_core.c" 1
 4181 1350 C00080E3 		orr   r0, r0, #0b11000000
 4182              	@ 0 "" 2
 4183              	@ 1182 "../kernel/os_core/os_core.c" 1
 4184 1354 00F021E1 		msr   cpsr_c, r0
 4185              	@ 0 "" 2
1183:../kernel/os_core/os_core.c ****     if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...   
 4186              		.loc 1 1183 0
 4187 1358 D0309FE5 		ldr	r3, .L111
 4188 135c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4189 1360 000053E3 		cmp	r3, #0
 4190 1364 2C00001A 		bne	.L110
1184:../kernel/os_core/os_core.c ****         if (OSLockNesting == 0) {                      /* ... scheduler is not locked              
 4191              		.loc 1 1184 0
 4192 1368 C4309FE5 		ldr	r3, .L111+4
 4193 136c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4194 1370 000053E3 		cmp	r3, #0
 4195 1374 2800001A 		bne	.L110
1185:../kernel/os_core/os_core.c ****             y             = OSUnMapTbl[OSRdyGrp];      /* Get pointer to HPT ready to run          
 4196              		.loc 1 1185 0
 4197 1378 B8309FE5 		ldr	r3, .L111+8
 4198 137c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4199 1380 B4209FE5 		ldr	r2, .L111+12
 4200 1384 0330D2E7 		ldrb	r3, [r2, r3]
 4201 1388 0D304BE5 		strb	r3, [fp, #-13]
1186:../kernel/os_core/os_core.c ****             OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 4202              		.loc 1 1186 0
 4203 138c 0D305BE5 		ldrb	r3, [fp, #-13]
 4204 1390 8331A0E1 		mov	r3, r3, asl #3
 4205 1394 FF2003E2 		and	r2, r3, #255
 4206 1398 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 4207 139c 9C109FE5 		ldr	r1, .L111+16
 4208 13a0 0330D1E7 		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 4209 13a4 90109FE5 		ldr	r1, .L111+12
 4210 13a8 0330D1E7 		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 4211 13ac 033082E0 		add	r3, r2, r3
 4212 13b0 FF2003E2 		and	r2, r3, #255
 4213 13b4 88309FE5 		ldr	r3, .L111+20
 4214 13b8 0020C3E5 		strb	r2, [r3, #0]
1187:../kernel/os_core/os_core.c ****             if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy 
 4215              		.loc 1 1187 0
 4216 13bc 80309FE5 		ldr	r3, .L111+20
 4217 13c0 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4218 13c4 7C309FE5 		ldr	r3, .L111+24
 4219 13c8 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4220 13cc 030052E1 		cmp	r2, r3
 4221 13d0 1100000A 		beq	.L110
1188:../kernel/os_core/os_core.c ****                 OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 4222              		.loc 1 1188 0
 4223 13d4 68309FE5 		ldr	r3, .L111+20
 4224 13d8 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4225 13dc 0320A0E1 		mov	r2, r3
 4226 13e0 64309FE5 		ldr	r3, .L111+28
 4227 13e4 022193E7 		ldr	r2, [r3, r2, asl #2]
 4228 13e8 60309FE5 		ldr	r3, .L111+32
 4229 13ec 002083E5 		str	r2, [r3, #0]
1189:../kernel/os_core/os_core.c **** #if OS_TASK_PROFILE_EN > 0
1190:../kernel/os_core/os_core.c ****                 OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  
 4230              		.loc 1 1190 0
 4231 13f0 58309FE5 		ldr	r3, .L111+32
 4232 13f4 003093E5 		ldr	r3, [r3, #0]
 4233 13f8 342093E5 		ldr	r2, [r3, #52]
 4234 13fc 012082E2 		add	r2, r2, #1
 4235 1400 342083E5 		str	r2, [r3, #52]
1191:../kernel/os_core/os_core.c **** #endif
1192:../kernel/os_core/os_core.c ****                 OSCtxSwCtr++;                          /* Increment context switch counter         
 4236              		.loc 1 1192 0
 4237 1404 48309FE5 		ldr	r3, .L111+36
 4238 1408 003093E5 		ldr	r3, [r3, #0]
 4239 140c 012083E2 		add	r2, r3, #1
 4240 1410 3C309FE5 		ldr	r3, .L111+36
 4241 1414 002083E5 		str	r2, [r3, #0]
1193:../kernel/os_core/os_core.c ****                 OS_TASK_SW();                          /* Perform a context switch                 
 4242              		.loc 1 1193 0
 4243 1418 FEFFFFEB 		bl	OSCtxSw
 4244              	.L110:
1194:../kernel/os_core/os_core.c ****             }
1195:../kernel/os_core/os_core.c ****         }
1196:../kernel/os_core/os_core.c ****     }
1197:../kernel/os_core/os_core.c ****     OS_EXIT_CRITICAL();
 4245              		.loc 1 1197 0
 4246              	@ 1197 "../kernel/os_core/os_core.c" 1
 4247 141c 04009DE4 		ldmfd sp!, {r0}
 4248              	@ 0 "" 2
 4249              	@ 1197 "../kernel/os_core/os_core.c" 1
 4250 1420 00F021E1 		msr   cpsr_c, r0
 4251              	@ 0 "" 2
1198:../kernel/os_core/os_core.c **** }
 4252              		.loc 1 1198 0
 4253 1424 0CD04BE2 		sub	sp, fp, #12
 4254 1428 00689DE8 		ldmfd	sp, {fp, sp, lr}
 4255 142c 1EFF2FE1 		bx	lr
 4256              	.L112:
 4257              		.align	2
 4258              	.L111:
 4259 1430 00000000 		.word	OSIntNesting
 4260 1434 00000000 		.word	OSLockNesting
 4261 1438 00000000 		.word	OSRdyGrp
 4262 143c 00000000 		.word	OSUnMapTbl
 4263 1440 00000000 		.word	OSRdyTbl
 4264 1444 00000000 		.word	OSPrioHighRdy
 4265 1448 00000000 		.word	OSPrioCur
 4266 144c 00000000 		.word	OSTCBPrioTbl
 4267 1450 00000000 		.word	OSTCBHighRdy
 4268 1454 00000000 		.word	OSCtxSwCtr
 4269              		.cfi_endproc
 4270              	.LFE24:
 4272              		.align	2
 4273              		.global	OS_StrCopy
 4275              	OS_StrCopy:
 4276              	.LFB25:
1199:../kernel/os_core/os_core.c **** /*$PAGE*/
1200:../kernel/os_core/os_core.c **** /*
1201:../kernel/os_core/os_core.c **** ***************************************************************************************************
1202:../kernel/os_core/os_core.c **** *                                        COPY AN ASCII STRING
1203:../kernel/os_core/os_core.c **** *
1204:../kernel/os_core/os_core.c **** * Description: This function is called by other uC/OS-II services to copy an ASCII string from a 's
1205:../kernel/os_core/os_core.c **** *              string to a 'destination' string.
1206:../kernel/os_core/os_core.c **** *
1207:../kernel/os_core/os_core.c **** * Arguments  : pdest    is a pointer to the string that will be receiving the copy.  Note that ther
1208:../kernel/os_core/os_core.c **** *                       be sufficient space in the destination storage area to receive this string.
1209:../kernel/os_core/os_core.c **** *
1210:../kernel/os_core/os_core.c **** *              psrc     is a pointer to the source string.  The source string MUST NOT be greater t
1211:../kernel/os_core/os_core.c **** *                       254 characters.
1212:../kernel/os_core/os_core.c **** *
1213:../kernel/os_core/os_core.c **** * Returns    : The size of the string (excluding the NUL terminating character)
1214:../kernel/os_core/os_core.c **** *
1215:../kernel/os_core/os_core.c **** * Notes      : 1) This function is INTERNAL to uC/OS-II and your application should not call it.
1216:../kernel/os_core/os_core.c **** ***************************************************************************************************
1217:../kernel/os_core/os_core.c **** */
1218:../kernel/os_core/os_core.c **** 
1219:../kernel/os_core/os_core.c **** #if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_
1220:../kernel/os_core/os_core.c **** INT8U  OS_StrCopy (char *pdest, char *psrc)
1221:../kernel/os_core/os_core.c **** {
 4277              		.loc 1 1221 0
 4278              		.cfi_startproc
 4279              		@ Function supports interworking.
 4280              		@ args = 0, pretend = 0, frame = 16
 4281              		@ frame_needed = 1, uses_anonymous_args = 0
 4282 1458 0DC0A0E1 		mov	ip, sp
 4283              	.LCFI50:
 4284              		.cfi_def_cfa_register 12
 4285 145c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 4286 1460 04B04CE2 		sub	fp, ip, #4
 4287              		.cfi_offset 14, -8
 4288              		.cfi_offset 13, -12
 4289              		.cfi_offset 11, -16
 4290              	.LCFI51:
 4291              		.cfi_def_cfa 11, 4
 4292 1464 10D04DE2 		sub	sp, sp, #16
 4293 1468 18000BE5 		str	r0, [fp, #-24]
 4294 146c 1C100BE5 		str	r1, [fp, #-28]
1222:../kernel/os_core/os_core.c ****     INT8U  len;
1223:../kernel/os_core/os_core.c **** 
1224:../kernel/os_core/os_core.c **** 
1225:../kernel/os_core/os_core.c ****     len = 0;
 4295              		.loc 1 1225 0
 4296 1470 0030A0E3 		mov	r3, #0
 4297 1474 0D304BE5 		strb	r3, [fp, #-13]
1226:../kernel/os_core/os_core.c ****     while (*psrc != OS_ASCII_NUL) {
 4298              		.loc 1 1226 0
 4299 1478 0C0000EA 		b	.L114
 4300              	.L115:
1227:../kernel/os_core/os_core.c ****         *pdest++ = *psrc++;
 4301              		.loc 1 1227 0
 4302 147c 1C301BE5 		ldr	r3, [fp, #-28]
 4303 1480 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4304 1484 18301BE5 		ldr	r3, [fp, #-24]
 4305 1488 0020C3E5 		strb	r2, [r3, #0]
 4306 148c 18301BE5 		ldr	r3, [fp, #-24]
 4307 1490 013083E2 		add	r3, r3, #1
 4308 1494 18300BE5 		str	r3, [fp, #-24]
 4309 1498 1C301BE5 		ldr	r3, [fp, #-28]
 4310 149c 013083E2 		add	r3, r3, #1
 4311 14a0 1C300BE5 		str	r3, [fp, #-28]
1228:../kernel/os_core/os_core.c ****         len++;
 4312              		.loc 1 1228 0
 4313 14a4 0D305BE5 		ldrb	r3, [fp, #-13]
 4314 14a8 013083E2 		add	r3, r3, #1
 4315 14ac 0D304BE5 		strb	r3, [fp, #-13]
 4316              	.L114:
1226:../kernel/os_core/os_core.c ****     while (*psrc != OS_ASCII_NUL) {
 4317              		.loc 1 1226 0 discriminator 1
 4318 14b0 1C301BE5 		ldr	r3, [fp, #-28]
 4319 14b4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4320 14b8 000053E3 		cmp	r3, #0
 4321 14bc EEFFFF1A 		bne	.L115
1229:../kernel/os_core/os_core.c ****     }
1230:../kernel/os_core/os_core.c ****     *pdest = OS_ASCII_NUL;
 4322              		.loc 1 1230 0
 4323 14c0 18301BE5 		ldr	r3, [fp, #-24]
 4324 14c4 0020A0E3 		mov	r2, #0
 4325 14c8 0020C3E5 		strb	r2, [r3, #0]
1231:../kernel/os_core/os_core.c ****     return (len);
 4326              		.loc 1 1231 0
 4327 14cc 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
1232:../kernel/os_core/os_core.c **** }
 4328              		.loc 1 1232 0
 4329 14d0 0300A0E1 		mov	r0, r3
 4330 14d4 0CD04BE2 		sub	sp, fp, #12
 4331 14d8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 4332 14dc 1EFF2FE1 		bx	lr
 4333              		.cfi_endproc
 4334              	.LFE25:
 4336              		.align	2
 4337              		.global	OS_StrLen
 4339              	OS_StrLen:
 4340              	.LFB26:
1233:../kernel/os_core/os_core.c **** #endif
1234:../kernel/os_core/os_core.c **** /*$PAGE*/
1235:../kernel/os_core/os_core.c **** /*
1236:../kernel/os_core/os_core.c **** ***************************************************************************************************
1237:../kernel/os_core/os_core.c **** *                                DETERMINE THE LENGTH OF AN ASCII STRING
1238:../kernel/os_core/os_core.c **** *
1239:../kernel/os_core/os_core.c **** * Description: This function is called by other uC/OS-II services to determine the size of an ASCII
1240:../kernel/os_core/os_core.c **** *              (excluding the NUL character).
1241:../kernel/os_core/os_core.c **** *
1242:../kernel/os_core/os_core.c **** * Arguments  : psrc     is a pointer to the string for which we need to know the size.
1243:../kernel/os_core/os_core.c **** *
1244:../kernel/os_core/os_core.c **** * Returns    : The size of the string (excluding the NUL terminating character)
1245:../kernel/os_core/os_core.c **** *
1246:../kernel/os_core/os_core.c **** * Notes      : 1) This function is INTERNAL to uC/OS-II and your application should not call it.
1247:../kernel/os_core/os_core.c **** *              2) The string to check must be less than 255 characters long.
1248:../kernel/os_core/os_core.c **** ***************************************************************************************************
1249:../kernel/os_core/os_core.c **** */
1250:../kernel/os_core/os_core.c **** 
1251:../kernel/os_core/os_core.c **** #if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_
1252:../kernel/os_core/os_core.c **** INT8U  OS_StrLen (char *psrc)
1253:../kernel/os_core/os_core.c **** {
 4341              		.loc 1 1253 0
 4342              		.cfi_startproc
 4343              		@ Function supports interworking.
 4344              		@ args = 0, pretend = 0, frame = 16
 4345              		@ frame_needed = 1, uses_anonymous_args = 0
 4346 14e0 0DC0A0E1 		mov	ip, sp
 4347              	.LCFI52:
 4348              		.cfi_def_cfa_register 12
 4349 14e4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 4350 14e8 04B04CE2 		sub	fp, ip, #4
 4351              		.cfi_offset 14, -8
 4352              		.cfi_offset 13, -12
 4353              		.cfi_offset 11, -16
 4354              	.LCFI53:
 4355              		.cfi_def_cfa 11, 4
 4356 14ec 10D04DE2 		sub	sp, sp, #16
 4357 14f0 18000BE5 		str	r0, [fp, #-24]
1254:../kernel/os_core/os_core.c ****     INT8U  len;
1255:../kernel/os_core/os_core.c **** 
1256:../kernel/os_core/os_core.c **** 
1257:../kernel/os_core/os_core.c ****     len = 0;
 4358              		.loc 1 1257 0
 4359 14f4 0030A0E3 		mov	r3, #0
 4360 14f8 0D304BE5 		strb	r3, [fp, #-13]
1258:../kernel/os_core/os_core.c ****     while (*psrc != OS_ASCII_NUL) {
 4361              		.loc 1 1258 0
 4362 14fc 050000EA 		b	.L117
 4363              	.L118:
1259:../kernel/os_core/os_core.c ****         psrc++;
 4364              		.loc 1 1259 0
 4365 1500 18301BE5 		ldr	r3, [fp, #-24]
 4366 1504 013083E2 		add	r3, r3, #1
 4367 1508 18300BE5 		str	r3, [fp, #-24]
1260:../kernel/os_core/os_core.c ****         len++;
 4368              		.loc 1 1260 0
 4369 150c 0D305BE5 		ldrb	r3, [fp, #-13]
 4370 1510 013083E2 		add	r3, r3, #1
 4371 1514 0D304BE5 		strb	r3, [fp, #-13]
 4372              	.L117:
1258:../kernel/os_core/os_core.c ****     while (*psrc != OS_ASCII_NUL) {
 4373              		.loc 1 1258 0 discriminator 1
 4374 1518 18301BE5 		ldr	r3, [fp, #-24]
 4375 151c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4376 1520 000053E3 		cmp	r3, #0
 4377 1524 F5FFFF1A 		bne	.L118
1261:../kernel/os_core/os_core.c ****     }
1262:../kernel/os_core/os_core.c ****     return (len);
 4378              		.loc 1 1262 0
 4379 1528 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
1263:../kernel/os_core/os_core.c **** }
 4380              		.loc 1 1263 0
 4381 152c 0300A0E1 		mov	r0, r3
 4382 1530 0CD04BE2 		sub	sp, fp, #12
 4383 1534 00689DE8 		ldmfd	sp, {fp, sp, lr}
 4384 1538 1EFF2FE1 		bx	lr
 4385              		.cfi_endproc
 4386              	.LFE26:
 4388              		.align	2
 4389              		.global	OS_TaskIdle
 4391              	OS_TaskIdle:
 4392              	.LFB27:
1264:../kernel/os_core/os_core.c **** #endif
1265:../kernel/os_core/os_core.c **** /*$PAGE*/
1266:../kernel/os_core/os_core.c **** /*
1267:../kernel/os_core/os_core.c **** ***************************************************************************************************
1268:../kernel/os_core/os_core.c **** *                                              IDLE TASK
1269:../kernel/os_core/os_core.c **** *
1270:../kernel/os_core/os_core.c **** * Description: This task is internal to uC/OS-II and executes whenever no other higher priority tas
1271:../kernel/os_core/os_core.c **** *              executes because they are ALL waiting for event(s) to occur.
1272:../kernel/os_core/os_core.c **** *
1273:../kernel/os_core/os_core.c **** * Arguments  : none
1274:../kernel/os_core/os_core.c **** *
1275:../kernel/os_core/os_core.c **** * Returns    : none
1276:../kernel/os_core/os_core.c **** *
1277:../kernel/os_core/os_core.c **** * Note(s)    : 1) OSTaskIdleHook() is called after the critical section to ensure that interrupts w
1278:../kernel/os_core/os_core.c **** *                 enabled for at least a few instructions.  On some processors (ex. Philips XA), en
1279:../kernel/os_core/os_core.c **** *                 and then disabling interrupts didn't allow the processor enough time to have inte
1280:../kernel/os_core/os_core.c **** *                 enabled before they were disabled again.  uC/OS-II would thus never recognize
1281:../kernel/os_core/os_core.c **** *                 interrupts.
1282:../kernel/os_core/os_core.c **** *              2) This hook has been added to allow you to do such things as STOP the CPU to conser
1283:../kernel/os_core/os_core.c **** *                 power.
1284:../kernel/os_core/os_core.c **** ***************************************************************************************************
1285:../kernel/os_core/os_core.c **** */
1286:../kernel/os_core/os_core.c **** 
1287:../kernel/os_core/os_core.c **** void  OS_TaskIdle (void *parg)
1288:../kernel/os_core/os_core.c **** {
 4393              		.loc 1 1288 0
 4394              		.cfi_startproc
 4395              		@ Function supports interworking.
 4396              		@ args = 0, pretend = 0, frame = 8
 4397              		@ frame_needed = 1, uses_anonymous_args = 0
 4398 153c 0DC0A0E1 		mov	ip, sp
 4399              	.LCFI54:
 4400              		.cfi_def_cfa_register 12
 4401 1540 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 4402 1544 04B04CE2 		sub	fp, ip, #4
 4403              		.cfi_offset 14, -8
 4404              		.cfi_offset 13, -12
 4405              		.cfi_offset 11, -16
 4406              	.LCFI55:
 4407              		.cfi_def_cfa 11, 4
 4408 1548 08D04DE2 		sub	sp, sp, #8
 4409 154c 10000BE5 		str	r0, [fp, #-16]
 4410              	.L120:
1289:../kernel/os_core/os_core.c **** #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register       
1290:../kernel/os_core/os_core.c ****     OS_CPU_SR  cpu_sr;
1291:../kernel/os_core/os_core.c ****     
1292:../kernel/os_core/os_core.c ****     
1293:../kernel/os_core/os_core.c **** 
1294:../kernel/os_core/os_core.c ****     cpu_sr = 0;                                  /* Prevent compiler warning                       
1295:../kernel/os_core/os_core.c **** #endif    
1296:../kernel/os_core/os_core.c ****     parg   = parg;                               /* Prevent compiler warning for not using 'parg'  
1297:../kernel/os_core/os_core.c ****     for (;;) {
1298:../kernel/os_core/os_core.c ****         OS_ENTER_CRITICAL();
 4411              		.loc 1 1298 0 discriminator 1
 4412              	@ 1298 "../kernel/os_core/os_core.c" 1
 4413 1550 00000FE1 		mrs   r0, cpsr
 4414              	@ 0 "" 2
 4415              	@ 1298 "../kernel/os_core/os_core.c" 1
 4416 1554 04002DE5 		stmfd sp!, {r0}
 4417              	@ 0 "" 2
 4418              	@ 1298 "../kernel/os_core/os_core.c" 1
 4419 1558 C00080E3 		orr   r0, r0, #0b11000000
 4420              	@ 0 "" 2
 4421              	@ 1298 "../kernel/os_core/os_core.c" 1
 4422 155c 00F021E1 		msr   cpsr_c, r0
 4423              	@ 0 "" 2
1299:../kernel/os_core/os_core.c ****         OSIdleCtr++;
 4424              		.loc 1 1299 0 discriminator 1
 4425 1560 1C309FE5 		ldr	r3, .L121
 4426 1564 003093E5 		ldr	r3, [r3, #0]
 4427 1568 012083E2 		add	r2, r3, #1
 4428 156c 10309FE5 		ldr	r3, .L121
 4429 1570 002083E5 		str	r2, [r3, #0]
1300:../kernel/os_core/os_core.c ****         OS_EXIT_CRITICAL();
 4430              		.loc 1 1300 0 discriminator 1
 4431              	@ 1300 "../kernel/os_core/os_core.c" 1
 4432 1574 04009DE4 		ldmfd sp!, {r0}
 4433              	@ 0 "" 2
 4434              	@ 1300 "../kernel/os_core/os_core.c" 1
 4435 1578 00F021E1 		msr   cpsr_c, r0
 4436              	@ 0 "" 2
1301:../kernel/os_core/os_core.c ****         OSTaskIdleHook();                        /* Call user definable HOOK                       
 4437              		.loc 1 1301 0 discriminator 1
 4438 157c FEFFFFEB 		bl	OSTaskIdleHook
1302:../kernel/os_core/os_core.c ****     }
 4439              		.loc 1 1302 0 discriminator 1
 4440 1580 F2FFFFEA 		b	.L120
 4441              	.L122:
 4442              		.align	2
 4443              	.L121:
 4444 1584 00000000 		.word	OSIdleCtr
 4445              		.cfi_endproc
 4446              	.LFE27:
 4448              		.global	__aeabi_uidiv
 4449              		.align	2
 4450              		.global	OS_TaskStat
 4452              	OS_TaskStat:
 4453              	.LFB28:
1303:../kernel/os_core/os_core.c **** }
1304:../kernel/os_core/os_core.c **** /*$PAGE*/
1305:../kernel/os_core/os_core.c **** /*
1306:../kernel/os_core/os_core.c **** ***************************************************************************************************
1307:../kernel/os_core/os_core.c **** *                                            STATISTICS TASK
1308:../kernel/os_core/os_core.c **** *
1309:../kernel/os_core/os_core.c **** * Description: This task is internal to uC/OS-II and is used to compute some statistics about the
1310:../kernel/os_core/os_core.c **** *              multitasking environment.  Specifically, OS_TaskStat() computes the CPU usage.
1311:../kernel/os_core/os_core.c **** *              CPU usage is determined by:
1312:../kernel/os_core/os_core.c **** *
1313:../kernel/os_core/os_core.c **** *                                          OSIdleCtr
1314:../kernel/os_core/os_core.c **** *                 OSCPUUsage = 100 * (1 - ------------)     (units are in %)
1315:../kernel/os_core/os_core.c **** *                                         OSIdleCtrMax
1316:../kernel/os_core/os_core.c **** *
1317:../kernel/os_core/os_core.c **** * Arguments  : parg     this pointer is not used at this time.
1318:../kernel/os_core/os_core.c **** *
1319:../kernel/os_core/os_core.c **** * Returns    : none
1320:../kernel/os_core/os_core.c **** *
1321:../kernel/os_core/os_core.c **** * Notes      : 1) This task runs at a priority level higher than the idle task.  In fact, it runs a
1322:../kernel/os_core/os_core.c **** *                 next higher priority, OS_IDLE_PRIO-1.
1323:../kernel/os_core/os_core.c **** *              2) You can disable this task by setting the configuration #define OS_TASK_STAT_EN to
1324:../kernel/os_core/os_core.c **** *              3) You MUST have at least a delay of 2/10 seconds to allow for the system to establi
1325:../kernel/os_core/os_core.c **** *                 maximum value for the idle counter.
1326:../kernel/os_core/os_core.c **** ***************************************************************************************************
1327:../kernel/os_core/os_core.c **** */
1328:../kernel/os_core/os_core.c **** 
1329:../kernel/os_core/os_core.c **** #if OS_TASK_STAT_EN > 0
1330:../kernel/os_core/os_core.c **** void  OS_TaskStat (void *parg)
1331:../kernel/os_core/os_core.c **** {
 4454              		.loc 1 1331 0
 4455              		.cfi_startproc
 4456              		@ Function supports interworking.
 4457              		@ args = 0, pretend = 0, frame = 24
 4458              		@ frame_needed = 1, uses_anonymous_args = 0
 4459 1588 0DC0A0E1 		mov	ip, sp
 4460              	.LCFI56:
 4461              		.cfi_def_cfa_register 12
 4462 158c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 4463 1590 04B04CE2 		sub	fp, ip, #4
 4464              		.cfi_offset 14, -8
 4465              		.cfi_offset 13, -12
 4466              		.cfi_offset 11, -16
 4467              	.LCFI57:
 4468              		.cfi_def_cfa 11, 4
 4469 1594 18D04DE2 		sub	sp, sp, #24
 4470 1598 20000BE5 		str	r0, [fp, #-32]
1332:../kernel/os_core/os_core.c ****     INT32U     run;
1333:../kernel/os_core/os_core.c ****     INT32U     max;
1334:../kernel/os_core/os_core.c ****     INT8S      usage;
1335:../kernel/os_core/os_core.c **** #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register       
1336:../kernel/os_core/os_core.c ****     OS_CPU_SR  cpu_sr;
1337:../kernel/os_core/os_core.c **** 
1338:../kernel/os_core/os_core.c **** 
1339:../kernel/os_core/os_core.c **** 
1340:../kernel/os_core/os_core.c ****     cpu_sr = 0;                                  /* Prevent compiler warning                       
1341:../kernel/os_core/os_core.c **** #endif    
1342:../kernel/os_core/os_core.c ****     parg   = parg;                               /* Prevent compiler warning for not using 'parg'  
1343:../kernel/os_core/os_core.c ****     while (OSStatRdy == FALSE) {
 4471              		.loc 1 1343 0
 4472 159c 010000EA 		b	.L124
 4473              	.L125:
1344:../kernel/os_core/os_core.c ****         OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready             
 4474              		.loc 1 1344 0
 4475 15a0 1400A0E3 		mov	r0, #20
 4476 15a4 FEFFFFEB 		bl	OSTimeDly
 4477              	.L124:
1343:../kernel/os_core/os_core.c ****     while (OSStatRdy == FALSE) {
 4478              		.loc 1 1343 0 discriminator 1
 4479 15a8 F0309FE5 		ldr	r3, .L130
 4480 15ac 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4481 15b0 000053E3 		cmp	r3, #0
 4482 15b4 F9FFFF0A 		beq	.L125
1345:../kernel/os_core/os_core.c ****     }
1346:../kernel/os_core/os_core.c ****     max = OSIdleCtrMax / 100L;
 4483              		.loc 1 1346 0
 4484 15b8 E4309FE5 		ldr	r3, .L130+4
 4485 15bc 002093E5 		ldr	r2, [r3, #0]
 4486 15c0 E0309FE5 		ldr	r3, .L130+8
 4487 15c4 921383E0 		umull	r1, r3, r2, r3
 4488 15c8 A332A0E1 		mov	r3, r3, lsr #5
 4489 15cc 10300BE5 		str	r3, [fp, #-16]
 4490              	.L129:
1347:../kernel/os_core/os_core.c ****     for (;;) {
1348:../kernel/os_core/os_core.c ****         OS_ENTER_CRITICAL();
 4491              		.loc 1 1348 0
 4492              	@ 1348 "../kernel/os_core/os_core.c" 1
 4493 15d0 00000FE1 		mrs   r0, cpsr
 4494              	@ 0 "" 2
 4495              	@ 1348 "../kernel/os_core/os_core.c" 1
 4496 15d4 04002DE5 		stmfd sp!, {r0}
 4497              	@ 0 "" 2
 4498              	@ 1348 "../kernel/os_core/os_core.c" 1
 4499 15d8 C00080E3 		orr   r0, r0, #0b11000000
 4500              	@ 0 "" 2
 4501              	@ 1348 "../kernel/os_core/os_core.c" 1
 4502 15dc 00F021E1 		msr   cpsr_c, r0
 4503              	@ 0 "" 2
1349:../kernel/os_core/os_core.c ****         OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past sec
 4504              		.loc 1 1349 0
 4505 15e0 C4309FE5 		ldr	r3, .L130+12
 4506 15e4 002093E5 		ldr	r2, [r3, #0]
 4507 15e8 C0309FE5 		ldr	r3, .L130+16
 4508 15ec 002083E5 		str	r2, [r3, #0]
1350:../kernel/os_core/os_core.c ****         run          = OSIdleCtr;
 4509              		.loc 1 1350 0
 4510 15f0 B4309FE5 		ldr	r3, .L130+12
 4511 15f4 003093E5 		ldr	r3, [r3, #0]
 4512 15f8 14300BE5 		str	r3, [fp, #-20]
1351:../kernel/os_core/os_core.c ****         OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second     
 4513              		.loc 1 1351 0
 4514 15fc A8309FE5 		ldr	r3, .L130+12
 4515 1600 0020A0E3 		mov	r2, #0
 4516 1604 002083E5 		str	r2, [r3, #0]
1352:../kernel/os_core/os_core.c ****         OS_EXIT_CRITICAL();
 4517              		.loc 1 1352 0
 4518              	@ 1352 "../kernel/os_core/os_core.c" 1
 4519 1608 04009DE4 		ldmfd sp!, {r0}
 4520              	@ 0 "" 2
 4521              	@ 1352 "../kernel/os_core/os_core.c" 1
 4522 160c 00F021E1 		msr   cpsr_c, r0
 4523              	@ 0 "" 2
1353:../kernel/os_core/os_core.c ****         if (max > 0L) {
 4524              		.loc 1 1353 0
 4525 1610 10301BE5 		ldr	r3, [fp, #-16]
 4526 1614 000053E3 		cmp	r3, #0
 4527 1618 1200000A 		beq	.L126
1354:../kernel/os_core/os_core.c ****             usage = (INT8S)(100L - run / max);
 4528              		.loc 1 1354 0
 4529 161c 14001BE5 		ldr	r0, [fp, #-20]
 4530 1620 10101BE5 		ldr	r1, [fp, #-16]
 4531 1624 FEFFFFEB 		bl	__aeabi_uidiv
 4532 1628 0030A0E1 		mov	r3, r0
 4533 162c FF3003E2 		and	r3, r3, #255
 4534 1630 643063E2 		rsb	r3, r3, #100
 4535 1634 FF3003E2 		and	r3, r3, #255
 4536 1638 15304BE5 		strb	r3, [fp, #-21]
1355:../kernel/os_core/os_core.c ****             if (usage >= 0) {                    /* Make sure we don't have a negative percentage  
 4537              		.loc 1 1355 0
 4538 163c D5315BE1 		ldrsb	r3, [fp, #-21]
 4539 1640 000053E3 		cmp	r3, #0
 4540 1644 030000BA 		blt	.L127
1356:../kernel/os_core/os_core.c ****                 OSCPUUsage = usage;
 4541              		.loc 1 1356 0
 4542 1648 64309FE5 		ldr	r3, .L130+20
 4543 164c 15205BE5 		ldrb	r2, [fp, #-21]
 4544 1650 0020C3E5 		strb	r2, [r3, #0]
 4545 1654 0C0000EA 		b	.L128
 4546              	.L127:
1357:../kernel/os_core/os_core.c ****             } else {
1358:../kernel/os_core/os_core.c ****                 OSCPUUsage = 0;
 4547              		.loc 1 1358 0
 4548 1658 54309FE5 		ldr	r3, .L130+20
 4549 165c 0020A0E3 		mov	r2, #0
 4550 1660 0020C3E5 		strb	r2, [r3, #0]
 4551 1664 080000EA 		b	.L128
 4552              	.L126:
1359:../kernel/os_core/os_core.c ****             }
1360:../kernel/os_core/os_core.c ****         } else {
1361:../kernel/os_core/os_core.c ****             OSCPUUsage = 0;
 4553              		.loc 1 1361 0
 4554 1668 44309FE5 		ldr	r3, .L130+20
 4555 166c 0020A0E3 		mov	r2, #0
 4556 1670 0020C3E5 		strb	r2, [r3, #0]
1362:../kernel/os_core/os_core.c ****             max        = OSIdleCtrMax / 100L;
 4557              		.loc 1 1362 0
 4558 1674 28309FE5 		ldr	r3, .L130+4
 4559 1678 002093E5 		ldr	r2, [r3, #0]
 4560 167c 24309FE5 		ldr	r3, .L130+8
 4561 1680 921383E0 		umull	r1, r3, r2, r3
 4562 1684 A332A0E1 		mov	r3, r3, lsr #5
 4563 1688 10300BE5 		str	r3, [fp, #-16]
 4564              	.L128:
1363:../kernel/os_core/os_core.c ****         }
1364:../kernel/os_core/os_core.c ****         OSTaskStatHook();                        /* Invoke user definable hook                     
 4565              		.loc 1 1364 0
 4566 168c FEFFFFEB 		bl	OSTaskStatHook
1365:../kernel/os_core/os_core.c **** #if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
1366:../kernel/os_core/os_core.c ****         OS_TaskStatStkChk();                     /* Check the stacks for each task                 
 4567              		.loc 1 1366 0
 4568 1690 FEFFFFEB 		bl	OS_TaskStatStkChk
1367:../kernel/os_core/os_core.c **** #endif
1368:../kernel/os_core/os_core.c ****         OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second  
 4569              		.loc 1 1368 0
 4570 1694 0A00A0E3 		mov	r0, #10
 4571 1698 FEFFFFEB 		bl	OSTimeDly
1369:../kernel/os_core/os_core.c ****     }
 4572              		.loc 1 1369 0
 4573 169c CBFFFFEA 		b	.L129
 4574              	.L131:
 4575              		.align	2
 4576              	.L130:
 4577 16a0 00000000 		.word	OSStatRdy
 4578 16a4 00000000 		.word	OSIdleCtrMax
 4579 16a8 1F85EB51 		.word	1374389535
 4580 16ac 00000000 		.word	OSIdleCtr
 4581 16b0 00000000 		.word	OSIdleCtrRun
 4582 16b4 00000000 		.word	OSCPUUsage
 4583              		.cfi_endproc
 4584              	.LFE28:
 4586              		.align	2
 4587              		.global	OS_TaskStatStkChk
 4589              	OS_TaskStatStkChk:
 4590              	.LFB29:
1370:../kernel/os_core/os_core.c **** }
1371:../kernel/os_core/os_core.c **** #endif
1372:../kernel/os_core/os_core.c **** /*$PAGE*/
1373:../kernel/os_core/os_core.c **** /*
1374:../kernel/os_core/os_core.c **** ***************************************************************************************************
1375:../kernel/os_core/os_core.c **** *                                      CHECK ALL TASK STACKS
1376:../kernel/os_core/os_core.c **** *
1377:../kernel/os_core/os_core.c **** * Description: This function is called by OS_TaskStat() to check the stacks of each active task.
1378:../kernel/os_core/os_core.c **** *
1379:../kernel/os_core/os_core.c **** * Arguments  : none
1380:../kernel/os_core/os_core.c **** *
1381:../kernel/os_core/os_core.c **** * Returns    : none
1382:../kernel/os_core/os_core.c **** ***************************************************************************************************
1383:../kernel/os_core/os_core.c **** */
1384:../kernel/os_core/os_core.c **** 
1385:../kernel/os_core/os_core.c **** #if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
1386:../kernel/os_core/os_core.c **** void  OS_TaskStatStkChk (void)
1387:../kernel/os_core/os_core.c **** {
 4591              		.loc 1 1387 0
 4592              		.cfi_startproc
 4593              		@ Function supports interworking.
 4594              		@ args = 0, pretend = 0, frame = 16
 4595              		@ frame_needed = 1, uses_anonymous_args = 0
 4596 16b8 0DC0A0E1 		mov	ip, sp
 4597              	.LCFI58:
 4598              		.cfi_def_cfa_register 12
 4599 16bc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 4600 16c0 04B04CE2 		sub	fp, ip, #4
 4601              		.cfi_offset 14, -8
 4602              		.cfi_offset 13, -12
 4603              		.cfi_offset 11, -16
 4604              	.LCFI59:
 4605              		.cfi_def_cfa 11, 4
 4606 16c4 10D04DE2 		sub	sp, sp, #16
1388:../kernel/os_core/os_core.c ****     OS_TCB      *ptcb;
1389:../kernel/os_core/os_core.c ****     OS_STK_DATA  stk_data;
1390:../kernel/os_core/os_core.c ****     INT8U        err;
1391:../kernel/os_core/os_core.c ****     INT8U        prio;
1392:../kernel/os_core/os_core.c **** 
1393:../kernel/os_core/os_core.c **** 
1394:../kernel/os_core/os_core.c ****     for (prio = 0; prio <= OS_IDLE_PRIO; prio++) {
 4607              		.loc 1 1394 0
 4608 16c8 0030A0E3 		mov	r3, #0
 4609 16cc 0D304BE5 		strb	r3, [fp, #-13]
 4610 16d0 210000EA 		b	.L133
 4611              	.L135:
1395:../kernel/os_core/os_core.c ****         err = OSTaskStkChk(prio, &stk_data);
 4612              		.loc 1 1395 0
 4613 16d4 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 4614 16d8 1C304BE2 		sub	r3, fp, #28
 4615 16dc 0200A0E1 		mov	r0, r2
 4616 16e0 0310A0E1 		mov	r1, r3
 4617 16e4 FEFFFFEB 		bl	OSTaskStkChk
 4618 16e8 0030A0E1 		mov	r3, r0
 4619 16ec 0E304BE5 		strb	r3, [fp, #-14]
1396:../kernel/os_core/os_core.c ****         if (err == OS_NO_ERR) {
 4620              		.loc 1 1396 0
 4621 16f0 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 4622 16f4 000053E3 		cmp	r3, #0
 4623 16f8 1400001A 		bne	.L134
1397:../kernel/os_core/os_core.c ****             ptcb = OSTCBPrioTbl[prio];
 4624              		.loc 1 1397 0
 4625 16fc 0D205BE5 		ldrb	r2, [fp, #-13]	@ zero_extendqisi2
 4626 1700 6C309FE5 		ldr	r3, .L136
 4627 1704 023193E7 		ldr	r3, [r3, r2, asl #2]
 4628 1708 14300BE5 		str	r3, [fp, #-20]
1398:../kernel/os_core/os_core.c ****             if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ..
 4629              		.loc 1 1398 0
 4630 170c 14301BE5 		ldr	r3, [fp, #-20]
 4631 1710 000053E3 		cmp	r3, #0
 4632 1714 0D00000A 		beq	.L134
1399:../kernel/os_core/os_core.c ****                 if (ptcb != (OS_TCB *)1) {                           /* ... still valid.           
 4633              		.loc 1 1399 0
 4634 1718 14301BE5 		ldr	r3, [fp, #-20]
 4635 171c 010053E3 		cmp	r3, #1
 4636 1720 0A00000A 		beq	.L134
1400:../kernel/os_core/os_core.c **** #if OS_TASK_PROFILE_EN > 0
1401:../kernel/os_core/os_core.c ****                     #if OS_STK_GROWTH == 1
1402:../kernel/os_core/os_core.c ****                     ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 4637              		.loc 1 1402 0
 4638 1724 14301BE5 		ldr	r3, [fp, #-20]
 4639 1728 082093E5 		ldr	r2, [r3, #8]
 4640 172c 14301BE5 		ldr	r3, [fp, #-20]
 4641 1730 0C3093E5 		ldr	r3, [r3, #12]
 4642 1734 0331A0E1 		mov	r3, r3, asl #2
 4643 1738 032082E0 		add	r2, r2, r3
 4644 173c 14301BE5 		ldr	r3, [fp, #-20]
 4645 1740 402083E5 		str	r2, [r3, #64]
1403:../kernel/os_core/os_core.c ****                     #else
1404:../kernel/os_core/os_core.c ****                     ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
1405:../kernel/os_core/os_core.c ****                     #endif
1406:../kernel/os_core/os_core.c ****                     ptcb->OSTCBStkUsed = (INT32U)stk_data.OSUsed;    /* Store the number of bytes u
 4646              		.loc 1 1406 0
 4647 1744 18201BE5 		ldr	r2, [fp, #-24]
 4648 1748 14301BE5 		ldr	r3, [fp, #-20]
 4649 174c 442083E5 		str	r2, [r3, #68]
 4650              	.L134:
1394:../kernel/os_core/os_core.c ****     for (prio = 0; prio <= OS_IDLE_PRIO; prio++) {
 4651              		.loc 1 1394 0
 4652 1750 0D305BE5 		ldrb	r3, [fp, #-13]
 4653 1754 013083E2 		add	r3, r3, #1
 4654 1758 0D304BE5 		strb	r3, [fp, #-13]
 4655              	.L133:
1394:../kernel/os_core/os_core.c ****     for (prio = 0; prio <= OS_IDLE_PRIO; prio++) {
 4656              		.loc 1 1394 0 is_stmt 0 discriminator 1
 4657 175c 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 4658 1760 3F0053E3 		cmp	r3, #63
 4659 1764 DAFFFF9A 		bls	.L135
1407:../kernel/os_core/os_core.c **** #endif
1408:../kernel/os_core/os_core.c ****                 }
1409:../kernel/os_core/os_core.c ****             }
1410:../kernel/os_core/os_core.c ****         }
1411:../kernel/os_core/os_core.c ****     }
1412:../kernel/os_core/os_core.c **** }
 4660              		.loc 1 1412 0 is_stmt 1
 4661 1768 0CD04BE2 		sub	sp, fp, #12
 4662 176c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 4663 1770 1EFF2FE1 		bx	lr
 4664              	.L137:
 4665              		.align	2
 4666              	.L136:
 4667 1774 00000000 		.word	OSTCBPrioTbl
 4668              		.cfi_endproc
 4669              	.LFE29:
 4671              		.align	2
 4672              		.global	OS_TCBInit
 4674              	OS_TCBInit:
 4675              	.LFB30:
1413:../kernel/os_core/os_core.c **** #endif
1414:../kernel/os_core/os_core.c **** /*$PAGE*/
1415:../kernel/os_core/os_core.c **** /*
1416:../kernel/os_core/os_core.c **** ***************************************************************************************************
1417:../kernel/os_core/os_core.c **** *                                            INITIALIZE TCB
1418:../kernel/os_core/os_core.c **** *
1419:../kernel/os_core/os_core.c **** * Description: This function is internal to uC/OS-II and is used to initialize a Task Control Block
1420:../kernel/os_core/os_core.c **** *              a task is created (see OSTaskCreate() and OSTaskCreateExt()).
1421:../kernel/os_core/os_core.c **** *
1422:../kernel/os_core/os_core.c **** * Arguments  : prio          is the priority of the task being created
1423:../kernel/os_core/os_core.c **** *
1424:../kernel/os_core/os_core.c **** *              ptos          is a pointer to the task's top-of-stack assuming that the CPU register
1425:../kernel/os_core/os_core.c **** *                            have been placed on the stack.  Note that the top-of-stack corresponds
1426:../kernel/os_core/os_core.c **** *                            'high' memory location is OS_STK_GROWTH is set to 1 and a 'low' memory
1427:../kernel/os_core/os_core.c **** *                            location if OS_STK_GROWTH is set to 0.  Note that stack growth is CPU
1428:../kernel/os_core/os_core.c **** *                            specific.
1429:../kernel/os_core/os_core.c **** *
1430:../kernel/os_core/os_core.c **** *              pbos          is a pointer to the bottom of stack.  A NULL pointer is passed if call
1431:../kernel/os_core/os_core.c **** *                            'OSTaskCreate()'.
1432:../kernel/os_core/os_core.c **** *
1433:../kernel/os_core/os_core.c **** *              id            is the task's ID (0..65535)
1434:../kernel/os_core/os_core.c **** *
1435:../kernel/os_core/os_core.c **** *              stk_size      is the size of the stack (in 'stack units').  If the stack units are I
1436:../kernel/os_core/os_core.c **** *                            then, 'stk_size' contains the number of bytes for the stack.  If the s
1437:../kernel/os_core/os_core.c **** *                            units are INT32Us then, the stack contains '4 * stk_size' bytes.  The 
1438:../kernel/os_core/os_core.c **** *                            units are established by the #define constant OS_STK which is CPU
1439:../kernel/os_core/os_core.c **** *                            specific.  'stk_size' is 0 if called by 'OSTaskCreate()'.
1440:../kernel/os_core/os_core.c **** *
1441:../kernel/os_core/os_core.c **** *              pext          is a pointer to a user supplied memory area that is used to extend the
1442:../kernel/os_core/os_core.c **** *                            control block.  This allows you to store the contents of floating-poin
1443:../kernel/os_core/os_core.c **** *                            registers, MMU registers or anything else you could find useful during
1444:../kernel/os_core/os_core.c **** *                            context switch.  You can even assign a name to each task and store thi
1445:../kernel/os_core/os_core.c **** *                            in this TCB extension.  A NULL pointer is passed if called by OSTaskCr
1446:../kernel/os_core/os_core.c **** *
1447:../kernel/os_core/os_core.c **** *              opt           options as passed to 'OSTaskCreateExt()' or,
1448:../kernel/os_core/os_core.c **** *                            0 if called from 'OSTaskCreate()'.
1449:../kernel/os_core/os_core.c **** *
1450:../kernel/os_core/os_core.c **** * Returns    : OS_NO_ERR         if the call was successful
1451:../kernel/os_core/os_core.c **** *              OS_NO_MORE_TCB    if there are no more free TCBs to be allocated and thus, the task 
1452:../kernel/os_core/os_core.c **** *                                be created.
1453:../kernel/os_core/os_core.c **** *
1454:../kernel/os_core/os_core.c **** * Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
1455:../kernel/os_core/os_core.c **** ***************************************************************************************************
1456:../kernel/os_core/os_core.c **** */
1457:../kernel/os_core/os_core.c **** 
1458:../kernel/os_core/os_core.c **** INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, 
1459:../kernel/os_core/os_core.c **** {
 4676              		.loc 1 1459 0
 4677              		.cfi_startproc
 4678              		@ Function supports interworking.
 4679              		@ args = 12, pretend = 0, frame = 24
 4680              		@ frame_needed = 1, uses_anonymous_args = 0
 4681 1778 0DC0A0E1 		mov	ip, sp
 4682              	.LCFI60:
 4683              		.cfi_def_cfa_register 12
 4684 177c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 4685 1780 04B04CE2 		sub	fp, ip, #4
 4686              		.cfi_offset 14, -8
 4687              		.cfi_offset 13, -12
 4688              		.cfi_offset 11, -16
 4689              	.LCFI61:
 4690              		.cfi_def_cfa 11, 4
 4691 1784 18D04DE2 		sub	sp, sp, #24
 4692 1788 1C100BE5 		str	r1, [fp, #-28]
 4693 178c 20200BE5 		str	r2, [fp, #-32]
 4694 1790 0020A0E1 		mov	r2, r0
 4695 1794 15204BE5 		strb	r2, [fp, #-21]
 4696 1798 B2324BE1 		strh	r3, [fp, #-34]	@ movhi
1460:../kernel/os_core/os_core.c ****     OS_TCB    *ptcb;
1461:../kernel/os_core/os_core.c **** #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status regis
1462:../kernel/os_core/os_core.c ****     OS_CPU_SR  cpu_sr;
1463:../kernel/os_core/os_core.c **** 
1464:../kernel/os_core/os_core.c **** 
1465:../kernel/os_core/os_core.c **** 
1466:../kernel/os_core/os_core.c ****     cpu_sr = 0;                                            /* Prevent compiler warning             
1467:../kernel/os_core/os_core.c **** #endif    
1468:../kernel/os_core/os_core.c ****     OS_ENTER_CRITICAL();
 4697              		.loc 1 1468 0
 4698              	@ 1468 "../kernel/os_core/os_core.c" 1
 4699 179c 00000FE1 		mrs   r0, cpsr
 4700              	@ 0 "" 2
 4701              	@ 1468 "../kernel/os_core/os_core.c" 1
 4702 17a0 04002DE5 		stmfd sp!, {r0}
 4703              	@ 0 "" 2
 4704              	@ 1468 "../kernel/os_core/os_core.c" 1
 4705 17a4 C00080E3 		orr   r0, r0, #0b11000000
 4706              	@ 0 "" 2
 4707              	@ 1468 "../kernel/os_core/os_core.c" 1
 4708 17a8 00F021E1 		msr   cpsr_c, r0
 4709              	@ 0 "" 2
1469:../kernel/os_core/os_core.c ****     ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list
 4710              		.loc 1 1469 0
 4711 17ac 88329FE5 		ldr	r3, .L142
 4712 17b0 003093E5 		ldr	r3, [r3, #0]
 4713 17b4 10300BE5 		str	r3, [fp, #-16]
1470:../kernel/os_core/os_core.c ****     if (ptcb != (OS_TCB *)0) {
 4714              		.loc 1 1470 0
 4715 17b8 10301BE5 		ldr	r3, [fp, #-16]
 4716 17bc 000053E3 		cmp	r3, #0
 4717 17c0 9600000A 		beq	.L139
1471:../kernel/os_core/os_core.c ****         OSTCBFreeList        = ptcb->OSTCBNext;            /* Update pointer to free TCB list      
 4718              		.loc 1 1471 0
 4719 17c4 10301BE5 		ldr	r3, [fp, #-16]
 4720 17c8 142093E5 		ldr	r2, [r3, #20]
 4721 17cc 68329FE5 		ldr	r3, .L142
 4722 17d0 002083E5 		str	r2, [r3, #0]
1472:../kernel/os_core/os_core.c ****         OS_EXIT_CRITICAL();
 4723              		.loc 1 1472 0
 4724              	@ 1472 "../kernel/os_core/os_core.c" 1
 4725 17d4 04009DE4 		ldmfd sp!, {r0}
 4726              	@ 0 "" 2
 4727              	@ 1472 "../kernel/os_core/os_core.c" 1
 4728 17d8 00F021E1 		msr   cpsr_c, r0
 4729              	@ 0 "" 2
1473:../kernel/os_core/os_core.c ****         ptcb->OSTCBStkPtr    = ptos;                       /* Load Stack pointer in TCB            
 4730              		.loc 1 1473 0
 4731 17dc 10301BE5 		ldr	r3, [fp, #-16]
 4732 17e0 1C201BE5 		ldr	r2, [fp, #-28]
 4733 17e4 002083E5 		str	r2, [r3, #0]
1474:../kernel/os_core/os_core.c ****         ptcb->OSTCBPrio      = prio;                       /* Load task priority into TCB          
 4734              		.loc 1 1474 0
 4735 17e8 10301BE5 		ldr	r3, [fp, #-16]
 4736 17ec 15205BE5 		ldrb	r2, [fp, #-21]
 4737 17f0 2E20C3E5 		strb	r2, [r3, #46]
1475:../kernel/os_core/os_core.c ****         ptcb->OSTCBStat      = OS_STAT_RDY;                /* Task is ready to run                 
 4738              		.loc 1 1475 0
 4739 17f4 10301BE5 		ldr	r3, [fp, #-16]
 4740 17f8 0020A0E3 		mov	r2, #0
 4741 17fc 2C20C3E5 		strb	r2, [r3, #44]
1476:../kernel/os_core/os_core.c ****         ptcb->OSTCBPendTO    = FALSE;                      /* Clear the Pend timeout flag          
 4742              		.loc 1 1476 0
 4743 1800 10301BE5 		ldr	r3, [fp, #-16]
 4744 1804 0020A0E3 		mov	r2, #0
 4745 1808 2D20C3E5 		strb	r2, [r3, #45]
1477:../kernel/os_core/os_core.c ****         ptcb->OSTCBDly       = 0;                          /* Task is not delayed                  
 4746              		.loc 1 1477 0
 4747 180c 10301BE5 		ldr	r3, [fp, #-16]
 4748 1810 0020A0E3 		mov	r2, #0
 4749 1814 BA22C3E1 		strh	r2, [r3, #42]	@ movhi
1478:../kernel/os_core/os_core.c **** 
1479:../kernel/os_core/os_core.c **** #if OS_TASK_CREATE_EXT_EN > 0
1480:../kernel/os_core/os_core.c ****         ptcb->OSTCBExtPtr    = pext;                       /* Store pointer to TCB extension       
 4750              		.loc 1 1480 0
 4751 1818 10301BE5 		ldr	r3, [fp, #-16]
 4752 181c 08209BE5 		ldr	r2, [fp, #8]
 4753 1820 042083E5 		str	r2, [r3, #4]
1481:../kernel/os_core/os_core.c ****         ptcb->OSTCBStkSize   = stk_size;                   /* Store stack size                     
 4754              		.loc 1 1481 0
 4755 1824 10301BE5 		ldr	r3, [fp, #-16]
 4756 1828 04209BE5 		ldr	r2, [fp, #4]
 4757 182c 0C2083E5 		str	r2, [r3, #12]
1482:../kernel/os_core/os_core.c ****         ptcb->OSTCBStkBottom = pbos;                       /* Store pointer to bottom of stack     
 4758              		.loc 1 1482 0
 4759 1830 10301BE5 		ldr	r3, [fp, #-16]
 4760 1834 20201BE5 		ldr	r2, [fp, #-32]
 4761 1838 082083E5 		str	r2, [r3, #8]
1483:../kernel/os_core/os_core.c ****         ptcb->OSTCBOpt       = opt;                        /* Store task options                   
 4762              		.loc 1 1483 0
 4763 183c 10301BE5 		ldr	r3, [fp, #-16]
 4764 1840 BC20DBE1 		ldrh	r2, [fp, #12]	@ movhi
 4765 1844 B021C3E1 		strh	r2, [r3, #16]	@ movhi
1484:../kernel/os_core/os_core.c ****         ptcb->OSTCBId        = id;                         /* Store task ID                        
 4766              		.loc 1 1484 0
 4767 1848 10301BE5 		ldr	r3, [fp, #-16]
 4768 184c B2225BE1 		ldrh	r2, [fp, #-34]	@ movhi
 4769 1850 B221C3E1 		strh	r2, [r3, #18]	@ movhi
1485:../kernel/os_core/os_core.c **** #else
1486:../kernel/os_core/os_core.c ****         pext                 = pext;                       /* Prevent compiler warning if not used 
1487:../kernel/os_core/os_core.c ****         stk_size             = stk_size;
1488:../kernel/os_core/os_core.c ****         pbos                 = pbos;
1489:../kernel/os_core/os_core.c ****         opt                  = opt;
1490:../kernel/os_core/os_core.c ****         id                   = id;
1491:../kernel/os_core/os_core.c **** #endif
1492:../kernel/os_core/os_core.c **** 
1493:../kernel/os_core/os_core.c **** #if OS_TASK_DEL_EN > 0
1494:../kernel/os_core/os_core.c ****         ptcb->OSTCBDelReq    = OS_NO_ERR;
 4770              		.loc 1 1494 0
 4771 1854 10301BE5 		ldr	r3, [fp, #-16]
 4772 1858 0020A0E3 		mov	r2, #0
 4773 185c 3320C3E5 		strb	r2, [r3, #51]
1495:../kernel/os_core/os_core.c **** #endif
1496:../kernel/os_core/os_core.c **** 
1497:../kernel/os_core/os_core.c ****         ptcb->OSTCBY         = (INT8U)(prio >> 3);         /* Pre-compute X, Y, BitX and BitY      
 4774              		.loc 1 1497 0
 4775 1860 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 4776 1864 A331A0E1 		mov	r3, r3, lsr #3
 4777 1868 FF2003E2 		and	r2, r3, #255
 4778 186c 10301BE5 		ldr	r3, [fp, #-16]
 4779 1870 3020C3E5 		strb	r2, [r3, #48]
1498:../kernel/os_core/os_core.c ****         ptcb->OSTCBBitY      = OSMapTbl[ptcb->OSTCBY];
 4780              		.loc 1 1498 0
 4781 1874 10301BE5 		ldr	r3, [fp, #-16]
 4782 1878 3030D3E5 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 4783 187c BC219FE5 		ldr	r2, .L142+4
 4784 1880 0320D2E7 		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 4785 1884 10301BE5 		ldr	r3, [fp, #-16]
 4786 1888 3220C3E5 		strb	r2, [r3, #50]
1499:../kernel/os_core/os_core.c ****         ptcb->OSTCBX         = (INT8U)(prio & 0x07);
 4787              		.loc 1 1499 0
 4788 188c 15305BE5 		ldrb	r3, [fp, #-21]
 4789 1890 073003E2 		and	r3, r3, #7
 4790 1894 FF2003E2 		and	r2, r3, #255
 4791 1898 10301BE5 		ldr	r3, [fp, #-16]
 4792 189c 2F20C3E5 		strb	r2, [r3, #47]
1500:../kernel/os_core/os_core.c ****         ptcb->OSTCBBitX      = OSMapTbl[ptcb->OSTCBX];
 4793              		.loc 1 1500 0
 4794 18a0 10301BE5 		ldr	r3, [fp, #-16]
 4795 18a4 2F30D3E5 		ldrb	r3, [r3, #47]	@ zero_extendqisi2
 4796 18a8 90219FE5 		ldr	r2, .L142+4
 4797 18ac 0320D2E7 		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 4798 18b0 10301BE5 		ldr	r3, [fp, #-16]
 4799 18b4 3120C3E5 		strb	r2, [r3, #49]
1501:../kernel/os_core/os_core.c **** 
1502:../kernel/os_core/os_core.c **** #if OS_EVENT_EN
1503:../kernel/os_core/os_core.c ****         ptcb->OSTCBEventPtr  = (OS_EVENT *)0;              /* Task is not pending on an event      
 4800              		.loc 1 1503 0
 4801 18b8 10301BE5 		ldr	r3, [fp, #-16]
 4802 18bc 0020A0E3 		mov	r2, #0
 4803 18c0 1C2083E5 		str	r2, [r3, #28]
1504:../kernel/os_core/os_core.c **** #endif
1505:../kernel/os_core/os_core.c **** 
1506:../kernel/os_core/os_core.c **** #if (OS_VERSION >= 251) && (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
1507:../kernel/os_core/os_core.c ****         ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag 
 4804              		.loc 1 1507 0
 4805 18c4 10301BE5 		ldr	r3, [fp, #-16]
 4806 18c8 0020A0E3 		mov	r2, #0
 4807 18cc 242083E5 		str	r2, [r3, #36]
1508:../kernel/os_core/os_core.c **** #endif
1509:../kernel/os_core/os_core.c **** 
1510:../kernel/os_core/os_core.c **** #if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
1511:../kernel/os_core/os_core.c ****         ptcb->OSTCBMsg       = (void *)0;                  /* No message received                  
 4808              		.loc 1 1511 0
 4809 18d0 10301BE5 		ldr	r3, [fp, #-16]
 4810 18d4 0020A0E3 		mov	r2, #0
 4811 18d8 202083E5 		str	r2, [r3, #32]
1512:../kernel/os_core/os_core.c **** #endif
1513:../kernel/os_core/os_core.c **** 
1514:../kernel/os_core/os_core.c **** #if OS_TASK_PROFILE_EN > 0
1515:../kernel/os_core/os_core.c ****         ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables       
 4812              		.loc 1 1515 0
 4813 18dc 10301BE5 		ldr	r3, [fp, #-16]
 4814 18e0 0020A0E3 		mov	r2, #0
 4815 18e4 342083E5 		str	r2, [r3, #52]
1516:../kernel/os_core/os_core.c ****         ptcb->OSTCBCyclesStart = 0L;
 4816              		.loc 1 1516 0
 4817 18e8 10301BE5 		ldr	r3, [fp, #-16]
 4818 18ec 0020A0E3 		mov	r2, #0
 4819 18f0 3C2083E5 		str	r2, [r3, #60]
1517:../kernel/os_core/os_core.c ****         ptcb->OSTCBCyclesTot   = 0L;
 4820              		.loc 1 1517 0
 4821 18f4 10301BE5 		ldr	r3, [fp, #-16]
 4822 18f8 0020A0E3 		mov	r2, #0
 4823 18fc 382083E5 		str	r2, [r3, #56]
1518:../kernel/os_core/os_core.c ****         ptcb->OSTCBStkBase     = (OS_STK *)0;
 4824              		.loc 1 1518 0
 4825 1900 10301BE5 		ldr	r3, [fp, #-16]
 4826 1904 0020A0E3 		mov	r2, #0
 4827 1908 402083E5 		str	r2, [r3, #64]
1519:../kernel/os_core/os_core.c ****         ptcb->OSTCBStkUsed     = 0L;
 4828              		.loc 1 1519 0
 4829 190c 10301BE5 		ldr	r3, [fp, #-16]
 4830 1910 0020A0E3 		mov	r2, #0
 4831 1914 442083E5 		str	r2, [r3, #68]
1520:../kernel/os_core/os_core.c **** #endif
1521:../kernel/os_core/os_core.c **** 
1522:../kernel/os_core/os_core.c **** #if OS_TASK_NAME_SIZE > 1
1523:../kernel/os_core/os_core.c ****         ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation        
 4832              		.loc 1 1523 0
 4833 1918 10301BE5 		ldr	r3, [fp, #-16]
 4834 191c 3F20A0E3 		mov	r2, #63
 4835 1920 4820C3E5 		strb	r2, [r3, #72]
1524:../kernel/os_core/os_core.c ****         ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 4836              		.loc 1 1524 0
 4837 1924 10301BE5 		ldr	r3, [fp, #-16]
 4838 1928 0020A0E3 		mov	r2, #0
 4839 192c 4920C3E5 		strb	r2, [r3, #73]
1525:../kernel/os_core/os_core.c **** #endif
1526:../kernel/os_core/os_core.c **** 
1527:../kernel/os_core/os_core.c **** #if OS_VERSION >= 204
1528:../kernel/os_core/os_core.c ****         OSTCBInitHook(ptcb);
 4840              		.loc 1 1528 0
 4841 1930 10001BE5 		ldr	r0, [fp, #-16]
 4842 1934 FEFFFFEB 		bl	OSTCBInitHook
1529:../kernel/os_core/os_core.c **** #endif
1530:../kernel/os_core/os_core.c **** 
1531:../kernel/os_core/os_core.c ****         OSTaskCreateHook(ptcb);                            /* Call user defined hook               
 4843              		.loc 1 1531 0
 4844 1938 10001BE5 		ldr	r0, [fp, #-16]
 4845 193c FEFFFFEB 		bl	OSTaskCreateHook
1532:../kernel/os_core/os_core.c ****         
1533:../kernel/os_core/os_core.c ****         OS_ENTER_CRITICAL();
 4846              		.loc 1 1533 0
 4847              	@ 1533 "../kernel/os_core/os_core.c" 1
 4848 1940 00000FE1 		mrs   r0, cpsr
 4849              	@ 0 "" 2
 4850              	@ 1533 "../kernel/os_core/os_core.c" 1
 4851 1944 04002DE5 		stmfd sp!, {r0}
 4852              	@ 0 "" 2
 4853              	@ 1533 "../kernel/os_core/os_core.c" 1
 4854 1948 C00080E3 		orr   r0, r0, #0b11000000
 4855              	@ 0 "" 2
 4856              	@ 1533 "../kernel/os_core/os_core.c" 1
 4857 194c 00F021E1 		msr   cpsr_c, r0
 4858              	@ 0 "" 2
1534:../kernel/os_core/os_core.c ****         OSTCBPrioTbl[prio] = ptcb;
 4859              		.loc 1 1534 0
 4860 1950 15205BE5 		ldrb	r2, [fp, #-21]	@ zero_extendqisi2
 4861 1954 E8309FE5 		ldr	r3, .L142+8
 4862 1958 10101BE5 		ldr	r1, [fp, #-16]
 4863 195c 021183E7 		str	r1, [r3, r2, asl #2]
1535:../kernel/os_core/os_core.c ****         ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                  
 4864              		.loc 1 1535 0
 4865 1960 E0309FE5 		ldr	r3, .L142+12
 4866 1964 002093E5 		ldr	r2, [r3, #0]
 4867 1968 10301BE5 		ldr	r3, [fp, #-16]
 4868 196c 142083E5 		str	r2, [r3, #20]
1536:../kernel/os_core/os_core.c ****         ptcb->OSTCBPrev    = (OS_TCB *)0;
 4869              		.loc 1 1536 0
 4870 1970 10301BE5 		ldr	r3, [fp, #-16]
 4871 1974 0020A0E3 		mov	r2, #0
 4872 1978 182083E5 		str	r2, [r3, #24]
1537:../kernel/os_core/os_core.c ****         if (OSTCBList != (OS_TCB *)0) {
 4873              		.loc 1 1537 0
 4874 197c C4309FE5 		ldr	r3, .L142+12
 4875 1980 003093E5 		ldr	r3, [r3, #0]
 4876 1984 000053E3 		cmp	r3, #0
 4877 1988 0300000A 		beq	.L140
1538:../kernel/os_core/os_core.c ****             OSTCBList->OSTCBPrev = ptcb;
 4878              		.loc 1 1538 0
 4879 198c B4309FE5 		ldr	r3, .L142+12
 4880 1990 003093E5 		ldr	r3, [r3, #0]
 4881 1994 10201BE5 		ldr	r2, [fp, #-16]
 4882 1998 182083E5 		str	r2, [r3, #24]
 4883              	.L140:
1539:../kernel/os_core/os_core.c ****         }
1540:../kernel/os_core/os_core.c ****         OSTCBList               = ptcb;
 4884              		.loc 1 1540 0
 4885 199c A4309FE5 		ldr	r3, .L142+12
 4886 19a0 10201BE5 		ldr	r2, [fp, #-16]
 4887 19a4 002083E5 		str	r2, [r3, #0]
1541:../kernel/os_core/os_core.c ****         OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run               
 4888              		.loc 1 1541 0
 4889 19a8 10301BE5 		ldr	r3, [fp, #-16]
 4890 19ac 3220D3E5 		ldrb	r2, [r3, #50]	@ zero_extendqisi2
 4891 19b0 94309FE5 		ldr	r3, .L142+16
 4892 19b4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4893 19b8 033082E1 		orr	r3, r2, r3
 4894 19bc FF2003E2 		and	r2, r3, #255
 4895 19c0 84309FE5 		ldr	r3, .L142+16
 4896 19c4 0020C3E5 		strb	r2, [r3, #0]
1542:../kernel/os_core/os_core.c ****         OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 4897              		.loc 1 1542 0
 4898 19c8 10301BE5 		ldr	r3, [fp, #-16]
 4899 19cc 3030D3E5 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 4900 19d0 10201BE5 		ldr	r2, [fp, #-16]
 4901 19d4 3020D2E5 		ldrb	r2, [r2, #48]	@ zero_extendqisi2
 4902 19d8 70109FE5 		ldr	r1, .L142+20
 4903 19dc 0210D1E7 		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 4904 19e0 10201BE5 		ldr	r2, [fp, #-16]
 4905 19e4 3120D2E5 		ldrb	r2, [r2, #49]	@ zero_extendqisi2
 4906 19e8 022081E1 		orr	r2, r1, r2
 4907 19ec FF1002E2 		and	r1, r2, #255
 4908 19f0 58209FE5 		ldr	r2, .L142+20
 4909 19f4 0310C2E7 		strb	r1, [r2, r3]
1543:../kernel/os_core/os_core.c ****         OSTaskCtr++;                                       /* Increment the #tasks counter         
 4910              		.loc 1 1543 0
 4911 19f8 54309FE5 		ldr	r3, .L142+24
 4912 19fc 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 4913 1a00 013083E2 		add	r3, r3, #1
 4914 1a04 FF2003E2 		and	r2, r3, #255
 4915 1a08 44309FE5 		ldr	r3, .L142+24
 4916 1a0c 0020C3E5 		strb	r2, [r3, #0]
1544:../kernel/os_core/os_core.c ****         OS_EXIT_CRITICAL();
 4917              		.loc 1 1544 0
 4918              	@ 1544 "../kernel/os_core/os_core.c" 1
 4919 1a10 04009DE4 		ldmfd sp!, {r0}
 4920              	@ 0 "" 2
 4921              	@ 1544 "../kernel/os_core/os_core.c" 1
 4922 1a14 00F021E1 		msr   cpsr_c, r0
 4923              	@ 0 "" 2
1545:../kernel/os_core/os_core.c ****         return (OS_NO_ERR);
 4924              		.loc 1 1545 0
 4925 1a18 0030A0E3 		mov	r3, #0
 4926 1a1c 020000EA 		b	.L141
 4927              	.L139:
1546:../kernel/os_core/os_core.c ****     }
1547:../kernel/os_core/os_core.c ****     OS_EXIT_CRITICAL();
 4928              		.loc 1 1547 0
 4929              	@ 1547 "../kernel/os_core/os_core.c" 1
 4930 1a20 04009DE4 		ldmfd sp!, {r0}
 4931              	@ 0 "" 2
 4932              	@ 1547 "../kernel/os_core/os_core.c" 1
 4933 1a24 00F021E1 		msr   cpsr_c, r0
 4934              	@ 0 "" 2
1548:../kernel/os_core/os_core.c ****     return (OS_NO_MORE_TCB);
 4935              		.loc 1 1548 0
 4936 1a28 4630A0E3 		mov	r3, #70
 4937              	.L141:
1549:../kernel/os_core/os_core.c **** }
 4938              		.loc 1 1549 0
 4939 1a2c 0300A0E1 		mov	r0, r3
 4940 1a30 0CD04BE2 		sub	sp, fp, #12
 4941 1a34 00689DE8 		ldmfd	sp, {fp, sp, lr}
 4942 1a38 1EFF2FE1 		bx	lr
 4943              	.L143:
 4944              		.align	2
 4945              	.L142:
 4946 1a3c 00000000 		.word	OSTCBFreeList
 4947 1a40 00000000 		.word	OSMapTbl
 4948 1a44 00000000 		.word	OSTCBPrioTbl
 4949 1a48 00000000 		.word	OSTCBList
 4950 1a4c 00000000 		.word	OSRdyGrp
 4951 1a50 00000000 		.word	OSRdyTbl
 4952 1a54 00000000 		.word	OSTaskCtr
 4953              		.cfi_endproc
 4954              	.LFE30:
 4956              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 os_core.c
                            *COM*:00000004 OSCtxSwCtr
                            *COM*:00000004 OSEventFreeList
                            *COM*:000001e0 OSEventTbl
                            *COM*:000000dc OSFlagTbl
                            *COM*:00000004 OSFlagFreeList
                            *COM*:00000001 OSCPUUsage
                            *COM*:00000004 OSIdleCtrMax
                            *COM*:00000004 OSIdleCtrRun
                            *COM*:00000001 OSStatRdy
                            *COM*:00000800 OSTaskStatStk
                            *COM*:00000001 OSIntNesting
                            *COM*:00000001 OSLockNesting
                            *COM*:00000001 OSPrioCur
                            *COM*:00000001 OSPrioHighRdy
                            *COM*:00000001 OSRdyGrp
                            *COM*:00000008 OSRdyTbl
                            *COM*:00000001 OSRunning
                            *COM*:00000001 OSTaskCtr
                            *COM*:00000004 OSIdleCtr
                            *COM*:00000800 OSTaskIdleStk
                            *COM*:00000004 OSTCBCur
                            *COM*:00000004 OSTCBFreeList
                            *COM*:00000004 OSTCBHighRdy
                            *COM*:00000004 OSTCBList
                            *COM*:00000100 OSTCBPrioTbl
                            *COM*:000008f0 OSTCBTbl
                            *COM*:00000001 OSTickStepState
                            *COM*:00000004 OSMemFreeList
                            *COM*:00000104 OSMemTbl
                            *COM*:00000004 OSQFreeList
                            *COM*:00000060 OSQTbl
                            *COM*:00000004 OSTime
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:1669   .rodata:00000000 OSMapTbl
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:1666   .rodata:00000000 $d
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:1682   .rodata:00000008 OSUnMapTbl
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:1940   .text:00000000 $a
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:1943   .text:00000000 OSEventNameGet
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:4275   .text:00001458 OS_StrCopy
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:2069   .text:000000f0 OSEventNameSet
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:4339   .text:000014e0 OS_StrLen
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:2212   .text:000001fc OSInit
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:3685   .text:00000f34 OS_InitMisc
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:3764   .text:00000fec OS_InitRdyList
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:3944   .text:00001170 OS_InitTCBList
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:3583   .text:00000e44 OS_InitEventList
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:3844   .text:000010a0 OS_InitTaskIdle
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:3894   .text:00001108 OS_InitTaskStat
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:2263   .text:00000244 OSIntEnter
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:2305   .text:00000294 $d
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:2310   .text:0000029c $a
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:2313   .text:0000029c OSIntExit
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:2436   .text:000003cc $d
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:2450   .text:000003f8 $a
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:2453   .text:000003f8 OSSchedLock
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:2516   .text:00000460 $d
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:2521   .text:00000468 $a
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:2524   .text:00000468 OSSchedUnlock
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:4155   .text:00001338 OS_Sched
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:2625   .text:00000518 $d
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:2631   .text:00000524 $a
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:2634   .text:00000524 OSStart
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:2707   .text:000005dc $d
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:2719   .text:00000600 $a
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:2722   .text:00000600 OSStatInit
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:2805   .text:00000680 $d
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:2811   .text:0000068c $a
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:2814   .text:0000068c OSTimeTick
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:3031   .text:00000890 $d
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:3040   .text:000008a8 $a
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:3043   .text:000008a8 OSVersion
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:3073   .text:000008c8 OS_Dummy
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:3100   .text:000008e0 OS_EventTaskRdy
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:3264   .text:00000ad8 $d
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:3272   .text:00000aec $a
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:3275   .text:00000aec OS_EventTaskWait
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:3384   .text:00000c38 $d
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:3390   .text:00000c44 $a
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:3393   .text:00000c44 OS_EventTO
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:3487   .text:00000d54 $d
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:3491   .text:00000d58 $a
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:3494   .text:00000d58 OS_EventWaitListInit
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:4050   .text:0000126c OS_MemClr
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:3677   .text:00000f28 $d
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:3683   .text:00000f34 $a
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:3749   .text:00000fc4 $d
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:3762   .text:00000fec $a
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:3833   .text:00001088 $d
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:3842   .text:000010a0 $a
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:3885   .text:000010f8 $d
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:4391   .text:0000153c OS_TaskIdle
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:3892   .text:00001108 $a
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:3935   .text:00001160 $d
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:4452   .text:00001588 OS_TaskStat
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:3942   .text:00001170 $a
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:4039   .text:00001258 $d
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:4047   .text:0000126c $a
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:4100   .text:000012c8 OS_MemCopy
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:4259   .text:00001430 $d
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:4272   .text:00001458 $a
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:4444   .text:00001584 $d
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:4449   .text:00001588 $a
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:4589   .text:000016b8 OS_TaskStatStkChk
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:4577   .text:000016a0 $d
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:4586   .text:000016b8 $a
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:4667   .text:00001774 $d
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:4671   .text:00001778 $a
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:4674   .text:00001778 OS_TCBInit
C:\Users\Pedro\AppData\Local\Temp\cc6RDzNk.s:4946   .text:00001a3c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
OSInitHookBegin
OS_FlagInit
OS_MemInit
OS_QInit
OSInitHookEnd
OSDebugInit
OSIntCtxSw
OSStartHighRdy
OSTimeDly
OSTimeTickHook
OSTaskCreateExt
OSCtxSw
OSTaskIdleHook
__aeabi_uidiv
OSTaskStatHook
OSTaskStkChk
OSTCBInitHook
OSTaskCreateHook

   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  21              	.Ltext0:
  22              		.file 1 "../main.c"
 3044              		.align	2
 3045              		.global	timer_ISR
 3047              	timer_ISR:
 3048              	.LFB0:
   1:../main.c     **** #include <stdio.h>
   2:../main.c     **** #include "44b.h"
   3:../main.c     **** #include "button.h"
   4:../main.c     **** #include "leds.h"
   5:../main.c     **** #include "utils.h"
   6:../main.c     **** #include "D8Led.h"
   7:../main.c     **** #include "intcontroller.h"
   8:../main.c     **** #include "timer.h"
   9:../main.c     **** #include "gpio.h"
  10:../main.c     **** #include "keyboard.h"
  11:../main.c     **** #include "uart.h"
  12:../main.c     **** #include "rtc.h"
  13:../main.c     **** #include "common_types.h"
  14:../main.c     **** #include "at24c04.h"
  15:../main.c     **** #include "lcd.h"
  16:../main.c     **** #include "iic.h"
  17:../main.c     **** #include "tests/test_sound_effects.h"
  18:../main.c     **** #include "tests/test_WAV.h"
  19:../main.c     **** #include "ts.h"
  20:../main.c     **** #include "multitasking/foreback.h"
  21:../main.c     **** #include "multitasking/queue.h"
  22:../main.c     **** #include "multitasking/cyclic.h"
  23:../main.c     **** #include "multitasking/non_expropiative.h"
  24:../main.c     **** #include "kernel/kernel_entry.h"
  25:../main.c     **** 
  26:../main.c     **** // BMP Images sourced by using GDB
  27:../main.c     **** #define ARBOL      ((uint8 *)0x0c210000)
  28:../main.c     **** #define PADRINO    ((uint8 *)0x0c220000)
  29:../main.c     **** #define PICACHU    ((uint8 *)0x0c230000)
  30:../main.c     **** #define HARRY      ((uint8 *)0x0c240000)
  31:../main.c     **** #define CHAPLIN    ((uint8 *)0x0c250000)
  32:../main.c     **** #define PULP       ((uint8 *)0x0c260000)
  33:../main.c     **** #define MAPA       ((uint8 *)0x0c270000)
  34:../main.c     **** 
  35:../main.c     **** void timer_ISR(void) __attribute__ ((interrupt ("IRQ")));
  36:../main.c     **** void button_ISR(void) __attribute__ ((interrupt ("IRQ")));
  37:../main.c     **** void keyboard_ISR(void) __attribute__ ((interrupt ("IRQ")));
  38:../main.c     **** void rtc_ISR(void)  __attribute__ ((interrupt ("IRQ")));
  39:../main.c     **** void rtc_alarm_ISR(void)  __attribute__ ((interrupt ("IRQ")));
  40:../main.c     **** 
  41:../main.c     **** void timer_ISR(void)
  42:../main.c     **** {
 3049              		.loc 1 42 0
 3050              		.cfi_startproc
 3051              		@ Interrupt Service Routine.
 3052              		@ args = 0, pretend = 0, frame = 0
 3053              		@ frame_needed = 1, uses_anonymous_args = 0
 3054 0000 04C02DE5 		str	ip, [sp, #-4]!
 3055 0004 0DC0A0E1 		mov	ip, sp
 3056              	.LCFI0:
 3057              		.cfi_def_cfa_register 12
 3058 0008 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
 3059 000c 04B04CE2 		sub	fp, ip, #4
 3060              		.cfi_offset 14, -8
 3061              		.cfi_offset 13, -12
 3062              		.cfi_offset 11, -16
 3063              		.cfi_offset 3, -20
 3064              		.cfi_offset 2, -24
 3065              		.cfi_offset 1, -28
 3066              		.cfi_offset 0, -32
 3067              	.LCFI1:
 3068              		.cfi_def_cfa 11, 4
  43:../main.c     **** 	//Timer ISR Implementation
  44:../main.c     **** 	led1_switch();
 3069              		.loc 1 44 0
 3070 0010 FEFFFFEB 		bl	led1_switch
  45:../main.c     **** 	led2_switch();
 3071              		.loc 1 45 0
 3072 0014 FEFFFFEB 		bl	led2_switch
  46:../main.c     **** 
  47:../main.c     **** 	ic_cleanflag(INT_TIMER0);
 3073              		.loc 1 47 0
 3074 0018 0D00A0E3 		mov	r0, #13
 3075 001c FEFFFFEB 		bl	ic_cleanflag
  48:../main.c     **** }
 3076              		.loc 1 48 0
 3077 0020 1CD04BE2 		sub	sp, fp, #28
 3078 0024 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 3079 0028 04C09DE4 		ldmfd	sp!, {ip}
 3080 002c 04F05EE2 		subs	pc, lr, #4
 3081              		.cfi_endproc
 3082              	.LFE0:
 3084              		.align	2
 3085              		.global	button_ISR
 3087              	button_ISR:
 3088              	.LFB1:
  49:../main.c     **** 
  50:../main.c     **** void button_ISR(void)
  51:../main.c     **** {
 3089              		.loc 1 51 0
 3090              		.cfi_startproc
 3091              		@ Interrupt Service Routine.
 3092              		@ args = 0, pretend = 0, frame = 8
 3093              		@ frame_needed = 1, uses_anonymous_args = 0
 3094 0030 04C02DE5 		str	ip, [sp, #-4]!
 3095 0034 0DC0A0E1 		mov	ip, sp
 3096              	.LCFI2:
 3097              		.cfi_def_cfa_register 12
 3098 0038 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
 3099 003c 04B04CE2 		sub	fp, ip, #4
 3100              		.cfi_offset 14, -8
 3101              		.cfi_offset 13, -12
 3102              		.cfi_offset 11, -16
 3103              		.cfi_offset 3, -20
 3104              		.cfi_offset 2, -24
 3105              		.cfi_offset 1, -28
 3106              		.cfi_offset 0, -32
 3107              	.LCFI3:
 3108              		.cfi_def_cfa 11, 4
 3109 0040 08D04DE2 		sub	sp, sp, #8
  52:../main.c     **** 	unsigned int whicheint = rEXTINTPND;
 3110              		.loc 1 52 0
 3111 0044 80309FE5 		ldr	r3, .L5
 3112 0048 003093E5 		ldr	r3, [r3, #0]
 3113 004c 20300BE5 		str	r3, [fp, #-32]
  53:../main.c     **** 	unsigned int buttons = (whicheint >> 2) & 0x3;
 3114              		.loc 1 53 0
 3115 0050 20301BE5 		ldr	r3, [fp, #-32]
 3116 0054 2331A0E1 		mov	r3, r3, lsr #2
 3117 0058 033003E2 		and	r3, r3, #3
 3118 005c 24300BE5 		str	r3, [fp, #-36]
  54:../main.c     **** 
  55:../main.c     **** 	if (buttons & BUT1) {
  56:../main.c     **** 		//BUT1 pressed
  57:../main.c     **** 	}
  58:../main.c     **** 
  59:../main.c     **** 	if (buttons & BUT2) {
  60:../main.c     **** 		//BUT2 pressed
  61:../main.c     **** 	}
  62:../main.c     **** 
  63:../main.c     **** 	// eliminamos rebotes
  64:../main.c     **** 	Delay(2000);
 3119              		.loc 1 64 0
 3120 0060 7D0EA0E3 		mov	r0, #2000
 3121 0064 FEFFFFEB 		bl	Delay
  65:../main.c     **** 
  66:../main.c     **** 	// borramos el flag en extintpnd
  67:../main.c     **** 	//COMPLETAR: debemos borrar las peticiones de interrupci√≥n en
  68:../main.c     **** 	//EXTINTPND escribiendo un 1 en los flags que queremos borrar (los
  69:../main.c     **** 	//correspondientes a los pulsadores pulsados)
  70:../main.c     **** 
  71:../main.c     **** 	if(buttons & BUT1)
 3122              		.loc 1 71 0
 3123 0068 24301BE5 		ldr	r3, [fp, #-36]
 3124 006c 013003E2 		and	r3, r3, #1
 3125 0070 FF3003E2 		and	r3, r3, #255
 3126 0074 000053E3 		cmp	r3, #0
 3127 0078 0400000A 		beq	.L3
  72:../main.c     **** 		//Borrar bit 2
  73:../main.c     **** 		rEXTINTPND |= 1 << 2;
 3128              		.loc 1 73 0
 3129 007c 48309FE5 		ldr	r3, .L5
 3130 0080 44209FE5 		ldr	r2, .L5
 3131 0084 002092E5 		ldr	r2, [r2, #0]
 3132 0088 042082E3 		orr	r2, r2, #4
 3133 008c 002083E5 		str	r2, [r3, #0]
 3134              	.L3:
  74:../main.c     **** 
  75:../main.c     **** 	if(buttons & BUT2)
 3135              		.loc 1 75 0
 3136 0090 24301BE5 		ldr	r3, [fp, #-36]
 3137 0094 023003E2 		and	r3, r3, #2
 3138 0098 000053E3 		cmp	r3, #0
 3139 009c 0400000A 		beq	.L4
  76:../main.c     **** 		//Borrar bit 3
  77:../main.c     **** 		rEXTINTPND |= 1 << 3;
 3140              		.loc 1 77 0
 3141 00a0 24309FE5 		ldr	r3, .L5
 3142 00a4 20209FE5 		ldr	r2, .L5
 3143 00a8 002092E5 		ldr	r2, [r2, #0]
 3144 00ac 082082E3 		orr	r2, r2, #8
 3145 00b0 002083E5 		str	r2, [r3, #0]
 3146              	.L4:
  78:../main.c     **** 
  79:../main.c     **** 	ic_cleanflag(INT_EINT4567);
 3147              		.loc 1 79 0
 3148 00b4 1500A0E3 		mov	r0, #21
 3149 00b8 FEFFFFEB 		bl	ic_cleanflag
  80:../main.c     **** }
 3150              		.loc 1 80 0
 3151 00bc 1CD04BE2 		sub	sp, fp, #28
 3152 00c0 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 3153 00c4 04C09DE4 		ldmfd	sp!, {ip}
 3154 00c8 04F05EE2 		subs	pc, lr, #4
 3155              	.L6:
 3156              		.align	2
 3157              	.L5:
 3158 00cc 5400D201 		.word	30539860
 3159              		.cfi_endproc
 3160              	.LFE1:
 3162              		.align	2
 3163              		.global	keyboard_ISR
 3165              	keyboard_ISR:
 3166              	.LFB2:
  81:../main.c     **** 
  82:../main.c     **** void keyboard_ISR(void)
  83:../main.c     **** {
 3167              		.loc 1 83 0
 3168              		.cfi_startproc
 3169              		@ Interrupt Service Routine.
 3170              		@ args = 0, pretend = 0, frame = 8
 3171              		@ frame_needed = 1, uses_anonymous_args = 0
 3172 00d0 04C02DE5 		str	ip, [sp, #-4]!
 3173 00d4 0DC0A0E1 		mov	ip, sp
 3174              	.LCFI4:
 3175              		.cfi_def_cfa_register 12
 3176 00d8 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
 3177 00dc 04B04CE2 		sub	fp, ip, #4
 3178              		.cfi_offset 14, -8
 3179              		.cfi_offset 13, -12
 3180              		.cfi_offset 11, -16
 3181              		.cfi_offset 3, -20
 3182              		.cfi_offset 2, -24
 3183              		.cfi_offset 1, -28
 3184              		.cfi_offset 0, -32
 3185              	.LCFI5:
 3186              		.cfi_def_cfa 11, 4
 3187 00e0 08D04DE2 		sub	sp, sp, #8
  84:../main.c     **** 	static unsigned n = 0;
  85:../main.c     **** 	int key = -1;
 3188              		.loc 1 85 0
 3189 00e4 0030E0E3 		mvn	r3, #0
 3190 00e8 20300BE5 		str	r3, [fp, #-32]
  86:../main.c     **** 
  87:../main.c     **** 	/* Eliminar rebotes de presi√≥n */
  88:../main.c     **** 	Delay(200);
 3191              		.loc 1 88 0
 3192 00ec C800A0E3 		mov	r0, #200
 3193 00f0 FEFFFFEB 		bl	Delay
  89:../main.c     **** 	
  90:../main.c     **** 	/* Escaneo de tecla */
  91:../main.c     **** 	key = kb_scan();
 3194              		.loc 1 91 0
 3195 00f4 FEFFFFEB 		bl	kb_scan
 3196 00f8 20000BE5 		str	r0, [fp, #-32]
  92:../main.c     **** 
  93:../main.c     **** 	n = (n+1) & 0xf;
 3197              		.loc 1 93 0
 3198 00fc 44309FE5 		ldr	r3, .L9
 3199 0100 003093E5 		ldr	r3, [r3, #0]
 3200 0104 013083E2 		add	r3, r3, #1
 3201 0108 0F2003E2 		and	r2, r3, #15
 3202 010c 34309FE5 		ldr	r3, .L9
 3203 0110 002083E5 		str	r2, [r3, #0]
  94:../main.c     **** 
  95:../main.c     **** 	if (key != -1) {
 3204              		.loc 1 95 0
 3205 0114 20301BE5 		ldr	r3, [fp, #-32]
 3206 0118 010073E3 		cmn	r3, #1
 3207 011c 0100000A 		beq	.L8
  96:../main.c     **** 		/* Visualizacion en el display */
  97:../main.c     **** 		//COMPLETAR: mostrar la tecla en el display utilizando el interfaz
  98:../main.c     **** 		//definido en D8Led.h
  99:../main.c     **** 
 100:../main.c     **** 		D8Led_digit(key);
 3208              		.loc 1 100 0
 3209 0120 20001BE5 		ldr	r0, [fp, #-32]
 3210 0124 FEFFFFEB 		bl	D8Led_digit
 3211              	.L8:
 101:../main.c     **** 		
 102:../main.c     **** 		/* Esperar a que la tecla se suelte, consultando el registro de datos */		
 103:../main.c     **** 		//while (/*COMPLETAR: true si est√° pulsada la tecla (leer del registro rPDATG)*/);
 104:../main.c     **** 	}
 105:../main.c     **** 
 106:../main.c     ****     /* Eliminar rebotes de depresi√≥n */
 107:../main.c     ****     Delay(200);
 3212              		.loc 1 107 0
 3213 0128 C800A0E3 		mov	r0, #200
 3214 012c FEFFFFEB 		bl	Delay
 108:../main.c     ****      
 109:../main.c     ****     /* Borrar interrupciones pendientes */
 110:../main.c     **** 	//COMPLETAR
 111:../main.c     **** 	//borrar la interrupci√≥n por la l√≠nea EINT1 en el registro rI_ISPC
 112:../main.c     ****     ic_cleanflag(INT_EINT1);
 3215              		.loc 1 112 0
 3216 0130 1800A0E3 		mov	r0, #24
 3217 0134 FEFFFFEB 		bl	ic_cleanflag
 113:../main.c     **** }
 3218              		.loc 1 113 0
 3219 0138 1CD04BE2 		sub	sp, fp, #28
 3220 013c 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 3221 0140 04C09DE4 		ldmfd	sp!, {ip}
 3222 0144 04F05EE2 		subs	pc, lr, #4
 3223              	.L10:
 3224              		.align	2
 3225              	.L9:
 3226 0148 10000000 		.word	n.5166
 3227              		.cfi_endproc
 3228              	.LFE2:
 3230              		.align	2
 3231              		.global	setup
 3233              	setup:
 3234              	.LFB3:
 114:../main.c     **** 
 115:../main.c     **** int setup(void)
 116:../main.c     **** {
 3235              		.loc 1 116 0
 3236              		.cfi_startproc
 3237              		@ Function supports interworking.
 3238              		@ args = 0, pretend = 0, frame = 0
 3239              		@ frame_needed = 1, uses_anonymous_args = 0
 3240 014c 0DC0A0E1 		mov	ip, sp
 3241              	.LCFI6:
 3242              		.cfi_def_cfa_register 12
 3243 0150 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3244 0154 04B04CE2 		sub	fp, ip, #4
 3245              		.cfi_offset 14, -8
 3246              		.cfi_offset 13, -12
 3247              		.cfi_offset 11, -16
 3248              	.LCFI7:
 3249              		.cfi_def_cfa 11, 4
 117:../main.c     **** 	leds_init();
 3250              		.loc 1 117 0
 3251 0158 FEFFFFEB 		bl	leds_init
 118:../main.c     **** 	D8Led_init();
 3252              		.loc 1 118 0
 3253 015c FEFFFFEB 		bl	D8Led_init
 119:../main.c     **** 	D8Led_segment(0x02); // "-" Symbol
 3254              		.loc 1 119 0
 3255 0160 0200A0E3 		mov	r0, #2
 3256 0164 FEFFFFEB 		bl	D8Led_segment
 120:../main.c     **** 	led1_on();
 3257              		.loc 1 120 0
 3258 0168 FEFFFFEB 		bl	led1_on
 121:../main.c     **** 
 122:../main.c     **** 	/* Port G: configuraci√≥n para generaci√≥n de interrupciones externas,
 123:../main.c     **** 	 *         botones y teclado
 124:../main.c     **** 	 **/
 125:../main.c     **** 
 126:../main.c     **** 	//COMPLETAR: utilizando el interfaz para el puerto G definido en gpio.h
 127:../main.c     **** 	//configurar los pines 1, 6 y 7 del puerto G para poder generar interrupciones
 128:../main.c     **** 	//externas por flanco de bajada por ellos y activar las correspondientes
 129:../main.c     **** 	//resistencias de pull-up.
 130:../main.c     **** 
 131:../main.c     **** 	portG_conf(6, EINT);
 3259              		.loc 1 131 0
 3260 016c 0600A0E3 		mov	r0, #6
 3261 0170 0310A0E3 		mov	r1, #3
 3262 0174 FEFFFFEB 		bl	portG_conf
 132:../main.c     **** 	portG_eint_trig(6, FALLING);
 3263              		.loc 1 132 0
 3264 0178 0600A0E3 		mov	r0, #6
 3265 017c 0210A0E3 		mov	r1, #2
 3266 0180 FEFFFFEB 		bl	portG_eint_trig
 133:../main.c     **** 	portG_conf_pup(6, ENABLE);
 3267              		.loc 1 133 0
 3268 0184 0600A0E3 		mov	r0, #6
 3269 0188 0110A0E3 		mov	r1, #1
 3270 018c FEFFFFEB 		bl	portG_conf_pup
 134:../main.c     **** 
 135:../main.c     **** 	portG_conf(7, EINT);
 3271              		.loc 1 135 0
 3272 0190 0700A0E3 		mov	r0, #7
 3273 0194 0310A0E3 		mov	r1, #3
 3274 0198 FEFFFFEB 		bl	portG_conf
 136:../main.c     **** 	portG_eint_trig(7, FALLING);
 3275              		.loc 1 136 0
 3276 019c 0700A0E3 		mov	r0, #7
 3277 01a0 0210A0E3 		mov	r1, #2
 3278 01a4 FEFFFFEB 		bl	portG_eint_trig
 137:../main.c     **** 	portG_conf_pup(7, ENABLE);
 3279              		.loc 1 137 0
 3280 01a8 0700A0E3 		mov	r0, #7
 3281 01ac 0110A0E3 		mov	r1, #1
 3282 01b0 FEFFFFEB 		bl	portG_conf_pup
 138:../main.c     **** 
 139:../main.c     **** 	/********************************************************************/
 140:../main.c     **** 
 141:../main.c     **** 	/* Configuraci√≥n del timer */
 142:../main.c     **** 
 143:../main.c     **** 	//TIMER0: 0.5 seconds
 144:../main.c     **** 	//tmr_set_mode(TIMER0, RELOAD);
 145:../main.c     **** 	//tmr_set_prescaler(TIMER0, 255);
 146:../main.c     **** 	//tmr_set_divider(TIMER0, D1_8);
 147:../main.c     **** 	//tmr_set_count(TIMER0, 62500 >> 3, 1);
 148:../main.c     **** 
 149:../main.c     **** 	//tmr_update(TIMER0);
 150:../main.c     **** 
 151:../main.c     **** 	//COMPLETAR: tomar el c√≥digo de la segunda parte
 152:../main.c     **** 
 153:../main.c     **** 	//tmr_start(TIMER0);
 154:../main.c     **** 
 155:../main.c     **** 	//if (RL.moving)
 156:../main.c     **** 	//
 157:../main.c     **** 	/***************************/
 158:../main.c     **** 
 159:../main.c     **** 	// Registramos las ISRs
 160:../main.c     **** 	//pISR_TIMER0 = (unsigned)timer_ISR;//COMPLETAR: registrar la RTI del timer
 161:../main.c     **** 	//pISR_EINT4567 = (unsigned)button_ISR; //COMPLETAR: registrar la RTI de los botones
 162:../main.c     **** 	//pISR_EINT1    = (unsigned)keyboard_ISR; //COMPLETAR: registrar la RTI del teclado
 163:../main.c     **** 
 164:../main.c     **** 	/* Configuraci√≥n del controlador de interrupciones
 165:../main.c     **** 	 * Habilitamos la l√≠nea IRQ, en modo vectorizado 
 166:../main.c     **** 	 * Configuramos el timer 0 en modo IRQ y habilitamos esta l√≠nea
 167:../main.c     **** 	 * Configuramos la l√≠nea EINT4567 en modo IRQ y la habilitamos
 168:../main.c     **** 	 * Configuramos la l√≠nea EINT1 en modo IRQ y la habilitamos
 169:../main.c     **** 	 */
 170:../main.c     **** 
 171:../main.c     **** 	uart0_init();
 3283              		.loc 1 171 0
 3284 01b4 FEFFFFEB 		bl	uart0_init
 172:../main.c     **** 	iic_init();
 3285              		.loc 1 172 0
 3286 01b8 FEFFFFEB 		bl	iic_init
 173:../main.c     **** 	rtc_init();
 3287              		.loc 1 173 0
 3288 01bc FEFFFFEB 		bl	rtc_init
 174:../main.c     **** 	ic_init();
 3289              		.loc 1 174 0
 3290 01c0 FEFFFFEB 		bl	ic_init
 175:../main.c     **** 
 176:../main.c     **** 	//COMPLETAR: utilizando el interfaz definido en intcontroller.h
 177:../main.c     **** 	//		habilitar la l√≠nea IRQ en modo vectorizado
 178:../main.c     **** 	//		deshabilitar la l√≠nea FIQ
 179:../main.c     **** 	//		configurar la l√≠nea INT_TIMER0 en modo IRQ
 180:../main.c     **** 	//		configurar la l√≠nea INT_EINT4567 en modo IRQ
 181:../main.c     **** 	//		configurar la l√≠nea INT_EINT1 en modo IRQ
 182:../main.c     **** 	//		habilitar la l√≠nea INT_TIMER0
 183:../main.c     **** 	//		habilitar la l√≠nea INT_EINT4567
 184:../main.c     **** 	//		habilitar la l√≠nea INT_EINT1
 185:../main.c     **** 
 186:../main.c     **** 	/***************************************************/
 187:../main.c     **** 
 188:../main.c     **** 	ic_conf_irq(ENABLE, VEC);
 3291              		.loc 1 188 0
 3292 01c4 0100A0E3 		mov	r0, #1
 3293 01c8 0010A0E3 		mov	r1, #0
 3294 01cc FEFFFFEB 		bl	ic_conf_irq
 189:../main.c     **** 	ic_conf_fiq(DISABLE);
 3295              		.loc 1 189 0
 3296 01d0 0000A0E3 		mov	r0, #0
 3297 01d4 FEFFFFEB 		bl	ic_conf_fiq
 190:../main.c     **** 
 191:../main.c     **** 	ic_conf_line(INT_TIMER0, IRQ);
 3298              		.loc 1 191 0
 3299 01d8 0D00A0E3 		mov	r0, #13
 3300 01dc 0010A0E3 		mov	r1, #0
 3301 01e0 FEFFFFEB 		bl	ic_conf_line
 192:../main.c     **** 	ic_conf_line(INT_EINT4567, IRQ);
 3302              		.loc 1 192 0
 3303 01e4 1500A0E3 		mov	r0, #21
 3304 01e8 0010A0E3 		mov	r1, #0
 3305 01ec FEFFFFEB 		bl	ic_conf_line
 193:../main.c     **** 	ic_conf_line(INT_EINT1, IRQ);
 3306              		.loc 1 193 0
 3307 01f0 1800A0E3 		mov	r0, #24
 3308 01f4 0010A0E3 		mov	r1, #0
 3309 01f8 FEFFFFEB 		bl	ic_conf_line
 194:../main.c     **** 
 195:../main.c     **** 	//ic_enable(INT_TIMER0);
 196:../main.c     **** 	//ic_enable(INT_EINT4567);
 197:../main.c     **** 	//ic_enable(INT_EINT1);
 198:../main.c     **** 
 199:../main.c     **** 	ic_enable(INT_GLOBAL);
 3310              		.loc 1 199 0
 3311 01fc 1A00A0E3 		mov	r0, #26
 3312 0200 FEFFFFEB 		bl	ic_enable
 200:../main.c     **** 
 201:../main.c     **** 	lcd_init();
 3313              		.loc 1 201 0
 3314 0204 FEFFFFEB 		bl	lcd_init
 202:../main.c     **** 	//ts_init();
 203:../main.c     **** 	//ts_on();
 204:../main.c     **** 
 205:../main.c     **** 	Delay(0);
 3315              		.loc 1 205 0
 3316 0208 0000A0E3 		mov	r0, #0
 3317 020c FEFFFFEB 		bl	Delay
 206:../main.c     **** 	return 0;
 3318              		.loc 1 206 0
 3319 0210 0030A0E3 		mov	r3, #0
 207:../main.c     **** }
 3320              		.loc 1 207 0
 3321 0214 0300A0E1 		mov	r0, r3
 3322 0218 0CD04BE2 		sub	sp, fp, #12
 3323 021c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3324 0220 1EFF2FE1 		bx	lr
 3325              		.cfi_endproc
 3326              	.LFE3:
 3328              		.section	.rodata
 3329              		.align	2
 3330              	.LC0:
 3331 0000 0A446961 		.ascii	"\012Dia: \000"
 3331      3A2000
 3332 0007 00       		.align	2
 3333              	.LC1:
 3334 0008 0A4D6573 		.ascii	"\012Mes: \000"
 3334      3A2000
 3335 000f 00       		.align	2
 3336              	.LC2:
 3337 0010 0A41F16F 		.ascii	"\012A\361o: \000"
 3337      3A2000
 3338 0017 00       		.align	2
 3339              	.LC3:
 3340 0018 0A446961 		.ascii	"\012Dia de la semana: \000"
 3340      20646520 
 3340      6C612073 
 3340      656D616E 
 3340      613A2000 
 3341              		.align	2
 3342              	.LC4:
 3343 002c 0A486F72 		.ascii	"\012Hora: \000"
 3343      613A2000 
 3344              		.align	2
 3345              	.LC5:
 3346 0034 0A4D696E 		.ascii	"\012Minutos: \000"
 3346      75746F73 
 3346      3A2000
 3347 003f 00       		.align	2
 3348              	.LC6:
 3349 0040 0A536567 		.ascii	"\012Segundos: \000"
 3349      756E646F 
 3349      733A2000 
 3350              		.text
 3351              		.align	2
 3352              		.global	read_date
 3354              	read_date:
 3355              	.LFB4:
 208:../main.c     **** 
 209:../main.c     **** void read_date(rtc_time_t* rtc_time)
 210:../main.c     **** {
 3356              		.loc 1 210 0
 3357              		.cfi_startproc
 3358              		@ Function supports interworking.
 3359              		@ args = 0, pretend = 0, frame = 8
 3360              		@ frame_needed = 1, uses_anonymous_args = 0
 3361 0224 0DC0A0E1 		mov	ip, sp
 3362              	.LCFI8:
 3363              		.cfi_def_cfa_register 12
 3364 0228 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3365 022c 04B04CE2 		sub	fp, ip, #4
 3366              		.cfi_offset 14, -8
 3367              		.cfi_offset 13, -12
 3368              		.cfi_offset 11, -16
 3369              	.LCFI9:
 3370              		.cfi_def_cfa 11, 4
 3371 0230 08D04DE2 		sub	sp, sp, #8
 3372 0234 10000BE5 		str	r0, [fp, #-16]
 211:../main.c     **** 	uart0_puts( "\nDia: " );
 3373              		.loc 1 211 0
 3374 0238 C8009FE5 		ldr	r0, .L13
 3375 023c FEFFFFEB 		bl	uart0_puts
 212:../main.c     **** 	rtc_time->mday = uart0_getint();
 3376              		.loc 1 212 0
 3377 0240 FEFFFFEB 		bl	uart0_getint
 3378 0244 0030A0E1 		mov	r3, r0
 3379 0248 FF2003E2 		and	r2, r3, #255
 3380 024c 10301BE5 		ldr	r3, [fp, #-16]
 3381 0250 0320C3E5 		strb	r2, [r3, #3]
 213:../main.c     **** 	uart0_puts( "\nMes: " );
 3382              		.loc 1 213 0
 3383 0254 B0009FE5 		ldr	r0, .L13+4
 3384 0258 FEFFFFEB 		bl	uart0_puts
 214:../main.c     **** 	rtc_time->mon = uart0_getint();
 3385              		.loc 1 214 0
 3386 025c FEFFFFEB 		bl	uart0_getint
 3387 0260 0030A0E1 		mov	r3, r0
 3388 0264 FF2003E2 		and	r2, r3, #255
 3389 0268 10301BE5 		ldr	r3, [fp, #-16]
 3390 026c 0520C3E5 		strb	r2, [r3, #5]
 215:../main.c     **** 	uart0_puts( "\nAÒo: " );
 3391              		.loc 1 215 0
 3392 0270 98009FE5 		ldr	r0, .L13+8
 3393 0274 FEFFFFEB 		bl	uart0_puts
 216:../main.c     **** 	rtc_time->year = uart0_getint();
 3394              		.loc 1 216 0
 3395 0278 FEFFFFEB 		bl	uart0_getint
 3396 027c 0030A0E1 		mov	r3, r0
 3397 0280 FF2003E2 		and	r2, r3, #255
 3398 0284 10301BE5 		ldr	r3, [fp, #-16]
 3399 0288 0620C3E5 		strb	r2, [r3, #6]
 217:../main.c     **** 	uart0_puts( "\nDia de la semana: " );
 3400              		.loc 1 217 0
 3401 028c 80009FE5 		ldr	r0, .L13+12
 3402 0290 FEFFFFEB 		bl	uart0_puts
 218:../main.c     **** 	rtc_time->wday = uart0_getint();
 3403              		.loc 1 218 0
 3404 0294 FEFFFFEB 		bl	uart0_getint
 3405 0298 0030A0E1 		mov	r3, r0
 3406 029c FF2003E2 		and	r2, r3, #255
 3407 02a0 10301BE5 		ldr	r3, [fp, #-16]
 3408 02a4 0420C3E5 		strb	r2, [r3, #4]
 219:../main.c     **** 
 220:../main.c     **** 	uart0_puts( "\nHora: " );
 3409              		.loc 1 220 0
 3410 02a8 68009FE5 		ldr	r0, .L13+16
 3411 02ac FEFFFFEB 		bl	uart0_puts
 221:../main.c     **** 	rtc_time->hour = uart0_getint();
 3412              		.loc 1 221 0
 3413 02b0 FEFFFFEB 		bl	uart0_getint
 3414 02b4 0030A0E1 		mov	r3, r0
 3415 02b8 FF2003E2 		and	r2, r3, #255
 3416 02bc 10301BE5 		ldr	r3, [fp, #-16]
 3417 02c0 0220C3E5 		strb	r2, [r3, #2]
 222:../main.c     **** 	uart0_puts( "\nMinutos: " );
 3418              		.loc 1 222 0
 3419 02c4 50009FE5 		ldr	r0, .L13+20
 3420 02c8 FEFFFFEB 		bl	uart0_puts
 223:../main.c     **** 	rtc_time->min = uart0_getint();
 3421              		.loc 1 223 0
 3422 02cc FEFFFFEB 		bl	uart0_getint
 3423 02d0 0030A0E1 		mov	r3, r0
 3424 02d4 FF2003E2 		and	r2, r3, #255
 3425 02d8 10301BE5 		ldr	r3, [fp, #-16]
 3426 02dc 0120C3E5 		strb	r2, [r3, #1]
 224:../main.c     **** 	uart0_puts( "\nSegundos: " );
 3427              		.loc 1 224 0
 3428 02e0 38009FE5 		ldr	r0, .L13+24
 3429 02e4 FEFFFFEB 		bl	uart0_puts
 225:../main.c     **** 	rtc_time->sec = uart0_getint();
 3430              		.loc 1 225 0
 3431 02e8 FEFFFFEB 		bl	uart0_getint
 3432 02ec 0030A0E1 		mov	r3, r0
 3433 02f0 FF2003E2 		and	r2, r3, #255
 3434 02f4 10301BE5 		ldr	r3, [fp, #-16]
 3435 02f8 0020C3E5 		strb	r2, [r3, #0]
 226:../main.c     **** }
 3436              		.loc 1 226 0
 3437 02fc 0CD04BE2 		sub	sp, fp, #12
 3438 0300 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3439 0304 1EFF2FE1 		bx	lr
 3440              	.L14:
 3441              		.align	2
 3442              	.L13:
 3443 0308 00000000 		.word	.LC0
 3444 030c 08000000 		.word	.LC1
 3445 0310 10000000 		.word	.LC2
 3446 0314 18000000 		.word	.LC3
 3447 0318 2C000000 		.word	.LC4
 3448 031c 34000000 		.word	.LC5
 3449 0320 40000000 		.word	.LC6
 3450              		.cfi_endproc
 3451              	.LFE4:
 3453              		.align	2
 3454              		.global	rtc_ISR
 3456              	rtc_ISR:
 3457              	.LFB5:
 227:../main.c     **** 
 228:../main.c     **** void rtc_ISR() {
 3458              		.loc 1 228 0
 3459              		.cfi_startproc
 3460              		@ Interrupt Service Routine.
 3461              		@ args = 0, pretend = 0, frame = 0
 3462              		@ frame_needed = 1, uses_anonymous_args = 0
 3463 0324 04C02DE5 		str	ip, [sp, #-4]!
 3464 0328 0DC0A0E1 		mov	ip, sp
 3465              	.LCFI10:
 3466              		.cfi_def_cfa_register 12
 3467 032c 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
 3468 0330 04B04CE2 		sub	fp, ip, #4
 3469              		.cfi_offset 14, -8
 3470              		.cfi_offset 13, -12
 3471              		.cfi_offset 11, -16
 3472              		.cfi_offset 3, -20
 3473              		.cfi_offset 2, -24
 3474              		.cfi_offset 1, -28
 3475              		.cfi_offset 0, -32
 3476              	.LCFI11:
 3477              		.cfi_def_cfa 11, 4
 229:../main.c     **** 	static rtc_time_t rtc_time;
 230:../main.c     **** 
 231:../main.c     **** 	rtc_gettime(&rtc_time);
 3478              		.loc 1 231 0
 3479 0334 28009FE5 		ldr	r0, .L16
 3480 0338 FEFFFFEB 		bl	rtc_gettime
 232:../main.c     **** 	uart0_put_rtc_time(&rtc_time);
 3481              		.loc 1 232 0
 3482 033c 20009FE5 		ldr	r0, .L16
 3483 0340 FEFFFFEB 		bl	uart0_put_rtc_time
 233:../main.c     **** 	uart0_putchar('\n');
 3484              		.loc 1 233 0
 3485 0344 0A00A0E3 		mov	r0, #10
 3486 0348 FEFFFFEB 		bl	uart0_putchar
 234:../main.c     **** 
 235:../main.c     **** 	ic_cleanflag(INT_TICK);
 3487              		.loc 1 235 0
 3488 034c 1400A0E3 		mov	r0, #20
 3489 0350 FEFFFFEB 		bl	ic_cleanflag
 236:../main.c     **** }
 3490              		.loc 1 236 0
 3491 0354 1CD04BE2 		sub	sp, fp, #28
 3492 0358 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 3493 035c 04C09DE4 		ldmfd	sp!, {ip}
 3494 0360 04F05EE2 		subs	pc, lr, #4
 3495              	.L17:
 3496              		.align	2
 3497              	.L16:
 3498 0364 08000000 		.word	rtc_time.5176
 3499              		.cfi_endproc
 3500              	.LFE5:
 3502              		.section	.rodata
 3503              		.align	2
 3504              	.LC7:
 3505 004c 0A414C41 		.ascii	"\012ALARM GOES OFF!\012\000"
 3505      524D2047 
 3505      4F455320 
 3505      4F464621 
 3505      0A00
 3506              		.text
 3507              		.align	2
 3508              		.global	rtc_alarm_ISR
 3510              	rtc_alarm_ISR:
 3511              	.LFB6:
 237:../main.c     **** 
 238:../main.c     **** void rtc_alarm_ISR(void) {
 3512              		.loc 1 238 0
 3513              		.cfi_startproc
 3514              		@ Interrupt Service Routine.
 3515              		@ args = 0, pretend = 0, frame = 0
 3516              		@ frame_needed = 1, uses_anonymous_args = 0
 3517 0368 04C02DE5 		str	ip, [sp, #-4]!
 3518 036c 0DC0A0E1 		mov	ip, sp
 3519              	.LCFI12:
 3520              		.cfi_def_cfa_register 12
 3521 0370 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
 3522 0374 04B04CE2 		sub	fp, ip, #4
 3523              		.cfi_offset 14, -8
 3524              		.cfi_offset 13, -12
 3525              		.cfi_offset 11, -16
 3526              		.cfi_offset 3, -20
 3527              		.cfi_offset 2, -24
 3528              		.cfi_offset 1, -28
 3529              		.cfi_offset 0, -32
 3530              	.LCFI13:
 3531              		.cfi_def_cfa 11, 4
 239:../main.c     **** 	uart0_puts("\nALARM GOES OFF!\n");
 3532              		.loc 1 239 0
 3533 0378 18009FE5 		ldr	r0, .L19
 3534 037c FEFFFFEB 		bl	uart0_puts
 240:../main.c     **** 	ic_cleanflag(INT_RTC);
 3535              		.loc 1 240 0
 3536 0380 0100A0E3 		mov	r0, #1
 3537 0384 FEFFFFEB 		bl	ic_cleanflag
 241:../main.c     **** }
 3538              		.loc 1 241 0
 3539 0388 1CD04BE2 		sub	sp, fp, #28
 3540 038c 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 3541 0390 04C09DE4 		ldmfd	sp!, {ip}
 3542 0394 04F05EE2 		subs	pc, lr, #4
 3543              	.L20:
 3544              		.align	2
 3545              	.L19:
 3546 0398 4C000000 		.word	.LC7
 3547              		.cfi_endproc
 3548              	.LFE6:
 3550              		.section	.rodata
 3551 005e 0000     		.align	2
 3552              	.LC8:
 3553 0060 496E6974 		.ascii	"Initial time: \012\000"
 3553      69616C20 
 3553      74696D65 
 3553      3A200A00 
 3554              		.align	2
 3555              	.LC9:
 3556 0070 416C6172 		.ascii	"Alarm time: \000"
 3556      6D207469 
 3556      6D653A20 
 3556      00
 3557 007d 000000   		.text
 3558              		.align	2
 3559              		.global	clock_setup
 3561              	clock_setup:
 3562              	.LFB7:
 242:../main.c     **** 
 243:../main.c     **** void clock_setup() {
 3563              		.loc 1 243 0
 3564              		.cfi_startproc
 3565              		@ Function supports interworking.
 3566              		@ args = 0, pretend = 0, frame = 0
 3567              		@ frame_needed = 1, uses_anonymous_args = 0
 3568 039c 0DC0A0E1 		mov	ip, sp
 3569              	.LCFI14:
 3570              		.cfi_def_cfa_register 12
 3571 03a0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3572 03a4 04B04CE2 		sub	fp, ip, #4
 3573              		.cfi_offset 14, -8
 3574              		.cfi_offset 13, -12
 3575              		.cfi_offset 11, -16
 3576              	.LCFI15:
 3577              		.cfi_def_cfa 11, 4
 244:../main.c     **** 	static rtc_time_t rtc_time;
 245:../main.c     **** 	uart0_puts("Initial time: \n");
 3578              		.loc 1 245 0
 3579 03a8 28019FE5 		ldr	r0, .L25
 3580 03ac FEFFFFEB 		bl	uart0_puts
 246:../main.c     **** 	rtc_gettime(&rtc_time);
 3581              		.loc 1 246 0
 3582 03b0 24019FE5 		ldr	r0, .L25+4
 3583 03b4 FEFFFFEB 		bl	rtc_gettime
 247:../main.c     **** 	uart0_put_rtc_time(&rtc_time);
 3584              		.loc 1 247 0
 3585 03b8 1C019FE5 		ldr	r0, .L25+4
 3586 03bc FEFFFFEB 		bl	uart0_put_rtc_time
 248:../main.c     **** 
 249:../main.c     **** 	//Ask for time first time
 250:../main.c     **** 	read_date(&rtc_time);
 3587              		.loc 1 250 0
 3588 03c0 14019FE5 		ldr	r0, .L25+4
 3589 03c4 FEFFFFEB 		bl	read_date
 251:../main.c     **** 	rtc_puttime(&rtc_time);
 3590              		.loc 1 251 0
 3591 03c8 0C019FE5 		ldr	r0, .L25+4
 3592 03cc FEFFFFEB 		bl	rtc_puttime
 252:../main.c     **** 
 253:../main.c     **** 	//Set alarm 10 seconds from now (imperfect but enough)
 254:../main.c     **** 
 255:../main.c     **** 	rtc_time.sec += 10;
 3593              		.loc 1 255 0
 3594 03d0 04319FE5 		ldr	r3, .L25+4
 3595 03d4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3596 03d8 0A3083E2 		add	r3, r3, #10
 3597 03dc FF2003E2 		and	r2, r3, #255
 3598 03e0 F4309FE5 		ldr	r3, .L25+4
 3599 03e4 0020C3E5 		strb	r2, [r3, #0]
 256:../main.c     **** 	if(rtc_time.sec >= 60) {
 3600              		.loc 1 256 0
 3601 03e8 EC309FE5 		ldr	r3, .L25+4
 3602 03ec 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3603 03f0 3B0053E3 		cmp	r3, #59
 3604 03f4 0B00009A 		bls	.L22
 257:../main.c     **** 		rtc_time.sec -= 60;
 3605              		.loc 1 257 0
 3606 03f8 DC309FE5 		ldr	r3, .L25+4
 3607 03fc 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3608 0400 3C3043E2 		sub	r3, r3, #60
 3609 0404 FF2003E2 		and	r2, r3, #255
 3610 0408 CC309FE5 		ldr	r3, .L25+4
 3611 040c 0020C3E5 		strb	r2, [r3, #0]
 258:../main.c     **** 		rtc_time.min++;
 3612              		.loc 1 258 0
 3613 0410 C4309FE5 		ldr	r3, .L25+4
 3614 0414 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3615 0418 013083E2 		add	r3, r3, #1
 3616 041c FF2003E2 		and	r2, r3, #255
 3617 0420 B4309FE5 		ldr	r3, .L25+4
 3618 0424 0120C3E5 		strb	r2, [r3, #1]
 3619              	.L22:
 259:../main.c     **** 	}
 260:../main.c     **** 
 261:../main.c     **** 	if(rtc_time.min >= 60) {
 3620              		.loc 1 261 0
 3621 0428 AC309FE5 		ldr	r3, .L25+4
 3622 042c 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3623 0430 3B0053E3 		cmp	r3, #59
 3624 0434 0B00009A 		bls	.L23
 262:../main.c     **** 		rtc_time.min -= 60;
 3625              		.loc 1 262 0
 3626 0438 9C309FE5 		ldr	r3, .L25+4
 3627 043c 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3628 0440 3C3043E2 		sub	r3, r3, #60
 3629 0444 FF2003E2 		and	r2, r3, #255
 3630 0448 8C309FE5 		ldr	r3, .L25+4
 3631 044c 0120C3E5 		strb	r2, [r3, #1]
 263:../main.c     **** 		rtc_time.hour++;
 3632              		.loc 1 263 0
 3633 0450 84309FE5 		ldr	r3, .L25+4
 3634 0454 0230D3E5 		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 3635 0458 013083E2 		add	r3, r3, #1
 3636 045c FF2003E2 		and	r2, r3, #255
 3637 0460 74309FE5 		ldr	r3, .L25+4
 3638 0464 0220C3E5 		strb	r2, [r3, #2]
 3639              	.L23:
 264:../main.c     **** 	}
 265:../main.c     **** 
 266:../main.c     **** 	if(rtc_time.hour >= 24) {
 3640              		.loc 1 266 0
 3641 0468 6C309FE5 		ldr	r3, .L25+4
 3642 046c 0230D3E5 		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 3643 0470 170053E3 		cmp	r3, #23
 3644 0474 0B00009A 		bls	.L24
 267:../main.c     **** 		rtc_time.hour--;
 3645              		.loc 1 267 0
 3646 0478 5C309FE5 		ldr	r3, .L25+4
 3647 047c 0230D3E5 		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 3648 0480 013043E2 		sub	r3, r3, #1
 3649 0484 FF2003E2 		and	r2, r3, #255
 3650 0488 4C309FE5 		ldr	r3, .L25+4
 3651 048c 0220C3E5 		strb	r2, [r3, #2]
 268:../main.c     **** 		rtc_time.mday++;
 3652              		.loc 1 268 0
 3653 0490 44309FE5 		ldr	r3, .L25+4
 3654 0494 0330D3E5 		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 3655 0498 013083E2 		add	r3, r3, #1
 3656 049c FF2003E2 		and	r2, r3, #255
 3657 04a0 34309FE5 		ldr	r3, .L25+4
 3658 04a4 0320C3E5 		strb	r2, [r3, #3]
 3659              	.L24:
 269:../main.c     **** 	}
 270:../main.c     **** 
 271:../main.c     **** 	uart0_puts("Alarm time: ");
 3660              		.loc 1 271 0
 3661 04a8 30009FE5 		ldr	r0, .L25+8
 3662 04ac FEFFFFEB 		bl	uart0_puts
 272:../main.c     **** 	uart0_put_rtc_time(&rtc_time);
 3663              		.loc 1 272 0
 3664 04b0 24009FE5 		ldr	r0, .L25+4
 3665 04b4 FEFFFFEB 		bl	uart0_put_rtc_time
 273:../main.c     **** 	uart0_putchar('\n');
 3666              		.loc 1 273 0
 3667 04b8 0A00A0E3 		mov	r0, #10
 3668 04bc FEFFFFEB 		bl	uart0_putchar
 274:../main.c     **** 
 275:../main.c     **** 	rtc_set_alarm(rtc_alarm_ISR, &rtc_time);
 3669              		.loc 1 275 0
 3670 04c0 1C009FE5 		ldr	r0, .L25+12
 3671 04c4 10109FE5 		ldr	r1, .L25+4
 3672 04c8 FEFFFFEB 		bl	rtc_set_alarm
 276:../main.c     **** }
 3673              		.loc 1 276 0
 3674 04cc 0CD04BE2 		sub	sp, fp, #12
 3675 04d0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3676 04d4 1EFF2FE1 		bx	lr
 3677              	.L26:
 3678              		.align	2
 3679              	.L25:
 3680 04d8 60000000 		.word	.LC8
 3681 04dc 00000000 		.word	rtc_time.5182
 3682 04e0 70000000 		.word	.LC9
 3683 04e4 00000000 		.word	rtc_alarm_ISR
 3684              		.cfi_endproc
 3685              	.LFE7:
 3687              		.align	2
 3688              		.global	startup
 3690              	startup:
 3691              	.LFB8:
 277:../main.c     **** 
 278:../main.c     **** void startup() {
 3692              		.loc 1 278 0
 3693              		.cfi_startproc
 3694              		@ Function supports interworking.
 3695              		@ args = 0, pretend = 0, frame = 0
 3696              		@ frame_needed = 1, uses_anonymous_args = 0
 3697 04e8 0DC0A0E1 		mov	ip, sp
 3698              	.LCFI16:
 3699              		.cfi_def_cfa_register 12
 3700 04ec 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3701 04f0 04B04CE2 		sub	fp, ip, #4
 3702              		.cfi_offset 14, -8
 3703              		.cfi_offset 13, -12
 3704              		.cfi_offset 11, -16
 3705              	.LCFI17:
 3706              		.cfi_def_cfa 11, 4
 279:../main.c     **** 	kernel_entry();
 3707              		.loc 1 279 0
 3708 04f4 FEFFFFEB 		bl	kernel_entry
 280:../main.c     **** }
 3709              		.loc 1 280 0
 3710 04f8 0CD04BE2 		sub	sp, fp, #12
 3711 04fc 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3712 0500 1EFF2FE1 		bx	lr
 3713              		.cfi_endproc
 3714              	.LFE8:
 3716              		.align	2
 3717              		.global	loop
 3719              	loop:
 3720              	.LFB9:
 281:../main.c     **** 
 282:../main.c     **** int loop(void) {
 3721              		.loc 1 282 0
 3722              		.cfi_startproc
 3723              		@ Function supports interworking.
 3724              		@ args = 0, pretend = 0, frame = 0
 3725              		@ frame_needed = 1, uses_anonymous_args = 0
 3726 0504 0DC0A0E1 		mov	ip, sp
 3727              	.LCFI18:
 3728              		.cfi_def_cfa_register 12
 3729 0508 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3730 050c 04B04CE2 		sub	fp, ip, #4
 3731              		.cfi_offset 14, -8
 3732              		.cfi_offset 13, -12
 3733              		.cfi_offset 11, -16
 3734              	.LCFI19:
 3735              		.cfi_def_cfa 11, 4
 283:../main.c     **** 	return 0;
 3736              		.loc 1 283 0
 3737 0510 0030A0E3 		mov	r3, #0
 284:../main.c     **** }
 3738              		.loc 1 284 0
 3739 0514 0300A0E1 		mov	r0, r3
 3740 0518 0CD04BE2 		sub	sp, fp, #12
 3741 051c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3742 0520 1EFF2FE1 		bx	lr
 3743              		.cfi_endproc
 3744              	.LFE9:
 3746              		.align	2
 3747              		.global	main
 3749              	main:
 3750              	.LFB10:
 285:../main.c     **** 
 286:../main.c     **** int main(void) {
 3751              		.loc 1 286 0
 3752              		.cfi_startproc
 3753              		@ Function supports interworking.
 3754              		@ args = 0, pretend = 0, frame = 0
 3755              		@ frame_needed = 1, uses_anonymous_args = 0
 3756 0524 0DC0A0E1 		mov	ip, sp
 3757              	.LCFI20:
 3758              		.cfi_def_cfa_register 12
 3759 0528 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3760 052c 04B04CE2 		sub	fp, ip, #4
 3761              		.cfi_offset 14, -8
 3762              		.cfi_offset 13, -12
 3763              		.cfi_offset 11, -16
 3764              	.LCFI21:
 3765              		.cfi_def_cfa 11, 4
 287:../main.c     **** 
 288:../main.c     **** 	setup();
 3766              		.loc 1 288 0
 3767 0530 FEFFFFEB 		bl	setup
 289:../main.c     **** 	startup();
 3768              		.loc 1 289 0
 3769 0534 FEFFFFEB 		bl	startup
 3770              	.L30:
 290:../main.c     **** 
 291:../main.c     **** 	while (1) {
 292:../main.c     **** 		loop();
 3771              		.loc 1 292 0 discriminator 1
 3772 0538 FEFFFFEB 		bl	loop
 293:../main.c     **** 	}
 3773              		.loc 1 293 0 discriminator 1
 3774 053c FDFFFFEA 		b	.L30
 3775              		.cfi_endproc
 3776              	.LFE10:
 3778              		.bss
 3779              		.align	2
 3780              	rtc_time.5182:
 3781 0000 00000000 		.space	7
 3781      000000
 3782 0007 00       		.align	2
 3783              	rtc_time.5176:
 3784 0008 00000000 		.space	7
 3784      000000
 3785 000f 00       		.align	2
 3786              	n.5166:
 3787 0010 00000000 		.space	4
 3788              		.text
 3789              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\Pedro\AppData\Local\Temp\ccXvN5gE.s:3044   .text:00000000 $a
C:\Users\Pedro\AppData\Local\Temp\ccXvN5gE.s:3047   .text:00000000 timer_ISR
C:\Users\Pedro\AppData\Local\Temp\ccXvN5gE.s:3087   .text:00000030 button_ISR
C:\Users\Pedro\AppData\Local\Temp\ccXvN5gE.s:3158   .text:000000cc $d
C:\Users\Pedro\AppData\Local\Temp\ccXvN5gE.s:3162   .text:000000d0 $a
C:\Users\Pedro\AppData\Local\Temp\ccXvN5gE.s:3165   .text:000000d0 keyboard_ISR
C:\Users\Pedro\AppData\Local\Temp\ccXvN5gE.s:3226   .text:00000148 $d
C:\Users\Pedro\AppData\Local\Temp\ccXvN5gE.s:3786   .bss:00000010 n.5166
C:\Users\Pedro\AppData\Local\Temp\ccXvN5gE.s:3230   .text:0000014c $a
C:\Users\Pedro\AppData\Local\Temp\ccXvN5gE.s:3233   .text:0000014c setup
C:\Users\Pedro\AppData\Local\Temp\ccXvN5gE.s:3329   .rodata:00000000 $d
C:\Users\Pedro\AppData\Local\Temp\ccXvN5gE.s:3354   .text:00000224 read_date
C:\Users\Pedro\AppData\Local\Temp\ccXvN5gE.s:3443   .text:00000308 $d
C:\Users\Pedro\AppData\Local\Temp\ccXvN5gE.s:3453   .text:00000324 $a
C:\Users\Pedro\AppData\Local\Temp\ccXvN5gE.s:3456   .text:00000324 rtc_ISR
C:\Users\Pedro\AppData\Local\Temp\ccXvN5gE.s:3498   .text:00000364 $d
C:\Users\Pedro\AppData\Local\Temp\ccXvN5gE.s:3783   .bss:00000008 rtc_time.5176
C:\Users\Pedro\AppData\Local\Temp\ccXvN5gE.s:3507   .text:00000368 $a
C:\Users\Pedro\AppData\Local\Temp\ccXvN5gE.s:3510   .text:00000368 rtc_alarm_ISR
C:\Users\Pedro\AppData\Local\Temp\ccXvN5gE.s:3546   .text:00000398 $d
C:\Users\Pedro\AppData\Local\Temp\ccXvN5gE.s:3558   .text:0000039c $a
C:\Users\Pedro\AppData\Local\Temp\ccXvN5gE.s:3561   .text:0000039c clock_setup
C:\Users\Pedro\AppData\Local\Temp\ccXvN5gE.s:3680   .text:000004d8 $d
C:\Users\Pedro\AppData\Local\Temp\ccXvN5gE.s:3780   .bss:00000000 rtc_time.5182
C:\Users\Pedro\AppData\Local\Temp\ccXvN5gE.s:3687   .text:000004e8 $a
C:\Users\Pedro\AppData\Local\Temp\ccXvN5gE.s:3690   .text:000004e8 startup
C:\Users\Pedro\AppData\Local\Temp\ccXvN5gE.s:3719   .text:00000504 loop
C:\Users\Pedro\AppData\Local\Temp\ccXvN5gE.s:3749   .text:00000524 main
C:\Users\Pedro\AppData\Local\Temp\ccXvN5gE.s:3779   .bss:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
led1_switch
led2_switch
ic_cleanflag
Delay
kb_scan
D8Led_digit
leds_init
D8Led_init
D8Led_segment
led1_on
portG_conf
portG_eint_trig
portG_conf_pup
uart0_init
iic_init
rtc_init
ic_init
ic_conf_irq
ic_conf_fiq
ic_conf_line
ic_enable
lcd_init
uart0_puts
uart0_getint
rtc_gettime
uart0_put_rtc_time
uart0_putchar
rtc_puttime
rtc_set_alarm
kernel_entry

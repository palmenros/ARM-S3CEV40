   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"lcd.c"
  21              	.Ltext0:
  22              		.file 1 "../lcd.c"
 1790              		.align	2
 1791              	lcd_buffer:
 1792 0000 00000000 		.space	38400
 1792      00000000 
 1792      00000000 
 1792      00000000 
 1792      00000000 
 1793              	state:
 1794 9600 00       		.space	1
 1795 9601 000000   		.text
 1796              		.align	2
 1797              		.global	lcd_init
 1799              	lcd_init:
 1800              	.LFB0:
   1:../lcd.c      **** #include "44b.h"
   2:../lcd.c      **** #include "lcd.h"
   3:../lcd.c      **** 
   4:../lcd.c      **** extern uint8 font[];
   5:../lcd.c      **** static uint8 lcd_buffer[LCD_BUFFER_SIZE];
   6:../lcd.c      **** 
   7:../lcd.c      **** static uint8 state;
   8:../lcd.c      **** 
   9:../lcd.c      **** void lcd_init( void )
  10:../lcd.c      **** {
 1801              		.loc 1 10 0
 1802              		.cfi_startproc
 1803              		@ Function supports interworking.
 1804              		@ args = 0, pretend = 0, frame = 0
 1805              		@ frame_needed = 1, uses_anonymous_args = 0
 1806 0000 0DC0A0E1 		mov	ip, sp
 1807              	.LCFI0:
 1808              		.cfi_def_cfa_register 12
 1809 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1810 0008 04B04CE2 		sub	fp, ip, #4
 1811              		.cfi_offset 14, -8
 1812              		.cfi_offset 13, -12
 1813              		.cfi_offset 11, -16
 1814              	.LCFI1:
 1815              		.cfi_def_cfa 11, 4
  11:../lcd.c      **** 	//Initialize dithering patterns to recommended patterns
  12:../lcd.c      **** 	rDITHMODE = 0x12210;
 1816              		.loc 1 12 0
 1817 000c FC309FE5 		ldr	r3, .L2
 1818 0010 FC209FE5 		ldr	r2, .L2+4
 1819 0014 002083E5 		str	r2, [r3, #0]
  13:../lcd.c      **** 	rDP1_2 = 0xA5A5;
 1820              		.loc 1 13 0
 1821 0018 F8309FE5 		ldr	r3, .L2+8
 1822 001c F8209FE5 		ldr	r2, .L2+12
 1823 0020 002083E5 		str	r2, [r3, #0]
  14:../lcd.c      **** 	rDP4_7 = 0xBA5DA65;
 1824              		.loc 1 14 0
 1825 0024 F4309FE5 		ldr	r3, .L2+16
 1826 0028 F4209FE5 		ldr	r2, .L2+20
 1827 002c 002083E5 		str	r2, [r3, #0]
  15:../lcd.c      **** 	rDP3_5 = 0xA5A5F;
 1828              		.loc 1 15 0
 1829 0030 F0309FE5 		ldr	r3, .L2+24
 1830 0034 F0209FE5 		ldr	r2, .L2+28
 1831 0038 002083E5 		str	r2, [r3, #0]
  16:../lcd.c      **** 	rDP2_3 = 0xD6B;
 1832              		.loc 1 16 0
 1833 003c EC309FE5 		ldr	r3, .L2+32
 1834 0040 EC209FE5 		ldr	r2, .L2+36
 1835 0044 002083E5 		str	r2, [r3, #0]
  17:../lcd.c      **** 	rDP5_7 = 0xEB7B5ED;
 1836              		.loc 1 17 0
 1837 0048 E8309FE5 		ldr	r3, .L2+40
 1838 004c E8209FE5 		ldr	r2, .L2+44
 1839 0050 002083E5 		str	r2, [r3, #0]
  18:../lcd.c      **** 	rDP3_4 = 0x7DBE;
 1840              		.loc 1 18 0
 1841 0054 E4309FE5 		ldr	r3, .L2+48
 1842 0058 E4209FE5 		ldr	r2, .L2+52
 1843 005c 002083E5 		str	r2, [r3, #0]
  19:../lcd.c      **** 	rDP4_5 = 0x7EBDF;
 1844              		.loc 1 19 0
 1845 0060 E0309FE5 		ldr	r3, .L2+56
 1846 0064 E0209FE5 		ldr	r2, .L2+60
 1847 0068 002083E5 		str	r2, [r3, #0]
  20:../lcd.c      **** 	rDP6_7 = 0x7FDFBFE;
 1848              		.loc 1 20 0
 1849 006c DC309FE5 		ldr	r3, .L2+64
 1850 0070 DC209FE5 		ldr	r2, .L2+68
 1851 0074 002083E5 		str	r2, [r3, #0]
  21:../lcd.c      **** 
  22:../lcd.c      **** 	//Zero, black and white LCD
  23:../lcd.c      ****     rREDLUT   = 0;
 1852              		.loc 1 23 0
 1853 0078 D8309FE5 		ldr	r3, .L2+72
 1854 007c 0020A0E3 		mov	r2, #0
 1855 0080 002083E5 		str	r2, [r3, #0]
  24:../lcd.c      ****     rGREENLUT = 0;
 1856              		.loc 1 24 0
 1857 0084 D0309FE5 		ldr	r3, .L2+76
 1858 0088 0020A0E3 		mov	r2, #0
 1859 008c 002083E5 		str	r2, [r3, #0]
  25:../lcd.c      ****     rBLUELUT  = 0;
 1860              		.loc 1 25 0
 1861 0090 C8309FE5 		ldr	r3, .L2+80
 1862 0094 0020A0E3 		mov	r2, #0
 1863 0098 002083E5 		str	r2, [r3, #0]
  26:../lcd.c      **** 
  27:../lcd.c      ****     //LCDCON1[0]     = 0   Video Output Initially Off
  28:../lcd.c      ****     //LCDCON1[1]     = 0   no invierte señales de vídeo
  29:../lcd.c      ****     //LCDCON1[2]     = 0   no invierte la señal VFRAME
  30:../lcd.c      ****     //LCDCON1[3]     = 0   no invierte la señal VLINE
  31:../lcd.c      ****     //LCDCON1[4]     = 0   las señales de vídeo se muestrean a flanco de bajada
  32:../lcd.c      ****     //LCDCON1[9:8]   = 0   WDLY = 4 ciclos (minimum blanking)
  33:../lcd.c      ****     //LCDCON1[11:10] = 0   WLH = 4 ciclos  (minimum blanking)
  34:../lcd.c      ****     //LCDCON1[21:12] = 28  CLKVAL = 28 => tFRAME = 59,4 Hz
  35:../lcd.c      ****     rLCDCON1  = 0x1C020;
 1864              		.loc 1 35 0
 1865 009c 1F36A0E3 		mov	r3, #32505856
 1866 00a0 BC209FE5 		ldr	r2, .L2+84
 1867 00a4 002083E5 		str	r2, [r3, #0]
  36:../lcd.c      **** 
  37:../lcd.c      ****     //LCDCON2[31:21] =  0 LINEBLANK = 0 ciclos (minimum horizontal blanking
  38:../lcd.c      ****     //LCDCON2[20:10] = 79   HOZVAL = (320 / 4) – 1 (Horizontal resolution)
  39:../lcd.c      ****     //LCDCON2[9:0]   = 239  LINEVAL = 240 – 1 (Vertical resolution)
  40:../lcd.c      ****     rLCDCON2  = 0x13CEF;
 1868              		.loc 1 40 0
 1869 00a8 B8309FE5 		ldr	r3, .L2+88
 1870 00ac B8209FE5 		ldr	r2, .L2+92
 1871 00b0 002083E5 		str	r2, [r3, #0]
  41:../lcd.c      **** 
  42:../lcd.c      ****     //LCDCON3[0] = 0  Disable self refresh
  43:../lcd.c      ****     rLCDCON3  = 0;
 1872              		.loc 1 43 0
 1873 00b4 B4309FE5 		ldr	r3, .L2+96
 1874 00b8 0020A0E3 		mov	r2, #0
 1875 00bc 002083E5 		str	r2, [r3, #0]
  44:../lcd.c      **** 
  45:../lcd.c      ****     //Start of lcd_buffer
  46:../lcd.c      ****     rLCDSADDR1 = (2 << 27) | ((uint32)lcd_buffer >> 1);
 1876              		.loc 1 46 0
 1877 00c0 AC309FE5 		ldr	r3, .L2+100
 1878 00c4 AC209FE5 		ldr	r2, .L2+104
 1879 00c8 A220A0E1 		mov	r2, r2, lsr #1
 1880 00cc 012282E3 		orr	r2, r2, #268435456
 1881 00d0 002083E5 		str	r2, [r3, #0]
  47:../lcd.c      **** 
  48:../lcd.c      ****     //End of lcd_buffer
  49:../lcd.c      ****     rLCDSADDR2 = (1 << 29) | (((uint32)lcd_buffer + LCD_BUFFER_SIZE) & 0x3FFFFF) >> 1;
 1882              		.loc 1 49 0
 1883 00d4 A0209FE5 		ldr	r2, .L2+108
 1884 00d8 98309FE5 		ldr	r3, .L2+104
 1885 00dc 963C83E2 		add	r3, r3, #38400
 1886 00e0 FF34C3E3 		bic	r3, r3, #-16777216
 1887 00e4 0335C3E3 		bic	r3, r3, #12582912
 1888 00e8 A330A0E1 		mov	r3, r3, lsr #1
 1889 00ec 023283E3 		orr	r3, r3, #536870912
 1890 00f0 003082E5 		str	r3, [r2, #0]
  50:../lcd.c      **** 
  51:../lcd.c      ****     //No virtual screen
  52:../lcd.c      ****     //LCDSADDR3[19:9] = 0 OFFSIZE = 0
  53:../lcd.c      ****     //LCDSADDR3[8:0] = 80 PAGEWIDTH = HOZVAL + 1 = 320 / 4
  54:../lcd.c      ****     rLCDSADDR3 = 0x50;
 1891              		.loc 1 54 0
 1892 00f4 84309FE5 		ldr	r3, .L2+112
 1893 00f8 5020A0E3 		mov	r2, #80
 1894 00fc 002083E5 		str	r2, [r3, #0]
  55:../lcd.c      **** 
  56:../lcd.c      ****     lcd_off();
 1895              		.loc 1 56 0
 1896 0100 FEFFFFEB 		bl	lcd_off
  57:../lcd.c      **** }
 1897              		.loc 1 57 0
 1898 0104 0CD04BE2 		sub	sp, fp, #12
 1899 0108 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1900 010c 1EFF2FE1 		bx	lr
 1901              	.L3:
 1902              		.align	2
 1903              	.L2:
 1904 0110 4400F001 		.word	32505924
 1905 0114 10220100 		.word	74256
 1906 0118 2000F001 		.word	32505888
 1907 011c A5A50000 		.word	42405
 1908 0120 2400F001 		.word	32505892
 1909 0124 65DAA50B 		.word	195418725
 1910 0128 2800F001 		.word	32505896
 1911 012c 5F5A0A00 		.word	678495
 1912 0130 2C00F001 		.word	32505900
 1913 0134 6B0D0000 		.word	3435
 1914 0138 3000F001 		.word	32505904
 1915 013c EDB5B70E 		.word	246920685
 1916 0140 3400F001 		.word	32505908
 1917 0144 BE7D0000 		.word	32190
 1918 0148 3800F001 		.word	32505912
 1919 014c DFEB0700 		.word	519135
 1920 0150 3C00F001 		.word	32505916
 1921 0154 FEFBFD07 		.word	134085630
 1922 0158 1400F001 		.word	32505876
 1923 015c 1800F001 		.word	32505880
 1924 0160 1C00F001 		.word	32505884
 1925 0164 20C00100 		.word	114720
 1926 0168 0400F001 		.word	32505860
 1927 016c EF3C0100 		.word	81135
 1928 0170 4000F001 		.word	32505920
 1929 0174 0800F001 		.word	32505864
 1930 0178 00000000 		.word	lcd_buffer
 1931 017c 0C00F001 		.word	32505868
 1932 0180 1000F001 		.word	32505872
 1933              		.cfi_endproc
 1934              	.LFE0:
 1936              		.align	2
 1937              		.global	lcd_on
 1939              	lcd_on:
 1940              	.LFB1:
  58:../lcd.c      **** 
  59:../lcd.c      **** void lcd_on( void )
  60:../lcd.c      **** {
 1941              		.loc 1 60 0
 1942              		.cfi_startproc
 1943              		@ Function supports interworking.
 1944              		@ args = 0, pretend = 0, frame = 0
 1945              		@ frame_needed = 1, uses_anonymous_args = 0
 1946 0184 0DC0A0E1 		mov	ip, sp
 1947              	.LCFI2:
 1948              		.cfi_def_cfa_register 12
 1949 0188 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1950 018c 04B04CE2 		sub	fp, ip, #4
 1951              		.cfi_offset 14, -8
 1952              		.cfi_offset 13, -12
 1953              		.cfi_offset 11, -16
 1954              	.LCFI3:
 1955              		.cfi_def_cfa 11, 4
  61:../lcd.c      ****     rLCDCON1 |= 1;
 1956              		.loc 1 61 0
 1957 0190 1F36A0E3 		mov	r3, #32505856
 1958 0194 1F26A0E3 		mov	r2, #32505856
 1959 0198 002092E5 		ldr	r2, [r2, #0]
 1960 019c 012082E3 		orr	r2, r2, #1
 1961 01a0 002083E5 		str	r2, [r3, #0]
  62:../lcd.c      **** 	state = 1;
 1962              		.loc 1 62 0
 1963 01a4 10309FE5 		ldr	r3, .L5
 1964 01a8 0120A0E3 		mov	r2, #1
 1965 01ac 0020C3E5 		strb	r2, [r3, #0]
  63:../lcd.c      **** }
 1966              		.loc 1 63 0
 1967 01b0 0CD04BE2 		sub	sp, fp, #12
 1968 01b4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1969 01b8 1EFF2FE1 		bx	lr
 1970              	.L6:
 1971              		.align	2
 1972              	.L5:
 1973 01bc 00960000 		.word	state
 1974              		.cfi_endproc
 1975              	.LFE1:
 1977              		.align	2
 1978              		.global	lcd_off
 1980              	lcd_off:
 1981              	.LFB2:
  64:../lcd.c      **** 
  65:../lcd.c      **** void lcd_off( void )
  66:../lcd.c      **** {
 1982              		.loc 1 66 0
 1983              		.cfi_startproc
 1984              		@ Function supports interworking.
 1985              		@ args = 0, pretend = 0, frame = 0
 1986              		@ frame_needed = 1, uses_anonymous_args = 0
 1987 01c0 0DC0A0E1 		mov	ip, sp
 1988              	.LCFI4:
 1989              		.cfi_def_cfa_register 12
 1990 01c4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1991 01c8 04B04CE2 		sub	fp, ip, #4
 1992              		.cfi_offset 14, -8
 1993              		.cfi_offset 13, -12
 1994              		.cfi_offset 11, -16
 1995              	.LCFI5:
 1996              		.cfi_def_cfa 11, 4
  67:../lcd.c      ****     rLCDCON1 &= ~1;
 1997              		.loc 1 67 0
 1998 01cc 1F36A0E3 		mov	r3, #32505856
 1999 01d0 1F26A0E3 		mov	r2, #32505856
 2000 01d4 002092E5 		ldr	r2, [r2, #0]
 2001 01d8 0120C2E3 		bic	r2, r2, #1
 2002 01dc 002083E5 		str	r2, [r3, #0]
  68:../lcd.c      **** 	state = 0;
 2003              		.loc 1 68 0
 2004 01e0 10309FE5 		ldr	r3, .L8
 2005 01e4 0020A0E3 		mov	r2, #0
 2006 01e8 0020C3E5 		strb	r2, [r3, #0]
  69:../lcd.c      **** }
 2007              		.loc 1 69 0
 2008 01ec 0CD04BE2 		sub	sp, fp, #12
 2009 01f0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2010 01f4 1EFF2FE1 		bx	lr
 2011              	.L9:
 2012              		.align	2
 2013              	.L8:
 2014 01f8 00960000 		.word	state
 2015              		.cfi_endproc
 2016              	.LFE2:
 2018              		.align	2
 2019              		.global	lcd_status
 2021              	lcd_status:
 2022              	.LFB3:
  70:../lcd.c      **** 
  71:../lcd.c      **** uint8 lcd_status( void )
  72:../lcd.c      **** {
 2023              		.loc 1 72 0
 2024              		.cfi_startproc
 2025              		@ Function supports interworking.
 2026              		@ args = 0, pretend = 0, frame = 0
 2027              		@ frame_needed = 1, uses_anonymous_args = 0
 2028 01fc 0DC0A0E1 		mov	ip, sp
 2029              	.LCFI6:
 2030              		.cfi_def_cfa_register 12
 2031 0200 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2032 0204 04B04CE2 		sub	fp, ip, #4
 2033              		.cfi_offset 14, -8
 2034              		.cfi_offset 13, -12
 2035              		.cfi_offset 11, -16
 2036              	.LCFI7:
 2037              		.cfi_def_cfa 11, 4
  73:../lcd.c      **** 	return state;
 2038              		.loc 1 73 0
 2039 0208 10309FE5 		ldr	r3, .L11
 2040 020c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  74:../lcd.c      **** }
 2041              		.loc 1 74 0
 2042 0210 0300A0E1 		mov	r0, r3
 2043 0214 0CD04BE2 		sub	sp, fp, #12
 2044 0218 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2045 021c 1EFF2FE1 		bx	lr
 2046              	.L12:
 2047              		.align	2
 2048              	.L11:
 2049 0220 00960000 		.word	state
 2050              		.cfi_endproc
 2051              	.LFE3:
 2053              		.align	2
 2054              		.global	lcd_clear
 2056              	lcd_clear:
 2057              	.LFB4:
  75:../lcd.c      **** 
  76:../lcd.c      **** void lcd_clear( void )
  77:../lcd.c      **** {
 2058              		.loc 1 77 0
 2059              		.cfi_startproc
 2060              		@ Function supports interworking.
 2061              		@ args = 0, pretend = 0, frame = 8
 2062              		@ frame_needed = 1, uses_anonymous_args = 0
 2063 0224 0DC0A0E1 		mov	ip, sp
 2064              	.LCFI8:
 2065              		.cfi_def_cfa_register 12
 2066 0228 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2067 022c 04B04CE2 		sub	fp, ip, #4
 2068              		.cfi_offset 14, -8
 2069              		.cfi_offset 13, -12
 2070              		.cfi_offset 11, -16
 2071              	.LCFI9:
 2072              		.cfi_def_cfa 11, 4
 2073 0230 08D04DE2 		sub	sp, sp, #8
  78:../lcd.c      **** 	uint16 i = 0;
 2074              		.loc 1 78 0
 2075 0234 0030A0E3 		mov	r3, #0
 2076 0238 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
  79:../lcd.c      ****     while(i < LCD_BUFFER_SIZE) {
 2077              		.loc 1 79 0
 2078 023c 060000EA 		b	.L14
 2079              	.L15:
  80:../lcd.c      ****     	lcd_buffer[i] = 0x0;
 2080              		.loc 1 80 0
 2081 0240 BE305BE1 		ldrh	r3, [fp, #-14]
 2082 0244 2C209FE5 		ldr	r2, .L16
 2083 0248 0010A0E3 		mov	r1, #0
 2084 024c 0310C2E7 		strb	r1, [r2, r3]
  81:../lcd.c      ****     	i++;
 2085              		.loc 1 81 0
 2086 0250 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2087 0254 013083E2 		add	r3, r3, #1
 2088 0258 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 2089              	.L14:
  79:../lcd.c      ****     while(i < LCD_BUFFER_SIZE) {
 2090              		.loc 1 79 0 discriminator 1
 2091 025c BE205BE1 		ldrh	r2, [fp, #-14]
 2092 0260 14309FE5 		ldr	r3, .L16+4
 2093 0264 030052E1 		cmp	r2, r3
 2094 0268 F4FFFF9A 		bls	.L15
  82:../lcd.c      ****     }
  83:../lcd.c      **** }
 2095              		.loc 1 83 0
 2096 026c 0CD04BE2 		sub	sp, fp, #12
 2097 0270 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2098 0274 1EFF2FE1 		bx	lr
 2099              	.L17:
 2100              		.align	2
 2101              	.L16:
 2102 0278 00000000 		.word	lcd_buffer
 2103 027c FF950000 		.word	38399
 2104              		.cfi_endproc
 2105              	.LFE4:
 2107              		.align	2
 2108              		.global	lcd_clear_color
 2110              	lcd_clear_color:
 2111              	.LFB5:
  84:../lcd.c      **** 
  85:../lcd.c      **** void lcd_clear_color( uint8 color )
  86:../lcd.c      **** {
 2112              		.loc 1 86 0
 2113              		.cfi_startproc
 2114              		@ Function supports interworking.
 2115              		@ args = 0, pretend = 0, frame = 16
 2116              		@ frame_needed = 1, uses_anonymous_args = 0
 2117 0280 0DC0A0E1 		mov	ip, sp
 2118              	.LCFI10:
 2119              		.cfi_def_cfa_register 12
 2120 0284 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2121 0288 04B04CE2 		sub	fp, ip, #4
 2122              		.cfi_offset 14, -8
 2123              		.cfi_offset 13, -12
 2124              		.cfi_offset 11, -16
 2125              	.LCFI11:
 2126              		.cfi_def_cfa 11, 4
 2127 028c 10D04DE2 		sub	sp, sp, #16
 2128 0290 0030A0E1 		mov	r3, r0
 2129 0294 15304BE5 		strb	r3, [fp, #-21]
  87:../lcd.c      **** 	uint16 i = 0;
 2130              		.loc 1 87 0
 2131 0298 0030A0E3 		mov	r3, #0
 2132 029c BE304BE1 		strh	r3, [fp, #-14]	@ movhi
  88:../lcd.c      **** 	uint8 c = color & 0xf;
 2133              		.loc 1 88 0
 2134 02a0 15305BE5 		ldrb	r3, [fp, #-21]
 2135 02a4 0F3003E2 		and	r3, r3, #15
 2136 02a8 0F304BE5 		strb	r3, [fp, #-15]
  89:../lcd.c      **** 
  90:../lcd.c      ****     while(i < LCD_BUFFER_SIZE) {
 2137              		.loc 1 90 0
 2138 02ac 0C0000EA 		b	.L19
 2139              	.L20:
  91:../lcd.c      ****     	lcd_buffer[i] = (c << 4) | c;
 2140              		.loc 1 91 0
 2141 02b0 BE305BE1 		ldrh	r3, [fp, #-14]
 2142 02b4 0F205BE5 		ldrb	r2, [fp, #-15]	@ zero_extendqisi2
 2143 02b8 0222A0E1 		mov	r2, r2, asl #4
 2144 02bc FF1002E2 		and	r1, r2, #255
 2145 02c0 0F205BE5 		ldrb	r2, [fp, #-15]	@ zero_extendqisi2
 2146 02c4 022081E1 		orr	r2, r1, r2
 2147 02c8 FF2002E2 		and	r2, r2, #255
 2148 02cc FF1002E2 		and	r1, r2, #255
 2149 02d0 28209FE5 		ldr	r2, .L21
 2150 02d4 0310C2E7 		strb	r1, [r2, r3]
  92:../lcd.c      ****     	i++;
 2151              		.loc 1 92 0
 2152 02d8 BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2153 02dc 013083E2 		add	r3, r3, #1
 2154 02e0 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 2155              	.L19:
  90:../lcd.c      ****     while(i < LCD_BUFFER_SIZE) {
 2156              		.loc 1 90 0 discriminator 1
 2157 02e4 BE205BE1 		ldrh	r2, [fp, #-14]
 2158 02e8 14309FE5 		ldr	r3, .L21+4
 2159 02ec 030052E1 		cmp	r2, r3
 2160 02f0 EEFFFF9A 		bls	.L20
  93:../lcd.c      ****     }
  94:../lcd.c      **** }
 2161              		.loc 1 94 0
 2162 02f4 0CD04BE2 		sub	sp, fp, #12
 2163 02f8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2164 02fc 1EFF2FE1 		bx	lr
 2165              	.L22:
 2166              		.align	2
 2167              	.L21:
 2168 0300 00000000 		.word	lcd_buffer
 2169 0304 FF950000 		.word	38399
 2170              		.cfi_endproc
 2171              	.LFE5:
 2173              		.align	2
 2174              		.global	lcd_putpixel
 2176              	lcd_putpixel:
 2177              	.LFB6:
  95:../lcd.c      **** 
  96:../lcd.c      **** 
  97:../lcd.c      **** void lcd_putpixel( uint16 x, uint16 y, uint8 c)
  98:../lcd.c      **** {
 2178              		.loc 1 98 0
 2179              		.cfi_startproc
 2180              		@ Function supports interworking.
 2181              		@ args = 0, pretend = 0, frame = 16
 2182              		@ frame_needed = 1, uses_anonymous_args = 0
 2183 0308 0DC0A0E1 		mov	ip, sp
 2184              	.LCFI12:
 2185              		.cfi_def_cfa_register 12
 2186 030c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2187 0310 04B04CE2 		sub	fp, ip, #4
 2188              		.cfi_offset 14, -8
 2189              		.cfi_offset 13, -12
 2190              		.cfi_offset 11, -16
 2191              	.LCFI13:
 2192              		.cfi_def_cfa 11, 4
 2193 0314 10D04DE2 		sub	sp, sp, #16
 2194 0318 0230A0E1 		mov	r3, r2
 2195 031c B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2196 0320 B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2197 0324 19304BE5 		strb	r3, [fp, #-25]
  99:../lcd.c      ****     uint8 byte, bit;
 100:../lcd.c      ****     uint16 i;
 101:../lcd.c      **** 
 102:../lcd.c      ****     i = x/2 + y*(LCD_WIDTH/2);
 2198              		.loc 1 102 0
 2199 0328 B6315BE1 		ldrh	r3, [fp, #-22]
 2200 032c A330A0E1 		mov	r3, r3, lsr #1
 2201 0330 0338A0E1 		mov	r3, r3, asl #16
 2202 0334 2328A0E1 		mov	r2, r3, lsr #16
 2203 0338 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2204 033c 0310A0E1 		mov	r1, r3	@ movhi
 2205 0340 0111A0E1 		mov	r1, r1, asl #2
 2206 0344 033081E0 		add	r3, r1, r3
 2207 0348 8332A0E1 		mov	r3, r3, asl #5
 2208 034c 0338A0E1 		mov	r3, r3, asl #16
 2209 0350 2338A0E1 		mov	r3, r3, lsr #16
 2210 0354 033082E0 		add	r3, r2, r3
 2211 0358 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 103:../lcd.c      ****     bit = (1-x%2)*4;
 2212              		.loc 1 103 0
 2213 035c B6315BE1 		ldrh	r3, [fp, #-22]
 2214 0360 013003E2 		and	r3, r3, #1
 2215 0364 000053E3 		cmp	r3, #0
 2216 0368 0100001A 		bne	.L24
 2217              		.loc 1 103 0 is_stmt 0 discriminator 1
 2218 036c 0430A0E3 		mov	r3, #4
 2219 0370 000000EA 		b	.L25
 2220              	.L24:
 2221              		.loc 1 103 0 discriminator 2
 2222 0374 0030A0E3 		mov	r3, #0
 2223              	.L25:
 2224              		.loc 1 103 0 discriminator 3
 2225 0378 0F304BE5 		strb	r3, [fp, #-15]
 104:../lcd.c      **** 
 105:../lcd.c      ****     byte = lcd_buffer[i];
 2226              		.loc 1 105 0 is_stmt 1 discriminator 3
 2227 037c BE305BE1 		ldrh	r3, [fp, #-14]
 2228 0380 68209FE5 		ldr	r2, .L26
 2229 0384 0330D2E7 		ldrb	r3, [r2, r3]
 2230 0388 10304BE5 		strb	r3, [fp, #-16]
 106:../lcd.c      ****     byte &= ~(0xF << bit);
 2231              		.loc 1 106 0 discriminator 3
 2232 038c 0F305BE5 		ldrb	r3, [fp, #-15]	@ zero_extendqisi2
 2233 0390 0F20A0E3 		mov	r2, #15
 2234 0394 1233A0E1 		mov	r3, r2, asl r3
 2235 0398 FF3003E2 		and	r3, r3, #255
 2236 039c 0330E0E1 		mvn	r3, r3
 2237 03a0 FF2003E2 		and	r2, r3, #255
 2238 03a4 10305BE5 		ldrb	r3, [fp, #-16]	@ zero_extendqisi2
 2239 03a8 033002E0 		and	r3, r2, r3
 2240 03ac FF3003E2 		and	r3, r3, #255
 2241 03b0 10304BE5 		strb	r3, [fp, #-16]
 107:../lcd.c      ****     byte |= c << bit;
 2242              		.loc 1 107 0 discriminator 3
 2243 03b4 19205BE5 		ldrb	r2, [fp, #-25]	@ zero_extendqisi2
 2244 03b8 0F305BE5 		ldrb	r3, [fp, #-15]	@ zero_extendqisi2
 2245 03bc 1233A0E1 		mov	r3, r2, asl r3
 2246 03c0 FF2003E2 		and	r2, r3, #255
 2247 03c4 10305BE5 		ldrb	r3, [fp, #-16]	@ zero_extendqisi2
 2248 03c8 033082E1 		orr	r3, r2, r3
 2249 03cc FF3003E2 		and	r3, r3, #255
 2250 03d0 10304BE5 		strb	r3, [fp, #-16]
 108:../lcd.c      ****     lcd_buffer[i] = byte;
 2251              		.loc 1 108 0 discriminator 3
 2252 03d4 BE305BE1 		ldrh	r3, [fp, #-14]
 2253 03d8 10209FE5 		ldr	r2, .L26
 2254 03dc 10105BE5 		ldrb	r1, [fp, #-16]
 2255 03e0 0310C2E7 		strb	r1, [r2, r3]
 109:../lcd.c      **** }
 2256              		.loc 1 109 0 discriminator 3
 2257 03e4 0CD04BE2 		sub	sp, fp, #12
 2258 03e8 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2259 03ec 1EFF2FE1 		bx	lr
 2260              	.L27:
 2261              		.align	2
 2262              	.L26:
 2263 03f0 00000000 		.word	lcd_buffer
 2264              		.cfi_endproc
 2265              	.LFE6:
 2267              		.align	2
 2268              		.global	lcd_getpixel
 2270              	lcd_getpixel:
 2271              	.LFB7:
 110:../lcd.c      **** 
 111:../lcd.c      **** uint8 lcd_getpixel( uint16 x, uint16 y )
 112:../lcd.c      **** {
 2272              		.loc 1 112 0
 2273              		.cfi_startproc
 2274              		@ Function supports interworking.
 2275              		@ args = 0, pretend = 0, frame = 16
 2276              		@ frame_needed = 1, uses_anonymous_args = 0
 2277 03f4 0DC0A0E1 		mov	ip, sp
 2278              	.LCFI14:
 2279              		.cfi_def_cfa_register 12
 2280 03f8 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2281 03fc 04B04CE2 		sub	fp, ip, #4
 2282              		.cfi_offset 14, -8
 2283              		.cfi_offset 13, -12
 2284              		.cfi_offset 11, -16
 2285              	.LCFI15:
 2286              		.cfi_def_cfa 11, 4
 2287 0400 10D04DE2 		sub	sp, sp, #16
 2288 0404 0020A0E1 		mov	r2, r0
 2289 0408 0130A0E1 		mov	r3, r1
 2290 040c B6214BE1 		strh	r2, [fp, #-22]	@ movhi
 2291 0410 B8314BE1 		strh	r3, [fp, #-24]	@ movhi
 113:../lcd.c      **** 	uint8 byte, bit;
 114:../lcd.c      **** 	uint16 i = x/2 + y*(LCD_WIDTH/2);
 2292              		.loc 1 114 0
 2293 0414 B6315BE1 		ldrh	r3, [fp, #-22]
 2294 0418 A330A0E1 		mov	r3, r3, lsr #1
 2295 041c 0338A0E1 		mov	r3, r3, asl #16
 2296 0420 2328A0E1 		mov	r2, r3, lsr #16
 2297 0424 B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2298 0428 0310A0E1 		mov	r1, r3	@ movhi
 2299 042c 0111A0E1 		mov	r1, r1, asl #2
 2300 0430 033081E0 		add	r3, r1, r3
 2301 0434 8332A0E1 		mov	r3, r3, asl #5
 2302 0438 0338A0E1 		mov	r3, r3, asl #16
 2303 043c 2338A0E1 		mov	r3, r3, lsr #16
 2304 0440 033082E0 		add	r3, r2, r3
 2305 0444 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 115:../lcd.c      **** 
 116:../lcd.c      **** 	bit = (1-x%2)*4;
 2306              		.loc 1 116 0
 2307 0448 B6315BE1 		ldrh	r3, [fp, #-22]
 2308 044c 013003E2 		and	r3, r3, #1
 2309 0450 000053E3 		cmp	r3, #0
 2310 0454 0100001A 		bne	.L29
 2311              		.loc 1 116 0 is_stmt 0 discriminator 1
 2312 0458 0430A0E3 		mov	r3, #4
 2313 045c 000000EA 		b	.L30
 2314              	.L29:
 2315              		.loc 1 116 0 discriminator 2
 2316 0460 0030A0E3 		mov	r3, #0
 2317              	.L30:
 2318              		.loc 1 116 0 discriminator 3
 2319 0464 0F304BE5 		strb	r3, [fp, #-15]
 117:../lcd.c      **** 	byte = lcd_buffer[i];
 2320              		.loc 1 117 0 is_stmt 1 discriminator 3
 2321 0468 BE305BE1 		ldrh	r3, [fp, #-14]
 2322 046c 2C209FE5 		ldr	r2, .L31
 2323 0470 0330D2E7 		ldrb	r3, [r2, r3]
 2324 0474 10304BE5 		strb	r3, [fp, #-16]
 118:../lcd.c      **** 
 119:../lcd.c      **** 	return (byte >> bit ) & 0xf;
 2325              		.loc 1 119 0 discriminator 3
 2326 0478 10205BE5 		ldrb	r2, [fp, #-16]	@ zero_extendqisi2
 2327 047c 0F305BE5 		ldrb	r3, [fp, #-15]	@ zero_extendqisi2
 2328 0480 5233A0E1 		mov	r3, r2, asr r3
 2329 0484 FF3003E2 		and	r3, r3, #255
 2330 0488 0F3003E2 		and	r3, r3, #15
 2331 048c FF3003E2 		and	r3, r3, #255
 120:../lcd.c      **** }
 2332              		.loc 1 120 0 discriminator 3
 2333 0490 0300A0E1 		mov	r0, r3
 2334 0494 0CD04BE2 		sub	sp, fp, #12
 2335 0498 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2336 049c 1EFF2FE1 		bx	lr
 2337              	.L32:
 2338              		.align	2
 2339              	.L31:
 2340 04a0 00000000 		.word	lcd_buffer
 2341              		.cfi_endproc
 2342              	.LFE7:
 2344              		.align	2
 2345              		.global	lcd_draw_hline
 2347              	lcd_draw_hline:
 2348              	.LFB8:
 121:../lcd.c      **** 
 122:../lcd.c      **** void lcd_draw_hline( uint16 xleft, uint16 xright, uint16 y, uint8 color, uint16 width )
 123:../lcd.c      **** {
 2349              		.loc 1 123 0
 2350              		.cfi_startproc
 2351              		@ Function supports interworking.
 2352              		@ args = 4, pretend = 0, frame = 16
 2353              		@ frame_needed = 1, uses_anonymous_args = 0
 2354 04a4 0DC0A0E1 		mov	ip, sp
 2355              	.LCFI16:
 2356              		.cfi_def_cfa_register 12
 2357 04a8 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2358 04ac 04B04CE2 		sub	fp, ip, #4
 2359              		.cfi_offset 14, -8
 2360              		.cfi_offset 13, -12
 2361              		.cfi_offset 11, -16
 2362              	.LCFI17:
 2363              		.cfi_def_cfa 11, 4
 2364 04b0 10D04DE2 		sub	sp, sp, #16
 2365 04b4 B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2366 04b8 B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2367 04bc BA214BE1 		strh	r2, [fp, #-26]	@ movhi
 2368 04c0 1B304BE5 		strb	r3, [fp, #-27]
 124:../lcd.c      **** 	int x_i, y_i;
 125:../lcd.c      **** 	for(x_i = xleft; x_i <= xright; ++x_i)
 2369              		.loc 1 125 0
 2370 04c4 B6315BE1 		ldrh	r3, [fp, #-22]
 2371 04c8 10300BE5 		str	r3, [fp, #-16]
 2372 04cc 190000EA 		b	.L34
 2373              	.L37:
 126:../lcd.c      **** 		for(y_i = y; y_i < y + width; ++y_i)
 2374              		.loc 1 126 0
 2375 04d0 BA315BE1 		ldrh	r3, [fp, #-26]
 2376 04d4 14300BE5 		str	r3, [fp, #-20]
 2377 04d8 0D0000EA 		b	.L35
 2378              	.L36:
 127:../lcd.c      **** 			lcd_putpixel(x_i, y_i, color);
 2379              		.loc 1 127 0 discriminator 2
 2380 04dc 10301BE5 		ldr	r3, [fp, #-16]
 2381 04e0 0338A0E1 		mov	r3, r3, asl #16
 2382 04e4 2318A0E1 		mov	r1, r3, lsr #16
 2383 04e8 14301BE5 		ldr	r3, [fp, #-20]
 2384 04ec 0338A0E1 		mov	r3, r3, asl #16
 2385 04f0 2328A0E1 		mov	r2, r3, lsr #16
 2386 04f4 1B305BE5 		ldrb	r3, [fp, #-27]	@ zero_extendqisi2
 2387 04f8 0100A0E1 		mov	r0, r1
 2388 04fc 0210A0E1 		mov	r1, r2
 2389 0500 0320A0E1 		mov	r2, r3
 2390 0504 FEFFFFEB 		bl	lcd_putpixel
 126:../lcd.c      **** 		for(y_i = y; y_i < y + width; ++y_i)
 2391              		.loc 1 126 0 discriminator 2
 2392 0508 14301BE5 		ldr	r3, [fp, #-20]
 2393 050c 013083E2 		add	r3, r3, #1
 2394 0510 14300BE5 		str	r3, [fp, #-20]
 2395              	.L35:
 126:../lcd.c      **** 		for(y_i = y; y_i < y + width; ++y_i)
 2396              		.loc 1 126 0 is_stmt 0 discriminator 1
 2397 0514 BA215BE1 		ldrh	r2, [fp, #-26]
 2398 0518 B430DBE1 		ldrh	r3, [fp, #4]
 2399 051c 032082E0 		add	r2, r2, r3
 2400 0520 14301BE5 		ldr	r3, [fp, #-20]
 2401 0524 030052E1 		cmp	r2, r3
 2402 0528 EBFFFFCA 		bgt	.L36
 125:../lcd.c      **** 	for(x_i = xleft; x_i <= xright; ++x_i)
 2403              		.loc 1 125 0 is_stmt 1
 2404 052c 10301BE5 		ldr	r3, [fp, #-16]
 2405 0530 013083E2 		add	r3, r3, #1
 2406 0534 10300BE5 		str	r3, [fp, #-16]
 2407              	.L34:
 125:../lcd.c      **** 	for(x_i = xleft; x_i <= xright; ++x_i)
 2408              		.loc 1 125 0 is_stmt 0 discriminator 1
 2409 0538 B8215BE1 		ldrh	r2, [fp, #-24]
 2410 053c 10301BE5 		ldr	r3, [fp, #-16]
 2411 0540 030052E1 		cmp	r2, r3
 2412 0544 E1FFFFAA 		bge	.L37
 128:../lcd.c      **** }
 2413              		.loc 1 128 0 is_stmt 1
 2414 0548 0CD04BE2 		sub	sp, fp, #12
 2415 054c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2416 0550 1EFF2FE1 		bx	lr
 2417              		.cfi_endproc
 2418              	.LFE8:
 2420              		.align	2
 2421              		.global	lcd_draw_vline
 2423              	lcd_draw_vline:
 2424              	.LFB9:
 129:../lcd.c      **** 
 130:../lcd.c      **** void lcd_draw_vline( uint16 yup, uint16 ydown, uint16 x, uint8 color, uint16 width )
 131:../lcd.c      **** {
 2425              		.loc 1 131 0
 2426              		.cfi_startproc
 2427              		@ Function supports interworking.
 2428              		@ args = 4, pretend = 0, frame = 16
 2429              		@ frame_needed = 1, uses_anonymous_args = 0
 2430 0554 0DC0A0E1 		mov	ip, sp
 2431              	.LCFI18:
 2432              		.cfi_def_cfa_register 12
 2433 0558 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2434 055c 04B04CE2 		sub	fp, ip, #4
 2435              		.cfi_offset 14, -8
 2436              		.cfi_offset 13, -12
 2437              		.cfi_offset 11, -16
 2438              	.LCFI19:
 2439              		.cfi_def_cfa 11, 4
 2440 0560 10D04DE2 		sub	sp, sp, #16
 2441 0564 B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2442 0568 B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2443 056c BA214BE1 		strh	r2, [fp, #-26]	@ movhi
 2444 0570 1B304BE5 		strb	r3, [fp, #-27]
 132:../lcd.c      **** 	int x_i, y_i;
 133:../lcd.c      **** 	for(y_i = yup; y_i <= ydown; ++y_i)
 2445              		.loc 1 133 0
 2446 0574 B6315BE1 		ldrh	r3, [fp, #-22]
 2447 0578 14300BE5 		str	r3, [fp, #-20]
 2448 057c 190000EA 		b	.L39
 2449              	.L42:
 134:../lcd.c      **** 		for(x_i = x; x_i < x + width; ++x_i)
 2450              		.loc 1 134 0
 2451 0580 BA315BE1 		ldrh	r3, [fp, #-26]
 2452 0584 10300BE5 		str	r3, [fp, #-16]
 2453 0588 0D0000EA 		b	.L40
 2454              	.L41:
 135:../lcd.c      **** 			lcd_putpixel(x_i, y_i, color);
 2455              		.loc 1 135 0 discriminator 2
 2456 058c 10301BE5 		ldr	r3, [fp, #-16]
 2457 0590 0338A0E1 		mov	r3, r3, asl #16
 2458 0594 2318A0E1 		mov	r1, r3, lsr #16
 2459 0598 14301BE5 		ldr	r3, [fp, #-20]
 2460 059c 0338A0E1 		mov	r3, r3, asl #16
 2461 05a0 2328A0E1 		mov	r2, r3, lsr #16
 2462 05a4 1B305BE5 		ldrb	r3, [fp, #-27]	@ zero_extendqisi2
 2463 05a8 0100A0E1 		mov	r0, r1
 2464 05ac 0210A0E1 		mov	r1, r2
 2465 05b0 0320A0E1 		mov	r2, r3
 2466 05b4 FEFFFFEB 		bl	lcd_putpixel
 134:../lcd.c      **** 		for(x_i = x; x_i < x + width; ++x_i)
 2467              		.loc 1 134 0 discriminator 2
 2468 05b8 10301BE5 		ldr	r3, [fp, #-16]
 2469 05bc 013083E2 		add	r3, r3, #1
 2470 05c0 10300BE5 		str	r3, [fp, #-16]
 2471              	.L40:
 134:../lcd.c      **** 		for(x_i = x; x_i < x + width; ++x_i)
 2472              		.loc 1 134 0 is_stmt 0 discriminator 1
 2473 05c4 BA215BE1 		ldrh	r2, [fp, #-26]
 2474 05c8 B430DBE1 		ldrh	r3, [fp, #4]
 2475 05cc 032082E0 		add	r2, r2, r3
 2476 05d0 10301BE5 		ldr	r3, [fp, #-16]
 2477 05d4 030052E1 		cmp	r2, r3
 2478 05d8 EBFFFFCA 		bgt	.L41
 133:../lcd.c      **** 	for(y_i = yup; y_i <= ydown; ++y_i)
 2479              		.loc 1 133 0 is_stmt 1
 2480 05dc 14301BE5 		ldr	r3, [fp, #-20]
 2481 05e0 013083E2 		add	r3, r3, #1
 2482 05e4 14300BE5 		str	r3, [fp, #-20]
 2483              	.L39:
 133:../lcd.c      **** 	for(y_i = yup; y_i <= ydown; ++y_i)
 2484              		.loc 1 133 0 is_stmt 0 discriminator 1
 2485 05e8 B8215BE1 		ldrh	r2, [fp, #-24]
 2486 05ec 14301BE5 		ldr	r3, [fp, #-20]
 2487 05f0 030052E1 		cmp	r2, r3
 2488 05f4 E1FFFFAA 		bge	.L42
 136:../lcd.c      **** }
 2489              		.loc 1 136 0 is_stmt 1
 2490 05f8 0CD04BE2 		sub	sp, fp, #12
 2491 05fc 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2492 0600 1EFF2FE1 		bx	lr
 2493              		.cfi_endproc
 2494              	.LFE9:
 2496              		.align	2
 2497              		.global	lcd_draw_box
 2499              	lcd_draw_box:
 2500              	.LFB10:
 137:../lcd.c      **** 
 138:../lcd.c      **** void lcd_draw_box( uint16 xleft, uint16 yup, uint16 xright, uint16 ydown, uint8 color, uint16 width
 139:../lcd.c      **** {
 2501              		.loc 1 139 0
 2502              		.cfi_startproc
 2503              		@ Function supports interworking.
 2504              		@ args = 8, pretend = 0, frame = 8
 2505              		@ frame_needed = 1, uses_anonymous_args = 0
 2506 0604 0DC0A0E1 		mov	ip, sp
 2507              	.LCFI20:
 2508              		.cfi_def_cfa_register 12
 2509 0608 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2510 060c 04B04CE2 		sub	fp, ip, #4
 2511              		.cfi_offset 14, -8
 2512              		.cfi_offset 13, -12
 2513              		.cfi_offset 11, -16
 2514              	.LCFI21:
 2515              		.cfi_def_cfa 11, 4
 2516 0610 10D04DE2 		sub	sp, sp, #16
 2517 0614 BE004BE1 		strh	r0, [fp, #-14]	@ movhi
 2518 0618 B0114BE1 		strh	r1, [fp, #-16]	@ movhi
 2519 061c B2214BE1 		strh	r2, [fp, #-18]	@ movhi
 2520 0620 B4314BE1 		strh	r3, [fp, #-20]	@ movhi
 140:../lcd.c      **** 	lcd_draw_hline(xleft, xright, yup, color, width);
 2521              		.loc 1 140 0
 2522 0624 BE005BE1 		ldrh	r0, [fp, #-14]
 2523 0628 B2115BE1 		ldrh	r1, [fp, #-18]
 2524 062c B0215BE1 		ldrh	r2, [fp, #-16]
 2525 0630 0430DBE5 		ldrb	r3, [fp, #4]	@ zero_extendqisi2
 2526 0634 B8C0DBE1 		ldrh	ip, [fp, #8]
 2527 0638 00C08DE5 		str	ip, [sp, #0]
 2528 063c FEFFFFEB 		bl	lcd_draw_hline
 141:../lcd.c      **** 	lcd_draw_vline(yup, ydown, xleft, color, width);
 2529              		.loc 1 141 0
 2530 0640 B0015BE1 		ldrh	r0, [fp, #-16]
 2531 0644 B4115BE1 		ldrh	r1, [fp, #-20]
 2532 0648 BE205BE1 		ldrh	r2, [fp, #-14]
 2533 064c 0430DBE5 		ldrb	r3, [fp, #4]	@ zero_extendqisi2
 2534 0650 B8C0DBE1 		ldrh	ip, [fp, #8]
 2535 0654 00C08DE5 		str	ip, [sp, #0]
 2536 0658 FEFFFFEB 		bl	lcd_draw_vline
 142:../lcd.c      **** 	lcd_draw_vline(yup, ydown, xright - width + 1, color, width);
 2537              		.loc 1 142 0
 2538 065c B2215BE1 		ldrh	r2, [fp, #-18]	@ movhi
 2539 0660 B830DBE1 		ldrh	r3, [fp, #8]	@ movhi
 2540 0664 023063E0 		rsb	r3, r3, r2
 2541 0668 0338A0E1 		mov	r3, r3, asl #16
 2542 066c 2338A0E1 		mov	r3, r3, lsr #16
 2543 0670 013083E2 		add	r3, r3, #1
 2544 0674 0338A0E1 		mov	r3, r3, asl #16
 2545 0678 2328A0E1 		mov	r2, r3, lsr #16
 2546 067c B0015BE1 		ldrh	r0, [fp, #-16]
 2547 0680 B4115BE1 		ldrh	r1, [fp, #-20]
 2548 0684 0430DBE5 		ldrb	r3, [fp, #4]	@ zero_extendqisi2
 2549 0688 B8C0DBE1 		ldrh	ip, [fp, #8]
 2550 068c 00C08DE5 		str	ip, [sp, #0]
 2551 0690 FEFFFFEB 		bl	lcd_draw_vline
 143:../lcd.c      **** 	lcd_draw_hline(xleft, xright, ydown - width + 1, color, width);
 2552              		.loc 1 143 0
 2553 0694 B4215BE1 		ldrh	r2, [fp, #-20]	@ movhi
 2554 0698 B830DBE1 		ldrh	r3, [fp, #8]	@ movhi
 2555 069c 023063E0 		rsb	r3, r3, r2
 2556 06a0 0338A0E1 		mov	r3, r3, asl #16
 2557 06a4 2338A0E1 		mov	r3, r3, lsr #16
 2558 06a8 013083E2 		add	r3, r3, #1
 2559 06ac 0338A0E1 		mov	r3, r3, asl #16
 2560 06b0 2328A0E1 		mov	r2, r3, lsr #16
 2561 06b4 BE005BE1 		ldrh	r0, [fp, #-14]
 2562 06b8 B2115BE1 		ldrh	r1, [fp, #-18]
 2563 06bc 0430DBE5 		ldrb	r3, [fp, #4]	@ zero_extendqisi2
 2564 06c0 B8C0DBE1 		ldrh	ip, [fp, #8]
 2565 06c4 00C08DE5 		str	ip, [sp, #0]
 2566 06c8 FEFFFFEB 		bl	lcd_draw_hline
 144:../lcd.c      **** }
 2567              		.loc 1 144 0
 2568 06cc 0CD04BE2 		sub	sp, fp, #12
 2569 06d0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2570 06d4 1EFF2FE1 		bx	lr
 2571              		.cfi_endproc
 2572              	.LFE10:
 2574              		.align	2
 2575              		.global	lcd_putchar
 2577              	lcd_putchar:
 2578              	.LFB11:
 145:../lcd.c      **** 
 146:../lcd.c      **** void lcd_putchar( uint16 x, uint16 y, uint8 color, char ch )
 147:../lcd.c      **** {
 2579              		.loc 1 147 0
 2580              		.cfi_startproc
 2581              		@ Function supports interworking.
 2582              		@ args = 0, pretend = 0, frame = 16
 2583              		@ frame_needed = 1, uses_anonymous_args = 0
 2584 06d8 0DC0A0E1 		mov	ip, sp
 2585              	.LCFI22:
 2586              		.cfi_def_cfa_register 12
 2587 06dc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2588 06e0 04B04CE2 		sub	fp, ip, #4
 2589              		.cfi_offset 14, -8
 2590              		.cfi_offset 13, -12
 2591              		.cfi_offset 11, -16
 2592              	.LCFI23:
 2593              		.cfi_def_cfa 11, 4
 2594 06e4 10D04DE2 		sub	sp, sp, #16
 2595 06e8 B6014BE1 		strh	r0, [fp, #-22]	@ movhi
 2596 06ec B8114BE1 		strh	r1, [fp, #-24]	@ movhi
 2597 06f0 19204BE5 		strb	r2, [fp, #-25]
 2598 06f4 1A304BE5 		strb	r3, [fp, #-26]
 148:../lcd.c      ****     uint8 line, row;
 149:../lcd.c      ****     uint8 *bitmap;
 150:../lcd.c      **** 
 151:../lcd.c      ****     bitmap = font + ch*16;
 2599              		.loc 1 151 0
 2600 06f8 1A305BE5 		ldrb	r3, [fp, #-26]	@ zero_extendqisi2
 2601 06fc 0332A0E1 		mov	r3, r3, asl #4
 2602 0700 0320A0E1 		mov	r2, r3
 2603 0704 1C319FE5 		ldr	r3, .L51
 2604 0708 033082E0 		add	r3, r2, r3
 2605 070c 14300BE5 		str	r3, [fp, #-20]
 152:../lcd.c      ****     for( line=0; line<16; line++ )
 2606              		.loc 1 152 0
 2607 0710 0030A0E3 		mov	r3, #0
 2608 0714 0D304BE5 		strb	r3, [fp, #-13]
 2609 0718 3C0000EA 		b	.L45
 2610              	.L50:
 153:../lcd.c      ****         for( row=0; row<8; row++ )
 2611              		.loc 1 153 0
 2612 071c 0030A0E3 		mov	r3, #0
 2613 0720 0E304BE5 		strb	r3, [fp, #-14]
 2614 0724 330000EA 		b	.L46
 2615              	.L49:
 154:../lcd.c      ****             if( bitmap[line] & (0x80 >> row) )
 2616              		.loc 1 154 0
 2617 0728 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2618 072c 14201BE5 		ldr	r2, [fp, #-20]
 2619 0730 033082E0 		add	r3, r2, r3
 2620 0734 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2621 0738 0320A0E1 		mov	r2, r3
 2622 073c 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2623 0740 8010A0E3 		mov	r1, #128
 2624 0744 5133A0E1 		mov	r3, r1, asr r3
 2625 0748 033002E0 		and	r3, r2, r3
 2626 074c 000053E3 		cmp	r3, #0
 2627 0750 1300000A 		beq	.L47
 155:../lcd.c      ****                 lcd_putpixel( x+row, y+line, color );
 2628              		.loc 1 155 0
 2629 0754 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2630 0758 0338A0E1 		mov	r3, r3, asl #16
 2631 075c 2328A0E1 		mov	r2, r3, lsr #16
 2632 0760 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2633 0764 033082E0 		add	r3, r2, r3
 2634 0768 0338A0E1 		mov	r3, r3, asl #16
 2635 076c 2318A0E1 		mov	r1, r3, lsr #16
 2636 0770 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2637 0774 0338A0E1 		mov	r3, r3, asl #16
 2638 0778 2328A0E1 		mov	r2, r3, lsr #16
 2639 077c B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2640 0780 033082E0 		add	r3, r2, r3
 2641 0784 0338A0E1 		mov	r3, r3, asl #16
 2642 0788 2328A0E1 		mov	r2, r3, lsr #16
 2643 078c 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 2644 0790 0100A0E1 		mov	r0, r1
 2645 0794 0210A0E1 		mov	r1, r2
 2646 0798 0320A0E1 		mov	r2, r3
 2647 079c FEFFFFEB 		bl	lcd_putpixel
 2648 07a0 110000EA 		b	.L48
 2649              	.L47:
 156:../lcd.c      ****             else
 157:../lcd.c      ****                 lcd_putpixel( x+row, y+line, WHITE );
 2650              		.loc 1 157 0
 2651 07a4 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2652 07a8 0338A0E1 		mov	r3, r3, asl #16
 2653 07ac 2328A0E1 		mov	r2, r3, lsr #16
 2654 07b0 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2655 07b4 033082E0 		add	r3, r2, r3
 2656 07b8 0338A0E1 		mov	r3, r3, asl #16
 2657 07bc 2328A0E1 		mov	r2, r3, lsr #16
 2658 07c0 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2659 07c4 0338A0E1 		mov	r3, r3, asl #16
 2660 07c8 2318A0E1 		mov	r1, r3, lsr #16
 2661 07cc B8315BE1 		ldrh	r3, [fp, #-24]	@ movhi
 2662 07d0 033081E0 		add	r3, r1, r3
 2663 07d4 0338A0E1 		mov	r3, r3, asl #16
 2664 07d8 2338A0E1 		mov	r3, r3, lsr #16
 2665 07dc 0200A0E1 		mov	r0, r2
 2666 07e0 0310A0E1 		mov	r1, r3
 2667 07e4 0020A0E3 		mov	r2, #0
 2668 07e8 FEFFFFEB 		bl	lcd_putpixel
 2669              	.L48:
 153:../lcd.c      ****         for( row=0; row<8; row++ )
 2670              		.loc 1 153 0
 2671 07ec 0E305BE5 		ldrb	r3, [fp, #-14]
 2672 07f0 013083E2 		add	r3, r3, #1
 2673 07f4 0E304BE5 		strb	r3, [fp, #-14]
 2674              	.L46:
 153:../lcd.c      ****         for( row=0; row<8; row++ )
 2675              		.loc 1 153 0 is_stmt 0 discriminator 1
 2676 07f8 0E305BE5 		ldrb	r3, [fp, #-14]	@ zero_extendqisi2
 2677 07fc 070053E3 		cmp	r3, #7
 2678 0800 C8FFFF9A 		bls	.L49
 152:../lcd.c      ****     for( line=0; line<16; line++ )
 2679              		.loc 1 152 0 is_stmt 1
 2680 0804 0D305BE5 		ldrb	r3, [fp, #-13]
 2681 0808 013083E2 		add	r3, r3, #1
 2682 080c 0D304BE5 		strb	r3, [fp, #-13]
 2683              	.L45:
 152:../lcd.c      ****     for( line=0; line<16; line++ )
 2684              		.loc 1 152 0 is_stmt 0 discriminator 1
 2685 0810 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2686 0814 0F0053E3 		cmp	r3, #15
 2687 0818 BFFFFF9A 		bls	.L50
 158:../lcd.c      **** }
 2688              		.loc 1 158 0 is_stmt 1
 2689 081c 0CD04BE2 		sub	sp, fp, #12
 2690 0820 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2691 0824 1EFF2FE1 		bx	lr
 2692              	.L52:
 2693              		.align	2
 2694              	.L51:
 2695 0828 00000000 		.word	font
 2696              		.cfi_endproc
 2697              	.LFE11:
 2699              		.align	2
 2700              		.global	lcd_puts
 2702              	lcd_puts:
 2703              	.LFB12:
 159:../lcd.c      **** 
 160:../lcd.c      **** void lcd_puts( uint16 x, uint16 y, uint8 color, char *s )
 161:../lcd.c      **** {
 2704              		.loc 1 161 0
 2705              		.cfi_startproc
 2706              		@ Function supports interworking.
 2707              		@ args = 0, pretend = 0, frame = 16
 2708              		@ frame_needed = 1, uses_anonymous_args = 0
 2709 082c 0DC0A0E1 		mov	ip, sp
 2710              	.LCFI24:
 2711              		.cfi_def_cfa_register 12
 2712 0830 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2713 0834 04B04CE2 		sub	fp, ip, #4
 2714              		.cfi_offset 14, -8
 2715              		.cfi_offset 13, -12
 2716              		.cfi_offset 11, -16
 2717              	.LCFI25:
 2718              		.cfi_def_cfa 11, 4
 2719 0838 10D04DE2 		sub	sp, sp, #16
 2720 083c 18300BE5 		str	r3, [fp, #-24]
 2721 0840 BE004BE1 		strh	r0, [fp, #-14]	@ movhi
 2722 0844 B0114BE1 		strh	r1, [fp, #-16]	@ movhi
 2723 0848 0230A0E1 		mov	r3, r2
 2724 084c 11304BE5 		strb	r3, [fp, #-17]
 162:../lcd.c      **** 	while(*s) {
 2725              		.loc 1 162 0
 2726 0850 150000EA 		b	.L54
 2727              	.L56:
 163:../lcd.c      **** 		lcd_putchar(x, y, color, *s);
 2728              		.loc 1 163 0
 2729 0854 18301BE5 		ldr	r3, [fp, #-24]
 2730 0858 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2731 085c BE005BE1 		ldrh	r0, [fp, #-14]
 2732 0860 B0115BE1 		ldrh	r1, [fp, #-16]
 2733 0864 11205BE5 		ldrb	r2, [fp, #-17]	@ zero_extendqisi2
 2734 0868 FEFFFFEB 		bl	lcd_putchar
 164:../lcd.c      **** 
 165:../lcd.c      **** 		x += 8;
 2735              		.loc 1 165 0
 2736 086c BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2737 0870 083083E2 		add	r3, r3, #8
 2738 0874 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 166:../lcd.c      **** 		if(x + 8 >= LCD_WIDTH) {
 2739              		.loc 1 166 0
 2740 0878 BE305BE1 		ldrh	r3, [fp, #-14]
 2741 087c 082083E2 		add	r2, r3, #8
 2742 0880 40309FE5 		ldr	r3, .L57
 2743 0884 030052E1 		cmp	r2, r3
 2744 0888 040000DA 		ble	.L55
 167:../lcd.c      **** 			x = 0;
 2745              		.loc 1 167 0
 2746 088c 0030A0E3 		mov	r3, #0
 2747 0890 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 168:../lcd.c      **** 			y += 16;
 2748              		.loc 1 168 0
 2749 0894 B0315BE1 		ldrh	r3, [fp, #-16]	@ movhi
 2750 0898 103083E2 		add	r3, r3, #16
 2751 089c B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 2752              	.L55:
 169:../lcd.c      **** 		}
 170:../lcd.c      **** 		s++;
 2753              		.loc 1 170 0
 2754 08a0 18301BE5 		ldr	r3, [fp, #-24]
 2755 08a4 013083E2 		add	r3, r3, #1
 2756 08a8 18300BE5 		str	r3, [fp, #-24]
 2757              	.L54:
 162:../lcd.c      **** 	while(*s) {
 2758              		.loc 1 162 0 discriminator 1
 2759 08ac 18301BE5 		ldr	r3, [fp, #-24]
 2760 08b0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2761 08b4 000053E3 		cmp	r3, #0
 2762 08b8 E5FFFF1A 		bne	.L56
 171:../lcd.c      **** 	}
 172:../lcd.c      **** }
 2763              		.loc 1 172 0
 2764 08bc 0CD04BE2 		sub	sp, fp, #12
 2765 08c0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2766 08c4 1EFF2FE1 		bx	lr
 2767              	.L58:
 2768              		.align	2
 2769              	.L57:
 2770 08c8 3F010000 		.word	319
 2771              		.cfi_endproc
 2772              	.LFE12:
 2774              		.align	2
 2775              		.global	lcd_putWallpaper
 2777              	lcd_putWallpaper:
 2778              	.LFB13:
 173:../lcd.c      **** 
 174:../lcd.c      **** void lcd_putWallpaper( uint8 *bmp )
 175:../lcd.c      **** {
 2779              		.loc 1 175 0
 2780              		.cfi_startproc
 2781              		@ Function supports interworking.
 2782              		@ args = 0, pretend = 0, frame = 24
 2783              		@ frame_needed = 1, uses_anonymous_args = 0
 2784 08cc 0DC0A0E1 		mov	ip, sp
 2785              	.LCFI26:
 2786              		.cfi_def_cfa_register 12
 2787 08d0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2788 08d4 04B04CE2 		sub	fp, ip, #4
 2789              		.cfi_offset 14, -8
 2790              		.cfi_offset 13, -12
 2791              		.cfi_offset 11, -16
 2792              	.LCFI27:
 2793              		.cfi_def_cfa 11, 4
 2794 08d8 18D04DE2 		sub	sp, sp, #24
 2795 08dc 20000BE5 		str	r0, [fp, #-32]
 176:../lcd.c      ****     uint32 headerSize;
 177:../lcd.c      **** 
 178:../lcd.c      ****     uint16 x, ySrc, yDst;
 179:../lcd.c      ****     uint16 offsetSrc, offsetDst;
 180:../lcd.c      **** 
 181:../lcd.c      ****     headerSize = bmp[10] + (bmp[11] << 8) + (bmp[12] << 16) + (bmp[13] << 24);
 2796              		.loc 1 181 0
 2797 08e0 20301BE5 		ldr	r3, [fp, #-32]
 2798 08e4 0A3083E2 		add	r3, r3, #10
 2799 08e8 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2800 08ec 0320A0E1 		mov	r2, r3
 2801 08f0 20301BE5 		ldr	r3, [fp, #-32]
 2802 08f4 0B3083E2 		add	r3, r3, #11
 2803 08f8 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2804 08fc 0334A0E1 		mov	r3, r3, asl #8
 2805 0900 032082E0 		add	r2, r2, r3
 2806 0904 20301BE5 		ldr	r3, [fp, #-32]
 2807 0908 0C3083E2 		add	r3, r3, #12
 2808 090c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2809 0910 0338A0E1 		mov	r3, r3, asl #16
 2810 0914 032082E0 		add	r2, r2, r3
 2811 0918 20301BE5 		ldr	r3, [fp, #-32]
 2812 091c 0D3083E2 		add	r3, r3, #13
 2813 0920 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2814 0924 033CA0E1 		mov	r3, r3, asl #24
 2815 0928 033082E0 		add	r3, r2, r3
 2816 092c 18300BE5 		str	r3, [fp, #-24]
 182:../lcd.c      **** 
 183:../lcd.c      ****     bmp = bmp + headerSize;
 2817              		.loc 1 183 0
 2818 0930 20201BE5 		ldr	r2, [fp, #-32]
 2819 0934 18301BE5 		ldr	r3, [fp, #-24]
 2820 0938 033082E0 		add	r3, r2, r3
 2821 093c 20300BE5 		str	r3, [fp, #-32]
 184:../lcd.c      **** 
 185:../lcd.c      ****     for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )
 2822              		.loc 1 185 0
 2823 0940 0030A0E3 		mov	r3, #0
 2824 0944 B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 2825 0948 EF30A0E3 		mov	r3, #239
 2826 094c B2314BE1 		strh	r3, [fp, #-18]	@ movhi
 2827 0950 2D0000EA 		b	.L60
 2828              	.L63:
 186:../lcd.c      ****     {
 187:../lcd.c      ****         offsetDst = yDst*LCD_WIDTH/2;
 2829              		.loc 1 187 0
 2830 0954 B2215BE1 		ldrh	r2, [fp, #-18]
 2831 0958 0230A0E1 		mov	r3, r2
 2832 095c 0331A0E1 		mov	r3, r3, asl #2
 2833 0960 023083E0 		add	r3, r3, r2
 2834 0964 0333A0E1 		mov	r3, r3, asl #6
 2835 0968 A32FA0E1 		mov	r2, r3, lsr #31
 2836 096c 033082E0 		add	r3, r2, r3
 2837 0970 C330A0E1 		mov	r3, r3, asr #1
 2838 0974 BA314BE1 		strh	r3, [fp, #-26]	@ movhi
 188:../lcd.c      ****         offsetSrc = ySrc*LCD_WIDTH/2;
 2839              		.loc 1 188 0
 2840 0978 B0215BE1 		ldrh	r2, [fp, #-16]
 2841 097c 0230A0E1 		mov	r3, r2
 2842 0980 0331A0E1 		mov	r3, r3, asl #2
 2843 0984 023083E0 		add	r3, r3, r2
 2844 0988 0333A0E1 		mov	r3, r3, asl #6
 2845 098c A32FA0E1 		mov	r2, r3, lsr #31
 2846 0990 033082E0 		add	r3, r2, r3
 2847 0994 C330A0E1 		mov	r3, r3, asr #1
 2848 0998 BC314BE1 		strh	r3, [fp, #-28]	@ movhi
 189:../lcd.c      ****         for( x=0; x<LCD_WIDTH/2; x++ )
 2849              		.loc 1 189 0
 2850 099c 0030A0E3 		mov	r3, #0
 2851 09a0 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 2852 09a4 0F0000EA 		b	.L61
 2853              	.L62:
 190:../lcd.c      ****             lcd_buffer[offsetDst+x] = ~bmp[offsetSrc+x];
 2854              		.loc 1 190 0 discriminator 2
 2855 09a8 BA215BE1 		ldrh	r2, [fp, #-26]
 2856 09ac BE305BE1 		ldrh	r3, [fp, #-14]
 2857 09b0 033082E0 		add	r3, r2, r3
 2858 09b4 BC115BE1 		ldrh	r1, [fp, #-28]
 2859 09b8 BE205BE1 		ldrh	r2, [fp, #-14]
 2860 09bc 022081E0 		add	r2, r1, r2
 2861 09c0 20101BE5 		ldr	r1, [fp, #-32]
 2862 09c4 022081E0 		add	r2, r1, r2
 2863 09c8 0020D2E5 		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 2864 09cc 0220E0E1 		mvn	r2, r2
 2865 09d0 FF1002E2 		and	r1, r2, #255
 2866 09d4 48209FE5 		ldr	r2, .L64
 2867 09d8 0310C2E7 		strb	r1, [r2, r3]
 189:../lcd.c      ****         for( x=0; x<LCD_WIDTH/2; x++ )
 2868              		.loc 1 189 0 discriminator 2
 2869 09dc BE305BE1 		ldrh	r3, [fp, #-14]	@ movhi
 2870 09e0 013083E2 		add	r3, r3, #1
 2871 09e4 BE304BE1 		strh	r3, [fp, #-14]	@ movhi
 2872              	.L61:
 189:../lcd.c      ****         for( x=0; x<LCD_WIDTH/2; x++ )
 2873              		.loc 1 189 0 is_stmt 0 discriminator 1
 2874 09e8 BE305BE1 		ldrh	r3, [fp, #-14]
 2875 09ec 9F0053E3 		cmp	r3, #159
 2876 09f0 ECFFFF9A 		bls	.L62
 185:../lcd.c      ****     for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )
 2877              		.loc 1 185 0 is_stmt 1
 2878 09f4 B0315BE1 		ldrh	r3, [fp, #-16]	@ movhi
 2879 09f8 013083E2 		add	r3, r3, #1
 2880 09fc B0314BE1 		strh	r3, [fp, #-16]	@ movhi
 2881 0a00 B2315BE1 		ldrh	r3, [fp, #-18]	@ movhi
 2882 0a04 013043E2 		sub	r3, r3, #1
 2883 0a08 B2314BE1 		strh	r3, [fp, #-18]	@ movhi
 2884              	.L60:
 185:../lcd.c      ****     for( ySrc=0, yDst=LCD_HEIGHT-1; ySrc<LCD_HEIGHT; ySrc++, yDst-- )
 2885              		.loc 1 185 0 is_stmt 0 discriminator 1
 2886 0a0c B0315BE1 		ldrh	r3, [fp, #-16]
 2887 0a10 EF0053E3 		cmp	r3, #239
 2888 0a14 CEFFFF9A 		bls	.L63
 191:../lcd.c      ****     }
 192:../lcd.c      **** }
 2889              		.loc 1 192 0 is_stmt 1
 2890 0a18 0CD04BE2 		sub	sp, fp, #12
 2891 0a1c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2892 0a20 1EFF2FE1 		bx	lr
 2893              	.L65:
 2894              		.align	2
 2895              	.L64:
 2896 0a24 00000000 		.word	lcd_buffer
 2897              		.cfi_endproc
 2898              	.LFE13:
 2900              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 lcd.c
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:1790   .bss:00000000 $d
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:1791   .bss:00000000 lcd_buffer
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:1793   .bss:00009600 state
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:1796   .text:00000000 $a
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:1799   .text:00000000 lcd_init
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:1980   .text:000001c0 lcd_off
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:1904   .text:00000110 $d
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:1936   .text:00000184 $a
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:1939   .text:00000184 lcd_on
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:1973   .text:000001bc $d
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:1977   .text:000001c0 $a
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:2014   .text:000001f8 $d
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:2018   .text:000001fc $a
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:2021   .text:000001fc lcd_status
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:2049   .text:00000220 $d
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:2053   .text:00000224 $a
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:2056   .text:00000224 lcd_clear
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:2102   .text:00000278 $d
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:2107   .text:00000280 $a
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:2110   .text:00000280 lcd_clear_color
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:2168   .text:00000300 $d
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:2173   .text:00000308 $a
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:2176   .text:00000308 lcd_putpixel
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:2263   .text:000003f0 $d
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:2267   .text:000003f4 $a
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:2270   .text:000003f4 lcd_getpixel
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:2340   .text:000004a0 $d
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:2344   .text:000004a4 $a
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:2347   .text:000004a4 lcd_draw_hline
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:2423   .text:00000554 lcd_draw_vline
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:2499   .text:00000604 lcd_draw_box
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:2577   .text:000006d8 lcd_putchar
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:2695   .text:00000828 $d
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:2699   .text:0000082c $a
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:2702   .text:0000082c lcd_puts
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:2770   .text:000008c8 $d
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:2774   .text:000008cc $a
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:2777   .text:000008cc lcd_putWallpaper
C:\Users\Pedro\AppData\Local\Temp\cc9USN3e.s:2896   .text:00000a24 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
font
